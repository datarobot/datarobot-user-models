pipeline:
  projectIdentifier: datarobotusermodels
  orgIdentifier: Custom_Models
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.svc_harness_git1
        repoName: datarobot-user-models
        build: <+input>
  stages:
    - stage:
        name: Check if framework env has changed
        identifier: check_env_changed
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  type: Run
                  name: Report status to github PR
                  identifier: report_status_to_github_pr_0
                  spec:
                    connectorRef: account.dockerhub_datarobot_read
                    image: curlimages/curl:latest
                    shell: Sh
                    command: |
                      pipeline_execution_github_status_key="<+pipeline.name> - <+pipeline.variables.framework> (<+pipeline.variables.env_folder>)"

                      echo "Update PR status"
                      curl -i -X POST \
                      -H "Authorization: Bearer <+secrets.getValue("account.Github_Access_Token")>" \
                      -H "Accept: application/vnd.github.v3+json" \
                      https://api.github.com/repos/<+account.name>/datarobot-user-models/statuses/<+trigger.commitSha> \
                      -d "{\"state\":\"pending\",\"target_url\":\"<+pipeline.execution.url>\",\"description\":\"Test is running\",\"context\":\"$pipeline_execution_github_status_key\"}"
                    outputVariables:
                      - name: pipeline_execution_github_status_key
              - step:
                  type: Run
                  name: check_diff
                  identifier: check_diff
                  spec:
                    connectorRef: account.dockerhub_datarobot_read
                    shell: Sh
                    command: |-
                      export CODEBASE_BRANCH=<+codebase.branch>
                      export ENV_FOLDER=<+pipeline.variables.env_folder>
                      export FRAMEWORK=<+pipeline.variables.framework>
                      export TRIGGER_PR_NUMBER=<+trigger.prNumber>

                      matrix_values=$(python3 ./harness_scripts/functional_by_framework_multistep/generate_testlist.py ./tests/functional/test_per_framework.json ./)
                      echo ${matrix_values}
                    outputVariables:
                      - name: matrix_values
          caching:
            enabled: false
            paths: []
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
    - stage:
        name: Test functional by framework
        identifier: check_by_framework
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  type: Run
                  name: Run functional test in provided framework
                  identifier: Run_1
                  strategy:
                    matrix:
                      env: <+json.list("environments", <+pipeline.stages.check_env_changed.spec.execution.steps.check_diff.output.outputVariables.matrix_values>)>
                  spec:
                    connectorRef: datarobot_user_models_read_write
                    image: datarobotdev/<+matrix.env.repo>:<+matrix.env.tag>
                    shell: Sh
                    command: |-
                      echo "Checking if test for local should run"
                      echo "Tag: <+matrix.image_tag>"
                      echo "Dockerfile.local exists: <+pipeline.stages.check_env_changed.spec.execution.steps.check_diff.output.outputVariables.dockerfile_local_exists>"

                      if [[ "<+matrix.image_tag>" == *local* && <+pipeline.stages.check_env_changed.spec.execution.steps.check_diff.output.outputVariables.dockerfile_local_exists> == false ]]; then
                        echo "Dockerfile.local does not exist, skippinig test"
                        exit 0
                      fi
                      ./harness_scripts/functional_by_framework/check_by_framework_run1_step_entrypoint.sh \
                        <+matrix.env.framework> <+matrix.env.env_folder>
                    resources:
                      limits:
                        memory: 3G
                  when:
                    stageStatus: Success
              - step:
                  type: Run
                  name: Report status to github PR
                  identifier: report_status_to_github_pr_1
                  spec:
                    connectorRef: account.dockerhub_datarobot_read
                    image: curlimages/curl:latest
                    shell: Sh
                    command: |
                      status_0="<+execution.steps.Run_1_0.status>"
                      status_1="<+execution.steps.Run_1_1.status>"
                      if [[ "$status_1" == "null" ]]; then
                        status_1="SUCCEEDED"
                      fi
                      github_status_key="<+pipeline.stages.check_env_changed.spec.execution.steps.report_status_to_github_pr_0.output.outputVariables.pipeline_execution_github_status_key>"

                      echo "Update PR status"
                      echo "Status_0: $status_0; Status_1: $status_1"
                      if [[ "$status_0" == "SUCCEEDED" && "$status_1" == "SUCCEEDED" ]]; then
                        state="success"
                        description="Passed"
                      elif [[ "$status_0" == "PENDING" ||  "$status_1" == "PENDING" ]]; then
                        state="pending"
                        description="Pending"
                      else
                        state="failure"
                        description="Failed"
                      fi

                      curl -i -u <+account.name>:<+secrets.getValue("account.Github_Access_Token")> \
                      -X POST \
                      -H "Accept: application/vnd.github.v3+json" \
                      https://api.github.com/repos/<+account.name>/datarobot-user-models/statuses/<+trigger.commitSha> \
                      -d "{\"state\":\"$state\",\"target_url\":\"<+pipeline.execution.url>\",\"description\":\"$description\",\"context\":\"$github_status_key\"}"
                  when:
                    stageStatus: All
          caching:
            enabled: false
            paths: []
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
        when:
          pipelineStatus: Success
  variables:
    - name: framework
      type: String
      description: ""
      required: false
      value: <+input>
    - name: env_folder
      type: String
      value: <+input>.default(public_dropin_environments)
      description: The root path of all the environments
    - name: use_local_dockerfile
      type: String
      value: <+input>.default("false")
      description: Use Dockerfile.local to test the image for local development
  identifier: Test_functional_by_framework_multisteps
  description: |-
    Runs functional tests for each framework in a corresponding image.
    If only DRUM changed in the PR, latest image is taken for every framework, DRUM installed and tests run.
    If environment itself has changed, temporary image is built.
  name: Test functional by framework - multisteps
