pipeline:
  projectIdentifier: datarobotusermodels
  orgIdentifier: Custom_Models
  tags: {}
  stages:
    - stage:
        name: Reconcile envVersionIds requirements
        identifier: Reconcile_envVersionIds_requirements
        template:
          templateRef: org.Execution_Environments_Reconcile_Stage
          versionLabel: v1
          templateInputs:
            type: CI
            variables:
              - name: target_repo
                type: String
                value: <+pipeline.variables.target_repo>
              - name: target_repo_branch
                type: String
                value: <+pipeline.variables.target_branch>
              - name: envs_parent_folders
                type: String
                value: <+pipeline.variables.envs_parent_folders_to_include>
              - name: force_requirements_upgrade
                type: String
                value: <+pipeline.variables.force_requirements_upgrade>
    - stage:
        name: Build changed images for changed environments
        identifier: Build_changed_images
        description: ""
        type: Pipeline
        spec:
          org: Custom_Models
          pipeline: WIP_build_images
          project: datarobotusermodels
          inputs:
            identifier: WIP_build_images
            variables:
              - name: target_repo
                type: String
                value: <+pipeline.variables.target_repo>
              - name: target_branch
                type: String
                value: <+pipeline.variables.target_branch>
              - name: envs_folders
                type: String
                value: <+pipeline.stages.Reconcile_envVersionIds_requirements.spec.execution.steps.find_changed.output.outputVariables.CHANGED_DIRS>
        tags: {}
    - stage:
        name: Build list of envs to test
        identifier: build_list_of_envs_to_test
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          execution:
            steps:
              - step:
                  type: GitClone
                  name: Clone repo
                  identifier: Clone_repo
                  spec:
                    connectorRef: account.svc_harness_git1
                    repoName: <+pipeline.variables.target_repo>
                    cloneDirectory: /harness/<+pipeline.variables.target_repo>
                    build:
                      type: branch
                      spec:
                        branch: <+pipeline.variables.target_branch>
                  description: Explicitly clone repo to pull a commit created during reconciliation
              - step:
                  type: Run
                  name: build_list_of_environments_to_test_on
                  identifier: build_list_of_environments_to_test_on
                  spec:
                    connectorRef: account.dockerhub_datarobot_read
                    shell: Sh
                    command: |-
                      cd /harness/<+pipeline.variables.target_repo>
                      echo "Show last 2 git commits: "
                      git log -2
                      matrix_values=$(python3 ./harness_scripts/functional_by_framework_multistep/generate_testlist.py ./tests/functional/test_per_framework.json ./)
                      echo ${matrix_values}
                    outputVariables:
                      - name: matrix_values
          caching:
            enabled: true
            paths: []
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          buildIntelligence:
            enabled: true
        when:
          pipelineStatus: Success
    - stage:
        name: Test functional by framework
        identifier: check_by_framework
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  type: GitClone
                  name: Clone repo
                  identifier: Clone_repo
                  spec:
                    connectorRef: account.svc_harness_git1
                    repoName: <+pipeline.variables.target_repo>
                    cloneDirectory: /harness/<+pipeline.variables.target_repo>
                    build:
                      type: branch
                      spec:
                        branch: <+pipeline.variables.target_branch>
                  description: Explicitly clone repo to pull a commit created during reconciliation
              - step:
                  type: Run
                  name: Run functional test in provided framework
                  identifier: Run_1
                  spec:
                    connectorRef: datarobot_user_models_read_write
                    image: datarobotdev/<+matrix.env.repo>:<+matrix.env.tag>
                    shell: Sh
                    command: |-
                      cd /harness/<+pipeline.variables.target_repo>
                      echo "Show last 2 git commits: "
                      git log -2
                      ./harness_scripts/functional_by_framework/check_by_framework_run1_step_entrypoint.sh \
                        <+matrix.env.framework> <+matrix.env.env_folder>
                    resources:
                      limits:
                        memory: 3G
                  when:
                    stageStatus: Success
          caching:
            enabled: true
            paths: []
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          buildIntelligence:
            enabled: true
        when:
          pipelineStatus: Success
        strategy:
          matrix:
            env: <+json.list("environments", <+pipeline.stages.build_list_of_envs_to_test.spec.execution.steps.build_list_of_environments_to_test_on.output.outputVariables.matrix_values>)>
            nodeName: <+matrix.env.env_folder>/<+matrix.env.framework> - <+matrix.env.tag>
  identifier: Test_functional_by_framework_multisteps
  description: |-
    Runs functional tests for each framework in a corresponding image.
    If only DRUM changed in the PR, latest image is taken for every framework, DRUM installed and tests run.
    If environment itself has changed, temporary image is built.
  name: Test functional by framework - multisteps
  variables:
    - name: target_repo
      type: String
      description: ""
      required: true
      value: <+input>
    - name: target_branch
      type: String
      description: ""
      required: false
      value: <+input>
    - name: envs_parent_folders_to_include
      type: String
      description: |-
        Comma separated list of envs parent folders to update; all if empty.
        E.g. if changes are in: parent1/env1, parent2/env2; and parent2 is provided, only parent2/env2 is included
      required: false
      value: <+input>
    - name: force_requirements_upgrade
      type: String
      description: Whether to force all requirements update to the latest versions
      required: false
      value: <+input>.default(false).allowedValues(true,false)
  properties:
    ci:
      codebase:
        connectorRef: account.svc_harness_git1
        repoName: datarobot-user-models
        build: <+input>
        sparseCheckout: []
