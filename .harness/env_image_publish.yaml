pipeline:
  name: env_image_build_and_publish
  identifier: env_image_publish
  projectIdentifier: datarobotusermodels
  orgIdentifier: Custom_Models
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.svc_harness_git1
        repoName: datarobot-user-models
        build: <+input>
  stages:
    - stage:
        name: env_image_build_and_publish
        identifier: env_image_publish
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  type: BuildAndPushDockerRegistry
                  name: BuildAndPushDockerRegistry_1
                  identifier: BuildAndPushDockerRegistry_1
                  when:
                    stageStatus: Success
                    pipelineStatus: Success
                    condition: <+pipeline.variables.use_local_dockerfile> != "true"
                  spec:
                    connectorRef: datarobot_user_models_read_write
                    repo: datarobotdev/datarobot-user-models
                    tags:
                      - <+pipeline.variables.image_tag>
                    dockerfile: <+pipeline.variables.env_folder>/<+pipeline.variables.env_name>/Dockerfile
                    context: <+pipeline.variables.env_folder>/<+pipeline.variables.env_name>
                    resources:
                      limits:
                        memory: 3G
              - step:
                  type: BuildAndPushDockerRegistry
                  name: LocalBuildAndPushDockerRegistry_1
                  identifier: LocalBuildAndPushDockerRegistry_1
                  when:
                    stageStatus: Success
                    pipelineStatus: Success
                    condition: <+pipeline.variables.use_local_dockerfile> == "true"
                  spec:
                    connectorRef: datarobot_user_models_read_write
                    repo: datarobotdev/datarobot-user-models
                    tags:
                      - <+pipeline.variables.image_tag>
                    dockerfile: <+pipeline.variables.env_folder>/<+pipeline.variables.env_name>/Dockerfile.local
                    context: <+pipeline.variables.env_folder>/<+pipeline.variables.env_name>
                    resources:
                      limits:
                        memory: 3G
          caching:
            enabled: false
            paths: []
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
  variables:
    - name: env_folder
      type: String
      description: ""
      required: true
      value: <+input>.allowedValues(public_dropin_environments, public_dropin_gpu_environments, public_dropin_nim_environments)
    - name: env_name
      type: String
      description: ""
      required: true
      value: <+input>.allowedValues(python3_sklearn,python3_xgboost,python3_onnx,python3_pytorch,python3_keras,python3_pmml,python311_genai,python39_genai,java_codegen,r_lang,python311,vllm,triton_server,nim_llama_8b,nim_sidecar)
    - name: image_tag
      type: String
      description: ""
      required: true
      value: <+input>.default(<+pipeline.variables.env_folder>_<+pipeline.variables.env_name>_latest)
    - name: use_local_dockerfile
      type: String
      required: false
      value: <+input>.default("false")
  description: |-
    Builds an environment image and pushes it to the DockerHub registry. These images are used to run functional tests for every PR.  

    It is used to:  
    * Build a temporary image for testing when a PR includes environment changes.  
    * Build and update the latest environment image after a PR is merged.
