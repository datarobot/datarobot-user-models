/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2020-05-13T11:41:46.389-04:00
  3.30.0.2
  
  Standalone prediction code with sample test data for GBMModel named GBM_model_python_1589382591366_1

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/GBM_model_python_1589382591366_1 > GBM_model_python_1589382591366_1.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m GBM_model_python_1589382591366_1.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="GBM_model_python_1589382591366_1", algorithm="gbm")
public class GBM_model_python_1589382591366_1 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 28; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_GBM_model_python_1589382591366_1.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* loan_amnt */ null,
    /* funded_amnt */ null,
    /* term */ GBM_model_python_1589382591366_1_ColInfo_2.VALUES,
    /* int_rate */ null,
    /* installment */ null,
    /* grade */ GBM_model_python_1589382591366_1_ColInfo_5.VALUES,
    /* sub_grade */ GBM_model_python_1589382591366_1_ColInfo_6.VALUES,
    /* emp_title */ GBM_model_python_1589382591366_1_ColInfo_7.VALUES,
    /* emp_length */ GBM_model_python_1589382591366_1_ColInfo_8.VALUES,
    /* home_ownership */ GBM_model_python_1589382591366_1_ColInfo_9.VALUES,
    /* annual_inc */ null,
    /* verification_status */ GBM_model_python_1589382591366_1_ColInfo_11.VALUES,
    /* pymnt_plan */ GBM_model_python_1589382591366_1_ColInfo_12.VALUES,
    /* purpose */ GBM_model_python_1589382591366_1_ColInfo_13.VALUES,
    /* title */ GBM_model_python_1589382591366_1_ColInfo_14.VALUES,
    /* zip_code */ GBM_model_python_1589382591366_1_ColInfo_15.VALUES,
    /* addr_state */ GBM_model_python_1589382591366_1_ColInfo_16.VALUES,
    /* dti */ null,
    /* delinq_2yrs */ null,
    /* earliest_cr_line */ null,
    /* inq_last_6mths */ null,
    /* mths_since_last_delinq */ null,
    /* mths_since_last_record */ null,
    /* open_acc */ null,
    /* pub_rec */ null,
    /* revol_bal */ null,
    /* revol_util */ null,
    /* total_acc */ null,
    /* is_bad */ GBM_model_python_1589382591366_1_ColInfo_28.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.8705,0.1295};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.8705,0.1295};

  public GBM_model_python_1589382591366_1() { super(NAMES,DOMAINS,"is_bad"); }
  public String getUUID() { return Long.toString(-700556695922081424L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    GBM_model_python_1589382591366_1_Forest_0.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_1.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_2.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_3.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_4.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_5.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_6.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_7.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_8.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_9.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_10.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_11.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_12.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_13.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_14.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_15.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_16.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_17.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_18.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_19.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_20.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_21.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_22.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_23.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_24.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_25.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_26.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_27.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_28.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_29.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_30.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_31.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_32.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_33.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_34.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_35.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_36.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_37.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_38.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_39.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_40.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_41.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_42.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_43.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_44.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_45.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_46.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_47.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_48.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_49.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_50.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_51.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_52.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_53.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_54.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_55.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_56.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_57.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_58.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_59.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_60.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_61.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_62.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_63.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_64.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_65.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_66.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_67.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_68.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_69.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_70.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_71.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_72.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_73.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_74.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_75.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_76.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_77.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_78.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_79.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_80.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_81.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_82.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_83.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_84.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_85.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_86.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_87.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_88.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_89.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_90.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_91.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_92.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_93.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_94.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_95.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_96.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_97.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_98.score0(data,preds);
    GBM_model_python_1589382591366_1_Forest_99.score0(data,preds);
    preds[2] = preds[1] + -1.9053868780686514;
    preds[2] = 1./(1. + Math.min(1e19, Math.exp(-(preds[2]))));
    preds[1] = 1.0-preds[2];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.31339316808423956);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_GBM_model_python_1589382591366_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[28];
  static {
    NamesHolder_GBM_model_python_1589382591366_1_0.fill(VALUES);
  }
  static final class NamesHolder_GBM_model_python_1589382591366_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "loan_amnt";
      sa[1] = "funded_amnt";
      sa[2] = "term";
      sa[3] = "int_rate";
      sa[4] = "installment";
      sa[5] = "grade";
      sa[6] = "sub_grade";
      sa[7] = "emp_title";
      sa[8] = "emp_length";
      sa[9] = "home_ownership";
      sa[10] = "annual_inc";
      sa[11] = "verification_status";
      sa[12] = "pymnt_plan";
      sa[13] = "purpose";
      sa[14] = "title";
      sa[15] = "zip_code";
      sa[16] = "addr_state";
      sa[17] = "dti";
      sa[18] = "delinq_2yrs";
      sa[19] = "earliest_cr_line";
      sa[20] = "inq_last_6mths";
      sa[21] = "mths_since_last_delinq";
      sa[22] = "mths_since_last_record";
      sa[23] = "open_acc";
      sa[24] = "pub_rec";
      sa[25] = "revol_bal";
      sa[26] = "revol_util";
      sa[27] = "total_acc";
    }
  }
}
// The class representing column term
class GBM_model_python_1589382591366_1_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    GBM_model_python_1589382591366_1_ColInfo_2_0.fill(VALUES);
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "36 months";
      sa[1] = "60 months";
    }
  }
}
// The class representing column grade
class GBM_model_python_1589382591366_1_ColInfo_5 implements java.io.Serializable {
  public static final String[] VALUES = new String[7];
  static {
    GBM_model_python_1589382591366_1_ColInfo_5_0.fill(VALUES);
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_5_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "A";
      sa[1] = "B";
      sa[2] = "C";
      sa[3] = "D";
      sa[4] = "E";
      sa[5] = "F";
      sa[6] = "G";
    }
  }
}
// The class representing column sub_grade
class GBM_model_python_1589382591366_1_ColInfo_6 implements java.io.Serializable {
  public static final String[] VALUES = new String[35];
  static {
    GBM_model_python_1589382591366_1_ColInfo_6_0.fill(VALUES);
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_6_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "A1";
      sa[1] = "A2";
      sa[2] = "A3";
      sa[3] = "A4";
      sa[4] = "A5";
      sa[5] = "B1";
      sa[6] = "B2";
      sa[7] = "B3";
      sa[8] = "B4";
      sa[9] = "B5";
      sa[10] = "C1";
      sa[11] = "C2";
      sa[12] = "C3";
      sa[13] = "C4";
      sa[14] = "C5";
      sa[15] = "D1";
      sa[16] = "D2";
      sa[17] = "D3";
      sa[18] = "D4";
      sa[19] = "D5";
      sa[20] = "E1";
      sa[21] = "E2";
      sa[22] = "E3";
      sa[23] = "E4";
      sa[24] = "E5";
      sa[25] = "F1";
      sa[26] = "F2";
      sa[27] = "F3";
      sa[28] = "F4";
      sa[29] = "F5";
      sa[30] = "G1";
      sa[31] = "G2";
      sa[32] = "G3";
      sa[33] = "G4";
      sa[34] = "G5";
    }
  }
}
// The class representing column emp_title
class GBM_model_python_1589382591366_1_ColInfo_7 implements java.io.Serializable {
  public static final String[] VALUES = new String[8215];
  static {
    GBM_model_python_1589382591366_1_ColInfo_7_0.fill(VALUES);
    GBM_model_python_1589382591366_1_ColInfo_7_1.fill(VALUES);
    GBM_model_python_1589382591366_1_ColInfo_7_2.fill(VALUES);
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_7_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = " Down To Earth Distributors, Inc.";
      sa[1] = "(Collaborative) Abbott Nutrition Intl ";
      sa[2] = "(self) Castleforte Group";
      sa[3] = "1)-Yavapai Regional Medical Center 2)- Dr. cantors office";
      sa[4] = "128 Air Refueling Wing (USAF)";
      sa[5] = "162 fighter wing";
      sa[6] = "19th Circuit State Attorney's Office";
      sa[7] = "1Life Healthcare";
      sa[8] = "1ST FRANKLIN FINANCIAL CORP ";
      sa[9] = "1st Financial Bank";
      sa[10] = "1st Mariner Bank";
      sa[11] = "2020 Engineering";
      sa[12] = "20th Century Fox";
      sa[13] = "20th Century Fox FCU ";
      sa[14] = "21st Amendment Brewery";
      sa[15] = "21st century oncology";
      sa[16] = "22squared, inc";
      sa[17] = "24 Hour Fitness";
      sa[18] = "24 Seven Discovere";
      sa[19] = "24 hour fitness";
      sa[20] = "24 hr fitness";
      sa[21] = "251 condominium";
      sa[22] = "2D LAR BN, USMC";
      sa[23] = "2Dialog";
      sa[24] = "3 Phoenix Inc.";
      sa[25] = "30 Cooper Square Partnership";
      sa[26] = "301 Plaza Inc";
      sa[27] = "3M";
      sa[28] = "3M Company";
      sa[29] = "3m";
      sa[30] = "4G Wireless - Verizon";
      sa[31] = "5 Keys  Charter School";
      sa[32] = "50 plus pharmacy";
      sa[33] = "54th Street Grill  and  Bar";
      sa[34] = "61 east 72nd street corp";
      sa[35] = "6th Avenue Outfitters";
      sa[36] = "72andSunny";
      sa[37] = "80 hanover management  llc";
      sa[38] = "84 LUMBER";
      sa[39] = "9 West Accessories";
      sa[40] = "902d Military Intelligence Group";
      sa[41] = "99 Restaurant";
      sa[42] = ":coderow";
      sa[43] = "A Auto Body Inc";
      sa[44] = "A H Spann & Assoc-Eastland Columbus, Inc";
      sa[45] = "A Plus Inc";
      sa[46] = "A&E Group, LLC";
      sa[47] = "A&N International";
      sa[48] = "A-1 Budget Plumbing";
      sa[49] = "A-1 Casino Rd Mini Storage";
      sa[50] = "A-C Transit";
      sa[51] = "A-L Service";
      sa[52] = "A-tec Ambulance";
      sa[53] = "A. Schulman, Inc.";
      sa[54] = "A.L.D.";
      sa[55] = "A123 Systems, Inc.";
      sa[56] = "AAA";
      sa[57] = "AAA Colorado";
      sa[58] = "AAA Cooper Transportation";
      sa[59] = "AAA East Central";
      sa[60] = "AAA Insurance ";
      sa[61] = "AAA Medical & Oxygen Supply";
      sa[62] = "AAA/Energy Insurance Agency";
      sa[63] = "AAFES";
      sa[64] = "AAVMC";
      sa[65] = "AB Physical Therapy";
      sa[66] = "AB Tech Community College";
      sa[67] = "ABC UNIFIED DISTRICT";
      sa[68] = "ABC/Disney, Inc.";
      sa[69] = "ABCLEAN Inc.";
      sa[70] = "ABCO";
      sa[71] = "ABM";
      sa[72] = "ABM Industries";
      sa[73] = "ABM Janitorial Services";
      sa[74] = "ABM Security";
      sa[75] = "ABSG-Lash Group";
      sa[76] = "AC Square, Inc.";
      sa[77] = "ACCION International";
      sa[78] = "ACE USA";
      sa[79] = "ACI Global";
      sa[80] = "ACM";
      sa[81] = "ACS";
      sa[82] = "ACS HR Solutions";
      sa[83] = "ACSC";
      sa[84] = "ACT";
      sa[85] = "ACTION OF ENTERPRISE";
      sa[86] = "ACTS RETIREMENT-LIFE COMMUNITIES";
      sa[87] = "ACUMEN FISCAL AGENT/MS ROBINSON";
      sa[88] = "ADAMS TRACTOR";
      sa[89] = "ADECCO";
      sa[90] = "ADESA Auto Auctions";
      sa[91] = "ADM TRUCKING";
      sa[92] = "ADN of delray Beach";
      sa[93] = "ADP";
      sa[94] = "ADP Dealer Services";
      sa[95] = "ADR International, Inc";
      sa[96] = "ADTI MEDIA";
      sa[97] = "ADVANCE/NEWHOUSE COMMUNICATIONS";
      sa[98] = "AEG LIVE";
      sa[99] = "AEROPOSTALE INC.";
      sa[100] = "AFEX";
      sa[101] = "AFS Technologies";
      sa[102] = "AFTCT";
      sa[103] = "AG industries";
      sa[104] = "AGC";
      sa[105] = "AHDI";
      sa[106] = "AHERN RENTALS";
      sa[107] = "AHRC";
      sa[108] = "AHRC of New York";
      sa[109] = "AI Engineers, Inc";
      sa[110] = "AIG";
      sa[111] = "AIRGAS";
      sa[112] = "AIReS";
      sa[113] = "AIU Holdings";
      sa[114] = "AJ Jersey Inc";
      sa[115] = "AKAL Srcurity/ U.S. Marshal";
      sa[116] = "AKRF";
      sa[117] = "ALL Entertainment Management";
      sa[118] = "ALLDATA";
      sa[119] = "ALLSTATE INSURANCE COMPANY";
      sa[120] = "AM Realty";
      sa[121] = "AM Skier Agency";
      sa[122] = "AMC Corp";
      sa[123] = "AMC Entertainment";
      sa[124] = "AMDETECH";
      sa[125] = "AMERICAN LIFTING PRODUCTS";
      sa[126] = "AMERICAN MEDICAL ASSOCATION";
      sa[127] = "AMERICAN SHEET METAL";
      sa[128] = "AMG Imaging Supplies";
      sa[129] = "AMO";
      sa[130] = "AMR Communications Inc";
      sa[131] = "AMSEC";
      sa[132] = "AMSEC LLC";
      sa[133] = "AMZ Marketing";
      sa[134] = "ANH Refractories";
      sa[135] = "AOL LLC";
      sa[136] = "AON Corporation";
      sa[137] = "APC, Inc";
      sa[138] = "APM Terminals, NA";
      sa[139] = "APS, LLC";
      sa[140] = "AR Administrative Office of the Courts";
      sa[141] = "ARAMARK";
      sa[142] = "ARB Inc";
      sa[143] = "ARC International";
      sa[144] = "ARCHS";
      sa[145] = "ARCOM";
      sa[146] = "AREVA";
      sa[147] = "AREVA Solar";
      sa[148] = "ARIZONA WHOLESALE SUPPLY CO";
      sa[149] = "ARM INC";
      sa[150] = "ARPC";
      sa[151] = "ARPE Engineering, Inc";
      sa[152] = "ARUP Laboratories";
      sa[153] = "ASA";
      sa[154] = "ASC Profiles";
      sa[155] = "ASCC Inc.";
      sa[156] = "ASE";
      sa[157] = "ASHLIN Management Group";
      sa[158] = "ASPCA";
      sa[159] = "ASU";
      sa[160] = "ASU University";
      sa[161] = "ASUCLA";
      sa[162] = "ASYNCHRONY SOLUTIONS";
      sa[163] = "AT&T";
      sa[164] = "AT&T Advertising Solutions";
      sa[165] = "AT&T Government Solutions";
      sa[166] = "AT&T Inc.";
      sa[167] = "AT&T Services Inc.";
      sa[168] = "ATC associates, inc";
      sa[169] = "ATHENS FIRST BANK AND TRUST";
      sa[170] = "ATK";
      sa[171] = "ATL CAROLINAS";
      sa[172] = "ATLANTA TOYOTA";
      sa[173] = "ATPCO";
      sa[174] = "ATRI";
      sa[175] = "ATS";
      sa[176] = "ATT";
      sa[177] = "AUGUSTA PINES C.C";
      sa[178] = "AUTORE OIL COMPANY, INC";
      sa[179] = "AVC Mechanical Sales";
      sa[180] = "AVIATION SPECTRUM RESOURCES INC";
      sa[181] = "AVX Corporation";
      sa[182] = "AWI";
      sa[183] = "AZ Corp.";
      sa[184] = "Aap st Mary corp";
      sa[185] = "Aaron's";
      sa[186] = "Aaron's Catering";
      sa[187] = "Aaron's Sales and Lease";
      sa[188] = "Aarons Sales and Lease";
      sa[189] = "Abacus Technology";
      sa[190] = "Abbott House";
      sa[191] = "Abbott Laboritories";
      sa[192] = "Abbott Labs";
      sa[193] = "Abboud's McDonald's";
      sa[194] = "Abelson Taylor";
      sa[195] = "Abercrombie & Fitch";
      sa[196] = "Abercrombie and Fitch";
      sa[197] = "Above the Title Ent.";
      sa[198] = "Abra Auto & Glass";
      sa[199] = "Abrams, Gorelick, Friedman & Jacobson";
      sa[200] = "Abt Associates Inc.";
      sa[201] = "Abt Electronics";
      sa[202] = "Abundant Life Outreach Center";
      sa[203] = "Abunmdant Life Christian Center";
      sa[204] = "Academy of Medical Technology";
      sa[205] = "Academy of the Sacred Heart";
      sa[206] = "Accellion";
      sa[207] = "Accenture";
      sa[208] = "Accertify";
      sa[209] = "Access Nurses, Inc.";
      sa[210] = "Accounting/Financial Advisory Firm";
      sa[211] = "AccuStandard Inc.";
      sa[212] = "Accurate Controls";
      sa[213] = "Accurate Placement";
      sa[214] = "Accurate Steel Erectors Inc.";
      sa[215] = "Ace Hardware Corporation";
      sa[216] = "Ace Info Solutions";
      sa[217] = "Ace Usa";
      sa[218] = "Acento Advertising";
      sa[219] = "Ackerman & Co.";
      sa[220] = "ActioNet, Inc.";
      sa[221] = "Action Carting";
      sa[222] = "Action Management";
      sa[223] = "Action Trucking ";
      sa[224] = "Activant Solution";
      sa[225] = "Activated Ministries";
      sa[226] = "Active Foam Products Inc.";
      sa[227] = "Active National Guard";
      sa[228] = "Active The Limited Inc.";
      sa[229] = "Activu corporation";
      sa[230] = "Acuity Insurance";
      sa[231] = "Acxiom Corporation";
      sa[232] = "Adams & Wilson Development";
      sa[233] = "Adams and Associates";
      sa[234] = "Adecco";
      sa[235] = "Adecco Engineering & Technical";
      sa[236] = "Adelyte Company";
      sa[237] = "Adidas";
      sa[238] = "Administaff";
      sa[239] = "Adobe";
      sa[240] = "Adobe Systems";
      sa[241] = "Adolfo Barrera DDS";
      sa[242] = "Adoption Center of Change";
      sa[243] = "Advanced America";
      sa[244] = "Advanced Entertainment Technology";
      sa[245] = "Advanced Micro Devices Inc.";
      sa[246] = "Advanced Productions";
      sa[247] = "Advanced Radiology";
      sa[248] = "Advanced Safety";
      sa[249] = "Advanced Technology Services";
      sa[250] = "Advanced Therapy Services";
      sa[251] = "Advantage Chevrolet";
      sa[252] = "Advantage SCI";
      sa[253] = "Advent Financial";
      sa[254] = "Advent International Corp";
      sa[255] = "Advocate Health Care";
      sa[256] = "Aegir Systems";
      sa[257] = "Aero Specialties Mfg. Corp";
      sa[258] = "Aerodyn Wind Tunnel";
      sa[259] = "Aeroframe Services";
      sa[260] = "Aerojet/GenCorp";
      sa[261] = "Aerospace Corporation";
      sa[262] = "Aerospace Technolgies Group";
      sa[263] = "Aerospace maintenance services";
      sa[264] = "Aerotek";
      sa[265] = "Aerus Medical Staffing";
      sa[266] = "Aesthetic Smiles of NJ";
      sa[267] = "Aetna";
      sa[268] = "Affinity Circles";
      sa[269] = "Affinity Marketing Group";
      sa[270] = "Affinity medical Center";
      sa[271] = "Aflac";
      sa[272] = "After Cool Fitness";
      sa[273] = "Afton Pumps INC.";
      sa[274] = "Agent";
      sa[275] = "Aggreko";
      sa[276] = "Agora, Inc.";
      sa[277] = "Agusta Westland";
      sa[278] = "Ahart Benefit Ins Services";
      sa[279] = "Aia Industries";
      sa[280] = "Air Design Heating & Air Conditioning";
      sa[281] = "Air Force";
      sa[282] = "Air Force Det 3,544th Intelligence Group";
      sa[283] = "Air Showers and Pass Thrus";
      sa[284] = "Air Showers and Pass Thrus Unlimited Inc";
      sa[285] = "Air System Components";
      sa[286] = "Air Systems, Inc.";
      sa[287] = "Air comfort solutions";
      sa[288] = "Airnamic Inc.";
      sa[289] = "Airtight Design";
      sa[290] = "Airtran Airways";
      sa[291] = "Ajilon Professional Staffing";
      sa[292] = "Akabas & Sproule";
      sa[293] = "Akebono Brake Columbia Plant";
      sa[294] = "Aker Solutions";
      sa[295] = "Akiva Incorporated";
      sa[296] = "Aktiv-Dry, LLC";
      sa[297] = "Alabama Dept. of Public Health";
      sa[298] = "Alacriti, Inc";
      sa[299] = "Alamance Regional Medical Center";
      sa[300] = "Alameda County";
      sa[301] = "Alameda County BHCS";
      sa[302] = "Albany Medical Center";
      sa[303] = "Albemarle Hospital";
      sa[304] = "Albertsons, Inc.";
      sa[305] = "Album Crafters, Inc";
      sa[306] = "Albuquerque Studios";
      sa[307] = "Alcatel-Lucent";
      sa[308] = "Alcatel-lucent";
      sa[309] = "Alcoa Howmet";
      sa[310] = "Alcoa incorporation";
      sa[311] = "Aldi Inc.";
      sa[312] = "Aldi, Inc";
      sa[313] = "Aldridge Electric";
      sa[314] = "Ale House";
      sa[315] = "Alecia Hanes Pediatrics";
      sa[316] = "Alert Communications";
      sa[317] = "Alexandria Care Center";
      sa[318] = "Alexian Brothers Behavioral Health";
      sa[319] = "Alfred Music Publishing";
      sa[320] = "Alief ISD";
      sa[321] = "Alight, LLC";
      sa[322] = "AlixPartners LLP";
      sa[323] = "All Covered, Inc.";
      sa[324] = "All Saints Church";
      sa[325] = "All state abatement professionals";
      sa[326] = "Allan hanley";
      sa[327] = "Allegheny Ludlum";
      sa[328] = "Allegheny Valley School";
      sa[329] = "Allegra Fort Worth North";
      sa[330] = "Allen & Company LLC";
      sa[331] = "Allen & Overy LLP";
      sa[332] = "Allendale IGA";
      sa[333] = "Alliance Bus Charters";
      sa[334] = "Alliance Defense Fund";
      sa[335] = "Alliance Industries";
      sa[336] = "Alliance Laundry Systems";
      sa[337] = "Alliance for Lupus Research";
      sa[338] = "AllianceBernstein";
      sa[339] = "Allianz Life";
      sa[340] = "Allied";
      sa[341] = "Allied Barton";
      sa[342] = "Allied Barton Security";
      sa[343] = "Allied Generators";
      sa[344] = "Allied Rehab";
      sa[345] = "Allied TPro";
      sa[346] = "AlliedBarton ";
      sa[347] = "Allina";
      sa[348] = "Allison Arcuri";
      sa[349] = "AlloSource";
      sa[350] = "Allogram";
      sa[351] = "Allsate Insurance Company";
      sa[352] = "Allstate";
      sa[353] = "Allstate Insurance";
      sa[354] = "Alltel";
      sa[355] = "Ally Bank";
      sa[356] = "Ally Financial";
      sa[357] = "Alma de Cuba";
      sa[358] = "Alpha Ecological Pest Control";
      sa[359] = "Alpha Omega Hospice";
      sa[360] = "AlphaDetail Inc.";
      sa[361] = "Alpine Lanes";
      sa[362] = "Alston & Bird";
      sa[363] = "Alta Bates Summit Hospital";
      sa[364] = "Alta bates summit hospital";
      sa[365] = "Altair Engineering";
      sa[366] = "Altera Corp.";
      sa[367] = "Altria";
      sa[368] = "Altria Sales & Distribution";
      sa[369] = "Altura Credit Union";
      sa[370] = "Alvarez & Marsal Taxand";
      sa[371] = "AmGen";
      sa[372] = "AmSafe Aviation";
      sa[373] = "AmWINS Group, Inc.";
      sa[374] = "Amadeus Home Music School";
      sa[375] = "Amazon.com";
      sa[376] = "AmbuStar";
      sa[377] = "Amedisys";
      sa[378] = "Amerex Brokers";
      sa[379] = "America One";
      sa[380] = "American Academy of Family Physicians";
      sa[381] = "American Academy of Physician Education";
      sa[382] = "American Airlines";
      sa[383] = "American Audio";
      sa[384] = "American Careers";
      sa[385] = "American Center for Learning";
      sa[386] = "American Chemical Society";
      sa[387] = "American DG Energy";
      sa[388] = "American Eagle Airlines (AMR Corp)";
      sa[389] = "American Energy";
      sa[390] = "American Express";
      sa[391] = "American Family Insurance Group";
      sa[392] = "American General Financial Services";
      sa[393] = "American General Life and Accident Ins ";
      sa[394] = "American Health Care";
      sa[395] = "American Heart Assoc.";
      sa[396] = "American Home Bank";
      sa[397] = "American Honda Motor Company";
      sa[398] = "American Imaging Management";
      sa[399] = "American Institutes for Research";
      sa[400] = "American K9 Interdiction";
      sa[401] = "American Lake Credit Union";
      sa[402] = "American Land Lease";
      sa[403] = "American Laser Centers";
      sa[404] = "American Maritime Officers Union";
      sa[405] = "American Media Inc.";
      sa[406] = "American Medic of Charlotte Co.";
      sa[407] = "American Medical Response";
      sa[408] = "American Medical Systems";
      sa[409] = "American Metal Roofs";
      sa[410] = "American Museum of Natural History";
      sa[411] = "American National Insurance Company";
      sa[412] = "American Packaging Corporation";
      sa[413] = "American Profit Recovery";
      sa[414] = "American Public Media";
      sa[415] = "American Radiology Services";
      sa[416] = "American Railcar Industries";
      sa[417] = "American Red Cross";
      sa[418] = "American Repertory Theater";
      sa[419] = "American Residential Services";
      sa[420] = "American Search Partners/ The Wellington";
      sa[421] = "American Showa, Inc.";
      sa[422] = "American Society of Interior Designers";
      sa[423] = "American University";
      sa[424] = "American building maintenance ";
      sa[425] = "Americare";
      sa[426] = "Americredit";
      sa[427] = "Amerigas";
      sa[428] = "Ameriprise";
      sa[429] = "Ameriprise Financial";
      sa[430] = "Ameris Bank";
      sa[431] = "AmerisourceBergen";
      sa[432] = "Ameristone";
      sa[433] = "Ames True Temper";
      sa[434] = "Amesbury public schools";
      sa[435] = "Ametek Aerospace and Defense";
      sa[436] = "Amphastar Pharmaceuticals, Inc";
      sa[437] = "Amplify FCU";
      sa[438] = "Amports & Retired City Government";
      sa[439] = "Amrest";
      sa[440] = "Amsterdam Family Practice";
      sa[441] = "Amtrak";
      sa[442] = "Amylin Pharmaceuticals, Inc.";
      sa[443] = "AnMed Health ";
      sa[444] = "Anaesthesia Associates of Massachusetts";
      sa[445] = "Anaheim Union High School";
      sa[446] = "Ancestry.com";
      sa[447] = "AnchorBank";
      sa[448] = "Ancon Marine";
      sa[449] = "Andover Electric";
      sa[450] = "Andres Construction";
      sa[451] = "Andrews Federal Credit Union";
      sa[452] = "Andrews Lagasse Branch and Bell";
      sa[453] = "Angel Otero";
      sa[454] = "Angels Of The Valley Hospice Care, LLC";
      sa[455] = "Animal Behavior College";
      sa[456] = "Animas Corporation";
      sa[457] = "Ann Arbor Public Schools";
      sa[458] = "Annual Rentals, Inc.";
      sa[459] = "Antelope Valley College";
      sa[460] = "Antelope Valley High School District";
      sa[461] = "Antimony Green Inc.";
      sa[462] = "Apax Partners, LP";
      sa[463] = "Apex";
      sa[464] = "Apex Systems Inc";
      sa[465] = "Apollo Pools Inc";
      sa[466] = "AppSense Inc.";
      sa[467] = "Appalachian State University";
      sa[468] = "Apple";
      sa[469] = "Apple Inc.";
      sa[470] = "Apple, Inc";
      sa[471] = "Apple, Inc.";
      sa[472] = "Applebees";
      sa[473] = "Appleone";
      sa[474] = "Appletree";
      sa[475] = "Appliance Replacement Inc ";
      sa[476] = "Applied Materials";
      sa[477] = "Applied Systems, Inc";
      sa[478] = "Aqua Sun Lawn and Landscaping";
      sa[479] = "Aquatic Sales Solutions, Inc";
      sa[480] = "Aquent, LLC";
      sa[481] = "Aramark";
      sa[482] = "Aramark Corporation";
      sa[483] = "Aramark Healthcare";
      sa[484] = "Aramark Sports and Entertainment";
      sa[485] = "Aramark Uniform Serives";
      sa[486] = "Aramark Uniform Services";
      sa[487] = "Aramark and Domino's";
      sa[488] = "Arbor Properties, Inc.";
      sa[489] = "Arcadis US Inc.";
      sa[490] = "Arcata Assoc.";
      sa[491] = "Arcata associates";
      sa[492] = "Arch Insurance Group";
      sa[493] = "Arch Photo, Inc.";
      sa[494] = "Archbishop Molloy High School";
      sa[495] = "ArcherPoint";
      sa[496] = "Architectural Products of Virginia";
      sa[497] = "Arden Realty, Inc";
      sa[498] = "Ardsley Schools";
      sa[499] = "Arencibia Associates";
      sa[500] = "Argsoft Consulting, LLC";
      sa[501] = "Aries Freight Systems";
      sa[502] = "Arizona Community Physician";
      sa[503] = "Arizona Department of Economic Security";
      sa[504] = "Arizona State University";
      sa[505] = "Arizona's Best Choice Pest ";
      sa[506] = "Ark Dispatch";
      sa[507] = "Arkansas Department of Education";
      sa[508] = "Arkansas Surgical Hospital";
      sa[509] = "Armada";
      sa[510] = "Armand morin network";
      sa[511] = "Armed Forces Academy Bank";
      sa[512] = "Armor Metal";
      sa[513] = "Armory Auto";
      sa[514] = "Army";
      sa[515] = "Army ";
      sa[516] = "Army Corps of Engineers";
      sa[517] = "Army Fleet Support";
      sa[518] = "Army National Guard";
      sa[519] = "Army National Guard / GED Plus Program";
      sa[520] = "Arnoff Moving &Storage";
      sa[521] = "Arris";
      sa[522] = "Arris  Inc.";
      sa[523] = "Arrow Electronics, Inc";
      sa[524] = "Arrow International Inc";
      sa[525] = "Art & Soul Photography Inc.";
      sa[526] = "Art Center College of Design";
      sa[527] = "Art Institute of California - Hollywood";
      sa[528] = "ArtNexus";
      sa[529] = "Arte Salon";
      sa[530] = "Artech Information System-IBM Contractor";
      sa[531] = "Arthrex";
      sa[532] = "Arthur E Flynn, MD";
      sa[533] = "Arthur J Gallagher Risk Management";
      sa[534] = "Arthur Middleton Capital Holdings";
      sa[535] = "ArtsFund";
      sa[536] = "Ascension Parish School Board";
      sa[537] = "Ashbrook Village Senior Community";
      sa[538] = "Ashby & Geddes";
      sa[539] = "Ashford University";
      sa[540] = "Ashland Inc";
      sa[541] = "Asian American Donor Program";
      sa[542] = "Asian American LEAD";
      sa[543] = "Aspen Boarding Kennel & Animal Shelter";
      sa[544] = "Aspen Dental";
      sa[545] = "Aspen Tire @ auto";
      sa[546] = "Asphalt Contractors Inc";
      sa[547] = "Asplundh";
      sa[548] = "Asso. Illinois Middle Schools ";
      sa[549] = "Associate Press";
      sa[550] = "Associated Bank";
      sa[551] = "Associated Earth Sciences";
      sa[552] = "Associated Mortgage Group, Inc.";
      sa[553] = "Associated Press";
      sa[554] = "Assurant";
      sa[555] = "Assurant Inc.";
      sa[556] = "Assurant Specialty Property";
      sa[557] = "Astellas US LLC";
      sa[558] = "Astir IT Solutions Inc";
      sa[559] = "Astoria Fuel Corp.";
      sa[560] = "Asylum Visual Effects";
      sa[561] = "At&t";
      sa[562] = "At&t Mobility";
      sa[563] = "Atec Ambulance";
      sa[564] = "Atlantic Business Products";
      sa[565] = "Atlantic County Sheriffs Office";
      sa[566] = "Atlantic Plant Services";
      sa[567] = "Atlantic Self Storage";
      sa[568] = "Atlantic Southeast Airlines";
      sa[569] = "Atlantis Homes";
      sa[570] = "Atomic Sound Post Production Services";
      sa[571] = "Attitudes in Dressing  Inc";
      sa[572] = "Atwood Oceanics";
      sa[573] = "Au cafe inc. DBA Maison";
      sa[574] = "Auburn Dairy";
      sa[575] = "Auburn Foreign Car";
      sa[576] = "Audiovox";
      sa[577] = "Audit-Tel, Inc.";
      sa[578] = "Aufrichtig & Aufrichtig";
      sa[579] = "Augusta Public Defender's Office";
      sa[580] = "Aurora Baycare Medical Center";
      sa[581] = "Aurora Diagnostics";
      sa[582] = "Aurora Multimedia";
      sa[583] = "Austin Home Base Community School";
      sa[584] = "Austin ISD";
      sa[585] = "Austin Independent School District";
      sa[586] = "Austin Powder Co.";
      sa[587] = "Auto Club Of Southern California";
      sa[588] = "Auto Driveaway";
      sa[589] = "AutoEdge Distribution dba InstallerEdge";
      sa[590] = "AutoZone";
      sa[591] = "Autodesk Inc";
      sa[592] = "Autoliv Night Vision";
      sa[593] = "Automotive Finance Corporation";
      sa[594] = "Automotive Rentals, Inc";
      sa[595] = "Autonation";
      sa[596] = "Autozone";
      sa[597] = "Availity";
      sa[598] = "Avanade";
      sa[599] = "Avenue Web Media, LLC";
      sa[600] = "Averro inc.";
      sa[601] = "Avista Healthcare";
      sa[602] = "Avnet";
      sa[603] = "Avnet Electronics";
      sa[604] = "Avocent Corp";
      sa[605] = "Axiom";
      sa[606] = "Axis MN, Inc";
      sa[607] = "Azeez & Associates, P.L.L.C.";
      sa[608] = "B & G Foods";
      sa[609] = "B & S Electrical Supply";
      sa[610] = "B N S F Railroad";
      sa[611] = "B&G Produce";
      sa[612] = "B&R Products, Inc.";
      sa[613] = "BAE Systems";
      sa[614] = "BAML";
      sa[615] = "BARTON ROYALTIES, LLC";
      sa[616] = "BASF Chemical Company";
      sa[617] = "BB&T";
      sa[618] = "BBVA Compass";
      sa[619] = "BCBG MAXAZRIA Group";
      sa[620] = "BCD Travel";
      sa[621] = "BCRA Design";
      sa[622] = "BCWC";
      sa[623] = "BDE";
      sa[624] = "BE  and  k  Inc. a KBR company";
      sa[625] = "BE AEROSPACE";
      sa[626] = "BEKINS A-1 MOVERS";
      sa[627] = "BELL WEST COMMUNITY CREDIT UNION";
      sa[628] = "BELLAGIO NAILS & SPA";
      sa[629] = "BEST BUY";
      sa[630] = "BG Wholesale";
      sa[631] = "BG manufacturing";
      sa[632] = "BILL MCCURLEY CHEVROLET INC";
      sa[633] = "BIOTRONIK, Inc.";
      sa[634] = "BIrd Rock Surf Shop";
      sa[635] = "BJ OIL SERVICE COMPANY";
      sa[636] = "BLOOMBERG LP";
      sa[637] = "BMC Software";
      sa[638] = "BMW of Murray";
      sa[639] = "BNA";
      sa[640] = "BNSF";
      sa[641] = "BNSF Burlington Norther Santa Fe";
      sa[642] = "BNSF RAILWAY";
      sa[643] = "BNSF Railway";
      sa[644] = "BNSF Railway Co";
      sa[645] = "BNY Mellon";
      sa[646] = "BOEMRE";
      sa[647] = "BOK Financial";
      sa[648] = "BOOZ ALLEN HAMILTON";
      sa[649] = "BP North America";
      sa[650] = "BP Pipeline North America";
      sa[651] = "BRE Properties  Inc.";
      sa[652] = "BRINKER INTERNATIONAL";
      sa[653] = "BRP US Inc";
      sa[654] = "BVDM";
      sa[655] = "BW Hotel  LLC";
      sa[656] = "BW Technologies By Honeywell";
      sa[657] = "BYT Media, Inc.";
      sa[658] = "Babylon Central Fire & Rescue Alarm";
      sa[659] = "Bad Boys Auto Body";
      sa[660] = "Baghouse & Idustrial Sheet metal";
      sa[661] = "Bagley Public Schools";
      sa[662] = "Bahama Breeze";
      sa[663] = "Baker Engineering and Risk Consultants";
      sa[664] = "Baker Hughes";
      sa[665] = "Baker Hughes Incorporated";
      sa[666] = "Bakersfield city schools";
      sa[667] = "Ball Aerospace and Technologies Corp.";
      sa[668] = "Ball Corp";
      sa[669] = "Ball Janik LLP";
      sa[670] = "Ball Metal Corp.";
      sa[671] = "Ballard Material Products";
      sa[672] = "Balloon Promotions";
      sa[673] = "Ballwin Athletic Association";
      sa[674] = "Balous Jewelers";
      sa[675] = "Baltimore City";
      sa[676] = "Baltimore County Public Schools";
      sa[677] = "Banana Republic";
      sa[678] = "BancorpSouth";
      sa[679] = "Bandtel, LLC";
      sa[680] = "Banfield";
      sa[681] = "Bang Salon Inc.";
      sa[682] = "Bank";
      sa[683] = "Bank Of America";
      sa[684] = "Bank Of America ";
      sa[685] = "Bank of America";
      sa[686] = "Bank of America Corp.";
      sa[687] = "Bank of Belleville";
      sa[688] = "Bank of New England";
      sa[689] = "Bank of New Orleans";
      sa[690] = "Bank of New York Mellon";
      sa[691] = "Bank of Oklahoma";
      sa[692] = "Bank of Texas";
      sa[693] = "Bank of the West";
      sa[694] = "Bankers Warranty Group";
      sa[695] = "Banner Health SQL";
      sa[696] = "Baptist Health South Florida";
      sa[697] = "Baptist Hospital";
      sa[698] = "Baptist International Missions, Inc.";
      sa[699] = "Baptist Medical Center";
      sa[700] = "Bar S Foods";
      sa[701] = "Barclays Capital";
      sa[702] = "Barix Clinix of Ohio";
      sa[703] = "Barnes & Noble";
      sa[704] = "Barnes & Noble Booksellers Inc.";
      sa[705] = "Barnes Jewish Hospital";
      sa[706] = "Barnes and Noble";
      sa[707] = "Barnes-Jewish Hospital";
      sa[708] = "Barneys New York";
      sa[709] = "Barnhill Cintracting Company";
      sa[710] = "Barr & Barr, Inc";
      sa[711] = "Barrington Self Storage";
      sa[712] = "Bartco Lighting";
      sa[713] = "Bartos Industries";
      sa[714] = "Baschnagel Bros.";
      sa[715] = "Basilico Ristorante";
      sa[716] = "Bass Pools Inc.";
      sa[717] = "Bass Pro Shops";
      sa[718] = "Bath & Body Works";
      sa[719] = "Bath and Body Works";
      sa[720] = "Bathing Corp. of Southampton";
      sa[721] = "Batten and Shaw, Inc. ";
      sa[722] = "Battery Worx Inc";
      sa[723] = "Battle Ground School District";
      sa[724] = "Baxter Auto Parts";
      sa[725] = "Baxter Healthcare";
      sa[726] = "Baxter International Inc.";
      sa[727] = "Bay Alarm ";
      sa[728] = "Bay Area Rapid Transit";
      sa[729] = "Bay City Electrical Services";
      sa[730] = "Bay Clinic";
      sa[731] = "Bay Cove Human Service";
      sa[732] = "Bayad Home Care Specialists";
      sa[733] = "Bayer Corporation";
      sa[734] = "Bayer HealthCare LLC";
      sa[735] = "Bayer LTD and Core Medical Group";
      sa[736] = "Baylor";
      sa[737] = "Baylor University";
      sa[738] = "Baylor University Medical Center";
      sa[739] = "Baynote";
      sa[740] = "Bayonne Board of Education";
      sa[741] = "Baystate Medical Center";
      sa[742] = "Bealls Department Store";
      sa[743] = "Beards Custom Cabinets";
      sa[744] = "BearingPoint";
      sa[745] = "Beaverton School District";
      sa[746] = "Bebe stores inc";
      sa[747] = "Bechtel";
      sa[748] = "Beckman Coulter Inc";
      sa[749] = "Beckman Coulter Inc.";
      sa[750] = "Beckman Coulter, Inc.";
      sa[751] = "Becoming Independent";
      sa[752] = "Bed Bath & Beyond";
      sa[753] = "Bed Bath and Beyond";
      sa[754] = "Beef o Bradys";
      sa[755] = "Beginning with Children Foundation";
      sa[756] = "Belaire Condo";
      sa[757] = "Bella & Bash Consulting";
      sa[758] = "Bellevue Elementary School";
      sa[759] = "Bellhelicopter";
      sa[760] = "Belly up";
      sa[761] = "Belmont Correctional";
      sa[762] = "Belt Railway";
      sa[763] = "Bema Electronics";
      sa[764] = "Bemer Enterprises";
      sa[765] = "Ben Franklin Transit";
      sa[766] = "Ben's Supercenter Inc";
      sa[767] = "Benco Dental";
      sa[768] = "Bender Helper Impact";
      sa[769] = "Benefitfocus";
      sa[770] = "Bentley Newport Beach";
      sa[771] = "Bentley School";
      sa[772] = "Bentley Systems Inc";
      sa[773] = "Bentonville Public Schools";
      sa[774] = "Benzie County Sheriff Office";
      sa[775] = "Berea College";
      sa[776] = "Berea Independent Schools";
      sa[777] = "Bergen County Sheriff's Department";
      sa[778] = "Berger-Bros Camera";
      sa[779] = "Bergman eye center ";
      sa[780] = "Berkshire Asset Management";
      sa[781] = "Berkshire Hathaway Homestate Companies";
      sa[782] = "Berlin Packaging";
      sa[783] = "Bernards";
      sa[784] = "Berry Plastic";
      sa[785] = "Berry, Appleman & Leiden LLP";
      sa[786] = "Bertling";
      sa[787] = "Best Buy";
      sa[788] = "Best Buy Co. Inc.";
      sa[789] = "Best Buy Service Center 615";
      sa[790] = "Best Overnite Express";
      sa[791] = "Best Quality Insulation";
      sa[792] = "Best Way Home Improvement ";
      sa[793] = "Best Western Zion Park Inn";
      sa[794] = "BestBuy";
      sa[795] = "Besteway Recycling";
      sa[796] = "Beth Israel Deaconess Medical Center";
      sa[797] = "Beth Israel Hospital";
      sa[798] = "Bethany Baptist Church";
      sa[799] = "Bethel Baptist Church";
      sa[800] = "Bethesda Memorial Hospital";
      sa[801] = "Bethlehem Apparatus Co., Inc.";
      sa[802] = "Betsy Johnson Regional Hospital";
      sa[803] = "Bexar County";
      sa[804] = "Beyond Housing";
      sa[805] = "Bhpbilliton";
      sa[806] = "Big Acre Store";
      sa[807] = "Big Bubbas BBQ";
      sa[808] = "Big Electronic Company";
      sa[809] = "Binder and Binder";
      sa[810] = "BioBanc USA";
      sa[811] = "BioPharm Systems";
      sa[812] = "Biogen Idec";
      sa[813] = "Biola University";
      sa[814] = "Biomat";
      sa[815] = "Biotest Microbiology Corporation";
      sa[816] = "Birds Eye Foods";
      sa[817] = "Birthright Israel Foundation";
      sa[818] = "Bishop Police Department";
      sa[819] = "Bjs Wholesale";
      sa[820] = "Black  and  Decker";
      sa[821] = "Black Box";
      sa[822] = "Black Diamond Gymnastics";
      sa[823] = "Black Diamond Performance Reporting";
      sa[824] = "Black Hills Workshop";
      sa[825] = "BlackRock";
      sa[826] = "BlackRock Financial";
      sa[827] = "Blackboard";
      sa[828] = "Blackhawk Management Corp";
      sa[829] = "Blackhawk Network and Gentry Realty";
      sa[830] = "Blacksmith of HUdson";
      sa[831] = "Blackwood Medical Inc.";
      sa[832] = "Blade Technologies";
      sa[833] = "Blair Park Services, LLC";
      sa[834] = "Blanket Enterprises";
      sa[835] = "Blau & Associates, P.C.";
      sa[836] = "Blockbuster Inc";
      sa[837] = "Blockbuster Videos";
      sa[838] = "Blommer Peterman SC";
      sa[839] = "Blood Center of the Pacific";
      sa[840] = "Bloom Energy";
      sa[841] = "Bloomberg L.P.";
      sa[842] = "Bloomberg LP";
      sa[843] = "Bloomsburg Hospital";
      sa[844] = "Blue & Co.";
      sa[845] = "Blue Cross Blue Shield of North Carolina";
      sa[846] = "Blue Cross Blue Shield of Texas";
      sa[847] = "Blue Cross and Blue Shield of Kansas Cty";
      sa[848] = "Blue Nile";
      sa[849] = "Blue Ridge Regional Jail";
      sa[850] = "Blue Shield Of California";
      sa[851] = "Blue Sky Services";
      sa[852] = "Blue Water Powerboats Inc.";
      sa[853] = "Blue Wave Car Wash";
      sa[854] = "BlueCross BlueShield of TN";
      sa[855] = "Bluecoat Systems";
      sa[856] = "Bluepoint Surgical Group";
      sa[857] = "Blues Management";
      sa[858] = "BoBoGo Inc";
      sa[859] = "Boar's Head Provisions Co. Inc";
      sa[860] = "Boaz City School System";
      sa[861] = "Bob Barker Company";
      sa[862] = "Bobby Benson Center";
      sa[863] = "Bobs Window Cleaning";
      sa[864] = "Bodywaves";
      sa[865] = "Boehringer Ingelheim Pharmaceuticals";
      sa[866] = "Boeing";
      sa[867] = "Boeing Commercial Airplanes";
      sa[868] = "Boeing Company";
      sa[869] = "Boizao Brazilian steak-house";
      sa[870] = "Bonland Industries";
      sa[871] = "Bonnie Plant Farm";
      sa[872] = "Bonte";
      sa[873] = "Bonus of America, Inc.";
      sa[874] = "Booz Allen Hamilton";
      sa[875] = "Booz Allen Hamilton, Inc.";
      sa[876] = "Borders Books + Music";
      sa[877] = "Bordines Nursery";
      sa[878] = "Borgess Health";
      sa[879] = "Bossier Parish Schools";
      sa[880] = "Boston ABA";
      sa[881] = "Boston Architectural College";
      sa[882] = "Boston Beauty";
      sa[883] = "Boston College";
      sa[884] = "Boston Lobster Company";
      sa[885] = "Boston Medical Center";
      sa[886] = "Boston University";
      sa[887] = "Boston Water and Sewer Commission";
      sa[888] = "Boston and North Shore Real Estate";
      sa[889] = "BostonIVF";
      sa[890] = "Bouchard Transportation";
      sa[891] = "Bound Tree MEdical";
      sa[892] = "Boundary Waters Bank";
      sa[893] = "Bowen Photography";
      sa[894] = "Bowers Ambulance";
      sa[895] = "Bowling Green R-1 ";
      sa[896] = "Boy Scouts of America";
      sa[897] = "Boyle, Neblett & Wenger";
      sa[898] = "Boys and Girls Club of America";
      sa[899] = "Bozzolo Inc.";
      sa[900] = "Bozzuto Group";
      sa[901] = "Bracewell  and  Giuliani";
      sa[902] = "Bracewell & Giuliani LLP";
      sa[903] = "Bradley University";
      sa[904] = "Brady USA Inc.";
      sa[905] = "Brady Worldwide, Inc.";
      sa[906] = "Brand X Communications";
      sa[907] = "Brandon Harley Davidson";
      sa[908] = "Brantley Services";
      sa[909] = "Brawley Insurance Services";
      sa[910] = "Brawley Union HS District";
      sa[911] = "Breen Color Concentrates";
      sa[912] = "Breitburn Energy";
      sa[913] = "Bremen School District";
      sa[914] = "Bresnan Communications";
      sa[915] = "Brevard County Clerk of Courts";
      sa[916] = "Brick Township Police Departent";
      sa[917] = "Bridgeforce, Inc";
      sa[918] = "Bridgepoint Education";
      sa[919] = "Bridges of America";
      sa[920] = "Bridgestone Americas";
      sa[921] = "Bridgestone Retail Operations, LLC";
      sa[922] = "Bridgeway Church";
      sa[923] = "Briefing.com";
      sa[924] = "Briggs & Stratton Corporation";
      sa[925] = "Brigham  and  Women's Hospital";
      sa[926] = "Brigham & Women's Hospital";
      sa[927] = "Brigham Young University";
      sa[928] = "Brigham and Women's Hospital";
      sa[929] = "Bright Horizons";
      sa[930] = "Bright Horizons Family Solutions";
      sa[931] = "BrightLine CPAs & Associates Inc.";
      sa[932] = "Brightstar Corporation";
      sa[933] = "Brinker Corp, Romano's Macaroni Grill";
      sa[934] = "Brinker International";
      sa[935] = "Brinkmann Constructors";
      sa[936] = "Brinks Global services";
      sa[937] = "BriskHeat";
      sa[938] = "Bristol County Sheriff's Office";
      sa[939] = "Bristol Myers Squibb";
      sa[940] = "Bristol Place Corporation";
      sa[941] = "Bristol Public Schools";
      sa[942] = "Bristol Virginia Public Schools";
      sa[943] = "Bristol-Myers Squibb";
      sa[944] = "British Petroleum";
      sa[945] = "Broad Institute";
      sa[946] = "Broad and Lehigh Pharmacy";
      sa[947] = "Broadmoor Hotel";
      sa[948] = "Brockport Police Dept";
      sa[949] = "Brockton Public Schools";
      sa[950] = "Brockton furnace and duct";
      sa[951] = "Broken Sound Country club";
      sa[952] = "Bronx Lebanon Hospital";
      sa[953] = "Bronx Psychiatric Center";
      sa[954] = "Brookdale Hospital Medical Center";
      sa[955] = "Brookdale Senior Living";
      sa[956] = "Brookhaven Memorial Hospital";
      sa[957] = "Brookland-Cayce High";
      sa[958] = "Brookline Bank";
      sa[959] = "Brooks Automation";
      sa[960] = "Brookside Laboratories";
      sa[961] = "Broward County Commission";
      sa[962] = "Broward County Government";
      sa[963] = "Broward County School Board";
      sa[964] = "Broward county schools";
      sa[965] = "Broward sheriff fire rescue";
      sa[966] = "Brown  and  Cullen  Inc";
      sa[967] = "Brown & Brown Insurance";
      sa[968] = "Brown Bear Car Wash";
      sa[969] = "Brown Brothers Harriman";
      sa[970] = "Brown Brothers Harriman and Co.";
      sa[971] = "Brown University";
      sa[972] = "Brown and Caldwell";
      sa[973] = "Bruss Construction,Inc.";
      sa[974] = "Bryan Brothers Inc";
      sa[975] = "Bsrker Blue Digital Imaging";
      sa[976] = "Bubba Gump Shrimp Co";
      sa[977] = "Buca di Beppo";
      sa[978] = "Buchanan Community Schools";
      sa[979] = "Buckeye Florida Corp.";
      sa[980] = "Buckeye Pipeline Co.";
      sa[981] = "Bucks County Intermediate Unit 22";
      sa[982] = "Budwine Services Electric Co Inc";
      sa[983] = "Buffalo Federal Savings Bank";
      sa[984] = "Buffalo Wild Wings";
      sa[985] = "Buffalo Wild wings";
      sa[986] = "Build A Bear";
      sa[987] = "Build.com";
      sa[988] = "Building Specialties";
      sa[989] = "Bulletin News";
      sa[990] = "Bullhorn";
      sa[991] = "Bullseye Glass";
      sa[992] = "Bunge Latin America";
      sa[993] = "Bureau Veritas";
      sa[994] = "Burns & McDonnell";
      sa[995] = "Burns & Mcdonnell";
      sa[996] = "Burns Hyundai";
      sa[997] = "Burrell School District";
      sa[998] = "Burrow Construction inc.";
      sa[999] = "Burson-Marsteller";
      sa[1000] = "Burton Hydro-Vac Services";
      sa[1001] = "Business Advancement Center";
      sa[1002] = "Business Control Systems";
      sa[1003] = "Business Printing Company";
      sa[1004] = "Business Technology Group";
      sa[1005] = "Butler Hospital";
      sa[1006] = "Butler International";
      sa[1007] = "Buttonwood Hospital of Burlington County";
      sa[1008] = "C & B Sales and Service";
      sa[1009] = "C and C Affordable Managment llc";
      sa[1010] = "C&S Research Corp";
      sa[1011] = "C&S Whole Sale Grociers";
      sa[1012] = "C-Dental X-Ray, Inc.";
      sa[1013] = "C-P";
      sa[1014] = "C. R. Bard, Inc.";
      sa[1015] = "C.E. Electronics  Inc.";
      sa[1016] = "C.H. Robinson Worldwide in";
      sa[1017] = "C.H.I.";
      sa[1018] = "C.V. Starr";
      sa[1019] = "CA Dept of Social Services";
      sa[1020] = "CA Inc.";
      sa[1021] = "CA Technologies";
      sa[1022] = "CA, Inc.";
      sa[1023] = "CA. Dept. Of Corrections";
      sa[1024] = "CACI";
      sa[1025] = "CACI Inc";
      sa[1026] = "CAL FIRE ";
      sa[1027] = "CAMERON COMPRESSION";
      sa[1028] = "CAPE FEAR VALLEY HOSPITAL ";
      sa[1029] = "CAPITOL CARDIOLOGY ASSOCIATES";
      sa[1030] = "CAR MARKET LLC";
      sa[1031] = "CARENET MEDICAL GROUP";
      sa[1032] = "CARRABA'S";
      sa[1033] = "CATALINA ISLAND VACATION RENTALS";
      sa[1034] = "CB Richard Ellis";
      sa[1035] = "CB and Potts";
      sa[1036] = "CBD college";
      sa[1037] = "CBIZ";
      sa[1038] = "CBRE Capital Markets";
      sa[1039] = "CBS";
      sa[1040] = "CBS Films";
      sa[1041] = "CBS Inc.";
      sa[1042] = "CBS Radio";
      sa[1043] = "CBS Radio ";
      sa[1044] = "CBS Radio Philadelphia";
      sa[1045] = "CBS Television Stations";
      sa[1046] = "CCCS of San Francisco";
      sa[1047] = "CCL Label";
      sa[1048] = "CCM";
      sa[1049] = "CCS Medical";
      sa[1050] = "CDC";
      sa[1051] = "CDG Engineers";
      sa[1052] = "CDI Corporation";
      sa[1053] = "CDI Marine & Government Sevices";
      sa[1054] = "CDM";
      sa[1055] = "CDM Media";
      sa[1056] = "CDM, Inc";
      sa[1057] = "CDW Merchants";
      sa[1058] = "CECB";
      sa[1059] = "CED";
      sa[1060] = "CFAW";
      sa[1061] = "CFI Medical";
      sa[1062] = "CGI Federal";
      sa[1063] = "CH Bakers";
      sa[1064] = "CH Wright Distributing Corp";
      sa[1065] = "CH2M HILL";
      sa[1066] = "CH2M Hill";
      sa[1067] = "CHA Consulting, Inc";
      sa[1068] = "CHAN Healthcare Auditors";
      sa[1069] = "CHARTIS-Broker Services ";
      sa[1070] = "CHENEY BROTHER";
      sa[1071] = "CHENEY BROTHERS";
      sa[1072] = "CHGE";
      sa[1073] = "CHICKASAW NATION DIVISION OF COMMERECE";
      sa[1074] = "CHIEF Grocery";
      sa[1075] = "CHILDREN'S AID SOCIETY";
      sa[1076] = "CHR Solutions, Inc.";
      sa[1077] = "CHW";
      sa[1078] = "CIGNA";
      sa[1079] = "CIGNA HealthCare";
      sa[1080] = "CIRTEC Medical Systems";
      sa[1081] = "CISCO Chemicals";
      sa[1082] = "CITIZENS INVESTMENT SERVICES";
      sa[1083] = "CITY OF EL SEGUNDO";
      sa[1084] = "CITY OF LOS ANGELES";
      sa[1085] = "CITY OF NEW HAVEN";
      sa[1086] = "CITY OF ROWLETT";
      sa[1087] = "CITY OF RUNAWAY BAY";
      sa[1088] = "CITY OF RYE DEPT OF PUBLIC WORKS";
      sa[1089] = "CITY OF SANTA BARBARA";
      sa[1090] = "CITY OF WEST PALM BEACH";
      sa[1091] = "CIty of Alpharetta";
      sa[1092] = "CJ Restaurant Group";
      sa[1093] = "CM Mitchel Inc";
      sa[1094] = "CM Products";
      sa[1095] = "CMA Cablevision";
      sa[1096] = "CMS Energy";
      sa[1097] = "CMT";
      sa[1098] = "CNH";
      sa[1099] = "CNI";
      sa[1100] = "CNMI Government";
      sa[1101] = "COCA COLA UNITED";
      sa[1102] = "CODA Automotive, Inc";
      sa[1103] = "COLLEGESOURCE, INC.";
      sa[1104] = "COLORFAST";
      sa[1105] = "COMPEX LEGAL SERVICES";
      sa[1106] = "CONAGRA FOODS";
      sa[1107] = "CORNELL COMPANIES";
      sa[1108] = "COROVAN Moving & Storage";
      sa[1109] = "COSCO Container Lines America";
      sa[1110] = "COSTCO";
      sa[1111] = "COSTCO WHOLESALE";
      sa[1112] = "COVAN WORLDWIDE MOVING";
      sa[1113] = "CPA Wealth Management Services";
      sa[1114] = "CPG Company";
      sa[1115] = "CPH";
      sa[1116] = "CPU2";
      sa[1117] = "CQ Roll Call";
      sa[1118] = "CR BARD";
      sa[1119] = "CR Fletcher";
      sa[1120] = "CRC CAPITAL GROUP LLC";
      sa[1121] = "CREATETHE GROUP";
      sa[1122] = "CS STARS";
      sa[1123] = "CSC";
      sa[1124] = "CSC/NASA";
      sa[1125] = "CSG Systems Inc";
      sa[1126] = "CSI MARKETING";
      sa[1127] = "CSI Software";
      sa[1128] = "CSS Antenna";
      sa[1129] = "CSS Building Services";
      sa[1130] = "CSU Monterey Bay";
      sa[1131] = "CSX TRANSPORTATION";
      sa[1132] = "CSX Transportation";
      sa[1133] = "CT Innovations";
      sa[1134] = "CTE Express";
      sa[1135] = "CUNA Mutual Group";
      sa[1136] = "CURRY AUTO";
      sa[1137] = "CVS";
      sa[1138] = "CVS CAREMARK";
      sa[1139] = "CVS Caremark";
      sa[1140] = "CVS Pharmacy";
      sa[1141] = "CVS/pharmacy";
      sa[1142] = "CVT";
      sa[1143] = "Ca. Dept. Of Corrections";
      sa[1144] = "Cabenas japanesse auto";
      sa[1145] = "Cablevision";
      sa[1146] = "Cabot";
      sa[1147] = "Caci";
      sa[1148] = "Caddo parish school district";
      sa[1149] = "Caesar's Palace";
      sa[1150] = "CaesarStone Projects";
      sa[1151] = "Caesars Ent.  ";
      sa[1152] = "Caesars Palace";
      sa[1153] = "Cafe Bleu";
      sa[1154] = "Cain Brothers & Co., LLC";
      sa[1155] = "Cajon Valley Union School District";
      sa[1156] = "Caky";
      sa[1157] = "Cal Fire";
      sa[1158] = "Cal National Bank";
      sa[1159] = "Calgon Carbon Corp";
      sa[1160] = "California Appellate Project";
      sa[1161] = "California Business Solution";
      sa[1162] = "California Department of Corrections";
      sa[1163] = "California Department of Justice";
      sa[1164] = "California Department of Public Health";
      sa[1165] = "California Heating & Sheetmetal";
      sa[1166] = "California National Guard";
      sa[1167] = "California Society of CPAs";
      sa[1168] = "Call Center Services";
      sa[1169] = "Call One";
      sa[1170] = "Callaway Golf";
      sa[1171] = "Calpine";
      sa[1172] = "Camber";
      sa[1173] = "Cambium Learning Group";
      sa[1174] = "Cambridge Associates";
      sa[1175] = "Cambridge Capital Fund, LLC";
      sa[1176] = "Camden Clark Medical Center";
      sa[1177] = "Camelback Academy";
      sa[1178] = "Cameron University";
      sa[1179] = "Cameron Ventures Team LLC";
      sa[1180] = "Cameron, Murphy & Spangler";
      sa[1181] = "Camp Venture";
      sa[1182] = "Campus advantage";
      sa[1183] = "Canal Barge Co. Inc.";
      sa[1184] = "Cancer Care and Hematology Specialists & Bloomingdale Fire Protection District";
      sa[1185] = "Cancer Tx Ctrs of America";
      sa[1186] = "Cano Medical Dental";
      sa[1187] = "Canton / Potsdam Hospital";
      sa[1188] = "Cantor Fitzgerald";
      sa[1189] = "Cantor Fitzgerald &Co";
      sa[1190] = "Canvas Concepts, Inc.";
      sa[1191] = "Cap Logistics";
      sa[1192] = "Capable Controls Inc";
      sa[1193] = "Caparros Corporation";
      sa[1194] = "Capco";
      sa[1195] = "Cape Fear Community College";
      sa[1196] = "Cape May County M.U.A";
      sa[1197] = "Capehart Scatchard";
      sa[1198] = "Capgemini";
      sa[1199] = "Capital Merchant Solutions";
      sa[1200] = "Capital One";
      sa[1201] = "Capital One Financial";
      sa[1202] = "Capital One Financial Corporation";
      sa[1203] = "Capital Technology Services Inc";
      sa[1204] = "Capital one";
      sa[1205] = "Caplan Bros. Glass Co Inc.";
      sa[1206] = "Capp Realty";
      sa[1207] = "Capri Lanes";
      sa[1208] = "CarMax";
      sa[1209] = "CarMax Auto Superstore";
      sa[1210] = "Caravita Homecare";
      sa[1211] = "Card Data Services";
      sa[1212] = "Cardic Machine Products";
      sa[1213] = "Cardima";
      sa[1214] = "Cardinal Health";
      sa[1215] = "Cardinal IG";
      sa[1216] = "Cardinal Solutions";
      sa[1217] = "Cardiology PC";
      sa[1218] = "Care Improvement Plus";
      sa[1219] = "Care ride";
      sa[1220] = "CareCore National, Inc.";
      sa[1221] = "CareFusion";
      sa[1222] = "CareSource Nursing";
      sa[1223] = "Career Education Corperation";
      sa[1224] = "CareerBuilder";
      sa[1225] = "CareerBuilder, Inc.";
      sa[1226] = "Carefusion";
      sa[1227] = "Carey International";
      sa[1228] = "Cargill";
      sa[1229] = "Cargill, Inc.";
      sa[1230] = "Carilion Clinic";
      sa[1231] = "Carl Zeiss IMT";
      sa[1232] = "Carlisle Syntec";
      sa[1233] = "Carlson Wagonlit Travel";
      sa[1234] = "Carlson, Calladine & Peterson LLP";
      sa[1235] = "Carmax";
      sa[1236] = "Carnegie Mellon University";
      sa[1237] = "Carney  Kelehan  Bresler  Bennett  and  Scherr  LLP";
      sa[1238] = "Carnival Cruise ";
      sa[1239] = "Carol Woods Retirement Community";
      sa[1240] = "Carole Shear, M.D.";
      sa[1241] = "Carolina East Medical Center";
      sa[1242] = "Carolina Paint & Body";
      sa[1243] = "Carolinas Healthcare System";
      sa[1244] = "Caroline County BD of ED";
      sa[1245] = "Carrabbas Italian Grill and Da Vinci fine jewelry";
      sa[1246] = "Carrington College";
      sa[1247] = "Cars protection plus inc";
      sa[1248] = "Cartefusion";
      sa[1249] = "Cartus";
      sa[1250] = "Case Sabatini";
      sa[1251] = "CaseStack, Inc.";
      sa[1252] = "Cassidy Turley BRE Commercial";
      sa[1253] = "Cast & Crew";
      sa[1254] = "Castle Metals Aerospace";
      sa[1255] = "Catalina Conservancy";
      sa[1256] = "Catalina Marketing";
      sa[1257] = "Catalyst Health Solutions";
      sa[1258] = "Catamount Constructors  Inc";
      sa[1259] = "Catch 24 Advertising and Design";
      sa[1260] = "Caterpillar Inc";
      sa[1261] = "Cathedral Church of the Intercessor";
      sa[1262] = "Catholic Charities";
      sa[1263] = "CatholicHealthcareWest";
      sa[1264] = "Caymanarts Inc.";
      sa[1265] = "Cayzen Technologies";
      sa[1266] = "Cedar Grill ";
      sa[1267] = "Celcite Solutions Inc";
      sa[1268] = "Cell Nation of Grameen Woodside Inc.";
      sa[1269] = "Cellerant Therapeutics";
      sa[1270] = "Celtic Leasing Corporation";
      sa[1271] = "CenterPoint Energy  Inc.";
      sa[1272] = "Centinela Hospital Medical Center";
      sa[1273] = "Centinela State Prison";
      sa[1274] = "Central Coast Pathology";
      sa[1275] = "Central Coast Sealcoating";
      sa[1276] = "Central Fl. Lands and Timber";
      sa[1277] = "Central Florida Press";
      sa[1278] = "Central Islip Hauppauge Volunteer Ambula";
      sa[1279] = "Central Jackson County Fire";
      sa[1280] = "Central Parking Systems";
      sa[1281] = "Central School District 301";
      sa[1282] = "Central Square Schools";
      sa[1283] = "Cerner Corporation";
      sa[1284] = "Chaffey Joint Union High School District";
      sa[1285] = "Challenger School";
      sa[1286] = "Chapdelaine";
      sa[1287] = "Chapman BMW on Camelback";
      sa[1288] = "Chapman Ford Sales";
      sa[1289] = "Charles Grayson Salon and SoCap";
      sa[1290] = "Charles Machine Works Inc.";
      sa[1291] = "Charles Nelson";
      sa[1292] = "Charles Schwab & Co. Inc.";
      sa[1293] = "Charles Wright Academy";
      sa[1294] = "Charlotte Mecklenburg Schools";
      sa[1295] = "Charlotte Russe  INC";
      sa[1296] = "Charter Communications";
      sa[1297] = "Charter Schools USA";
      sa[1298] = "Chase";
      sa[1299] = "Chase Bank";
      sa[1300] = "Chase Bank ";
      sa[1301] = "Chase Home Finance";
      sa[1302] = "Chattanooga Bakery";
      sa[1303] = "Chelsea Reach Program";
      sa[1304] = "Chemat Technology Inc";
      sa[1305] = "Chemetall";
      sa[1306] = "Chenango Memorial Hospital";
      sa[1307] = "Chenega Logistics";
      sa[1308] = "Cherokee Nation";
      sa[1309] = "Chesapeak Process Service Inc";
      sa[1310] = "Chesapeake Acoustic Solutions";
      sa[1311] = "Chesapeake Veterinary Surgical Specialis";
      sa[1312] = "Chester Water Authority";
      sa[1313] = "Chesterfield County, Virginia ";
      sa[1314] = "Chevy Chase Bank";
      sa[1315] = "Chicago Public Schools";
      sa[1316] = "Chicago Transit Authority";
      sa[1317] = "Chick Piano Co., Inc.";
      sa[1318] = "Chickasaw Nation";
      sa[1319] = "Chicken Box";
      sa[1320] = "Chief Administrative Office";
      sa[1321] = "Child Care Careers";
      sa[1322] = "Childhelp, USA";
      sa[1323] = "Children's Hospital Of Philadelphia";
      sa[1324] = "Children's Hospital of Philadelphia";
      sa[1325] = "Children's Medical Center";
      sa[1326] = "Children's Medical Center Dallas";
      sa[1327] = "Children's National Medical Center";
      sa[1328] = "Children's Rights";
      sa[1329] = "Children's Vision First/ SFUSD";
      sa[1330] = "Childrens Service Center of Wyoming Valley";
      sa[1331] = "Childrens hospital of Philadelphia";
      sa[1332] = "Childs Automotive";
      sa[1333] = "Chili's Restaurant";
      sa[1334] = "Chili's bar and grill";
      sa[1335] = "Chilis Bar and Grill";
      sa[1336] = "China Grill Management";
      sa[1337] = "Chino Valley Unified School District";
      sa[1338] = "Cho-Yeh Camp and Conference Center, Inc";
      sa[1339] = "ChoEducators LLC";
      sa[1340] = "Choice Logistics  Inc.";
      sa[1341] = "Christian Coalition of Florida";
      sa[1342] = "Christian Dior Inc.";
      sa[1343] = "Christian Fellowship Church";
      sa[1344] = "Christian Social Services";
      sa[1345] = "Christiana Care Health Services";
      sa[1346] = "Christopher House ";
      sa[1347] = "Chrome";
      sa[1348] = "Chrysler Financial";
      sa[1349] = "Chubb";
      sa[1350] = "Chubb Group of Insurance Companies";
      sa[1351] = "Chumash Casino";
      sa[1352] = "Ciao Mambo";
      sa[1353] = "Ciber Inc";
      sa[1354] = "Cigna";
      sa[1355] = "Cincinnati Christian University";
      sa[1356] = "Cincinnati PC Solutions";
      sa[1357] = "Cinemark USA  Inc.";
      sa[1358] = "Cintas";
      sa[1359] = "Cintas Corp";
      sa[1360] = "Cintas Corporation";
      sa[1361] = "Circle Graphics";
      sa[1362] = "Circle J-5 Aerobic";
      sa[1363] = "Cirrus Logic";
      sa[1364] = "Cisco Systems";
      sa[1365] = "Cisco Systems Inc.";
      sa[1366] = "Citadel  LLC";
      sa[1367] = "Citadel Broadcasting";
      sa[1368] = "Citadel FCU";
      sa[1369] = "Citadel Media";
      sa[1370] = "Citation Associates, Inc.";
      sa[1371] = "Citi";
      sa[1372] = "Citi Financial";
      sa[1373] = "CitiGroup";
      sa[1374] = "CitiMortgage";
      sa[1375] = "CitiMortgage, Inc";
      sa[1376] = "Citibank";
      sa[1377] = "Citigroup";
      sa[1378] = "Citigroup Inc.";
      sa[1379] = "Citizen Relations";
      sa[1380] = "Citizens Bank";
      sa[1381] = "Citrix Online";
      sa[1382] = "Citryst";
      sa[1383] = "City & County of Denver";
      sa[1384] = "City Beverage of Hyde Park LTD";
      sa[1385] = "City College";
      sa[1386] = "City College of New York";
      sa[1387] = "City Electric Supply";
      sa[1388] = "City Of Daytona Beach";
      sa[1389] = "City Of Los Angeles";
      sa[1390] = "City Of Milton-Freewater";
      sa[1391] = "City Of Ocoee PD";
      sa[1392] = "City Of Oklahoma City";
      sa[1393] = "City Of Rochester";
      sa[1394] = "City Union Mission";
      sa[1395] = "City University of New York";
      sa[1396] = "City of Alamogordo";
      sa[1397] = "City of Anaheim - Fire Department";
      sa[1398] = "City of Atlanta";
      sa[1399] = "City of Bainbridge";
      sa[1400] = "City of Beaverton";
      sa[1401] = "City of Bend";
      sa[1402] = "City of Billings";
      sa[1403] = "City of Bonney Lake";
      sa[1404] = "City of Broken Arrow";
      sa[1405] = "City of Burlington Board of Education";
      sa[1406] = "City of Chicago";
      sa[1407] = "City of Colorado Springs";
      sa[1408] = "City of Columbiana";
      sa[1409] = "City of Columbus";
      sa[1410] = "City of Costa Mesa";
      sa[1411] = "City of Cuyahoga Falls  Ohio";
      sa[1412] = "City of East Palo Alto";
      sa[1413] = "City of East Point";
      sa[1414] = "City of Excelsior Springs";
      sa[1415] = "City of Fremont";
      sa[1416] = "City of Fresno";
      sa[1417] = "City of Gainesville (FL)";
      sa[1418] = "City of Glendale";
      sa[1419] = "City of Hawthorne";
      sa[1420] = "City of Henderson";
      sa[1421] = "City of Hillsboro";
      sa[1422] = "City of Houston";
      sa[1423] = "City of Hutto";
      sa[1424] = "City of Jacksonville";
      sa[1425] = "City of Livermore";
      sa[1426] = "City of Longview";
      sa[1427] = "City of Los Angeles";
      sa[1428] = "City of Lynchburg";
      sa[1429] = "City of Miami";
      sa[1430] = "City of Milbank";
      sa[1431] = "City of Moultrie";
      sa[1432] = "City of New Britain";
      sa[1433] = "City of New York";
      sa[1434] = "City of Newark";
      sa[1435] = "City of Newburgh";
      sa[1436] = "City of Palmdale";
      sa[1437] = "City of Phoenix";
      sa[1438] = "City of Richmond";
      sa[1439] = "City of Richmond, VA";
      sa[1440] = "City of Rio Rancho";
      sa[1441] = "City of Riverside";
      sa[1442] = "City of Rochester";
      sa[1443] = "City of Rolling Meadows";
      sa[1444] = "City of Sacramento";
      sa[1445] = "City of San Diego";
      sa[1446] = "City of San Francisco";
      sa[1447] = "City of San Jose";
      sa[1448] = "City of Sanford, Florida";
      sa[1449] = "City of Santa Monica ";
      sa[1450] = "City of Shreveport (Fire Dept)";
      sa[1451] = "City of Sioux Falls";
      sa[1452] = "City of South Burlington";
      sa[1453] = "City of Southlake";
      sa[1454] = "City of Sparks";
      sa[1455] = "City of Taylorville";
      sa[1456] = "City of Tempe";
      sa[1457] = "City of Walnut Creek";
      sa[1458] = "City of Weatherford Fire Department";
      sa[1459] = "City of White Plains";
      sa[1460] = "City of milwaukee";
      sa[1461] = "City of phoenix";
      sa[1462] = "Claiborne Farm";
      sa[1463] = "Claire's Assessories";
      sa[1464] = "Clark Construction";
      sa[1465] = "Clark County";
      sa[1466] = "Clark County School District";
      sa[1467] = "Clark University";
      sa[1468] = "Clarke County";
      sa[1469] = "Classic Auto Group";
      sa[1470] = "Clay Behavioral Health";
      sa[1471] = "Clay County Medical Center";
      sa[1472] = "Clay County School District ";
      sa[1473] = "Clayton County Public Schools";
      sa[1474] = "Clayton Eye Center";
      sa[1475] = "Clayton Police";
      sa[1476] = "Clean Rooms West";
      sa[1477] = "Clear Edge Filtration";
      sa[1478] = "Clearwire ";
      sa[1479] = "Cleary Gottlieb";
      sa[1480] = "Clem Schaub Architect";
      sa[1481] = "Cleveland Clinic";
      sa[1482] = "Cleveland Country Club";
      sa[1483] = "Cleveland Electric Co.";
      sa[1484] = "Cleveland Housing Network";
      sa[1485] = "Clickable";
      sa[1486] = "Client Services Inc";
      sa[1487] = "Client Strategy Group";
      sa[1488] = "Clifton Gunderson";
      sa[1489] = "Clorox";
      sa[1490] = "Clorox Sales Company";
      sa[1491] = "ClosetMaid";
      sa[1492] = "Cloud Inc";
      sa[1493] = "Cloudmark";
      sa[1494] = "Cloverleaf Cold Storage";
      sa[1495] = "Club One";
      sa[1496] = "Clyde's of Gallery Place";
      sa[1497] = "Coachella Valley Unified ";
      sa[1498] = "Coachella Valley Unified School District";
      sa[1499] = "Coast Law Group";
      sa[1500] = "Coastal Trainning Technologies";
      sa[1501] = "Cobb County Board of Ed";
      sa[1502] = "Cobb County Schools";
      sa[1503] = "Cobb EMC";
      sa[1504] = "Cobham";
      sa[1505] = "Coca Cola";
      sa[1506] = "Coca Cola  ";
      sa[1507] = "Coca Cola Enterprises";
      sa[1508] = "Coca Cola North America";
      sa[1509] = "Coca-Cola";
      sa[1510] = "Cocoa Beach Brewing Company";
      sa[1511] = "Coconino County Sheriffs Department";
      sa[1512] = "Coconut Creek Seminole Casino";
      sa[1513] = "Codeminders";
      sa[1514] = "Cognizant Technology Solutions";
      sa[1515] = "Cohesion";
      sa[1516] = "Cokinos, Bosien & Young, P.C.";
      sa[1517] = "Colbert Packaging";
      sa[1518] = "Coldwater Creek";
      sa[1519] = "Coldwell Banker";
      sa[1520] = "Coldwell Banker Bain";
      sa[1521] = "Cole Taylor Bank";
      sa[1522] = "Cole Technologies";
      sa[1523] = "College Pro Painters";
      sa[1524] = "College of Saint Benedict";
      sa[1525] = "Collier County Public Schools";
      sa[1526] = "Collier County Sheriffs office";
      sa[1527] = "Collier county sheriff office";
      sa[1528] = "Colliers International";
      sa[1529] = "Collington Services";
      sa[1530] = "Collins Stewart LLC";
      sa[1531] = "Collision Centers of NH";
      sa[1532] = "Colonial Airstream";
      sa[1533] = "Colonial Electric Supply";
      sa[1534] = "Colorado Business Bank";
      sa[1535] = "Colorado Department of Education";
      sa[1536] = "Colorado Dept. of Corrections";
      sa[1537] = "Colorado Fondue Company";
      sa[1538] = "Colorado School of Mines";
      sa[1539] = "Colorado Springs Police Dept.";
      sa[1540] = "Colorado State University";
      sa[1541] = "Columbia Artists Management LLC";
      sa[1542] = "Columbia Bank";
      sa[1543] = "Columbia Business School";
      sa[1544] = "Columbia College";
      sa[1545] = "Columbia Hospital";
      sa[1546] = "Columbia University";
      sa[1547] = "Columbia University Medical Center";
      sa[1548] = "Columbus Community Hospital";
      sa[1549] = "Columbus Metropolitan Club";
      sa[1550] = "Columbus State Uni.";
      sa[1551] = "Comair Airlines";
      sa[1552] = "Comcast";
      sa[1553] = "Comcast ";
      sa[1554] = "Comcast Cable";
      sa[1555] = "Comcast Cable ";
      sa[1556] = "Comcast Corporation";
      sa[1557] = "Comcast cable";
      sa[1558] = "Comerica";
      sa[1559] = "Comerica Bank";
      sa[1560] = "Comm of Mass";
      sa[1561] = "Comm. of Mass.";
      sa[1562] = "Command Security Corporation";
      sa[1563] = "Commerce Guys";
      sa[1564] = "Commercial Law Group";
      sa[1565] = "Commercial Metals Co.";
      sa[1566] = "Commercial Real Estate Firm";
      sa[1567] = "Commerzbank and Jersey City Med Ctr";
      sa[1568] = "CommonHealth";
      sa[1569] = "Commonwealth of Kentucky";
      sa[1570] = "Commonwealth of Pennsylvania";
      sa[1571] = "Communications & Power Industries Inc.";
      sa[1572] = "Community Care Physicians";
      sa[1573] = "Community College of Philadelphia";
      sa[1574] = "Community Environmental Center";
      sa[1575] = "Community Health Systems";
      sa[1576] = "Community HomeOwnership Counseling Services";
      sa[1577] = "Community Loans of America";
      sa[1578] = "Community Portable Xray";
      sa[1579] = "Community Transit";
      sa[1580] = "Compass Group";
      sa[1581] = "Compassionate Care Hospice";
      sa[1582] = "Compassionate Hearts assisted Living";
      sa[1583] = "Compellent Technologies";
      sa[1584] = "Compleat Cuisine Catering";
      sa[1585] = "Compleat Restorations";
      sa[1586] = "Complete Discovery Source";
      sa[1587] = "Complete Food Service, Inc.";
      sa[1588] = "Complete HealthCare Resources, Inc.";
      sa[1589] = "Composite Fogings";
      sa[1590] = "Comprehensive Software Systems";
      sa[1591] = "CompuCom Systems";
      sa[1592] = "CompuCom Systems, Inc";
      sa[1593] = "Compucom";
      sa[1594] = "Compucom Systems, Inc.";
      sa[1595] = "Compusearch";
      sa[1596] = "Computer Aid, Inc.";
      sa[1597] = "Computer Associates";
      sa[1598] = "Computer Science Corp (CSC)";
      sa[1599] = "Computer Sciences Corporation";
      sa[1600] = "Computer Task Group";
      sa[1601] = "Computers Universal Inc";
      sa[1602] = "Comtech LLC";
      sa[1603] = "Comverge, Inc.";
      sa[1604] = "Con Edison";
      sa[1605] = "ConAgra";
      sa[1606] = "ConAgra Fooda";
      sa[1607] = "Condor Transport";
      sa[1608] = "Conexis";
      sa[1609] = "ConforMIS";
      sa[1610] = "Congregation B.J.B.E.";
      sa[1611] = "Connecticut Kidney Center";
      sa[1612] = "Connecticut Light & Power Co";
      sa[1613] = "Connection Inspection";
      sa[1614] = "Connell Resources Inc";
      sa[1615] = "Conner Strong";
      sa[1616] = "Connor Group";
      sa[1617] = "ConocoPhillips";
      sa[1618] = "Conocophillips";
      sa[1619] = "Conroy, Simberg, et al., P.A.";
      sa[1620] = "Consilium1";
      sa[1621] = "Consol Energy";
      sa[1622] = "Consolidated Container";
      sa[1623] = "Consolidated Health Care Services";
      sa[1624] = "Consonus healthcare";
      sa[1625] = "Consulate General of Italy";
      sa[1626] = "Consulate General of the Dominican Republic";
      sa[1627] = "Consumer Credit Counseling Service";
      sa[1628] = "Consumers Union";
      sa[1629] = "Continental Airlines";
      sa[1630] = "Continental Farms";
      sa[1631] = "Contra Costa County";
      sa[1632] = "Contracted Work";
      sa[1633] = "Controller Group";
      sa[1634] = "ConvaTec Inc.";
      sa[1635] = "Convergys";
      sa[1636] = "Conversion Systems";
      sa[1637] = "Convio Inc.";
      sa[1638] = "Conway Auto";
      sa[1639] = "Cook Childrens Medical Center";
      sa[1640] = "Cooks Cleaning";
      sa[1641] = "Cooper Square Realty  Inc";
      sa[1642] = "Cooper Tire and Rubber";
      sa[1643] = "Cooper University Hospital";
      sa[1644] = "Coppell ISD Mockingbird Elementary";
      sa[1645] = "Copper Queen Community Hospital";
      sa[1646] = "Corix Utilities";
      sa[1647] = "Cornell Graduate School";
      sa[1648] = "Cornell University";
      sa[1649] = "Cornerstone Advisors, Inc.";
      sa[1650] = "Cornerstone Physician Staffing";
      sa[1651] = "Corning Hospital";
      sa[1652] = "CorpBanca New York Branch";
      sa[1653] = "Corporate Care";
      sa[1654] = "Corporate Executive Board";
      sa[1655] = "Corporate Investors Mortgage Group";
      sa[1656] = "Corpus Christi Army Depot/ US DoD";
      sa[1657] = "Correctnet";
      sa[1658] = "Cors  and  Bassett  LLC";
      sa[1659] = "Cosmetic and Family Dentistry";
      sa[1660] = "Cosmo Films";
      sa[1661] = "Cosmopolitan of Las Vegas";
      sa[1662] = "Costco";
      sa[1663] = "Costco Wholesale";
      sa[1664] = "Costco Wholesale Corp.";
      sa[1665] = "Costco wholesale";
      sa[1666] = "Cougar Pallet Inc";
      sa[1667] = "Country Kids";
      sa[1668] = "Countryside Animal Hospital";
      sa[1669] = "County of Henrico";
      sa[1670] = "County of Marion";
      sa[1671] = "County of Orange";
      sa[1672] = "County of Riverside DPSS";
      sa[1673] = "County of San Bernardino";
      sa[1674] = "County of San Diego";
      sa[1675] = "County of Santa Barbara";
      sa[1676] = "County of Santa Cruz";
      sa[1677] = "Courthouse Convalescent Center";
      sa[1678] = "Covansys- a CSC Company";
      sa[1679] = "Covenant Aviation LLC";
      sa[1680] = "Covenant Health Systems";
      sa[1681] = "Covenant Presbyterian";
      sa[1682] = "Coventry Healtcare";
      sa[1683] = "Covidien";
      sa[1684] = "Covidien Pharmaceuticals";
      sa[1685] = "Covina-Valley Unified School District";
      sa[1686] = "Cox Communications";
      sa[1687] = "Coyote Point Systems";
      sa[1688] = "Cpi Security";
      sa[1689] = "Cracker Barrel";
      sa[1690] = "Craftsmen Industries";
      sa[1691] = "Crane America";
      sa[1692] = "Crate & Barrel";
      sa[1693] = "Crawford Memorial Hospital";
      sa[1694] = "Crayola";
      sa[1695] = "Cream Cheese Films  Inc";
      sa[1696] = "Creative Electronics";
      sa[1697] = "Creative Financial Group";
      sa[1698] = "Creative Financial Staffing";
      sa[1699] = "Creative Realities, Inc.";
      sa[1700] = "Creative Space";
      sa[1701] = "Credit Sesame";
      sa[1702] = "Credit Suisse";
      sa[1703] = "Cree  Inc";
      sa[1704] = "Crescendo Charter Schools";
      sa[1705] = "Crestview Rehab";
      sa[1706] = "Crestview Rehabilitation";
      sa[1707] = "Cricket Communicaitons";
      sa[1708] = "Crimzon Rose Internation";
      sa[1709] = "Crispers";
      sa[1710] = "Crittenton Women's Union";
      sa[1711] = "Croce & Company";
      sa[1712] = "Cross Country Staffing";
      sa[1713] = "Crossix Solutions";
      sa[1714] = "Crosstex Energy Services, L.P.";
      sa[1715] = "Crothall Services Group";
      sa[1716] = "Crowe Horwath, LLP";
      sa[1717] = "Crowley Trucking Inc";
      sa[1718] = "CrownPeak";
      sa[1719] = "Crowne Plaza";
      sa[1720] = "Crozer Chester Medical Center";
      sa[1721] = "Cruses-n-More";
      sa[1722] = "Cryomech";
      sa[1723] = "Cub Foods";
      sa[1724] = "Cullum Constructors";
      sa[1725] = "Cumberland Farms";
      sa[1726] = "Cumberland Reminder";
      sa[1727] = "Cummings Riter consultants";
      sa[1728] = "Cumulus Media";
      sa[1729] = "Cupertino Electric, Inc";
      sa[1730] = "Curtis-Rosenthal, Inc.";
      sa[1731] = "Curtiss Wright Controls";
      sa[1732] = "Cushing Schools/Tulsa World";
      sa[1733] = "Custard Insurance Adjusters";
      sa[1734] = "Custom Phone Inc";
      sa[1735] = "CustomeNews";
      sa[1736] = "Customs and Border Protection";
      sa[1737] = "Cutting Edge Little Caesars";
      sa[1738] = "Cvent Inc.";
      sa[1739] = "Cvs Pharmacy";
      sa[1740] = "Cyber International Technologies";
      sa[1741] = "Cyberpoint";
      sa[1742] = "Cycle Gear";
      sa[1743] = "Cypress woods";
      sa[1744] = "Cypress-Fairbanks Independent School District";
      sa[1745] = "Cytec industries Inc";
      sa[1746] = "D  and  L Taxi";
      sa[1747] = "D & K Supply Inc";
      sa[1748] = "D C Superior Court";
      sa[1749] = "D and J Gauging";
      sa[1750] = "D&D Welding Inc.";
      sa[1751] = "D.C. GOV.";
      sa[1752] = "D.C. SUPERIOR COURT";
      sa[1753] = "D/F Management";
      sa[1754] = "DA Heating";
      sa[1755] = "DAL TORO";
      sa[1756] = "DATAMETRIX, INC.";
      sa[1757] = "DAVID KLEINBERG DESIGN";
      sa[1758] = "DAYTON FREIGHT LINES";
      sa[1759] = "DC Superior Court";
      sa[1760] = "DCAA";
      sa[1761] = "DCH Auto Group";
      sa[1762] = "DCH MONTCLAIR ACURA";
      sa[1763] = "DEFENSE LANGUAGE INSTITUTE";
      sa[1764] = "DELAWARE VALLEY WHOLESALE";
      sa[1765] = "DELAWARE VALLEY WHOLESALE FLORIST";
      sa[1766] = "DENVER INTERNATIONAL AIRPORT";
      sa[1767] = "DEPARTMENT OF DEFENSE";
      sa[1768] = "DEPT OF VETERANS AFFAIRS";
      sa[1769] = "DEPT. OF HUMAN SERVICES";
      sa[1770] = "DFCU Financial";
      sa[1771] = "DG";
      sa[1772] = "DHS";
      sa[1773] = "DIGITAS";
      sa[1774] = "DIRECTV Group Inc.";
      sa[1775] = "DIRECTV, Inc";
      sa[1776] = "DISA CONUS";
      sa[1777] = "DISA Inc";
      sa[1778] = "DISYS";
      sa[1779] = "DJO";
      sa[1780] = "DKI";
      sa[1781] = "DLA";
      sa[1782] = "DLI";
      sa[1783] = "DLS Electronic Systems, Inc";
      sa[1784] = "DMMAC";
      sa[1785] = "DMS Marketing";
      sa[1786] = "DOD";
      sa[1787] = "DOD US ARMY civilian";
      sa[1788] = "DOD-US Army Corps of Engineers";
      sa[1789] = "DOUBLETREE HOTEL";
      sa[1790] = "DOW Networks";
      sa[1791] = "DP Products";
      sa[1792] = "DR Mcnatty and Associates";
      sa[1793] = "DR. CHARLES JACKSON";
      sa[1794] = "DRS-TCS";
      sa[1795] = "DSCC";
      sa[1796] = "DSH";
      sa[1797] = "DST";
      sa[1798] = "DTCC";
      sa[1799] = "DTI Diversitech";
      sa[1800] = "DXP ";
      sa[1801] = "DaVita";
      sa[1802] = "DaVita Rx";
      sa[1803] = "Dade County  Schools";
      sa[1804] = "Daimler Trucks North America";
      sa[1805] = "Dairy Best Inc";
      sa[1806] = "Dairy Council of CA";
      sa[1807] = "Dairy Farmers of America";
      sa[1808] = "Dakota Retail Technologies";
      sa[1809] = "Dakota Wholesale Bait";
      sa[1810] = "Daland Corp";
      sa[1811] = "Dan Ryan Builders";
      sa[1812] = "Danbury Hospital";
      sa[1813] = "Danex International, Inc.";
      sa[1814] = "Danfoss";
      sa[1815] = "Daniel Ripley Catering";
      sa[1816] = "Dannible & McKee, LLP";
      sa[1817] = "Dannon Yogurt Company";
      sa[1818] = "Dantons Restaurant";
      sa[1819] = "Danya International";
      sa[1820] = "Darden Restaurants";
      sa[1821] = "Darden Restaurants Inc. (Longhorn Steak)";
      sa[1822] = "Darin A. Harden  M.D. PLLC";
      sa[1823] = "Data Doctors";
      sa[1824] = "Data Specialties Inc.";
      sa[1825] = "Data Transfer Solutions, LLC";
      sa[1826] = "Datagram Inc";
      sa[1827] = "Datastrip";
      sa[1828] = "Datrose";
      sa[1829] = "Dave and Buster's";
      sa[1830] = "David Boland, Inc.";
      sa[1831] = "David Hayman Jewellers";
      sa[1832] = "David L. Gorman, P.A.";
      sa[1833] = "David Weekley Homes";
      sa[1834] = "Davidson Clock Company";
      sa[1835] = "Davis Polk & Wardwell LLP";
      sa[1836] = "Davis Selected Advisors";
      sa[1837] = "Davis Wright Tremaine LLp";
      sa[1838] = "Davis brothers plumbing";
      sa[1839] = "Dawson, Sodd, Ellis & Hodge, LLP";
      sa[1840] = "Dbl Labs";
      sa[1841] = "DeSoto School District";
      sa[1842] = "DeSoto School, Inc.";
      sa[1843] = "DeVry University";
      sa[1844] = "DeWitt Public Schools";
      sa[1845] = "Deal Trading";
      sa[1846] = "DealerSocket Inc";
      sa[1847] = "Dean Foods";
      sa[1848] = "Debix";
      sa[1849] = "Deborah Heart & Lung Center";
      sa[1850] = "Debs shops";
      sa[1851] = "Dechert LLP";
      sa[1852] = "Deep Creek Foodland";
      sa[1853] = "Deer Valley Resort";
      sa[1854] = "Deere & Company";
      sa[1855] = "Defense  and  Confirmation Project";
      sa[1856] = "Defense Associates Inc.";
      sa[1857] = "Defense Language Institute";
      sa[1858] = "Dekalb County Schools";
      sa[1859] = "Dekalb Medical Center";
      sa[1860] = "Del Friscos";
      sa[1861] = "Deliotte/ BearingPoint";
      sa[1862] = "Dell";
      sa[1863] = "Dell Financial Services LLC";
      sa[1864] = "Dell Services";
      sa[1865] = "Dell, Inc";
      sa[1866] = "Delmarva Teleplus Inc.";
      sa[1867] = "Deloitte";
      sa[1868] = "Deloitte Consulting LLC";
      sa[1869] = "Deloitte Consulting LLP";
      sa[1870] = "Deloitte Tax LLP";
      sa[1871] = "Deloitte and Touche";
      sa[1872] = "Delphia Consulting, LLC";
      sa[1873] = "Delray Medical Center";
      sa[1874] = "Delta Air Lines";
      sa[1875] = "Delta Airlines";
      sa[1876] = "Delta airlines";
      sa[1877] = "Demusz Mfg Inc.";
      sa[1878] = "Denali Gymnastics";
      sa[1879] = "Dendreon";
      sa[1880] = "Dennis Alleman DMD";
      sa[1881] = "Dental TLC";
      sa[1882] = "Dentaquest";
      sa[1883] = "Denton Auto Salvage";
      sa[1884] = "Denver Health";
      sa[1885] = "Denver Public School District";
      sa[1886] = "Deparment of Homeland Security";
      sa[1887] = "Department Of Health";
      sa[1888] = "Department Of Homeland Security";
      sa[1889] = "Department of Army";
      sa[1890] = "Department of Children and Families";
      sa[1891] = "Department of Corections";
      sa[1892] = "Department of Defense";
      sa[1893] = "Department of Defense - NAWCTSD";
      sa[1894] = "Department of Defense/US Navy";
      sa[1895] = "Department of Energy";
      sa[1896] = "Department of Homeland Security";
      sa[1897] = "Department of Homeland Security (DHS)";
      sa[1898] = "Department of Homeland Security-TSA";
      sa[1899] = "Department of Justice";
      sa[1900] = "Department of State";
      sa[1901] = "Department of State/USAID";
      sa[1902] = "Department of Veteran Affairs";
      sa[1903] = "Department of Veterans Affairs";
      sa[1904] = "Department of Veterans Affairs (VA)";
      sa[1905] = "Department of the Army";
      sa[1906] = "Department of the Navy";
      sa[1907] = "Dept Of Homeland Security";
      sa[1908] = "Dept Veteran Affairs";
      sa[1909] = "Dept of Army";
      sa[1910] = "Dept of Homeland Security";
      sa[1911] = "Dept of Navy, NBHC NAS Pensacola";
      sa[1912] = "Dept of Transportation";
      sa[1913] = "Dept of Treasury";
      sa[1914] = "Dept of Veterans Affairs";
      sa[1915] = "Dept of the Army";
      sa[1916] = "Dept. Of Rehabilitation & Corrections";
      sa[1917] = "Dept. of Homeland Security";
      sa[1918] = "Dept. of Housing & Urban Development";
      sa[1919] = "Dept. of Juvenile Justice";
      sa[1920] = "Dept. of Public Health - KY";
      sa[1921] = "Dept. of Veterans Affairs";
      sa[1922] = "Derby Dental Laboratory";
      sa[1923] = "Derby Dental laboratory";
      sa[1924] = "Derbyshire Machine and Tool Co";
      sa[1925] = "Derrels Mini Storage";
      sa[1926] = "Deseret Industries";
      sa[1927] = "Desert Radiologists";
      sa[1928] = "Design Kitchen";
      sa[1929] = "Design Lighting Group";
      sa[1930] = "DesignWrite";
      sa[1931] = "Destination Hotels and Resorts";
      sa[1932] = "Destineer Studios";
      sa[1933] = "Detroit Board of Education";
      sa[1934] = "Deutsche Bank";
      sa[1935] = "Deutsche Boerse";
      sa[1936] = "Development Design & Engineering INC";
      sa[1937] = "Devine Millimet  and  Branch";
      sa[1938] = "Devon Manor";
      sa[1939] = "Devry University";
      sa[1940] = "Dex One";
      sa[1941] = "Dexter and Chaney";
      sa[1942] = "Deyette McCloskey & Assoc";
      sa[1943] = "Diakon Wilderness Center";
      sa[1944] = "Diamond Detective Agency, Inc.";
      sa[1945] = "Diamondback Services, Inc";
      sa[1946] = "Diebold";
      sa[1947] = "Diebold, Inc.";
      sa[1948] = "Digital Monitoring Products";
      sa[1949] = "Digitas";
      sa[1950] = "Dillard's";
      sa[1951] = "Dillard's Inc.";
      sa[1952] = "Dillards";
      sa[1953] = "Dimensional Control Systems";
      sa[1954] = "Dimensional Fund Advisors";
      sa[1955] = "Dimensional Insight  Inc.";
      sa[1956] = "Diocese of Buffalo";
      sa[1957] = "Diopsys, Inc.";
      sa[1958] = "Direct Bill Services AIG";
      sa[1959] = "Direct Capital Corp.";
      sa[1960] = "Direct Energy";
      sa[1961] = "Direct Mail Source inc.";
      sa[1962] = "Dirtbusters";
      sa[1963] = "Disabled American Veterans";
      sa[1964] = "Discount Tire Co";
      sa[1965] = "Discovery Preschool and Childcare";
      sa[1966] = "Dish Network";
      sa[1967] = "Disney";
      sa[1968] = "Display Graphics LLC";
      sa[1969] = "District 300";
      sa[1970] = "Diversified Clinical Serivces";
      sa[1971] = "Diversified Tooling Innovations";
      sa[1972] = "Dividend Capital TRT";
      sa[1973] = "Division 9 Flooring";
      sa[1974] = "Dlubak Corporation";
      sa[1975] = "DoD Civil Service";
      sa[1976] = "DoD US Air Force";
      sa[1977] = "Docs On Demand Inc";
      sa[1978] = "Doctor M. Media, LLC";
      sa[1979] = "Doctor's Ambulance Service";
      sa[1980] = "Doctors for Emergency Services";
      sa[1981] = "DocuSign, Inc.";
      sa[1982] = "Dogpatch, LLC";
      sa[1983] = "Doherty  and  Associates";
      sa[1984] = "Dokken Engineering";
      sa[1985] = "Dolan & Associates";
      sa[1986] = "Dolby Laboratories Inc";
      sa[1987] = "Dollar Car Rental";
      sa[1988] = "Dollar General";
      sa[1989] = "Domenico Valentino ";
      sa[1990] = "Dominion Natural Gas";
      sa[1991] = "Dominion Youth Services";
      sa[1992] = "Dominos Pizza";
      sa[1993] = "Donells Candies";
      sa[1994] = "Donna Angotti MD";
      sa[1995] = "Donnely  Conroy and Gelhaar";
      sa[1996] = "Donovan Hatem LLP";
      sa[1997] = "Door Controls of Oklahoma";
      sa[1998] = "Door Pro America";
      sa[1999] = "Dootlitle's Woodfire";
      sa[2000] = "Doral Arrowwood";
      sa[2001] = "Dorchester County EMS";
      sa[2002] = "Dorchester Family YMCA";
      sa[2003] = "Dorchester House Health center";
      sa[2004] = "Dorchester county EMS";
      sa[2005] = "Dorsey and Whitney";
      sa[2006] = "Doster Construction";
      sa[2007] = "Dotmenu";
      sa[2008] = "Double D Family Sports Llc";
      sa[2009] = "Doublepark LLC";
      sa[2010] = "Doubletree Hotel";
      sa[2011] = "Doubletree by Hilton LAX";
      sa[2012] = "Doug Nylund Construction";
      sa[2013] = "Douglas S Mitchell DMD";
      sa[2014] = "Douglas School System";
      sa[2015] = "Dow Chemical";
      sa[2016] = "Dow Jones & Co";
      sa[2017] = "Downstate Medical Center";
      sa[2018] = "Dr Prashanthi Vadhi, DDS";
      sa[2019] = "Dr pasquale malpeso DMD";
      sa[2020] = "Dr. Bott LLC";
      sa[2021] = "Dr. Cecil eye care";
      sa[2022] = "Dr. Demartino";
      sa[2023] = "Dr. Dennis Gross Skincare";
      sa[2024] = "Dr. Farbenbloom";
      sa[2025] = "Dr. Hector M. Bush";
      sa[2026] = "Dr. Shane McDowell";
      sa[2027] = "Dr. Terry H. Hake, DDS";
      sa[2028] = "Dr.LeFelt";
      sa[2029] = "DraftFCB";
      sa[2030] = "Drew Ford Inc";
      sa[2031] = "Drexel University";
      sa[2032] = "Dreyers Grand Ice Cream";
      sa[2033] = "DriveCam";
      sa[2034] = "Drivelines Retail Merchandiser";
      sa[2035] = "Drug Enforcement Administration";
      sa[2036] = "Drumlummand Gold Corp";
      sa[2037] = "DuHadaway Tool & Die Shop";
      sa[2038] = "DuPont";
      sa[2039] = "Dublin parole office";
      sa[2040] = "Dubuis Hospital";
      sa[2041] = "Ductz of Greater Atlanta";
      sa[2042] = "Duda Farm Fresh Foods";
      sa[2043] = "Dugmore & Duncan";
      sa[2044] = "Duke Energy";
      sa[2045] = "Duke Energy Corp";
      sa[2046] = "Duke University Health Systems";
      sa[2047] = "Duke University Hospital";
      sa[2048] = "Dumas Independant School District";
      sa[2049] = "Dunkelberger Engineering and Testing  Inc.";
      sa[2050] = "Dunn Produce Inc.";
      sa[2051] = "Dupont";
      sa[2052] = "Duro Bag";
      sa[2053] = "Duval Multi-Residential Services Inc";
      sa[2054] = "Dynamic / NDL";
      sa[2055] = "Dynamic Digital Advertising";
      sa[2056] = "Dynamic Logic";
      sa[2057] = "Dynanet Corporation";
      sa[2058] = "Dystar LP";
      sa[2059] = "E & E Co. Ltd.";
      sa[2060] = "E & J Hauling";
      sa[2061] = "E! Network / NBC Universal";
      sa[2062] = "E&M";
      sa[2063] = "E-Power Inc";
      sa[2064] = "E-Technologies Group";
      sa[2065] = "E.E. Wine Inc";
      sa[2066] = "E.M.S. Technologies";
      sa[2067] = "E<0x92E4CE>_ Inc.";
      sa[2068] = "EAPC Wind Energy Services";
      sa[2069] = "EBSCO Publishing";
      sa[2070] = "ECI";
      sa[2071] = "ECSI, Inc";
      sa[2072] = "EDCO";
      sa[2073] = "EDISON CHOUEST OFFSHORE";
      sa[2074] = "EDT Instrumentation Co., Inc.";
      sa[2075] = "EEOC";
      sa[2076] = "EIMC";
      sa[2077] = "EL CAMINO TIRES";
      sa[2078] = "ELECTRIC BOAT";
      sa[2079] = "ELT Sourcing Company";
      sa[2080] = "EMC Corp";
      sa[2081] = "EMC Corporation";
      sa[2082] = "EMD Chemicals";
      sa[2083] = "EMSolutions, Inc";
      sa[2084] = "EMTC Quitman";
      sa[2085] = "EOG Resources";
      sa[2086] = "EOIR Technologies, Inc.";
      sa[2087] = "EPCO Inc";
      sa[2088] = "EPIC Aviation  LLC";
      sa[2089] = "EPIC Divers  and  Marine";
      sa[2090] = "EPL. Inc";
      sa[2091] = "ERPandERP Corp";
      sa[2092] = "ES Robbins";
      sa[2093] = "ESI North America";
      sa[2094] = "ESP, Inc.";
      sa[2095] = "ESRI, Inc.";
      sa[2096] = "ETMC Carthage";
      sa[2097] = "EURO LLOYD TRAVEL";
      sa[2098] = "EUROPEAN MOTORS, INC";
      sa[2099] = "EWS Enterprises llc";
      sa[2100] = "EXPRESSJET AIRLINES";
      sa[2101] = "EZ Prints Inc.";
      sa[2102] = "Eagle Creek Golf and Country Club";
      sa[2103] = "Eagle Investment Systems LLC";
      sa[2104] = "Eagle Materials Inc";
      sa[2105] = "Eagle Mountain-Saginaw ISD";
      sa[2106] = "Eagle Pass I S D";
      sa[2107] = "Eagle Precision Cast Parts";
      sa[2108] = "Ear Level Communication";
      sa[2109] = "Earlwood Care Center";
      sa[2110] = "East Alabama Medical Center";
      sa[2111] = "East Baton Rouge Parish Library";
      sa[2112] = "East Batton Rouge Parish Schools";
      sa[2113] = "East Houston Hospital";
      sa[2114] = "East Jersey State Prison";
      sa[2115] = "East Liverpool City Hospital";
      sa[2116] = "East Penn Manufacturing";
      sa[2117] = "East Side Clinical Lab";
      sa[2118] = "Eastern Bag And Paper";
      sa[2119] = "Eastern Bank";
      sa[2120] = "Eastern Vinyl & Liner, Inc.";
      sa[2121] = "Eastern Virginia Medical School";
      sa[2122] = "Eastern bank";
      sa[2123] = "Eastland Park Hotel";
      sa[2124] = "Eastside Dental";
      sa[2125] = "EatonGolden";
      sa[2126] = "Ebay";
      sa[2127] = "Ebsco Publishing";
      sa[2128] = "Echelon";
      sa[2129] = "Echo Hose Ambulance ";
      sa[2130] = "Eckerd Youth Alternatives";
      sa[2131] = "EcoLab";
      sa[2132] = "Ecolab";
      sa[2133] = "Ecology Associate Advocate";
      sa[2134] = "Econolite Control Products";
      sa[2135] = "Ed Rinke Chevrolet";
      sa[2136] = "Edge Initiatives-The Alternative Board";
      sa[2137] = "Edge Oil Fied Services";
      sa[2138] = "Edison Ventures";
      sa[2139] = "Edison early  learning center";
      sa[2140] = "Edmunds.com";
      sa[2141] = "Edmunds.com Inc";
      sa[2142] = "Education Management Corp";
      sa[2143] = "Education Management Corporation";
      sa[2144] = "Educational Testing Service";
      sa[2145] = "Edward Jones";
      sa[2146] = "Edward Jones ";
      sa[2147] = "Edwards AFB";
      sa[2148] = "Edwards Lifesciences";
      sa[2149] = "Effective Graphics";
      sa[2150] = "Eisenhower Medical Center";
      sa[2151] = "Ektron, Inc.";
      sa[2152] = "El Camino Hospital";
      sa[2153] = "El Paso Corporation";
      sa[2154] = "Elan Pharma via Bayside Solutions";
      sa[2155] = "Elcor Construction, Inc";
      sa[2156] = "Elden's Food fair";
      sa[2157] = "ElderHelp of San Diego";
      sa[2158] = "Electric Boat Corporation";
      sa[2159] = "Electrical Contractors";
      sa[2160] = "Electronic Arts";
      sa[2161] = "Elementum Inc";
      sa[2162] = "Elephant Bar Restaurant";
      sa[2163] = "Eli Lilly USA";
      sa[2164] = "Elite line Services";
      sa[2165] = "Elk Grove Citizen";
      sa[2166] = "Elk Grove School District";
      sa[2167] = "Elk Valley Rancheria";
      sa[2168] = "Elkhorn Electropolish";
      sa[2169] = "Elliot Hospital";
      sa[2170] = "Ellis Lawhorne";
      sa[2171] = "Elmhurst hospital center";
      sa[2172] = "Elmwood Fitness Center";
      sa[2173] = "Elwyn NC";
      sa[2174] = "EmblemHealth";
      sa[2175] = "Emerald Coast Aviation";
      sa[2176] = "Emerald Correctional Management";
      sa[2177] = "Emergency Ambulance Service";
      sa[2178] = "Emergency Medicine Associates";
      sa[2179] = "Emeritus Corp";
      sa[2180] = "Emerson";
      sa[2181] = "Emerson Climate Technology";
      sa[2182] = "Emerson Tools";
      sa[2183] = "Emich Volkswagen";
      sa[2184] = "Emkay Inc.";
      sa[2185] = "Emmanuel College";
      sa[2186] = "Emory Healthcare";
      sa[2187] = "Emory University Healthcare";
      sa[2188] = "Emory university";
      sa[2189] = "Empire Computer Services";
      sa[2190] = "Empire State Pride Agenda";
      sa[2191] = "Employers Claim Management";
      sa[2192] = "Employment Development Department";
      sa[2193] = "Emrace Home Loans";
      sa[2194] = "Emulex Corporation";
      sa[2195] = "En avant";
      sa[2196] = "Enbridge";
      sa[2197] = "Encore National Bank";
      sa[2198] = "Endeavors Technologies";
      sa[2199] = "Endeca Technologies";
      sa[2200] = "Energy Northwest";
      sa[2201] = "Energy Service Co.";
      sa[2202] = "Energy Solutions";
      sa[2203] = "Energy Transfer Partners";
      sa[2204] = "Enersys Inc";
      sa[2205] = "Engility";
      sa[2206] = "Engineering and Computer Simulations";
      sa[2207] = "England Logistics";
      sa[2208] = "English + Associates Architects, Inc.";
      sa[2209] = "Engman-Taylor.com";
      sa[2210] = "Ennis Knupp";
      sa[2211] = "Entenmann's Inc";
      sa[2212] = "Enterprise Holdings Inc.";
      sa[2213] = "Enterprise Rent a Car";
      sa[2214] = "Enterprise rent a car";
      sa[2215] = "Entertainment Cruises";
      sa[2216] = "Entire Real Estate Services";
      sa[2217] = "Environmental Operations, Inc.";
      sa[2218] = "Envoy Mortgage";
      sa[2219] = "Enzymatics";
      sa[2220] = "Epic";
      sa[2221] = "Epic Merchant";
      sa[2222] = "Epocrates";
      sa[2223] = "Epps aviation";
      sa[2224] = "Epsilon";
      sa[2225] = "Equant";
      sa[2226] = "EquiLend";
      sa[2227] = "Equilibrium IT Solutions, Inc.";
      sa[2228] = "Equity International Inc.";
      sa[2229] = "Equity One, Inc";
      sa[2230] = "Eric McGlothen LLC";
      sa[2231] = "Erickson Living";
      sa[2232] = "Erickson Living Management";
      sa[2233] = "Erickson-Hall Construction Co.";
      sa[2234] = "Ericsson";
      sa[2235] = "Ericsson Inc.";
      sa[2236] = "Erie 2 Chautauqua Cattaraugus BOCES";
      sa[2237] = "Ernst  and  Young";
      sa[2238] = "Ernst & Young";
      sa[2239] = "Ernst & Young LLP";
      sa[2240] = "Ernst and Young";
      sa[2241] = "Essex Valley School";
      sa[2242] = "Essintial Enterprise Solutions";
      sa[2243] = "Estes Express Lines";
      sa[2244] = "Esurance";
      sa[2245] = "Eternally Healthy LLC";
      sa[2246] = "Eureka Housing Authority";
      sa[2247] = "Euro International  Inc";
      sa[2248] = "Euro-American Tours";
      sa[2249] = "European Hotel";
      sa[2250] = "European Service at Home";
      sa[2251] = "Evangel";
      sa[2252] = "Event First Response";
      sa[2253] = "Everest College";
      sa[2254] = "Everest Entertainment";
      sa[2255] = "Everest National Insurance Company";
      sa[2256] = "Everest Re";
      sa[2257] = "Evergreen Gardens";
      sa[2258] = "Evergreen Packaging, Inc.";
      sa[2259] = "Evergreen shipping agency USA ";
      sa[2260] = "Evertech LLC";
      sa[2261] = "Evvia Ltd";
      sa[2262] = "Exact Software North America";
      sa[2263] = "Exactech, Inc.";
      sa[2264] = "Excalibur Data Recovery";
      sa[2265] = "Executive Search Assoc., Inc.";
      sa[2266] = "Exempla Health Care";
      sa[2267] = "Exhibit Group - Giltspur";
      sa[2268] = "Exide Technologies";
      sa[2269] = "Exova Inc.";
      sa[2270] = "Expedia";
      sa[2271] = "Experian";
      sa[2272] = "Experis";
      sa[2273] = "Expert Consultants Inc";
      sa[2274] = "Express Scripts Inc.";
      sa[2275] = "Express Scripts, Inc.";
      sa[2276] = "Expressjet Airlines";
      sa[2277] = "Extended Stay Hotels - Corporate";
      sa[2278] = "Extreme Networks";
      sa[2279] = "Exxon Mobil Corporation";
      sa[2280] = "ExxonMobil";
      sa[2281] = "ExxonMobil Corporation";
      sa[2282] = "Exxonmobil";
      sa[2283] = "EyeMasters";
      sa[2284] = "Eyebeam Atelier";
      sa[2285] = "Eyesfirst Vision Center";
      sa[2286] = "Ez Prints Inc";
      sa[2287] = "Eze Castle Software";
      sa[2288] = "Ezee car wash";
      sa[2289] = "F&C Truck Sales and Service";
      sa[2290] = "F&N MANAGEMENT CORP";
      sa[2291] = "F/V Bold Venture";
      sa[2292] = "FAA";
      sa[2293] = "FARMLAND FOOD";
      sa[2294] = "FASHION INSTITUTE OF DESIGN";
      sa[2295] = "FBI";
      sa[2296] = "FBi Constructtion";
      sa[2297] = "FC Background, LLC";
      sa[2298] = "FCCI Insurance Grou[";
      sa[2299] = "FCM Travel";
      sa[2300] = "FDA";
      sa[2301] = "FDIC";
      sa[2302] = "FDNY";
      sa[2303] = "FEDERAL BUREAU OF PRISONS";
      sa[2304] = "FEDERAL GOV'T --SSA";
      sa[2305] = "FEDERAL GOVERNMENT";
      sa[2306] = "FEDEX";
      sa[2307] = "FEGS Health and Human Services System";
      sa[2308] = "FEMA";
      sa[2309] = "FERGUSON ENTERPRISES";
      sa[2310] = "FFAE Architects";
      sa[2311] = "FIRST TRANSIT";
      sa[2312] = "FIS & Wells Fargo & PSI";
      sa[2313] = "FL Dept of Corrections";
      sa[2314] = "FL Smidth";
      sa[2315] = "FLORIDA DENTAL AND DENTURE CENTER";
      sa[2316] = "FMC Carswell";
      sa[2317] = "FMC Corp";
      sa[2318] = "FOFG";
      sa[2319] = "FORD CREDIT";
      sa[2320] = "FORT DUNCAN MEDICAL CENTER";
      sa[2321] = "FOUR OAKS BANK  and  TRUST COMPANY";
      sa[2322] = "FOX News Channel";
      sa[2323] = "FOXHALL INTERNISTS";
      sa[2324] = "FRBSF";
      sa[2325] = "FRC East";
      sa[2326] = "FRCS";
      sa[2327] = "FS Hawaii Salons, Inc";
      sa[2328] = "FTI";
      sa[2329] = "FUSD";
      sa[2330] = "FXCM";
      sa[2331] = "Faber Daeufer  and  Rosenberg";
      sa[2332] = "Fabric Showcase";
      sa[2333] = "Facebook";
      sa[2334] = "Factset Research Systems";
      sa[2335] = "Fairfax County Public Schools";
      sa[2336] = "Fairfax County Public Schools ";
      sa[2337] = "Fairfax County Sheriff's Office";
      sa[2338] = "Fairfax Food Service";
      sa[2339] = "Fairfax Hospital";
      sa[2340] = "Fairfield Manufacturing";
      sa[2341] = "Fairfield Public Schools";
      sa[2342] = "Fairfield Residential Company LLC";
      sa[2343] = "Fairfield Residential LLC";
      sa[2344] = "Fairleigh Dickinson University";
      sa[2345] = "Fairmont Hotel";
      sa[2346] = "Faith Technologies Inc";
      sa[2347] = "Falkner Winery";
      sa[2348] = "Falling Leaves Health";
      sa[2349] = "Family Club";
      sa[2350] = "Family Dental";
      sa[2351] = "Family Heritage Life";
      sa[2352] = "Family Services";
      sa[2353] = "Fannie Mae";
      sa[2354] = "Far Niente Winery Inc";
      sa[2355] = "Farm Credit of NM";
      sa[2356] = "Farmer brothers coffee";
      sa[2357] = "Farmers Insurance";
      sa[2358] = "Farmers Insurance Company";
      sa[2359] = "Fauquier County";
      sa[2360] = "Favour Moore & Wilhelmsen";
      sa[2361] = "Fayette County School District";
      sa[2362] = "Fed Ex Express";
      sa[2363] = "Fed Ex Ground";
      sa[2364] = "Fed Govt-Environmental Protection Agency";
      sa[2365] = "FedEx Ground";
      sa[2366] = "FedEx Ground Inc.,";
      sa[2367] = "FedEx Home Delivery";
      sa[2368] = "Federal Aviation Administration";
      sa[2369] = "Federal Aviation Administration (FAA)";
      sa[2370] = "Federal Bureau of Investigation";
      sa[2371] = "Federal Bureau of Investigation (FBI)";
      sa[2372] = "Federal Bureau of Prisons";
      sa[2373] = "Federal Emergency Management Agency";
      sa[2374] = "Federal Employee";
      sa[2375] = "Federal Government";
      sa[2376] = "Federal Highway Administration";
      sa[2377] = "Federal Home Loan Bank of Boston";
      sa[2378] = "Federal Home Loan Mortgage";
      sa[2379] = "Federal Judicial Center";
      sa[2380] = "Federal Reserve Bank";
      sa[2381] = "Federal Reserve Bank of Boston";
      sa[2382] = "Federal Reserve Bank of New York";
      sa[2383] = "Federal Reserve Bank of Philadelphia";
      sa[2384] = "Federal Reserve System";
      sa[2385] = "Fedex";
      sa[2386] = "Fedex Express";
      sa[2387] = "Fehr and Peers";
      sa[2388] = "Feld Entertainment";
      sa[2389] = "Felician College";
      sa[2390] = "Feliz & Associates Inc";
      sa[2391] = "Ferguson Enterprises";
      sa[2392] = "Fertility Centers Of IL";
      sa[2393] = "Festoon";
      sa[2394] = "Fidelity Investments";
      sa[2395] = "Fidelity Investments ";
      sa[2396] = "Fidelity National Financial";
      sa[2397] = "Fidelity National Management Services";
      sa[2398] = "Fidelity Technologies";
      sa[2399] = "Fidura & Associates, Inc.";
      sa[2400] = "Field and Goldberg, LLC";
      sa[2401] = "Fieldglass Inc";
      sa[2402] = "Fiesta Canning";
      sa[2403] = "Fifth Third Bank";
      sa[2404] = "Fifth-Third Bank";
      sa[2405] = "File Link Business Systems, inc.";
      sa[2406] = "Financial Dynamics";
      sa[2407] = "Financial Group";
      sa[2408] = "Financial Management Strategies";
      sa[2409] = "Financial Partners Credit Union";
      sa[2410] = "Financial Partners, Inc.";
      sa[2411] = "Financial Sources";
      sa[2412] = "Financial West Group";
      sa[2413] = "Fineline Carpentry, Inc.";
      sa[2414] = "Finley Hospital";
      sa[2415] = "Finnegan Henderson";
      sa[2416] = "Fire Department of the City of New York";
      sa[2417] = "Fire Design Specialties";
      sa[2418] = "Fire Protection Solutions, Inc.";
      sa[2419] = "Fire and Life Safety America";
      sa[2420] = "First Children";
      sa[2421] = "First Christian Church";
      sa[2422] = "First Citizens Bank and Trust Inc ";
      sa[2423] = "First Financial Bank";
      sa[2424] = "First Industrial Realty Trust, Inc.";
      sa[2425] = "First Marblehead Corporation";
      sa[2426] = "First Nat'l Bank of Williamson";
      sa[2427] = "First National Bank";
      sa[2428] = "First National Bank of Pueblo";
      sa[2429] = "First Republic Bank";
      sa[2430] = "First State Bank";
      sa[2431] = "First Student";
      sa[2432] = "First Trade Union Bank";
      sa[2433] = "First Transit";
      sa[2434] = "First Transit Inc";
      sa[2435] = "First Vehicle Services";
      sa[2436] = "First medical management";
      sa[2437] = "FirstEnergy";
      sa[2438] = "Fiserv";
      sa[2439] = "FishNet Security";
      sa[2440] = "Fisher Communications";
      sa[2441] = "Fisher Investments";
      sa[2442] = "Fisher Production";
      sa[2443] = "Fishermen's Hospital";
      sa[2444] = "Fitango, Inc.";
      sa[2445] = "Fitness Evolution";
      sa[2446] = "FitnessEm";
      sa[2447] = "Five Guys Enterprises";
      sa[2448] = "Flagstaff Unified School District";
      sa[2449] = "Flashback Tees";
      sa[2450] = "Flavors Eatery";
      sa[2451] = "Fleet Car Carriers";
      sa[2452] = "Fleming ton  Subaru";
      sa[2453] = "Fletcher's Plumbing & Contracting Inc.";
      sa[2454] = "Flex-n-gate";
      sa[2455] = "FlexDigital";
      sa[2456] = "Flexmaster USA";
      sa[2457] = "FlightSafety International";
      sa[2458] = "FlightSafety International - Berkshire Hathaway";
      sa[2459] = "Florence  and  Hutcheson Consulting Engineers";
      sa[2460] = "Florence Nursing and Rehabilitation Center";
      sa[2461] = "Florida Community Bank ";
      sa[2462] = "Florida Department of Citrus";
      sa[2463] = "Florida Highway Patrol";
      sa[2464] = "Florida Medical Clinic";
      sa[2465] = "Florida Power & Light Company";
      sa[2466] = "Florida Power and Light ";
      sa[2467] = "Florida Telco Credit Union";
      sa[2468] = "Flower Hospital";
      sa[2469] = "Flowerwood Nursery";
      sa[2470] = "Floyd County Board of Education";
      sa[2471] = "Fluent Energy Corporation";
      sa[2472] = "Fluke Networks ";
      sa[2473] = "Fluor Corporation";
      sa[2474] = "Flynn Legal Services";
      sa[2475] = "Focus On recovery-United, Inc.";
      sa[2476] = "Foley & Lardner LLP";
      sa[2477] = "Follett Higher Education Group";
      sa[2478] = "Fonality, Inc.";
      sa[2479] = "Food Lion, LLC ";
      sa[2480] = "Food Packaging Manufacture";
      sa[2481] = "Foodmaster Supermarkets  Inc.";
      sa[2482] = "Force Capital Management";
      sa[2483] = "Ford  Motor Co.";
      sa[2484] = "Foresight Intelligence";
      sa[2485] = "Forest Lake Area School";
      sa[2486] = "Forever Living Products";
      sa[2487] = "Formula 4 Media";
      sa[2488] = "Forsyth County Sheriff's Office";
      sa[2489] = "Forsyth County Sheriffs Office";
      sa[2490] = "Forsyth Mechanical";
      sa[2491] = "Fort Bend ISD";
      sa[2492] = "Fort Point Capital Partners";
      sa[2493] = "Fort Worth Tire & Service Inc.";
      sa[2494] = "Fortier Public Relations";
      sa[2495] = "Fortress Analytics, Inc.";
      sa[2496] = "Forward ";
      sa[2497] = "Foster- Miller a QinetiQ NA Company";
      sa[2498] = "Foundation Laboratory";
      sa[2499] = "Four Corners Tavern Group";
      sa[2500] = "Four Food Studio";
      sa[2501] = "Four Seasons Hotels";
      sa[2502] = "Four Seasons Hotels and Resorts";
      sa[2503] = "Fourth Wall Marketing";
      sa[2504] = "Fowler Financial Services";
      sa[2505] = "Fox Chevrolet";
      sa[2506] = "Fox News Channel";
      sa[2507] = "FoxFire Systems Group";
      sa[2508] = "Frameweld";
      sa[2509] = "Franchise Tax Board";
      sa[2510] = "Francis J. DeVito, P.A.";
      sa[2511] = "Franklin Educational Services";
      sa[2512] = "Franklin Templeton";
      sa[2513] = "Frasca International";
      sa[2514] = "Frederick's of Hollywood";
      sa[2515] = "Freedom Financial";
      sa[2516] = "Freelance Enterprises";
      sa[2517] = "Freeman";
      sa[2518] = "Freeman Audio Visual";
      sa[2519] = "Freeport McMoran Copper and Gold";
      sa[2520] = "Freescale Semiconductor";
      sa[2521] = "Fried Bros., Inc.";
      sa[2522] = "Frisco Independent School District";
      sa[2523] = "Frito Lay";
      sa[2524] = "Frito Lays";
      sa[2525] = "Frito- Lay Inc";
      sa[2526] = "Frito-Lay  Inc";
      sa[2527] = "Froedtert Hospital";
      sa[2528] = "Fronterra Integrated Geosciences";
      sa[2529] = "Frontier Central School District";
      sa[2530] = "Frontier Communications";
      sa[2531] = "Fross & Fross Financial,  LLC";
      sa[2532] = "Fry Hammond Barr";
      sa[2533] = "Frys Food and Drug";
      sa[2534] = "FujiFilm Dimatix";
      sa[2535] = "Fujisankei Communications International";
      sa[2536] = "Fujitsu America, Inc.";
      sa[2537] = "Fujitsu Consulting";
      sa[2538] = "Fulcrum Corporation";
      sa[2539] = "Fulton County Government";
      sa[2540] = "Fulton County Schools";
      sa[2541] = "FunGoPlay";
      sa[2542] = "Fund for the City of New York";
      sa[2543] = "Fundtech Corporation";
      sa[2544] = "Funyak Landscapes";
      sa[2545] = "Fusco";
      sa[2546] = "Fusion Consulting Group";
      sa[2547] = "Future Care Charles Village";
      sa[2548] = "G Ray Trucking";
      sa[2549] = "G. Edward Solutions at Microsoft";
      sa[2550] = "G.C. Broach";
      sa[2551] = "G.S Curran  and  Company  Ltd.";
      sa[2552] = "G2 Construction";
      sa[2553] = "G4S Secure Solutions";
      sa[2554] = "GA DEPT. OF TRANSPORTATION";
      sa[2555] = "GADSDEN REGIONAL MEDICAL CENTER";
      sa[2556] = "GANOWITZ WHITE & WEBER ATTORNEYS AT LAW";
      sa[2557] = "GAP";
      sa[2558] = "GATEWAY ENERGY CORP.";
      sa[2559] = "GBMC";
      sa[2560] = "GCI, Inc";
      sa[2561] = "GE";
      sa[2562] = "GE Capital";
      sa[2563] = "GE Intelligent Platforms";
      sa[2564] = "GE Transportation";
      sa[2565] = "GED Integrated solutions";
      sa[2566] = "GEICO";
      sa[2567] = "GEICO INSURANCE COMPANY";
      sa[2568] = "GESA";
      sa[2569] = "GF55 Architects";
      sa[2570] = "GFI Software";
      sa[2571] = "GGS Technical Publications";
      sa[2572] = "GH wireless";
      sa[2573] = "GISD";
      sa[2574] = "GL Industrial Services";
      sa[2575] = "GLASS & SHIECHEL CPA LLP";
      sa[2576] = "GM";
      sa[2577] = "GM Financial";
      sa[2578] = "GM retired / Novatron";
      sa[2579] = "GM-LGR";
      sa[2580] = "GMAC Financial Services";
      sa[2581] = "GMCF";
      sa[2582] = "GOOD, Inc";
      sa[2583] = "GREEN CHOICE LIVING";
      sa[2584] = "GREENSEID CATERING";
      sa[2585] = "GS Global Services Inc.";
      sa[2586] = "GSF Plastics Corp.";
      sa[2587] = "GSI Commerce Inc";
      sa[2588] = "GSR Holdings Inc";
      sa[2589] = "GT Electrical";
      sa[2590] = "GTA/Travel Bound";
      sa[2591] = "GUARANTY BANK";
      sa[2592] = "GW University";
      sa[2593] = "Ga Dept of Revenue";
      sa[2594] = "Ga. System Operations";
      sa[2595] = "Gabellini Sheppard";
      sa[2596] = "Gail. H. Goheen, P.C.";
      sa[2597] = "Galaxie Corporation";
      sa[2598] = "Galena Park ISD";
      sa[2599] = "Gallant & Wein";
      sa[2600] = "Gallery of Cakes";
      sa[2601] = "Gallup";
      sa[2602] = "Galpin Mazda ";
      sa[2603] = "Gannett";
      sa[2604] = "Gannett Co.";
      sa[2605] = "Gap Inc";
      sa[2606] = "Garden Grove First Pre-School";
      sa[2607] = "Gardner Pie Company";
      sa[2608] = "Garlock Sealing Technologies";
      sa[2609] = "Gartner";
      sa[2610] = "Gas Turbine Efficeincy";
      sa[2611] = "Gaston County Schools";
      sa[2612] = "Gastroenterology Consultants of Savannah";
      sa[2613] = "Gate 1 Travel LTD";
      sa[2614] = "Gaudenzia, Inc.";
      sa[2615] = "Geico";
      sa[2616] = "Geisinger Medical Center";
      sa[2617] = "Gelber Group";
      sa[2618] = "Geller & Company LLC";
      sa[2619] = "Gemm Communications";
      sa[2620] = "GenOn";
      sa[2621] = "Gene Bruno";
      sa[2622] = "General Cable";
      sa[2623] = "General Casualty Insurance";
      sa[2624] = "General Dynamics";
      sa[2625] = "General Dynamics C4 Systems";
      sa[2626] = "General Dynamics Electric Boat";
      sa[2627] = "General Electric";
      sa[2628] = "General Motors";
      sa[2629] = "General Motors Company";
      sa[2630] = "General Motors LLC";
      sa[2631] = "General Networks Corporation";
      sa[2632] = "General Pacific Building maintenance";
      sa[2633] = "General Services Administration";
      sa[2634] = "Genesis Medical Center";
      sa[2635] = "Genesys Telecommunications Laboratories";
      sa[2636] = "Genocea Biosciences";
      sa[2637] = "Genuine Parts";
      sa[2638] = "Genworth Financial";
      sa[2639] = "Genzyme Genetics";
      sa[2640] = "Geoff McDonald & Associates";
      sa[2641] = "George Mason University";
      sa[2642] = "Georgia Air National Guard";
      sa[2643] = "Georgia Army National Guard";
      sa[2644] = "Georgia Dept. of Education";
      sa[2645] = "Georgia Institue of Technology";
      sa[2646] = "Georgia Pacific";
      sa[2647] = "Georgia Public Service Commission";
      sa[2648] = "Geosyntec Consultants";
      sa[2649] = "Geotechnical Testing Services";
      sa[2650] = "Gergen, Gergen & Pretto, S.C.";
      sa[2651] = "Germfree Laboratories";
      sa[2652] = "Germfree Laboratories, Inc.";
      sa[2653] = "Gessler Clinic";
      sa[2654] = "Get Fit , Feel Fine";
      sa[2655] = "Get Fresh Sales, Inc";
      sa[2656] = "Getty Images";
      sa[2657] = "Gfi group";
      sa[2658] = "Ghosh Engineers, Inc.";
      sa[2659] = "Giant of Maryland";
      sa[2660] = "Gibson Dunn";
      sa[2661] = "Giddins Claman LLP";
      sa[2662] = "Gigi's Disney Chateau";
      sa[2663] = "Gila Regional Medical Center";
      sa[2664] = "Gilbert Express";
      sa[2665] = "Gilchrist County Property Appraiser";
      sa[2666] = "Gildan";
      sa[2667] = "Gilman City R-IV School District";
      sa[2668] = "Girl Scouts of Greater Atlanta";
      sa[2669] = "Girl Scouts of Northern California";
      sa[2670] = "Giveo";
      sa[2671] = "Gladwyne Pharmacy";
      sa[2672] = "GlaxoSmithKline";
      sa[2673] = "Gleason Works";
      sa[2674] = "Glen Gate Company";
      sa[2675] = "Global Credit Services";
      sa[2676] = "Global Crossing";
      sa[2677] = "Global Literary Management";
      sa[2678] = "Global Mortgage";
      sa[2679] = "Global Silicon Electronics Inc";
      sa[2680] = "Global Spectrum";
      sa[2681] = "Global Textiles Alliance,Inc";
      sa[2682] = "Global Water";
      sa[2683] = "Gloria Nilson Realtors";
      sa[2684] = "Gn Resound";
      sa[2685] = "GoDaddy.com";
      sa[2686] = "Goffstein  and  Associates";
      sa[2687] = "Gold & Silver Reserve";
      sa[2688] = "Gold coast hotel and casino";
      sa[2689] = "Golden 1 Credit Union";
      sa[2690] = "Goldman Sachs";
      sa[2691] = "Goldman Sachs Group";
      sa[2692] = "Golds Gym";
      sa[2693] = "Good Food Inc.";
      sa[2694] = "Good News Church Inc.";
      sa[2695] = "Good Night Pediatrics";
      sa[2696] = "Good Samaritan Care";
      sa[2697] = "Good Samaritan Hospital";
      sa[2698] = "Good Zone Auto";
      sa[2699] = "GoodWill Industries";
      sa[2700] = "Goodby, Silverstein and Partners";
      sa[2701] = "Goodrich Corporation";
      sa[2702] = "Goodrich ISR";
      sa[2703] = "Goodroe HealthCare Solutions, VHA Inc.";
      sa[2704] = "Goodwill industries";
      sa[2705] = "Goody Clancy";
      sa[2706] = "Goodyear Tire";
      sa[2707] = "Goodyear Tire & Rubber";
      sa[2708] = "Goodyear Tire& Rubber Co";
      sa[2709] = "Google";
      sa[2710] = "Google Inc.";
      sa[2711] = "Gordon T. Nicol  P.A-Your jacksonville lawyer";
      sa[2712] = "GosY and Associates";
      sa[2713] = "Gouvis Engineering";
      sa[2714] = "Government";
      sa[2715] = "Government of the District of Columbia";
      sa[2716] = "GovernmentJobs.com";
      sa[2717] = "Graham Packagaing Company";
      sa[2718] = "Graham Packaging";
      sa[2719] = "Grainger Industrial Supply";
      sa[2720] = "Grainger, Inc.";
      sa[2721] = "Granbury Excavating";
      sa[2722] = "Grand Prairie ISD";
      sa[2723] = "Grand Rapids Building Service";
      sa[2724] = "Grand Street Settlement";
      sa[2725] = "Grande Ronde Hospital";
      sa[2726] = "Grandview Marketing";
      sa[2727] = "Granite State Independant Living";
      sa[2728] = "Granowitz White & Weber Attorneys at Law";
      sa[2729] = "Grant County Corrections";
      sa[2730] = "Grant Thornton";
      sa[2731] = "Grant Thornton LLP";
      sa[2732] = "Grassy Plain Service Center, Inc";
      sa[2733] = "Gravitate Design Studio";
      sa[2734] = "Grayline of Seattle";
      sa[2735] = "Great American Insurance Co";
      sa[2736] = "Great Bridge Baptist Church ";
      sa[2737] = "Great Hearts Academies";
      sa[2738] = "Great Northern Products";
      sa[2739] = "Great Southern Bank";
      sa[2740] = "Greater Cleveland Partnership";
      sa[2741] = "Greatwide Logistics";
      sa[2742] = "Greatwide logistics Services";
      sa[2743] = "Greek America Foundation";
      sa[2744] = "Green Apple Books";
      sa[2745] = "Green For All";
      sa[2746] = "Green Mountain Coffee Roasters";
      sa[2747] = "Green River Capital";
      sa[2748] = "GreenPath";
      sa[2749] = "Greenberg Grant & Richards";
      sa[2750] = "Greene & Associates Talent Agency ";
      sa[2751] = "Greenfield Savings Bank";
      sa[2752] = "Greenfield Union School District";
      sa[2753] = "Greenfield industries";
      sa[2754] = "Greenhorse, Inc.";
      sa[2755] = "Greenleaf Ventures, Inc";
      sa[2756] = "Greenpath Debt Solutions";
      sa[2757] = "Greens Restaurant";
      sa[2758] = "Greenville Hospital System";
      sa[2759] = "Greenwich Hospital";
      sa[2760] = "Greenwich Public Schools";
      sa[2761] = "Greg Norman's Austalian Grille";
      sa[2762] = "Gregory Sukornyk";
      sa[2763] = "Gregs collision center";
      sa[2764] = "Greif LLC";
      sa[2765] = "Greiner Buick GMC";
      sa[2766] = "Grenzebach Glier and Associates";
      sa[2767] = "Griffin Bookshop and Coffee Bar";
      sa[2768] = "Grimshaw Architects";
      sa[2769] = "Grippo & Elden";
      sa[2770] = "Groovemasters";
      sa[2771] = "Grossmont Union High School District";
      sa[2772] = "Groupee Inc";
      sa[2773] = "Groupon, Inc";
      sa[2774] = "Grove Networks, Inc.";
      sa[2775] = "Grub & Ellis Management Services";
      sa[2776] = "Grubb and Ellis Commercial Real Estate";
      sa[2777] = "Guardian Life Insurance Company";
      sa[2778] = "Gugino & Mortimer, PLC";
      sa[2779] = "Guidant Group, Inc.";
      sa[2780] = "Guild Mortgage";
      sa[2781] = "Guilford County Schools";
      sa[2782] = "Guitar Center";
      sa[2783] = "Gulf Marine Fabricators";
      sa[2784] = "Gulf States Toyota";
      sa[2785] = "Gulfstream Aerospace";
      sa[2786] = "Gulfstream aerospace";
      sa[2787] = "Gwinnett County Government";
      sa[2788] = "Gymnastic Aof Boston";
      sa[2789] = "H WEISS ";
      sa[2790] = "H&H Agency, Inc.";
      sa[2791] = "H&T Seafood Inc,";
      sa[2792] = "H-S-P";
      sa[2793] = "H.O.P.E. Farm";
      sa[2794] = "H2E INC.";
      sa[2795] = "H4B Chelsea";
      sa[2796] = "HAGYARD PHARMACY";
      sa[2797] = "HB";
      sa[2798] = "HBO, Home Box Office";
      sa[2799] = "HCA  Medical Center";
      sa[2800] = "HCA Midwest Health System";
      sa[2801] = "HCA/Brandon Regional Hospital";
      sa[2802] = "HCG Medical";
      sa[2803] = "HCR Manorcare";
      sa[2804] = "HCR- Manorcare";
      sa[2805] = "HCS Electrical";
      sa[2806] = "HD Segur";
      sa[2807] = "HDR Engineering  Inc";
      sa[2808] = "HEB";
      sa[2809] = "HEB IND. SCHOOL DISTRICT";
      sa[2810] = "HERMAN HEALTHCARE CENTER";
      sa[2811] = "HERTZ EQUIPMENT RENTAL";
      sa[2812] = "HFOTCO";
      sa[2813] = "HIP Financial, LLC";
      sa[2814] = "HITACHI CONSULTING";
      sa[2815] = "HMC";
      sa[2816] = "HME Construction Inc";
      sa[2817] = "HMFP at BIDMC";
      sa[2818] = "HMG";
      sa[2819] = "HMMY Property Management Corp.";
      sa[2820] = "HNS Management/CT Transit";
      sa[2821] = "HNTB Corporation";
      sa[2822] = "HOLLINGSWORTH LOGISTICS";
      sa[2823] = "HOLLY HUNT Enterprises, Inc.";
      sa[2824] = "HOME DEPOT";
      sa[2825] = "HOMES Inc.";
      sa[2826] = "HONDA MANUFACTURING";
      sa[2827] = "HP";
      sa[2828] = "HP Enterprise Services";
      sa[2829] = "HP Hood";
      sa[2830] = "HP/EDS";
      sa[2831] = "HR Solutions Inc.";
      sa[2832] = "HRC Partners LLC";
      sa[2833] = "HRS Clothing";
      sa[2834] = "HSBC";
      sa[2835] = "HSBC Arena";
      sa[2836] = "HSBC USA";
      sa[2837] = "HUB International Insurance Services";
      sa[2838] = "HUD";
      sa[2839] = "HYATT REGENCY IRVINE";
      sa[2840] = "HYDRAFLOW";
      sa[2841] = "Hackettstown Regional Medical Center";
      sa[2842] = "Hadlock Law Office";
      sa[2843] = "Hagerman & Company";
      sa[2844] = "Hair One";
      sa[2845] = "Halliburton";
      sa[2846] = "Halliburton Energy Services";
      sa[2847] = "Hallmark";
      sa[2848] = "Hallmark Data Systems";
      sa[2849] = "Hamilton Park Health Care";
      sa[2850] = "Hamilton Sundstrand";
      sa[2851] = "Hamilton and Company";
      sa[2852] = "Hammmersmith Builders";
      sa[2853] = "Hammond Associates";
      sa[2854] = "Hampton Inn  and  Suites";
      sa[2855] = "Hampton Lumber";
      sa[2856] = "Hampton VAMC";
      sa[2857] = "Hancock Bank & Trust";
      sa[2858] = "Hancock County Schools";
      sa[2859] = "Hand Surgery & Rehabilitation Center";
      sa[2860] = "Handy Hardware Wholesale Inc.";
      sa[2861] = "Hanger P&O";
      sa[2862] = "Hanley Wood";
      sa[2863] = "Hanna  Campbell  and  Powell  LLP";
      sa[2864] = "Hannaford Bros. Supermarket";
      sa[2865] = "Hanover Dental Lab";
      sa[2866] = "Hans Wilson & Associates";
      sa[2867] = "Hansgrohe";
      sa[2868] = "Hapa Sushi ";
      sa[2869] = "Harbor Freight Tools";
      sa[2870] = "Harbor-UCLA Medical Center";
      sa[2871] = "Harborside Nursing and Rehab Center";
      sa[2872] = "Harborview Medical Center, Seattle, WA";
      sa[2873] = "Harbour Club";
      sa[2874] = "Hard Rock Hotel and Casino Tampa";
      sa[2875] = "Harding University";
      sa[2876] = "Harford County EMS";
      sa[2877] = "Harker Middle School";
      sa[2878] = "Harlan";
      sa[2879] = "Harland Clarke";
      sa[2880] = "Harland Fincancial Solutions";
      sa[2881] = "Harmon Law Offices";
      sa[2882] = "Harmony Science Academy";
      sa[2883] = "Harper Construction Co., Inc.";
      sa[2884] = "Harper's Restaurant";
      sa[2885] = "Harrahs Entertainment";
      sa[2886] = "Harris Lighting";
      sa[2887] = "Harris RF Communications";
      sa[2888] = "Harrison Twp School District";
      sa[2889] = "Hart  and  Cooley";
      sa[2890] = "Harte Hanks";
      sa[2891] = "Hartford Board of Education";
      sa[2892] = "Hartz Mountain Corportaion";
      sa[2893] = "Harvard University";
      sa[2894] = "Harvard Vanguard Medical Associates";
      sa[2895] = "Hastings Entertainment";
      sa[2896] = "Hathaway Dinwiddie Construction Co";
      sa[2897] = "Hatteras";
      sa[2898] = "Havertys";
      sa[2899] = "Havertys Furniture";
      sa[2900] = "Havertys Fyrniture";
      sa[2901] = "Hawk Inc";
      sa[2902] = "Hawkeye";
      sa[2903] = "Hawkeye Foodservice";
      sa[2904] = "Hawthorn Bank";
      sa[2905] = "Hawthorn woods police department";
      sa[2906] = "Hawthorne Cedar Knolls";
      sa[2907] = "Hayes Green Beach Memorial Hospital";
      sa[2908] = "Hayes chrysler";
      sa[2909] = "Head Start Telecom";
      sa[2910] = "Headsets.com";
      sa[2911] = "Headstrong Services LLC";
      sa[2912] = "Heald College";
      sa[2913] = "Health Financial Services";
      sa[2914] = "Health First Inc.";
      sa[2915] = "Health Plan of Nevada";
      sa[2916] = "Health Science Associates";
      sa[2917] = "Health Solutions Services, Inc.";
      sa[2918] = "Health and Human Services Commission";
      sa[2919] = "HealthCare Services Group";
      sa[2920] = "HealthPartners";
      sa[2921] = "HealthSource";
      sa[2922] = "HealthSource of Bethlehem";
      sa[2923] = "HealthSpring of AL";
      sa[2924] = "Healthcare Partners";
      sa[2925] = "Healthcare Resource Group";
      sa[2926] = "Healthcare Staffing, Inc.";
      sa[2927] = "Hearst Magazines";
      sa[2928] = "Heartland Express of Iowa";
      sa[2929] = "Heath Tecna";
      sa[2930] = "Heathesystems";
      sa[2931] = "Heaven Sent Lawn Maintenance Inc.";
      sa[2932] = "Hedrick Brothers Construction";
      sa[2933] = "Henderson Insurance Agency";
      sa[2934] = "Henkel Corp";
      sa[2935] = "Hennepin County";
      sa[2936] = "Hennes & Mauritz";
      sa[2937] = "Hennes and Mauritz";
      sa[2938] = "Hennessey Public Schools";
      sa[2939] = "Henry County School District";
      sa[2940] = "Henry Schein Dental";
      sa[2941] = "Henry Street Settlement";
      sa[2942] = "Hensel Phelps Construction";
      sa[2943] = "Hensel Phelps Construction Co.";
      sa[2944] = "Henzel & Associates Inc  ";
      sa[2945] = "Herald Printing";
      sa[2946] = "Herb's Pool Service Inc";
      sa[2947] = "Herbalife International";
      sa[2948] = "Herban Essentials";
      sa[2949] = "Hercules offshore";
      sa[2950] = "Herdman, Summers, and George, LLP";
      sa[2951] = "Here For You LLC";
      sa[2952] = "Heritage Environmental Services";
      sa[2953] = "Heritage Healthcare at High Point";
      sa[2954] = "Heritage Mint, Ltd.";
      sa[2955] = "Heritage Pest Elimination";
      sa[2956] = "Herman Cook Volkswagen";
      sa[2957] = "Hermosa Beach City Schools";
      sa[2958] = "Hershey Entertainment & Resorts";
      sa[2959] = "Hershey's";
      sa[2960] = "Herson's Kia";
      sa[2961] = "Hertz";
      sa[2962] = "Hertz Auto";
      sa[2963] = "Hertz corporation";
      sa[2964] = "Hertz rent a car";
      sa[2965] = "Hewins Financial Advisors";
      sa[2966] = "Hewitt Associates";
      sa[2967] = "Hewitt Energy Group";
      sa[2968] = "Hewlett Foundation";
      sa[2969] = "Hewlett Packard";
      sa[2970] = "Hewlett Packard Company";
      sa[2971] = "Hewlett-Packard";
      sa[2972] = "High Mountain Taxi";
      sa[2973] = "High Plains Pizza Inc";
      sa[2974] = "Highland Al-Hujaz Company";
      sa[2975] = "Highland Theatres";
      sa[2976] = "Highlands Greenhouses";
      sa[2977] = "Highline Imports LLC";
      sa[2978] = "Highway Supply";
      sa[2979] = "Hill Country Community Clinic";
      sa[2980] = "Hill Rom";
      sa[2981] = "Hiller Systems, Inc.";
      sa[2982] = "Hillsborough Community College";
      sa[2983] = "Hillsborough County School District";
      sa[2984] = "Hillsborough County Sheriff's Office";
      sa[2985] = "Hillsides Home for Children";
      sa[2986] = "Hilton Worldwide";
      sa[2987] = "Hinshaw  and  Culbertson";
      sa[2988] = "Hinshaw & Culbertson";
      sa[2989] = "Hire Counsel";
      sa[2990] = "HireRight  Inc.";
      sa[2991] = "Hitachi";
      sa[2992] = "Hitachi Medical Systems";
      sa[2993] = "Hiwin Corporation";
      sa[2994] = "Ho-chunk casino";
      sa[2995] = "Hoag Hospital";
      sa[2996] = "Hobart";
      sa[2997] = "Hoffmann Brothers";
      sa[2998] = "Hogin Machine Inc.";
      sa[2999] = "Holcim US, Inc.";
    }
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_7_1 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[3000] = "Holiday Retirement";
      sa[3001] = "Holland & Knight";
      sa[3002] = "Holland Motor Freight";
      sa[3003] = "Holland Patent Central School";
      sa[3004] = "Hollister School District";
      sa[3005] = "Holyoke Credit Union";
      sa[3006] = "Home Box Office";
      sa[3007] = "Home Care Matters";
      sa[3008] = "Home Decorators Collection";
      sa[3009] = "Home Depot";
      sa[3010] = "Home Goods";
      sa[3011] = "Home State Mortgage Group, Inc.";
      sa[3012] = "Home and Community Options, Inc.";
      sa[3013] = "HomeProHub, LLC";
      sa[3014] = "Homegoods";
      sa[3015] = "Homeland Secure IT";
      sa[3016] = "Homemaker Service of the Metro Area, Inc";
      sa[3017] = "Homestar Remodeling";
      sa[3018] = "Hometown Bank";
      sa[3019] = "Homeworks Tri-County Electric";
      sa[3020] = "Honda Manufacturing of Alabama, LLC";
      sa[3021] = "Honda Performance Development";
      sa[3022] = "Honda Transmission";
      sa[3023] = "Honda of Toms River";
      sa[3024] = "Honeywell";
      sa[3025] = "Honeywell FM and T";
      sa[3026] = "Honeywell Inc";
      sa[3027] = "Honeywell Intl. Inc.";
      sa[3028] = "Honstein Oil Co";
      sa[3029] = "Hood Medical Group";
      sa[3030] = "Hope Lake Lodge";
      sa[3031] = "Hopkins Distribution co.";
      sa[3032] = "Horizon House";
      sa[3033] = "Horizons Conference Center";
      sa[3034] = "Horizons for Homeless Children";
      sa[3035] = "Horizontal Well Drillers";
      sa[3036] = "Hormel Foods Corporation";
      sa[3037] = "Horseheads Central School District";
      sa[3038] = "Hospice of the Sandias";
      sa[3039] = "Hospira Worldwide";
      sa[3040] = "Hospira worldwide";
      sa[3041] = "Hospital Corporation of America";
      sa[3042] = "Hospital For Special Surgery";
      sa[3043] = "Hospital Physician Partners";
      sa[3044] = "Hospital of Joing Diseases";
      sa[3045] = "Hospitality Comp";
      sa[3046] = "Hostess Brands";
      sa[3047] = "Hostway Corporation";
      sa[3048] = "Hot Topic";
      sa[3049] = "Hot Topic Inc";
      sa[3050] = "Hotel Le Bleu";
      sa[3051] = "Hotel Max";
      sa[3052] = "Houghton Mifflin Harcourt";
      sa[3053] = "Houlihans";
      sa[3054] = "House Of Blues- Livenation";
      sa[3055] = "Housing Authority of CityNew Britain";
      sa[3056] = "Housing Authority of the City of Tulsa";
      sa[3057] = "Housing authority el paso texas";
      sa[3058] = "Houson Grinding & Manf. Inc";
      sa[3059] = "Houston Airport Systems";
      sa[3060] = "Houston Electric";
      sa[3061] = "Houston Healthcare";
      sa[3062] = "Houston ISD";
      sa[3063] = "Howard/Stein-Hudson Associates, Inc.";
      sa[3064] = "Hoya Vision Care";
      sa[3065] = "Hudson Apartments";
      sa[3066] = "Hudson Hotel";
      sa[3067] = "Hudson Legal";
      sa[3068] = "Hughes Consulting  Inc";
      sa[3069] = "Hulbert Public Schools";
      sa[3070] = "Hulsey Financial Services";
      sa[3071] = "Human Services Center";
      sa[3072] = "Human Skills & Resources";
      sa[3073] = "Humana";
      sa[3074] = "Humand Resources Command";
      sa[3075] = "Hume Lake Christian Camps, Inc.";
      sa[3076] = "Hunt Ford Chrysler";
      sa[3077] = "Hunter Douglas";
      sa[3078] = "Hunter Industries";
      sa[3079] = "Huntington Bank";
      sa[3080] = "Huntington Ingalls Industries";
      sa[3081] = "Huntington Memorial Hospital";
      sa[3082] = "Hunton & Williams LLP";
      sa[3083] = "Huron Consulting Group";
      sa[3084] = "Hurricane Engineering";
      sa[3085] = "Hussmann-Ingersoll rand";
      sa[3086] = "HyTrust Inc.";
      sa[3087] = "Hyatt";
      sa[3088] = "Hyatt Regency New Brunswick";
      sa[3089] = "Hyatt Regency Newport Beach";
      sa[3090] = "Hyatt Residential Group";
      sa[3091] = "Hyatt at Olive 8";
      sa[3092] = "Hybrid Promotions";
      sa[3093] = "Hyde Tools";
      sa[3094] = "Hyperstreet.com";
      sa[3095] = "Hys Steak House";
      sa[3096] = "Hyundai Motor America";
      sa[3097] = "Hyundai of New Port Richey";
      sa[3098] = "I Care Body Works";
      sa[3099] = "I Services";
      sa[3100] = "I-Deal";
      sa[3101] = "I-sys Corporation";
      sa[3102] = "IAMAW DL65";
      sa[3103] = "IATSE Local 720";
      sa[3104] = "IBC Bank";
      sa[3105] = "IBEW Local #3";
      sa[3106] = "IBEW Local 134";
      sa[3107] = "IBEW local 176 Eletrician";
      sa[3108] = "IBEW local 236";
      sa[3109] = "IBM";
      sa[3110] = "IBM Corp";
      sa[3111] = "ICF International";
      sa[3112] = "ICOM";
      sa[3113] = "ICON Clinical Research";
      sa[3114] = "ICVM Group";
      sa[3115] = "IData Incorporated";
      sa[3116] = "IFC";
      sa[3117] = "IHOP";
      sa[3118] = "IIFData Solutions";
      sa[3119] = "IKON ";
      sa[3120] = "ILLINOIS SEC OF STATE";
      sa[3121] = "IMA of Colorado";
      sa[3122] = "IMG";
      sa[3123] = "IMS";
      sa[3124] = "IMS Gear";
      sa[3125] = "IMS Health";
      sa[3126] = "IMS Pet";
      sa[3127] = "INC CORPORATE SERVICE";
      sa[3128] = "INC Research";
      sa[3129] = "ING";
      sa[3130] = "ING DIRECT";
      sa[3131] = "INROADS, Inc";
      sa[3132] = "INTERNAL RE3VENUE SERVICE";
      sa[3133] = "INTERNAL REVENUE SERVICE";
      sa[3134] = "INTERNATIONAL FOOD SUPPLY";
      sa[3135] = "INTERNATIONAL FREIGHT SERVICES";
      sa[3136] = "INTERTEK";
      sa[3137] = "IP";
      sa[3138] = "IPC";
      sa[3139] = "IPHFHA";
      sa[3140] = "IQNavigator";
      sa[3141] = "IR Corp.";
      sa[3142] = "IRI";
      sa[3143] = "IRONWORKERS LOCAL UNION 79";
      sa[3144] = "IRS";
      sa[3145] = "ISAC";
      sa[3146] = "ISRAELOFF, TRATTNER & CO., PC";
      sa[3147] = "IT By Design, INC";
      sa[3148] = "ITCHoldings";
      sa[3149] = "ITO VIDEO";
      sa[3150] = "ITS, llc.";
      sa[3151] = "ITT Corporation";
      sa[3152] = "ITT INDUSTRIES";
      sa[3153] = "ITT Technical Institute";
      sa[3154] = "ITT systems";
      sa[3155] = "Iandoli  and  Desai  P.C.";
      sa[3156] = "Ice Services, Inc.";
      sa[3157] = "Identity theft 911";
      sa[3158] = "IdentityStream";
      sa[3159] = "Ideology Product Development";
      sa[3160] = "IgGAmerica";
      sa[3161] = "Ikon Global Markets";
      sa[3162] = "Ikon Office Solutions, Inc";
      sa[3163] = "Ilios Partners";
      sa[3164] = "Illinois Central School Bus";
      sa[3165] = "Imagine One";
      sa[3166] = "Imaginetics inc";
      sa[3167] = "Imhoff Eye Center";
      sa[3168] = "Immigration & Customs Enforcement";
      sa[3169] = "Impact Technologies, LLC";
      sa[3170] = "Impax Laboratories";
      sa[3171] = "Impax lab.";
      sa[3172] = "Imperial Fire and Casulity";
      sa[3173] = "Import Auto Geeks";
      sa[3174] = "Impress";
      sa[3175] = "In Balance Ranch Academy";
      sa[3176] = "In-N-Out Burger";
      sa[3177] = "InScope Solutions, Inc.";
      sa[3178] = "Independant Contractor";
      sa[3179] = "Independence Blue Cross";
      sa[3180] = "Independence Excavating, Inc.";
      sa[3181] = "Independence Insurance Agency";
      sa[3182] = "Independence School District";
      sa[3183] = "Independent Bank";
      sa[3184] = "Independent Imaging";
      sa[3185] = "Indian Health Service";
      sa[3186] = "Indian River Medical Center";
      sa[3187] = "Indian River State College";
      sa[3188] = "Indicon Corporation";
      sa[3189] = "Indigo Delivery";
      sa[3190] = "Indus Corp";
      sa[3191] = "Indus Valley Corporation";
      sa[3192] = "Industrial Process Equip.";
      sa[3193] = "Industrial Resin Recycling";
      sa[3194] = "Industry Systems";
      sa[3195] = "Inenvi, LLC";
      sa[3196] = "Infinite Solutions";
      sa[3197] = "Infinity Computer Solutions";
      sa[3198] = "Infinity Designs, Inc.";
      sa[3199] = "Influent Inc";
      sa[3200] = "InfoReliance";
      sa[3201] = "Infor";
      sa[3202] = "Infor Global Solutions";
      sa[3203] = "Information Analysis Inc.";
      sa[3204] = "Information Builders";
      sa[3205] = "Information Builders Inc";
      sa[3206] = "Information Handling Services";
      sa[3207] = "Information Management International";
      sa[3208] = "Information Technology Coalition";
      sa[3209] = "Infosys Technologies Ltd.";
      sa[3210] = "Infotechnologies";
      sa[3211] = "Ingenix";
      sa[3212] = "Ingham Regional Medical Center";
      sa[3213] = "Ingleside at King Farm";
      sa[3214] = "Ingram Micro";
      sa[3215] = "Injured Workers Pharmacy";
      sa[3216] = "Inland Imaging, LLC";
      sa[3217] = "Inland Kenworth Inc.";
      sa[3218] = "Inland Real Estate Group Inc.";
      sa[3219] = "Inner Circle Search";
      sa[3220] = "InnerSea Discoveries";
      sa[3221] = "Innovacion Natural";
      sa[3222] = "Innovar Group";
      sa[3223] = "Innovative Computer Systems";
      sa[3224] = "Innovative Technology Holdings";
      sa[3225] = "Innovative information Technologies";
      sa[3226] = "Inova Health System";
      sa[3227] = "InsTrust Insurance Group";
      sa[3228] = "Insider Guides";
      sa[3229] = "Insider Guides, Inc.";
      sa[3230] = "Insight Card Services";
      sa[3231] = "Insight Enterprises";
      sa[3232] = "Insight Global";
      sa[3233] = "Inspectorate ";
      sa[3234] = "Inspiring Champions, Inc.";
      sa[3235] = "Institute for Humane Studies";
      sa[3236] = "Insulators local union #80";
      sa[3237] = "Insurance Auto Auctions Inc.";
      sa[3238] = "Insurance Group";
      sa[3239] = "Insurance Services";
      sa[3240] = "Integrasys Technologies, Inc";
      sa[3241] = "Integratechs";
      sa[3242] = "Integrated Device Technology";
      sa[3243] = "Integrated Diagnostic Centers, Inc.";
      sa[3244] = "Integris Southwest Medical Center";
      sa[3245] = "Intel";
      sa[3246] = "Intel Corp";
      sa[3247] = "Intel Corporation";
      sa[3248] = "Intelligent Decisions Inc.";
      sa[3249] = "Intellitrex";
      sa[3250] = "Inter-Coastal Electronics, Inc.";
      sa[3251] = "Inter-con Security Systems, Inc.";
      sa[3252] = "InterVarsity Christian Fellowship";
      sa[3253] = "Interactive Data Inc.";
      sa[3254] = "Interactive Softworks";
      sa[3255] = "Interbrand";
      sa[3256] = "Interim HealthCare";
      sa[3257] = "Intermec Technologies";
      sa[3258] = "Intermediate Unit 1";
      sa[3259] = "Intermountain Healthcare";
      sa[3260] = "Internal Revenue Service";
      sa[3261] = "Internal Revenue Service (IRS)";
      sa[3262] = "International Checkout";
      sa[3263] = "International Fire Equipment Corp.";
      sa[3264] = "International Laminating Corporation";
      sa[3265] = "International Logistics Systems, Inc";
      sa[3266] = "International PAPER";
      sa[3267] = "International Paper";
      sa[3268] = "International Rescue Committee";
      sa[3269] = "International Speedway Corporation";
      sa[3270] = "Internetwork Expert  Inc.";
      sa[3271] = "Intersections Inc.";
      sa[3272] = "Interstate Batteries";
      sa[3273] = "Intertek";
      sa[3274] = "Interwest Capital Corporation";
      sa[3275] = "Intralearn Software Corporation";
      sa[3276] = "Intuit";
      sa[3277] = "Intuit, Inc.";
      sa[3278] = "Invesco";
      sa[3279] = "InvestorCom, Inc.";
      sa[3280] = "Investors Management and Marketing";
      sa[3281] = "Iod Incorporated";
      sa[3282] = "Iona, Inc. Fashion Jewelry";
      sa[3283] = "Iowa Workforce Development-State of Iowa";
      sa[3284] = "Ipendo Inc.";
      sa[3285] = "Irdeto";
      sa[3286] = "Iron Mountain";
      sa[3287] = "Iron Mountain Information Management";
      sa[3288] = "IronWorkers Local 46";
      sa[3289] = "Iroquois Nursing Home";
      sa[3290] = "Irvington Friendly Care, LLC";
      sa[3291] = "Issaquah School District";
      sa[3292] = "Italian Ministry of Foreign Affairs";
      sa[3293] = "Itasca County Treasurer's Office";
      sa[3294] = "Ivan Bullock State Farm";
      sa[3295] = "Ivymount School";
      sa[3296] = "Iwco";
      sa[3297] = "Iwei Huang D.M.D., M.S.";
      sa[3298] = "Ixtlan Corporation";
      sa[3299] = "J & J Glass & MIrror Corp";
      sa[3300] = "J & R Schugel";
      sa[3301] = "J H";
      sa[3302] = "J Morita USA";
      sa[3303] = "J and M Machine";
      sa[3304] = "J&C Enterprises";
      sa[3305] = "J-W Measurement";
      sa[3306] = "J. Alexanders";
      sa[3307] = "J. G. Williams Construction Inc";
      sa[3308] = "J. Hoppe Carpet Cleaning Inc.";
      sa[3309] = "J. W. Legacy";
      sa[3310] = "J.Crew";
      sa[3311] = "J.F. Shea Co., Inc.";
      sa[3312] = "J.Kings Foor Service Professionals";
      sa[3313] = "J.P. Morgan Chase";
      sa[3314] = "JCG";
      sa[3315] = "JCPenney";
      sa[3316] = "JCPenney Corp";
      sa[3317] = "JDA Software Group, Inc.";
      sa[3318] = "JDSU";
      sa[3319] = "JDW Beauty Inc.";
      sa[3320] = "JEAcoustics";
      sa[3321] = "JJAMZ, INC";
      sa[3322] = "JJL Greenhouse  Inc.";
      sa[3323] = "JKR Defalco Advertising";
      sa[3324] = "JP Morgan & Chase";
      sa[3325] = "JP Morgan Chase";
      sa[3326] = "JP Morgan Chase ";
      sa[3327] = "JPMORGAN CHASE";
      sa[3328] = "JPMorgan";
      sa[3329] = "JPMorgan Chase";
      sa[3330] = "JPMorgan Chase Bank";
      sa[3331] = "JPmorgan";
      sa[3332] = "JR'S Appliance Disposal";
      sa[3333] = "JSA";
      sa[3334] = "JUDYS GROUP.INC";
      sa[3335] = "JVNW";
      sa[3336] = "Jack Henry & Associates";
      sa[3337] = "Jack Treier Inc";
      sa[3338] = "JackBe Corporation";
      sa[3339] = "Jackson County Sheriff";
      sa[3340] = "Jackson Glass Works.com";
      sa[3341] = "Jackson Health System";
      sa[3342] = "Jacksonville Fire and Rescue Dept";
      sa[3343] = "Jacksonville Sheriff's Office";
      sa[3344] = "Jacobs Engineering";
      sa[3345] = "Jacobs Engineering Grp.";
      sa[3346] = "Jacobs Industrial Services";
      sa[3347] = "Jacobs Music";
      sa[3348] = "Jacuzzi";
      sa[3349] = "Jada Beauty";
      sa[3350] = "Jam Bestone Tire and Service";
      sa[3351] = "Jam'in Subz, Inc.";
      sa[3352] = "Jamba Juice Company";
      sa[3353] = "James G. Gibson, DDS";
      sa[3354] = "James J Peters Medical Center";
      sa[3355] = "James M Ballard LLC";
      sa[3356] = "James Mikula D.D.S";
      sa[3357] = "James O. Sanders";
      sa[3358] = "Jane Doe, Inc";
      sa[3359] = "Janet Bailey D.D.S.";
      sa[3360] = "Janklow & Nesbit Associates ";
      sa[3361] = "Janus Capital Group LLC";
      sa[3362] = "Jarvik Heart";
      sa[3363] = "Jason Industrial";
      sa[3364] = "Jc Melrose CC";
      sa[3365] = "Jefferies  and  Co.";
      sa[3366] = "Jefferson County Board of Education";
      sa[3367] = "Jefferson County DA";
      sa[3368] = "Jefferson County Engineer's Office";
      sa[3369] = "Jefferson County Wi";
      sa[3370] = "Jefferson Lewis BOCES";
      sa[3371] = "Jefferson Regional Medical Center";
      sa[3372] = "Jefferson Security Bank";
      sa[3373] = "Jefferson count schools";
      sa[3374] = "Jeffrey Gitomer's TrainOne";
      sa[3375] = "Jennifer Eyrich";
      sa[3376] = "Jennison Associates LLC";
      sa[3377] = "Jenny Craig";
      sa[3378] = "Jenny Plath";
      sa[3379] = "Jerry's Famous Deli";
      sa[3380] = "Jerry's Sandwiches";
      sa[3381] = "Jersey City BOE";
      sa[3382] = "Jessamine County Board of Education";
      sa[3383] = "Jet West Music Group Ltd";
      sa[3384] = "JetBlue Airways";
      sa[3385] = "Jetblue";
      sa[3386] = "Jetblue Airways";
      sa[3387] = "Jewish Family Services";
      sa[3388] = "Jim Taliaferro CMHC";
      sa[3389] = "Jim carpenter";
      sa[3390] = "Jimmy Johns";
      sa[3391] = "Jims Music Center";
      sa[3392] = "Jobfox Inc.";
      sa[3393] = "Joe Dickey Electrc";
      sa[3394] = "Joe Marina";
      sa[3395] = "Joel Barlow High School";
      sa[3396] = "John Crane Inc";
      sa[3397] = "John Deere";
      sa[3398] = "John F. Kennedy High School";
      sa[3399] = "John Hancock ";
      sa[3400] = "John Q Hammons";
      sa[3401] = "John Snow, Inc.";
      sa[3402] = "John W Stone Oil";
      sa[3403] = "John Wiley & Sons Inc";
      sa[3404] = "Johns Hopkins Bayview Medical Center";
      sa[3405] = "Johns Hopkins School of Medicine";
      sa[3406] = "Johnson & Johnson";
      sa[3407] = "Johnson Controls";
      sa[3408] = "Johnson County School District #1";
      sa[3409] = "Johnson Matthey";
      sa[3410] = "Johnson and Johnson";
      sa[3411] = "Johnson& Johnson Vision Care";
      sa[3412] = "Johnstons Automotive Repair";
      sa[3413] = "Joie de Vivre Hospitality";
      sa[3414] = "Joint Industray Board";
      sa[3415] = "Jolley Urga Wirth Woodbury & Standish";
      sa[3416] = "Jon Felts LLC";
      sa[3417] = "Jonathan Salon";
      sa[3418] = "Jones Adams Delp PC";
      sa[3419] = "Jones Brothers Grading";
      sa[3420] = "Jones Day";
      sa[3421] = "Jones Food Mart";
      sa[3422] = "Jones Lang Lasalle";
      sa[3423] = "Jones Walker";
      sa[3424] = "Joseph Chevrolet";
      sa[3425] = "Joseph Jingoli  and  Son  Inc.";
      sa[3426] = "Joseph Productions, Inc.";
      sa[3427] = "JoyFull Ministries";
      sa[3428] = "Joyce Engineering, Incorporated";
      sa[3429] = "Jpmorgan Chase";
      sa[3430] = "Jpmorgan Chase ";
      sa[3431] = "Jsc";
      sa[3432] = "Judge Rotenberg Educational Center";
      sa[3433] = "Judicate West";
      sa[3434] = "Juice Pharma Worldwide";
      sa[3435] = "Jump Higher CT  LLC";
      sa[3436] = "Junaid Hashim MD";
      sa[3437] = "Juneau Youth Services";
      sa[3438] = "Juniper Networks";
      sa[3439] = "Juristaff Inc.";
      sa[3440] = "Jurupa Unified School District";
      sa[3441] = "Just 12345 Store Corp";
      sa[3442] = "Justice Paper Processing";
      sa[3443] = "K and F Partners LLC";
      sa[3444] = "K-2 Solutions";
      sa[3445] = "K2 Group, Inc";
      sa[3446] = "KAI, Institute";
      sa[3447] = "KAcme Adjusting Company LLC";
      sa[3448] = "KBACE";
      sa[3449] = "KBC Pub Inc.";
      sa[3450] = "KBR";
      sa[3451] = "KC Engineering  and  Land Surveying";
      sa[3452] = "KCI Technologies Inc";
      sa[3453] = "KCIC, LLC";
      sa[3454] = "KENALL MANUFACTURING";
      sa[3455] = "KENANSVILLE EQUIPMENT CO ";
      sa[3456] = "KEYWELL CORPORATION LLC";
      sa[3457] = "KIC";
      sa[3458] = "KIDSART INC.";
      sa[3459] = "KIM LIGHTING";
      sa[3460] = "KKAJ";
      sa[3461] = "KLA-Tencor";
      sa[3462] = "KMG TRUCKING INC";
      sa[3463] = "KNBT";
      sa[3464] = "KNOX COMMUNITY HOSPITAL";
      sa[3465] = "KOAM-TV";
      sa[3466] = "KPInterface, Inc.";
      sa[3467] = "KPMG LLP";
      sa[3468] = "KPMG, LLP";
      sa[3469] = "KQTV";
      sa[3470] = "KTTV 11 Fox TV";
      sa[3471] = "KVUE-TV (ABC)";
      sa[3472] = "Kaiser - Southern California Permanente ";
      sa[3473] = "Kaiser Permanente";
      sa[3474] = "Kaiser Permanentee";
      sa[3475] = "Kaiser Permante";
      sa[3476] = "Kaiser Permenete";
      sa[3477] = "Kalamazoo County Government";
      sa[3478] = "Kalispell Regional Medical Center";
      sa[3479] = "Kalypso";
      sa[3480] = "Kane Security";
      sa[3481] = "Kansas City Life";
      sa[3482] = "Kansas University";
      sa[3483] = "Kantor Taylor Nelson Boyd & Evatt PC";
      sa[3484] = "Karl Strauss";
      sa[3485] = "Kasden Fuel Company";
      sa[3486] = "Kasky Insurance";
      sa[3487] = "Katonah-LewisboroSchool District";
      sa[3488] = "Katy ISD";
      sa[3489] = "Katy ISD ";
      sa[3490] = "Kaulkin Ginsberg";
      sa[3491] = "Kawasaki motors";
      sa[3492] = "Kaycan Ltd";
      sa[3493] = "Kaye Scholer LLP";
      sa[3494] = "Kazork";
      sa[3495] = "Keany Produce Company";
      sa[3496] = "Kearny Steel Container";
      sa[3497] = "Kellwood Company";
      sa[3498] = "Kelly IT Services";
      sa[3499] = "Kelly Scientific Sercives";
      sa[3500] = "Kelly Services";
      sa[3501] = "Kelly Towers Associates";
      sa[3502] = "Kelly Tractor";
      sa[3503] = "Ken's Pool Service";
      sa[3504] = "Kendall Regional Medical Center";
      sa[3505] = "Kenexa";
      sa[3506] = "Kennedy Health Systems";
      sa[3507] = "Kennedy School";
      sa[3508] = "Kennedy Wilson";
      sa[3509] = "Kenney Steel corp";
      sa[3510] = "Kensium";
      sa[3511] = "Kentucky League of Cities";
      sa[3512] = "Kenwood Fence Company";
      sa[3513] = "Kern High School District";
      sa[3514] = "Ketchikan Eagle Center and Hatchey";
      sa[3515] = "Kettering Health Network";
      sa[3516] = "Keville Entgerprises";
      sa[3517] = "Kew Management Corp.";
      sa[3518] = "KeyPoint Credit Union";
      sa[3519] = "Keyhole Road Assist";
      sa[3520] = "Keystone Medical Group";
      sa[3521] = "Keystone rv";
      sa[3522] = "Kforce";
      sa[3523] = "Kforce ";
      sa[3524] = "Kids-Centric Inc";
      sa[3525] = "KidsTek";
      sa[3526] = "Kiewit";
      sa[3527] = "Kiewit Construction";
      sa[3528] = "Kiewit Infrastructure West Co.";
      sa[3529] = "Kiewit Offshore Sevices";
      sa[3530] = "Killgore Pearlman Stamp Ornstein Squires";
      sa[3531] = "Kim Lighting";
      sa[3532] = "Kim-Anh Corporation";
      sa[3533] = "Kimball Electronic of Tampa";
      sa[3534] = "Kimberly-Clark Corporation";
      sa[3535] = "Kimco Realty Corp";
      sa[3536] = "Kindred Healthcare";
      sa[3537] = "Kindred Hospital";
      sa[3538] = "Kinetic Books";
      sa[3539] = "King College";
      sa[3540] = "King Soopers";
      sa[3541] = "King's College";
      sa[3542] = "Kingsbridge Heights Rehab Care Center";
      sa[3543] = "Kingston Schools";
      sa[3544] = "Kingsway";
      sa[3545] = "Kit Kat Club";
      sa[3546] = "Klein ISD";
      sa[3547] = "Kmart-Regal Cinemas";
      sa[3548] = "Knepper Press";
      sa[3549] = "Knew Restaurant";
      sa[3550] = "Knight Industrial Supply, Inc.";
      sa[3551] = "Kno, Inc.";
      sa[3552] = "Koala Tee";
      sa[3553] = "Koch Supply  and  Trading  LP";
      sa[3554] = "Kohl's";
      sa[3555] = "Kohl's Corporation";
      sa[3556] = "Kohler Company";
      sa[3557] = "Kohler Interiors/Baker Furniture";
      sa[3558] = "Kohls";
      sa[3559] = "Kohls Corp";
      sa[3560] = "Kohls Corporation";
      sa[3561] = "Kohls Department Stores";
      sa[3562] = "Kohls Dept Stores";
      sa[3563] = "Koinonia Foster Homes, Inc.";
      sa[3564] = "Kollmorgen Electro-Optical";
      sa[3565] = "Komatsu America Corporation";
      sa[3566] = "Konica Minolta ";
      sa[3567] = "Kontera";
      sa[3568] = "Kraft Foods";
      sa[3569] = "Kraftube";
      sa[3570] = "Kramer Air Tool";
      sa[3571] = "Kroger";
      sa[3572] = "Kroger Co";
      sa[3573] = "Kroger Co.";
      sa[3574] = "Kroger Manufacturing";
      sa[3575] = "Kronotex USA";
      sa[3576] = "KubickiDraper";
      sa[3577] = "Kuczmarski and Associates";
      sa[3578] = "Kumho Tire USA";
      sa[3579] = "L&L Parts & Repairs";
      sa[3580] = "L'Oreal";
      sa[3581] = "L-3";
      sa[3582] = "L-3 Communication Display system";
      sa[3583] = "L-3 Communications";
      sa[3584] = "L-3 communications";
      sa[3585] = "L.D.";
      sa[3586] = "L.D. Docsa";
      sa[3587] = "L2T INC.";
      sa[3588] = "L3 Communcations C.P.S.";
      sa[3589] = "L3 Integrated Systems";
      sa[3590] = "L3 Stratis";
      sa[3591] = "LA CURACAO";
      sa[3592] = "LA County Federation of Labor";
      sa[3593] = "LA FOLLETTE, JOHNSON, et al.";
      sa[3594] = "LAKE AVENUE CHURCH";
      sa[3595] = "LAKESIDE SYSTEM INC";
      sa[3596] = "LANAUX & FELGER CPAS";
      sa[3597] = "LANE-AIRE MFG. CORP.";
      sa[3598] = "LASPAU/Harvard University";
      sa[3599] = "LAUSD";
      sa[3600] = "LAWS ELECTRONCS";
      sa[3601] = "LAYTON MANUFACTRING";
      sa[3602] = "LAurels of Fulton";
      sa[3603] = "LB Pork";
      sa[3604] = "LBJ hospital";
      sa[3605] = "LCG Corporation";
      sa[3606] = "LCI";
      sa[3607] = "LCM, LLC";
      sa[3608] = "LD Docsa";
      sa[3609] = "LEDIC Management Group";
      sa[3610] = "LEGO Systems Inc.";
      sa[3611] = "LEISURE CONCEPTS";
      sa[3612] = "LEMO USA";
      sa[3613] = "LENOX HILL HOSPTIAL";
      sa[3614] = "LF USA";
      sa[3615] = "LG-Ericsson";
      sa[3616] = "LGH";
      sa[3617] = "LIFE TECHNOLOGIES";
      sa[3618] = "LITTLE JAPAN";
      sa[3619] = "LOCKHEED MARTIN";
      sa[3620] = "LOS ANGELES COUNTY - DPSS";
      sa[3621] = "LOS ANGLELES POLICE DEPT";
      sa[3622] = "LOTUS COMMUNICATIONS CORP";
      sa[3623] = "LP Speedy Spa";
      sa[3624] = "LP&D";
      sa[3625] = "LPA INC";
      sa[3626] = "LPC";
      sa[3627] = "LPL Financial";
      sa[3628] = "LSL CPA's";
      sa[3629] = "LSU Law Center";
      sa[3630] = "LSUHSC-S";
      sa[3631] = "LUTHERAN GENERAL HOSPITAL";
      sa[3632] = "LVMH";
      sa[3633] = "LVMPD";
      sa[3634] = "La Barge";
      sa[3635] = "La Casa de Don Pedro";
      sa[3636] = "La Clinica De La Raza";
      sa[3637] = "La Costa Resort and Spa";
      sa[3638] = "La Fitness Wyomissing";
      sa[3639] = "La Vina Ranch";
      sa[3640] = "LaSalle Pattern inc";
      sa[3641] = "LaVan & Neidenberg, P.A.";
      sa[3642] = "Lab Corp of America";
      sa[3643] = "Lab corp of America";
      sa[3644] = "LabCorp of America";
      sa[3645] = "Labette Community College";
      sa[3646] = "Laborers Local 300";
      sa[3647] = "Laclede Industries";
      sa[3648] = "Lactalis";
      sa[3649] = "Lafayette College";
      sa[3650] = "Lake Charles Memorial Hospital";
      sa[3651] = "Lake County School District";
      sa[3652] = "Lake Mary Preparatory School";
      sa[3653] = "Lake. Co schools";
      sa[3654] = "Lakehurst Naval base";
      sa[3655] = "Lakeshore";
      sa[3656] = "Lakeside Medical Group";
      sa[3657] = "Lakeside Sandwich Shop";
      sa[3658] = "Lakin Spears, LLP";
      sa[3659] = "Lam Research";
      sa[3660] = "Lampasas ISD";
      sa[3661] = "Lamplight Christian School";
      sa[3662] = "Lanai High & Elem. School";
      sa[3663] = "Lance Inc.";
      sa[3664] = "Landsafe";
      sa[3665] = "Lane Co";
      sa[3666] = "Language Services Associates";
      sa[3667] = "Lansingburgh Central School District";
      sa[3668] = "Larry Grayson Trucking";
      sa[3669] = "Larry's Plumbing";
      sa[3670] = "Larson Family Winery";
      sa[3671] = "Las Vegas Hilton";
      sa[3672] = "Las Vegas Metro Police";
      sa[3673] = "Lathrop Engineering  Inc.";
      sa[3674] = "Latino Commission on AIDS";
      sa[3675] = "Laufer Dalena Cadicina Jensen & Boyd";
      sa[3676] = "Laurel School District";
      sa[3677] = "Lauren Engineers & Constructors, Inc.";
      sa[3678] = "Law Firm";
      sa[3679] = "Law Firm of Howard Rice";
      sa[3680] = "Law Firm with offices NY, LA, DC and overseas";
      sa[3681] = "Law Office";
      sa[3682] = "Law Office of Jillian Sidoti";
      sa[3683] = "Law Offices of Bernice Latou  PA";
      sa[3684] = "Law Offices of Marshall C. Watson, P.A.";
      sa[3685] = "Law Offices of Marshall Watson";
      sa[3686] = "Law Offices of Matt H. Morris";
      sa[3687] = "Law Offices of Sandy Lipkin";
      sa[3688] = "Law firm";
      sa[3689] = "Lawrence Township Public Schools";
      sa[3690] = "Lead Media Partners";
      sa[3691] = "LeadFormix, Inc";
      sa[3692] = "Leander ISD";
      sa[3693] = "Lee County Board of Commissioners";
      sa[3694] = "Lee's Summit Schools";
      sa[3695] = "Leg Avenue Inc.";
      sa[3696] = "Legacy Health System";
      sa[3697] = "Legacy Residential LLC";
      sa[3698] = "Legend Aerospace";
      sa[3699] = "Legendary Art";
      sa[3700] = "Legion Design/ Campbell & Associates";
      sa[3701] = "Lehigh Technologies of GA";
      sa[3702] = "Lehigh Valley Health Network";
      sa[3703] = "Lehigh Valley hospital";
      sa[3704] = "Lehman Brothers Holdings";
      sa[3705] = "Lehr auto electric";
      sa[3706] = "Leigh Hart  attorney";
      sa[3707] = "Lending Club";
      sa[3708] = "LendingClub";
      sa[3709] = "LendingTree, LLC";
      sa[3710] = "Lennar Corp.";
      sa[3711] = "Leonard D Marsocci CPA PA";
      sa[3712] = "Leprino Foods";
      sa[3713] = "Let's Insure";
      sa[3714] = "Level 2 Review";
      sa[3715] = "Level 3 Post/ Deluxe";
      sa[3716] = "Level One Hvac Services";
      sa[3717] = "Levi Strauss  and  Co.";
      sa[3718] = "Levi Strauss & Co. ";
      sa[3719] = "Leviton Manufacturing Company";
      sa[3720] = "Lewis Brisbois Bisgaard & Smith LLP";
      sa[3721] = "LexArts, Inc.";
      sa[3722] = "Lexicon Pharmaceuticals";
      sa[3723] = "Lexmark International";
      sa[3724] = "Lexolution";
      sa[3725] = "Liberty Investment Properties";
      sa[3726] = "Liberty Mutual";
      sa[3727] = "Liberty Mutual Group";
      sa[3728] = "Liberty Northwest Ins";
      sa[3729] = "Liberty Pest Control";
      sa[3730] = "Liberty Plaza";
      sa[3731] = "Liberty Ranch High School";
      sa[3732] = "Libertyville High School";
      sa[3733] = "Liebovich Bros.";
      sa[3734] = "Life Ambulance";
      sa[3735] = "Life Care Hospital";
      sa[3736] = "Life Home Care";
      sa[3737] = "Life Industries";
      sa[3738] = "Life and Wealth Planning, LLC";
      sa[3739] = "LifeCare Assurance";
      sa[3740] = "Lifebanc";
      sa[3741] = "LightPointe Communications";
      sa[3742] = "LightWire, Inc";
      sa[3743] = "Lightning Trading";
      sa[3744] = "Lilliston Ford ";
      sa[3745] = "Lime Energy";
      sa[3746] = "LimitedBrands Corporation";
      sa[3747] = "Limon";
      sa[3748] = "Lincare Inc.";
      sa[3749] = "Lincoln Community High School";
      sa[3750] = "Lincoln Parish Schools";
      sa[3751] = "Lincoln Square Synagogue";
      sa[3752] = "Lindmore Irrigation District";
      sa[3753] = "Lindsay Auto Group";
      sa[3754] = "Lindstrom Metric";
      sa[3755] = "Line-X Coatings";
      sa[3756] = "Lineal Industries, Inc.";
      sa[3757] = "Linebarger Goggan Blair & Sampson";
      sa[3758] = "Linfield Christian Schools";
      sa[3759] = "Linkhorst & Hockin, P.A.";
      sa[3760] = "Lintel Painting";
      sa[3761] = "Lion Distributing, Inc.";
      sa[3762] = "Lion Properties, LLC";
      sa[3763] = "LitePoint Corporation";
      sa[3764] = "Little Bear School";
      sa[3765] = "Little Rest Livery Inc";
      sa[3766] = "Little Rock School District";
      sa[3767] = "Littler Mendelson  PC";
      sa[3768] = "Littler Mendelson, P.C.";
      sa[3769] = "Littleton Joyce Ughetta Park & Kelly LLP";
      sa[3770] = "Living Word Family Church";
      sa[3771] = "Livingston Parish School Board";
      sa[3772] = "Lloyd R. Dropkin. M.D.";
      sa[3773] = "Loc Performance Products";
      sa[3774] = "LocaModa";
      sa[3775] = "Local Concepts Marketing  LLP";
      sa[3776] = "Local Union #3  Welsbac Electric";
      sa[3777] = "Lockheed";
      sa[3778] = "Lockheed Martin";
      sa[3779] = "Lockheed Martin Co.";
      sa[3780] = "Lockheed Martin Corp.";
      sa[3781] = "Lockwood School District #26";
      sa[3782] = "Locus Telecommunications-KDDI";
      sa[3783] = "Locust Hill Country Club";
      sa[3784] = "Lodestar Private Asset Management";
      sa[3785] = "Loftus Electric, Inc.";
      sa[3786] = "Logan Center";
      sa[3787] = "Logan County Schools";
      sa[3788] = "Logan Generating Plant";
      sa[3789] = "Logfrret Inc.";
      sa[3790] = "Logli";
      sa[3791] = "Logoworks";
      sa[3792] = "Loma Linda VA Healthcare System";
      sa[3793] = "Lone Star Food Service";
      sa[3794] = "Long Agency Inc.";
      sa[3795] = "Long Established Law Firm";
      sa[3796] = "Long Term Care Partners, LLC";
      sa[3797] = "Longaro & Clarke, L.P.";
      sa[3798] = "Loomis Retirement Home";
      sa[3799] = "Loomis Sayles & Co.";
      sa[3800] = "Lord Abbett";
      sa[3801] = "Lorel Marketing Group";
      sa[3802] = "Los Angeles Community District";
      sa[3803] = "Los Angeles County ";
      sa[3804] = "Los Angeles County Department of Social ";
      sa[3805] = "Los Angeles County Fire Department";
      sa[3806] = "Los Angeles Film School";
      sa[3807] = "Los Angeles Sheriff Department";
      sa[3808] = "Los Angeles Times";
      sa[3809] = "Los Angeles Unified School District";
      sa[3810] = "Los Gatos Saratoga  High School District";
      sa[3811] = "Lotus Cars USA";
      sa[3812] = "Loudon County Schools";
      sa[3813] = "Loudoun County";
      sa[3814] = "Loudoun County Public Schools";
      sa[3815] = "Loudoun Water";
      sa[3816] = "Louis A. Roser Co.";
      sa[3817] = "Louis Stokes Cleveland VA Medical Center";
      sa[3818] = "Louis Vuitton";
      sa[3819] = "Louis Vuitton Moet Hennessy";
      sa[3820] = "Louisiana State University Health Sciences Center";
      sa[3821] = "Lounsbery Ferguson Altona & Peak, LLP";
      sa[3822] = "Lowe Construction";
      sa[3823] = "Lowe's";
      sa[3824] = "Lowe's Corporation";
      sa[3825] = "Lowe's Home Improvement";
      sa[3826] = "Lowe's Home Improvement Warehouse";
      sa[3827] = "Lowes";
      sa[3828] = "Lowes Home Improvement";
      sa[3829] = "Loyola University Chicago";
      sa[3830] = "Loyola University New Orleans";
      sa[3831] = "Lozier Corporation";
      sa[3832] = "Lucile Packard Children's Hospital at Stanford";
      sa[3833] = "Lucky Star Import and Export Inc.";
      sa[3834] = "Lufthansa Technik";
      sa[3835] = "Lulugistics, LLC.";
      sa[3836] = "Lumension Security";
      sa[3837] = "Lummi High School";
      sa[3838] = "Lutheran Village of Wolfcreek";
      sa[3839] = "Luxottica Retail";
      sa[3840] = "Lydia Home Association";
      sa[3841] = "Lydon, Fetterolf, Corydon, P.A.";
      sa[3842] = "Lynblosten care center";
      sa[3843] = "Lyondell Basell";
      sa[3844] = "M & R Motors";
      sa[3845] = "M J Blaine";
      sa[3846] = "M J MILLER, INC";
      sa[3847] = "M and S Technologies";
      sa[3848] = "M and T Bank";
      sa[3849] = "M&D Supply";
      sa[3850] = "M&I Bank";
      sa[3851] = "M&K II";
      sa[3852] = "M&M Contract Cleaning Inc";
      sa[3853] = "M&M Excavation Co";
      sa[3854] = "M&T Bank";
      sa[3855] = "M-DCPS";
      sa[3856] = "M. S.";
      sa[3857] = "M.C.DEAN";
      sa[3858] = "MA Dept of Public Health";
      sa[3859] = "MACTEC";
      sa[3860] = "MACUCC";
      sa[3861] = "MANHATTAN ASSOCIATES";
      sa[3862] = "MANSFIELD INDUSTRIAL";
      sa[3863] = "MARTEXPORT INC.";
      sa[3864] = "MARTINREA INTERNATIONAL";
      sa[3865] = "MAXWELL  NISSAN";
      sa[3866] = "MAll SPE, LLC";
      sa[3867] = "MBF Agency";
      sa[3868] = "MBM-TRANS Corp";
      sa[3869] = "MBW Inc";
      sa[3870] = "MCBH Kaneohe, Facilities Dept. EM Shop";
      sa[3871] = "MCCALEB TOOL SUPPLY INC";
      sa[3872] = "MCDean";
      sa[3873] = "MD Anderson Cancer Center";
      sa[3874] = "MD On Call, PA";
      sa[3875] = "MDAnderson Cancer Center";
      sa[3876] = "MDU";
      sa[3877] = "MECHANICS BANK";
      sa[3878] = "MEDIA FOR US INC";
      sa[3879] = "MEDITECH  Inc.";
      sa[3880] = "MEDVISION LLC";
      sa[3881] = "MEDomics, LLC";
      sa[3882] = "MENS  WEARHOUSE";
      sa[3883] = "METRO TRANSIT POLICE DEPARTMENT";
      sa[3884] = "METROPOLITAN MICRODATA";
      sa[3885] = "MG BROTHERS CONSTRUCTION";
      sa[3886] = "MGH";
      sa[3887] = "MGM Grand @ Foxwoods";
      sa[3888] = "MHA of Dutchess County";
      sa[3889] = "MHF Services";
      sa[3890] = "MHM Services Inc";
      sa[3891] = "MHNet";
      sa[3892] = "MI Windows and Doors";
      sa[3893] = "MIG, Inc.";
      sa[3894] = "MILCOM Venture Partners";
      sa[3895] = "MILITARY";
      sa[3896] = "MILLENNIUM BILTMORE HOTEL";
      sa[3897] = "MIT Lincoln Labs";
      sa[3898] = "MJ Mortgage & Tax Services, Inc.";
      sa[3899] = "MJJ Brilliant";
      sa[3900] = "MLB Advanced Media LP";
      sa[3901] = "MLV Restaurant Associates";
      sa[3902] = "MMD Holdings";
      sa[3903] = "MMG";
      sa[3904] = "MMPC";
      sa[3905] = "MMS";
      sa[3906] = "MMTG Inc";
      sa[3907] = "MODESTO IRRIGATION DISTRICT";
      sa[3908] = "MOISAN ENTERPRISES";
      sa[3909] = "MORGAN STANLEY";
      sa[3910] = "MORNING STAR FOODS";
      sa[3911] = "MRI";
      sa[3912] = "MSA Architects";
      sa[3913] = "MSKCC";
      sa[3914] = "MSP";
      sa[3915] = "MTA";
      sa[3916] = "MTS Services";
      sa[3917] = "MTV Networks";
      sa[3918] = "MURPHY";
      sa[3919] = "MVH";
      sa[3920] = "MVP sales";
      sa[3921] = "MW Builders";
      sa[3922] = "MaCann Engineering";
      sa[3923] = "MacKay Shields";
      sa[3924] = "Macado's Inc";
      sa[3925] = "Macado's Restaurants, Inc";
      sa[3926] = "Macquarie Holdings";
      sa[3927] = "Macy's";
      sa[3928] = "Macy's ";
      sa[3929] = "Macy's East Inc.";
      sa[3930] = "Macy's INC";
      sa[3931] = "Macy's Inc";
      sa[3932] = "Macy's Inc.";
      sa[3933] = "Macy's Systems and Technology";
      sa[3934] = "Macys Inc";
      sa[3935] = "Mad<0x92DBCEA9>casse";
      sa[3936] = "Magic Seal Paper Packaging";
      sa[3937] = "Mailstar";
      sa[3938] = "Main Street Radiology";
      sa[3939] = "Mainfreight";
      sa[3940] = "Maintenance Builders Supply";
      sa[3941] = "Majestic Industry Hills";
      sa[3942] = "Majestic West Excavation & Development";
      sa[3943] = "Major League Baseball Advanced Media";
      sa[3944] = "Malcolm Pirnie Inc";
      sa[3945] = "Malcolm Pirnie, Inc.";
      sa[3946] = "Malott Investments";
      sa[3947] = "Man-A-Fre Inc. ";
      sa[3948] = "Mana Products";
      sa[3949] = "Managed Mobile";
      sa[3950] = "Management Decisions Inc";
      sa[3951] = "Management Systems International";
      sa[3952] = "Mancoll Cosmetic & Plastic Surgery";
      sa[3953] = "Mandarin Oriental Hotel Group";
      sa[3954] = "Manhattan Associates";
      sa[3955] = "Manolo Blahnik";
      sa[3956] = "Manpower";
      sa[3957] = "Maple Shade Mazada";
      sa[3958] = "Maprow Media";
      sa[3959] = "Maranatha Stone, LLC";
      sa[3960] = "Marble And Granite Works";
      sa[3961] = "Marblehead Bank";
      sa[3962] = "Marc Center";
      sa[3963] = "Marcus Theatres";
      sa[3964] = "Marfork Processing";
      sa[3965] = "Maricopa Integrated Health Systems";
      sa[3966] = "Marion Manor Nursing Home";
      sa[3967] = "Marion county fire rescue";
      sa[3968] = "Maritz Inc.";
      sa[3969] = "Maritz Research";
      sa[3970] = "Market Resource Partners";
      sa[3971] = "Market Source";
      sa[3972] = "Markit";
      sa[3973] = "Marks Paneth & Shron";
      sa[3974] = "Marlees Seafood";
      sa[3975] = "Marlin Crawler";
      sa[3976] = "Marlin Leasing";
      sa[3977] = "Maroone Toyota";
      sa[3978] = "Marquette University";
      sa[3979] = "Marquis Companies";
      sa[3980] = "Marriott";
      sa[3981] = "Marriott International";
      sa[3982] = "Marriott International ";
      sa[3983] = "Marriott by courtyard";
      sa[3984] = "Mars Inc";
      sa[3985] = "Mars Snackfood North America";
      sa[3986] = "Marschel Wrecking, Inc.";
      sa[3987] = "Marsh";
      sa[3988] = "Marsh and McLennan Companies";
      sa[3989] = "Marshall & Stevens";
      sa[3990] = "Marshall Miller  and  Associates  Inc.";
      sa[3991] = "Marshall University";
      sa[3992] = "Marshfield Clinic";
      sa[3993] = "Martenson Enterprises";
      sa[3994] = "Martin County School District";
      sa[3995] = "Marvin Millwork & Cabinetry";
      sa[3996] = "Marwaha group Inc";
      sa[3997] = "Maryland State Police";
      sa[3998] = "Masco Contractor Services West";
      sa[3999] = "MassBay Community College";
      sa[4000] = "MassMutual Life Insurance";
      sa[4001] = "Massachusetts Department of Correction";
      sa[4002] = "Massachusetts General Hospital";
      sa[4003] = "Massage Envy";
      sa[4004] = "Mat-Su Borough School District";
      sa[4005] = "Matan Companies";
      sa[4006] = "Match.com";
      sa[4007] = "Mateer & Harbert, P.A.";
      sa[4008] = "Mathers Electric";
      sa[4009] = "Matlen-Silver";
      sa[4010] = "Matrix Absence Management, Inc";
      sa[4011] = "Matrix Golf and Hospitality, JBCC";
      sa[4012] = "Matrix H.G. inc";
      sa[4013] = "Matson Navigation Company";
      sa[4014] = "Matteson School District 162";
      sa[4015] = "Matthew B. Harrison DDS, PA";
      sa[4016] = "Maurices";
      sa[4017] = "Maverick Helicopters";
      sa[4018] = "Maxim Healthcare";
      sa[4019] = "Maxim Healthcare Servivces";
      sa[4020] = "Maxim Integrated Products";
      sa[4021] = "Maximus";
      sa[4022] = "Mayer Brown LLP";
      sa[4023] = "Mayfield City School District";
      sa[4024] = "Mayo Clinic";
      sa[4025] = "McAfee";
      sa[4026] = "McBee Associates";
      sa[4027] = "McCamey Family";
      sa[4028] = "McCarthy, Inc.";
      sa[4029] = "McClarin Plastics";
      sa[4030] = "McClure Stainless LLC";
      sa[4031] = "McCormick & Co., Inc.";
      sa[4032] = "McCormick and Priore  PC";
      sa[4033] = "McCoy's Iron and Metal";
      sa[4034] = "McCune Coffee Company";
      sa[4035] = "McDonald's";
      sa[4036] = "McFarland Cascade";
      sa[4037] = "McGuirewoods LLP";
      sa[4038] = "McKee Marburger & Fagnant PC";
      sa[4039] = "McKesson Corporation";
      sa[4040] = "McKibbon Hotel Management";
      sa[4041] = "McKinney and Silver";
      sa[4042] = "McKinsey  and  Company";
      sa[4043] = "McKinsey & Company";
      sa[4044] = "McLaren Regional Medical Center";
      sa[4045] = "McLarens Young International";
      sa[4046] = "McMullin Motors";
      sa[4047] = "McNair Law Firm  P.A.";
      sa[4048] = "McTeam Investments";
      sa[4049] = "Mcdonalds";
      sa[4050] = "Mcdonalds ";
      sa[4051] = "Meadwestvaco";
      sa[4052] = "Mealey's Furniture";
      sa[4053] = "Mechanical Contractors";
      sa[4054] = "Mechanical Inc";
      sa[4055] = "Mecklenburg County";
      sa[4056] = "Med Tech Solutions";
      sa[4057] = "MedAssurant";
      sa[4058] = "Medco";
      sa[4059] = "Medco Health Solutions";
      sa[4060] = "MediMedia";
      sa[4061] = "MediMedia U.S.A.";
      sa[4062] = "MediaCom";
      sa[4063] = "Medical Data Express";
      sa[4064] = "Medical Delivery Services";
      sa[4065] = "Medical Device Consultants, Inc.";
      sa[4066] = "Medical Mutual";
      sa[4067] = "Medical interventions, also Phoenix phys";
      sa[4068] = "Medicity";
      sa[4069] = "Medivantix Technologies";
      sa[4070] = "Medlock Bridge Tennis Center";
      sa[4071] = "Medquest Associates";
      sa[4072] = "Medtronic, Inc.";
      sa[4073] = "Medversant Technologies";
      sa[4074] = "Meetup";
      sa[4075] = "Megtec Systems";
      sa[4076] = "Melinda Randolph";
      sa[4077] = "Melissa Rice";
      sa[4078] = "Mellow Mushroom";
      sa[4079] = "Melrose-Sovereign Companies";
      sa[4080] = "Melwood HTC";
      sa[4081] = "Memorial Sloan Kettering Cancer Center";
      sa[4082] = "Memorial Sloan and Kettering Cancer Cent";
      sa[4083] = "Memorial Sloan-Kettering Cancer Center";
      sa[4084] = "Menards";
      sa[4085] = "Mentor Worldwide LLC";
      sa[4086] = "Mercedes Benz U.S. International";
      sa[4087] = "Mercedes Benz of Greenwich";
      sa[4088] = "Mercer";
      sa[4089] = "Merck";
      sa[4090] = "Mercury Computer Sys";
      sa[4091] = "Mercury Insurance Group";
      sa[4092] = "Mercy Regional";
      sa[4093] = "Mercy San Juan Medical Center";
      sa[4094] = "Meriden BOE";
      sa[4095] = "Meridiam Infrastructure";
      sa[4096] = "Meridian";
      sa[4097] = "Meridian Health- Jersey Shore University";
      sa[4098] = "Meritain Health";
      sa[4099] = "Merrill Gardens";
      sa[4100] = "Merrill Lynch";
      sa[4101] = "Mesa Airlines";
      sa[4102] = "Mesa Public Schools";
      sa[4103] = "Messiah College";
      sa[4104] = "Messier Bugatti USA";
      sa[4105] = "MetLife";
      sa[4106] = "MetLife Home Loans";
      sa[4107] = "Meta Interfaces, LLC";
      sa[4108] = "Metastorm";
      sa[4109] = "Methodist Hospital";
      sa[4110] = "Metpar Corp";
      sa[4111] = "MetraTech Corp";
      sa[4112] = "Metro Credit Union";
      sa[4113] = "Metro Water District";
      sa[4114] = "Metroplitan Transit Authority";
      sa[4115] = "Metropolitan Atlanta Rapid Transit Authority";
      sa[4116] = "Metropolitan Life Insurance Co";
      sa[4117] = "Metropolitan Opera";
      sa[4118] = "Metropolitan Police  Department";
      sa[4119] = "Metropolitan Police Department";
      sa[4120] = "Miami Beach Resort";
      sa[4121] = "Miami Children's Hospital";
      sa[4122] = "Miami County ESC";
      sa[4123] = "Miami Dade College";
      sa[4124] = "Miami University";
      sa[4125] = "Michael Art & Craz ";
      sa[4126] = "Michael Stars";
      sa[4127] = "Michael's Hess";
      sa[4128] = "Michelin North America";
      sa[4129] = "Michigan Brewing Co.";
      sa[4130] = "Michigan Technological University";
      sa[4131] = "Michigan Works! The Job Force Board";
      sa[4132] = "Micro Control Systems, Inc.";
      sa[4133] = "Micro-Fab, LLC";
      sa[4134] = "MicroStrategy";
      sa[4135] = "Microchip Technologies";
      sa[4136] = "Microfinance International";
      sa[4137] = "Microsemi";
      sa[4138] = "Microsoft";
      sa[4139] = "Microsoft Corp.";
      sa[4140] = "Microsoft Corporation";
      sa[4141] = "Microsystems, Inc";
      sa[4142] = "Mid Continent Paper Co.";
      sa[4143] = "Mid-Coast Fire Protection, Inc.";
      sa[4144] = "Midas International";
      sa[4145] = "Middlesex County";
      sa[4146] = "Midlothian ISD";
      sa[4147] = "Midstate Advertising";
      sa[4148] = "Midstate Spring Tite";
      sa[4149] = "Midway Automotive";
      sa[4150] = "Midwest Assistance Program, Inc.";
      sa[4151] = "Miele Inc";
      sa[4152] = "Mildred-Mitchell Bateman Hospital";
      sa[4153] = "Milford Plaza";
      sa[4154] = "Military";
      sa[4155] = "Military Personnel Services Corp";
      sa[4156] = "Military base";
      sa[4157] = "Millen United Methodist Church";
      sa[4158] = "Millenium";
      sa[4159] = "Millenium Hotels and Resorts Anchorage";
      sa[4160] = "Millenium Partners";
      sa[4161] = "Millennium Thoroughbreds";
      sa[4162] = "Miller & Wright Architects";
      sa[4163] = "Miller Bearing";
      sa[4164] = "Millercoors";
      sa[4165] = "Milliken & Company";
      sa[4166] = "Millington Savings Bank";
      sa[4167] = "Millipore";
      sa[4168] = "Mills College";
      sa[4169] = "Milton J Wood Fire Protection";
      sa[4170] = "Milwaukee County Correctional Facility";
      sa[4171] = "Milwaukee Fire Department";
      sa[4172] = "Milwaukee Fire Dept";
      sa[4173] = "Milwaukee Fire Dept.";
      sa[4174] = "Mimis Cafe";
      sa[4175] = "Mindel Management, Inc.";
      sa[4176] = "Miner's Ace Hardware";
      sa[4177] = "Minisink Valley Central School";
      sa[4178] = "Minnesota Epilepsy Group";
      sa[4179] = "Minnesota Premier Publications";
      sa[4180] = "Minnieland";
      sa[4181] = "Mission Federal Credit Union";
      sa[4182] = "Mission Hospitals";
      sa[4183] = "Mississippi Department of Employment Security";
      sa[4184] = "Mississippi Lime Company";
      sa[4185] = "Mississippi Power";
      sa[4186] = "Mississippi State University";
      sa[4187] = "Missouri Army National Guard";
      sa[4188] = "Missouri Division of Youth Services";
      sa[4189] = "Mitchell Gardens coops";
      sa[4190] = "Mitchell International";
      sa[4191] = "Mitsui Foods";
      sa[4192] = "Mladen Luksic";
      sa[4193] = "Mmr Offshore Service";
      sa[4194] = "Mobac Inc";
      sa[4195] = "Moberly Medical Clinics";
      sa[4196] = "MobiTV, inc.";
      sa[4197] = "Mobile Complete, Inc.";
      sa[4198] = "Mock Schwabe Waldo Elder Reeves & Bryant";
      sa[4199] = "Model N Inc";
      sa[4200] = "Modells Sporting Goods";
      sa[4201] = "Modern Door and Equipment Sales, Inc.";
      sa[4202] = "Modern Marketing Concepts";
      sa[4203] = "Molded Fiber Glass of N.C.";
      sa[4204] = "Molenhouse Enterprises";
      sa[4205] = "Molins Richmond";
      sa[4206] = "Mom's Organic Market";
      sa[4207] = "Momentum";
      sa[4208] = "Momentum World Wide";
      sa[4209] = "Mondo Media";
      sa[4210] = "Monitor Liability Managers  LLC";
      sa[4211] = "Mono County";
      sa[4212] = "Monongahela";
      sa[4213] = "Monroe Clinic Hospital";
      sa[4214] = "Monroe College";
      sa[4215] = "Monroe Medi Trans";
      sa[4216] = "Monroe twp.";
      sa[4217] = "Monster Cable Products";
      sa[4218] = "Monster Worldwide";
      sa[4219] = "Montage Resort";
      sa[4220] = "Montefiore Medical Center";
      sa[4221] = "Montessori School of Beaverton";
      sa[4222] = "Montgomery County";
      sa[4223] = "Montgomery County Department of Public Safety";
      sa[4224] = "Montgomery Early Learning Centers";
      sa[4225] = "Montgomery ISD";
      sa[4226] = "Montgomery Public Schools";
      sa[4227] = "Monument Medical Consultants";
      sa[4228] = "Moody  Jones  Ingino  and  Morehead";
      sa[4229] = "Moody's Investors Service";
      sa[4230] = "Moodys Investors Service";
      sa[4231] = "Moog Inc.";
      sa[4232] = "Moorehead communications";
      sa[4233] = "Moreno ent";
      sa[4234] = "Morgan Stanely Smith Barney";
      sa[4235] = "Morgan Stanley";
      sa[4236] = "Morgan Stanley Smith Barney";
      sa[4237] = "MorganFranklin";
      sa[4238] = "Morningside Baptist Church";
      sa[4239] = "Morningstar";
      sa[4240] = "Morongo Band of Mission Indians";
      sa[4241] = "Morrison Mgmt";
      sa[4242] = "Morse Communications";
      sa[4243] = "Mortgage Connect";
      sa[4244] = "Morton Arb";
      sa[4245] = "Moser architecture studio";
      sa[4246] = "Moses Cone Health System";
      sa[4247] = "Moss Adams LLP";
      sa[4248] = "Mosser Hotel";
      sa[4249] = "Mother Industries";
      sa[4250] = "Motion Point";
      sa[4251] = "Motiva Enterprises";
      sa[4252] = "Motorola Solutions";
      sa[4253] = "Mount Alvernia Academy";
      sa[4254] = "Mount Diablo School District";
      sa[4255] = "Mount Holyoke College";
      sa[4256] = "Mount Sinai Hospital";
      sa[4257] = "Mount St. Mary's University";
      sa[4258] = "Mountain Landscaping Contractors";
      sa[4259] = "Mountain Mortgage Corp.";
      sa[4260] = "Mountain Park Health Center";
      sa[4261] = "Mountain Vista Medical Center";
      sa[4262] = "Mountian High Moving & Storage";
      sa[4263] = "Move inc";
      sa[4264] = "Movietime Video, LLC";
      sa[4265] = "Mr.  and  Mrs. Apfelbaum";
      sa[4266] = "Mt Sinai Hospital";
      sa[4267] = "Mt Sinai Medical Center";
      sa[4268] = "Mt. Notre Dame H.S.";
      sa[4269] = "Mt. Zion Baptist Church";
      sa[4270] = "Mueller & Partin";
      sa[4271] = "Multi Media Services";
      sa[4272] = "Multi Packaging Solutions";
      sa[4273] = "MultiCare Health System";
      sa[4274] = "Multiband";
      sa[4275] = "Multicard";
      sa[4276] = "Multicare Health System";
      sa[4277] = "Multivision Inc";
      sa[4278] = "Multivista, FL dba Premium Documentation";
      sa[4279] = "Munchkin, Inc";
      sa[4280] = "Municipal Market Advisors";
      sa[4281] = "Muroc School District";
      sa[4282] = "Murray, Frank & Sailer LLP";
      sa[4283] = "Musashi";
      sa[4284] = "Muscogee County School District";
      sa[4285] = "Museum of Contemporary Art";
      sa[4286] = "Music Celebrations Int'l";
      sa[4287] = "Music Exchange, Inc.";
      sa[4288] = "Music Warehouse";
      sa[4289] = "Mustell & Borrow Law Firm";
      sa[4290] = "Mutual of America";
      sa[4291] = "My Gym Children's Fitness Center";
      sa[4292] = "Mycroft Inc";
      sa[4293] = "Myriad Genetics";
      sa[4294] = "Myrtle Beach Health Dept";
      sa[4295] = "N and B Marine Supply";
      sa[4296] = "N.E.W.";
      sa[4297] = "N.Y.C. CITYWIDE SERVICES";
      sa[4298] = "N/A";
      sa[4299] = "NACCO Materials Handling Group";
      sa[4300] = "NANDA International";
      sa[4301] = "NAPBL";
      sa[4302] = "NASA";
      sa[4303] = "NASA-Johnson Space Center";
      sa[4304] = "NATIONAL COMBUSTION Co.,inc.";
      sa[4305] = "NAVAIR";
      sa[4306] = "NAVAL SEA SYSTEMS COMMAND(DEPT OF NAVY)";
      sa[4307] = "NAVFAC Southeast";
      sa[4308] = "NB Handy";
      sa[4309] = "NBC Television";
      sa[4310] = "NBCUniversal";
      sa[4311] = "NC Forestry Association";
      sa[4312] = "NC State University WebAssign";
      sa[4313] = "NCO Financial";
      sa[4314] = "NCR Corp";
      sa[4315] = "NCS Technologies";
      sa[4316] = "NDI";
      sa[4317] = "NE Carpenters Fund";
      sa[4318] = "NEC America";
      sa[4319] = "NEC Laboratories America, Inc.";
      sa[4320] = "NES Overseas, LCC";
      sa[4321] = "NEW Corporation";
      sa[4322] = "NEW YORK CITY POLICE DEPARTMENT";
      sa[4323] = "NEW YORK CITY POLICE DEPT";
      sa[4324] = "NGP VAN";
      sa[4325] = "NICE Systems";
      sa[4326] = "NIEHS, NIH";
      sa[4327] = "NIIT Technologies Inc";
      sa[4328] = "NISCAYAH";
      sa[4329] = "NJ TRANSIT Corp.";
      sa[4330] = "NJ Transit";
      sa[4331] = "NJ dept of corrections";
      sa[4332] = "NOAA Federal Agency";
      sa[4333] = "NOB HILL FOODS";
      sa[4334] = "NORC at the University of Chicago";
      sa[4335] = "NORCAL Mutual Insurance";
      sa[4336] = "NORWALK TOYOTA";
      sa[4337] = "NORWEGIAN CRUISE LINE";
      sa[4338] = "NOVA";
      sa[4339] = "NOVOTEL  HOTEL22";
      sa[4340] = "NPC INTERNATIONAL, INC.";
      sa[4341] = "NPL";
      sa[4342] = "NPMI";
      sa[4343] = "NRT";
      sa[4344] = "NSABP Foundation Inc";
      sa[4345] = "NTN BOWER";
      sa[4346] = "NTRglobal";
      sa[4347] = "NTV International Corp.";
      sa[4348] = "NTX Wireless";
      sa[4349] = "NVCC";
      sa[4350] = "NVCJTA";
      sa[4351] = "NW Engineers";
      sa[4352] = "NW Portland Area Indian Health Board";
      sa[4353] = "NY 4 Pretzels, INC";
      sa[4354] = "NY Dept of Sanitation";
      sa[4355] = "NY Marriott ";
      sa[4356] = "NY SportsMed and Physical Therapy";
      sa[4357] = "NY State";
      sa[4358] = "NYC & Company";
      sa[4359] = "NYC DOE";
      sa[4360] = "NYC Deparment Of Corrections";
      sa[4361] = "NYC Department of Buildings";
      sa[4362] = "NYC Department of Education";
      sa[4363] = "NYC Department of Education, P.S. 33x";
      sa[4364] = "NYC Department of Environmental Protection";
      sa[4365] = "NYC Dept Of Education/John Bowne High";
      sa[4366] = "NYC Dept of education";
      sa[4367] = "NYC Deptof Ed";
      sa[4368] = "NYC Municipal Water Finance Authority";
      sa[4369] = "NYC PARKS & RECREATION";
      sa[4370] = "NYC Police Department";
      sa[4371] = "NYC Transit Authority";
      sa[4372] = "NYC Veterinary Specialists";
      sa[4373] = "NYC transit authority";
      sa[4374] = "NYCDOE";
      sa[4375] = "NYCM Insurance Company";
      sa[4376] = "NYK Line N.A.";
      sa[4377] = "NYP Holdings INC";
      sa[4378] = "NYPD";
      sa[4379] = "NYPD ";
      sa[4380] = "NYS DCJS";
      sa[4381] = "NYS Department of Corrections";
      sa[4382] = "NYS Department of Labor";
      sa[4383] = "NYS Division of Criminal Justice Service";
      sa[4384] = "NYS Parks and Recreation";
      sa[4385] = "NYU Medical Center";
      sa[4386] = "Nalco";
      sa[4387] = "Nan INC";
      sa[4388] = "Napa Smith Brewery";
      sa[4389] = "Naples Sailing and Yacht Club";
      sa[4390] = "Napoli's Restaurant";
      sa[4391] = "Nash County Sheriff's Office";
      sa[4392] = "Nash Inc";
      sa[4393] = "Nation Star Mortgage";
      sa[4394] = "National A-1";
      sa[4395] = "National Action Financial Services";
      sa[4396] = "National Amusements";
      sa[4397] = "National Auto Dealer Service";
      sa[4398] = "National Board of Trial Advocacy";
      sa[4399] = "National City";
      sa[4400] = "National Fuel Gas";
      sa[4401] = "National Geospatial Intelligence Agency";
      sa[4402] = "National Grid";
      sa[4403] = "National Heritage Academies";
      sa[4404] = "National Liberty Museum";
      sa[4405] = "National Medical Association";
      sa[4406] = "National Oilwell Varco";
      sa[4407] = "National Park Service";
      sa[4408] = "National Public Media";
      sa[4409] = "National Ready Mix Concrete Assn";
      sa[4410] = "National Retail Transportation";
      sa[4411] = "National Security Technologies";
      sa[4412] = "National Trailer Repair";
      sa[4413] = "National research council";
      sa[4414] = "Nationstar Mortgage";
      sa[4415] = "Nationwide Insurance";
      sa[4416] = "Natrona County Sheriff";
      sa[4417] = "NaturaLawn of America";
      sa[4418] = "Natural Balance";
      sa[4419] = "Nature Maid House Cleaning";
      sa[4420] = "Nautilus Healthcare Management Group";
      sa[4421] = "Navfac Mid-Atlantic ";
      sa[4422] = "Navfac southwest";
      sa[4423] = "Navistar LLC";
      sa[4424] = "Navy";
      sa[4425] = "Navy Federal Credit Union";
      sa[4426] = "NeboNet";
      sa[4427] = "Needhams Companies";
      sa[4428] = "Neighborhood Appliance Repair Company";
      sa[4429] = "Neihule Salon";
      sa[4430] = "Nelson Family of Companies";
      sa[4431] = "Nerve Contracting";
      sa[4432] = "Nestle Purina";
      sa[4433] = "Nestle Waters North America";
      sa[4434] = "Net 100 LTD";
      sa[4435] = "NetJets Inc.";
      sa[4436] = "NetSpend";
      sa[4437] = "Netbase";
      sa[4438] = "Netflix, Inc";
      sa[4439] = "Network Communications";
      sa[4440] = "Network Hardware Resale";
      sa[4441] = "Network Interpreting Service";
      sa[4442] = "Neuberger Berman LLC";
      sa[4443] = "Neuro Pace Inc";
      sa[4444] = "Neurology Center of Carolinas";
      sa[4445] = "Neurowave Medical Technologies";
      sa[4446] = "Nevada Department of Corrections";
      sa[4447] = "New Buck Corporation";
      sa[4448] = "New Dawn Recovery";
      sa[4449] = "New England Concerts";
      sa[4450] = "New England Truck Designs";
      sa[4451] = "New Horizons";
      sa[4452] = "New Jersey Apartment Association";
      sa[4453] = "New Jersey Medical School";
      sa[4454] = "New Jersey State Police";
      sa[4455] = "New Jersey Transit Corporation";
      sa[4456] = "New Lisbon Developmental Center";
      sa[4457] = "New Mexico Department of Health";
      sa[4458] = "New Venture Holding";
      sa[4459] = "New York City Department of Corrections";
      sa[4460] = "New York City Department of Education";
      sa[4461] = "New York City Dept of Education";
      sa[4462] = "New York City Police Department";
      sa[4463] = "New York City Police Dept";
      sa[4464] = "New York Civil LIberties Union";
      sa[4465] = "New York Downtown Hospital";
      sa[4466] = "New York Life";
      sa[4467] = "New York Life Insurance";
      sa[4468] = "New York Life Insurance Company";
      sa[4469] = "New York Life Investments";
      sa[4470] = "New York Presbyterian Hospital";
      sa[4471] = "New York Presbyterian at Columbia";
      sa[4472] = "New York Roofing co";
      sa[4473] = "New York State";
      sa[4474] = "New York State Department of Corrections";
      sa[4475] = "New York State Dept of Transportation";
      sa[4476] = "New York State Police";
      sa[4477] = "New York State Unified Court System";
      sa[4478] = "New York city police department";
      sa[4479] = "New york Life Ins Co";
      sa[4480] = "Newark Emergency Services for Families";
      sa[4481] = "Newark Hybrid High School";
      sa[4482] = "Newark Public Schools";
      sa[4483] = "Newbury Park Vision Care";
      sa[4484] = "Newell Rubbermaid";
      sa[4485] = "Newmark Knight Frank";
      sa[4486] = "Newnan High School";
      sa[4487] = "Newport Center Pharmacy";
      sa[4488] = "Newport-Mesa Unified School District";
      sa[4489] = "News Channel 3-Local TV";
      sa[4490] = "Newtown Savings Bank";
      sa[4491] = "NexTier Bank";
      sa[4492] = "Nexius Inc";
      sa[4493] = "Nextest Systems Corp";
      sa[4494] = "Nexus Digital Studio";
      sa[4495] = "NiSource";
      sa[4496] = "Niagara Bottling Co.";
      sa[4497] = "Nicepak, Inc.";
      sa[4498] = "Nicholas  and  Associates  Inc.";
      sa[4499] = "Nielsen";
      sa[4500] = "Nielsen Beaumont Marine, Inc.";
      sa[4501] = "Nielsen Company";
      sa[4502] = "Nielsen Farms";
      sa[4503] = "Nike";
      sa[4504] = "Nike Golf";
      sa[4505] = "Nikken Inc";
      sa[4506] = "Niles police Department";
      sa[4507] = "NineSigma, Inc.";
      sa[4508] = "Nissan";
      sa[4509] = "Nissan Motor Acceptance Corporation";
      sa[4510] = "Nissan North America";
      sa[4511] = "Nobel Biocare";
      sa[4512] = "Noble Energy";
      sa[4513] = "Noble Properties";
      sa[4514] = "Nobles Restaurants";
      sa[4515] = "Noblis";
      sa[4516] = "Nogales Unified School District #1";
      sa[4517] = "Nokomis Inc.";
      sa[4518] = "Nome Public Schools";
      sa[4519] = "Nomura Securities";
      sa[4520] = "NonPublic Educational Services";
      sa[4521] = "Nordstrom";
      sa[4522] = "Norfolk Public Schools";
      sa[4523] = "Norfolk Souther Corporation";
      sa[4524] = "Norfolk Southern";
      sa[4525] = "Norfolk Southern Corp.";
      sa[4526] = "Norfolk Southern Corporation";
      sa[4527] = "Norfolk Southern Railroad";
      sa[4528] = "Nortel Networks";
      sa[4529] = "North American Industrial Services Inc.";
      sa[4530] = "North American Mission Board";
      sa[4531] = "North Branch Fire District #1";
      sa[4532] = "North Fork Holdings";
      sa[4533] = "North Greenwich Financial LLC";
      sa[4534] = "North Modesto Church of God";
      sa[4535] = "North Point Christian Academy";
      sa[4536] = "North Richland Hills Police Department";
      sa[4537] = "North Salem Central School District";
      sa[4538] = "North point Volvo ";
      sa[4539] = "Northeast Georgia Health Systems";
      sa[4540] = "Northeast Marine Sanitation";
      sa[4541] = "Northeast Utilities";
      sa[4542] = "Northeastern Illinois University";
      sa[4543] = "Northern Arizona University";
      sa[4544] = "Northern CA Retina vitreous ";
      sa[4545] = "Northern Health Centers, Inc.";
      sa[4546] = "Northern Ohio Medical Specialists";
      sa[4547] = "Northern Powerline Constructors Inc";
      sa[4548] = "Northern Trust";
      sa[4549] = "Northern riverview";
      sa[4550] = "Northland Control Systems";
      sa[4551] = "Northland Intl. University";
      sa[4552] = "Northrop Grumman";
      sa[4553] = "Northrop Grumman - Continental Maritime";
      sa[4554] = "Northrop Grumman Aerospace Systems";
      sa[4555] = "Northrop Grumman Corp.";
      sa[4556] = "Northrop Grumman Corporation";
      sa[4557] = "Northshore University Health";
      sa[4558] = "Northstar-at-tahoe";
      sa[4559] = "Northville Public Schools";
      sa[4560] = "Northwest Community Hospital";
      sa[4561] = "Northwest Womens Center";
      sa[4562] = "Northwestern Medical Faculty Foundation";
      sa[4563] = "Northwestern Mutual";
      sa[4564] = "Northwestern School Corporation";
      sa[4565] = "Northwestern Univerity";
      sa[4566] = "Northwestern university";
      sa[4567] = "Norton Hospital";
      sa[4568] = "Norwalk Board of Education";
      sa[4569] = "NourishLife";
      sa[4570] = "Nova Technologies";
      sa[4571] = "Novadebt";
      sa[4572] = "Novare Group";
      sa[4573] = "Novartis Pharmaceuticals";
      sa[4574] = "Novato Unified School District";
      sa[4575] = "Novogradac & Company";
      sa[4576] = "Novozymes";
      sa[4577] = "Nu-Way Transportation Services, Inc.";
      sa[4578] = "Nuance";
      sa[4579] = "Nuclear-Oncology";
      sa[4580] = "Nuconsteel";
      sa[4581] = "Nurse RX / American Mobile";
      sa[4582] = "Nutrition Now";
      sa[4583] = "Nuveen Investments";
      sa[4584] = "Nye County School District";
      sa[4585] = "Nysif";
      sa[4586] = "O'Charleys";
      sa[4587] = "O'Connell Electric Co.";
      sa[4588] = "O'Connor Chevrolet, inc.";
      sa[4589] = "O'Lee Consulting";
      sa[4590] = "O'Melveny & Myers LLP";
      sa[4591] = "O2 media Inc.";
      sa[4592] = "OB GYN Associates, PC";
      sa[4593] = "OBJECTSOFT GROUP INC.";
      sa[4594] = "OCR Services";
      sa[4595] = "OFFICEALLY.COM";
      sa[4596] = "OH Army National Guard";
      sa[4597] = "OHIO TURNPIKE COMMISSON";
      sa[4598] = "OMD";
      sa[4599] = "OMG Inc";
      sa[4600] = "OMNI BERKSHIRE PLACE HOTEL";
      sa[4601] = "OMNITRANS  TRANSIT";
      sa[4602] = "OPASTCO";
      sa[4603] = "OREGON HEALTH & SCIENCE UNIVERSITY";
      sa[4604] = "OUS-University of Oregon Health Center";
      sa[4605] = "Oak Hill Hospital";
      sa[4606] = "Oak Hills Local School District";
      sa[4607] = "Oak Patch Gifts";
      sa[4608] = "Oak Transcription, Inc.";
      sa[4609] = "Oakmont Manor";
      sa[4610] = "Oakville Pump Service, Inc.";
      sa[4611] = "Oberon Associates, A Stanley Company";
      sa[4612] = "Occidental Chemical Corporation";
      sa[4613] = "Occidental Petroleum";
      sa[4614] = "Occupational Medical Care";
      sa[4615] = "Oce Business";
      sa[4616] = "Oce Business Services /DBA DELOITTE";
      sa[4617] = "Ocean Conservancy";
      sa[4618] = "Ocean Health Initiatives";
      sa[4619] = "Oceanside college of beauty";
      sa[4620] = "Odopod";
      sa[4621] = "Odyssey IS";
      sa[4622] = "Odyssey-TCI JV LLC";
      sa[4623] = "Off-Grid Electric";
      sa[4624] = "Office Depot";
      sa[4625] = "Office Products Inc";
      sa[4626] = "Office of Court Administration";
      sa[4627] = "Office of the District of Columbia Audit";
      sa[4628] = "Office of the Federal Defender";
      sa[4629] = "OfficeMax";
      sa[4630] = "Offinger Management Co.";
      sa[4631] = "Ogilvy";
      sa[4632] = "Ohio Air National Guard";
      sa[4633] = "Ohio Attorney General";
      sa[4634] = "Ohio Department of Education";
      sa[4635] = "Ohio Health";
      sa[4636] = "Ohio Valley Bank";
      sa[4637] = "Ok Army National Guard";
      sa[4638] = "Oklahoma Natural Gas";
      sa[4639] = "Old Dominion Freight Lines, Inc.";
      sa[4640] = "Oldcastle Glass";
      sa[4641] = "Olde Towne Kolaches";
      sa[4642] = "Ollies Bargain Outlet";
      sa[4643] = "Ollis & Co";
      sa[4644] = "Olsen Construction Services, LLC";
      sa[4645] = "Olympic College";
      sa[4646] = "Olympus Surgical";
      sa[4647] = "Ombligo";
      sa[4648] = "Omega Home Care";
      sa[4649] = "Omni Hotels";
      sa[4650] = "Omni Systems";
      sa[4651] = "Omnicare";
      sa[4652] = "Omnicare Pharmacy";
      sa[4653] = "Omnicare, Inc.";
      sa[4654] = "Omnyx, LLC";
      sa[4655] = "On Q Financial";
      sa[4656] = "On Site Management";
      sa[4657] = "One of the Big 4 CPA Firms";
      sa[4658] = "OneLegacy";
      sa[4659] = "Onestop Internet";
      sa[4660] = "Onshore Technology";
      sa[4661] = "OpSource Inc";
      sa[4662] = "Open Technologies  Inc";
      sa[4663] = "Open Text";
      sa[4664] = "Ophthalmic Management Company";
      sa[4665] = "Oppenheimer & Co Inc";
      sa[4666] = "Opticos Design  Inc.";
      sa[4667] = "Optimus Editorial";
      sa[4668] = "OptionEase, Inc";
      sa[4669] = "Optum Insight";
      sa[4670] = "Opus Trading Fund";
      sa[4671] = "Oracle";
      sa[4672] = "Oracle Corp";
      sa[4673] = "Oracle Corporation";
      sa[4674] = "Orange County Public Schools";
      sa[4675] = "Orange County Sanitation District";
      sa[4676] = "Orange Lake CC and Resort";
      sa[4677] = "Orange and Rockland Utilities";
      sa[4678] = "Orange county transit";
      sa[4679] = "Orangeburg Consolidated District 3";
      sa[4680] = "Orbital Sciences Corporation";
      sa[4681] = "Orbitz";
      sa[4682] = "Orchard Supply Hardware";
      sa[4683] = "Oregon Department of Revenue";
      sa[4684] = "Organic, LLC";
      sa[4685] = "Organization of American States";
      sa[4686] = "Orgill Inc";
      sa[4687] = "Origin Health Care";
      sa[4688] = "Origo Networks";
      sa[4689] = "Orkin";
      sa[4690] = "Orkin Pest Control";
      sa[4691] = "Orlando Health";
      sa[4692] = "Orlando Police department";
      sa[4693] = "Orlando Regional Healthcare";
      sa[4694] = "Orlando Team Sports";
      sa[4695] = "Orly International";
      sa[4696] = "Orphic Workshop";
      sa[4697] = "Orphic Workshop, LLC";
      sa[4698] = "Orrick LLP ";
      sa[4699] = "OrthoMidwest Inc";
      sa[4700] = "Osborne Medina";
      sa[4701] = "Oscar Gruss and Son";
      sa[4702] = "Osiris Group, Inc.";
      sa[4703] = "Osprey Packs";
      sa[4704] = "Ostrolenk Faber LLP";
      sa[4705] = "Otis Elevator";
      sa[4706] = "Ottawa University";
      sa[4707] = "OutletPC";
      sa[4708] = "Outreach and Specail Needs";
      sa[4709] = "Outsource IT Solutions Group, Inc.";
      sa[4710] = "Outsource Receivables";
      sa[4711] = "Ovations food service";
      sa[4712] = "Ove Arup  and  Partners";
      sa[4713] = "Overstock.com";
      sa[4714] = "Overwatch Systems";
      sa[4715] = "Owen D. Young CSD";
      sa[4716] = "Owens Illinois, Inc.";
      sa[4717] = "Owens-Illinois";
      sa[4718] = "Oxbo International";
      sa[4719] = "Oxyheal health group";
      sa[4720] = "P. K. Willis";
      sa[4721] = "P. Mars Scott Law Offices";
      sa[4722] = "P.M.A.M.";
      sa[4723] = "PAR Pharma";
      sa[4724] = "PARADISE HARLEY DAVIDSON";
      sa[4725] = "PAREXEL International";
      sa[4726] = "PAUL TRANSPORTATION, INC";
      sa[4727] = "PBC Bd of County Commissioners";
      sa[4728] = "PC Helps Support LLC";
      sa[4729] = "PC, Inc";
      sa[4730] = "PCA";
      sa[4731] = "PCM Studios";
      sa[4732] = "PCTI Board of Education";
      sa[4733] = "PCX Holdings, LLC";
      sa[4734] = "PDK Wheels";
      sa[4735] = "PEARL CARROLL & ASSOCIATES LLC";
      sa[4736] = "PEC Corp.";
      sa[4737] = "PECI";
      sa[4738] = "PEI";
      sa[4739] = "PENNRIDGE HS";
      sa[4740] = "PENNSBURY SCHOOL DISTRICT";
      sa[4741] = "PEPSI";
      sa[4742] = "PERRY MEMORIAL";
      sa[4743] = "PERRYTON FEEDERS LLC";
      sa[4744] = "PF Chang's China Bistro";
      sa[4745] = "PFIZER INC";
      sa[4746] = "PFSC";
      sa[4747] = "PFSweb";
      sa[4748] = "PGE";
      sa[4749] = "PHILIP MORRIS";
      sa[4750] = "PHS";
      sa[4751] = "PHT Corporation";
      sa[4752] = "PINE BLUFF ARSENAL";
      sa[4753] = "PING Golf";
      sa[4754] = "PITNEY BOWES";
      sa[4755] = "PMA Insurance Group";
      sa[4756] = "PNC Bank";
      sa[4757] = "PNC Bank, N.A.";
      sa[4758] = "PONY CONSULTING CORP";
      sa[4759] = "POOLCORP";
      sa[4760] = "PORTAGE ENVIRONMENTAL, INC.";
      sa[4761] = "PPG Industries";
      sa[4762] = "PRA International";
      sa[4763] = "PRECIISION ENTERPRISES";
      sa[4764] = "PRG";
      sa[4765] = "PROFITLINE";
      sa[4766] = "PROGRESSIVE INSURANCE CORPORATION";
      sa[4767] = "PRTM";
      sa[4768] = "PS 503";
      sa[4769] = "PSA Law";
      sa[4770] = "PSCU Financial";
      sa[4771] = "PSEG Nuclear";
      sa[4772] = "PSS World Medical, Inc";
      sa[4773] = "PSS World Medical, Inc.";
      sa[4774] = "PT Holdings";
      sa[4775] = "PT, OT, Speech Now";
      sa[4776] = "PTI Technologies";
      sa[4777] = "PTV America Inc.";
      sa[4778] = "PUBLIC SERVICE ELECTRIC AND GAS";
      sa[4779] = "PVH";
      sa[4780] = "PVPUSD";
      sa[4781] = "PWP Industries";
      sa[4782] = "PWS, Inc.";
      sa[4783] = "Pa State Police";
      sa[4784] = "Pacific Ambulance";
      sa[4785] = "Pacific Automotive Company";
      sa[4786] = "Pacific Capital Bancorp";
      sa[4787] = "Pacific Community Ventures";
      sa[4788] = "Pacific Cookie Company";
      sa[4789] = "Pacific Gas and Electric Company";
      sa[4790] = "Pacific Honda";
      sa[4791] = "Pacific Life Insurance";
      sa[4792] = "Pacific Maritime Association";
      sa[4793] = "Pacific Steel Casting Co";
      sa[4794] = "Pacific Waterjet Cutting Inc";
      sa[4795] = "Pacific university";
      sa[4796] = "Packaging Consultants  Inc.";
      sa[4797] = "Pactiv";
      sa[4798] = "Paddy Murphy's";
      sa[4799] = "Page Unified School Dist. #8";
      sa[4800] = "Pala Casino";
      sa[4801] = "Palgrave Macmillan";
      sa[4802] = "Palisades Federal Credit Union";
      sa[4803] = "Palletized Trucking Inc";
      sa[4804] = "Palm Beach Cardiology";
      sa[4805] = "Palm Beach County Schools";
      sa[4806] = "Palm Restaurant";
      sa[4807] = "Palmateer Insurance";
      sa[4808] = "Palmetto Elementary School";
      sa[4809] = "Palmetto Technology Consulting";
      sa[4810] = "Palo Verde Unified School District";
      sa[4811] = "Palombo's Med-Rite Pharmacy";
      sa[4812] = "Pampa regional medical center";
      sa[4813] = "Panasonic";
      sa[4814] = "Panasonic Avionics";
      sa[4815] = "Panasonic Avionics Corporation";
      sa[4816] = "Pandell Law Firm  Inc.";
      sa[4817] = "Panhandle Eastern Pipe Line Co";
      sa[4818] = "Pantheon Ventures US LP";
      sa[4819] = "Papa Architect  P.c.";
      sa[4820] = "Papa John's Pizza";
      sa[4821] = "Papa Murphys";
      sa[4822] = "Pape and Sons Construction";
      sa[4823] = "PaperThin";
      sa[4824] = "Papyrus";
      sa[4825] = "Par Electric";
      sa[4826] = "Paradigm Precision LLC";
      sa[4827] = "Paradise Valley Hospital";
      sa[4828] = "Paragon Honda";
      sa[4829] = "Paragon Technology Group";
      sa[4830] = "Parc Lafayette";
      sa[4831] = "Paris Uniform Services";
      sa[4832] = "Pariveda Solutions  Inc.";
      sa[4833] = "Park Place Motorcars";
      sa[4834] = "Park South Tenants Corp";
      sa[4835] = "Park University";
      sa[4836] = "Parker Palm Springs";
      sa[4837] = "Parkinson's Action Network";
      sa[4838] = "Parkside Anesthesia";
      sa[4839] = "Parrish/McIntyre Tire Co.";
      sa[4840] = "Parsons Corporation";
      sa[4841] = "Partners Healthcare";
      sa[4842] = "Partnership with Children";
      sa[4843] = "Party Rental";
      sa[4844] = "Parus Holdings Inc";
      sa[4845] = "Pasadena ISD";
      sa[4846] = "Pasadena Ice Skating Center";
      sa[4847] = "Pasquale,s and Sons Pizza Company";
      sa[4848] = "Passaic Board of Education";
      sa[4849] = "Pathfinders of Oregon";
      sa[4850] = "Pathway Homes Inc";
      sa[4851] = "Paton Controls  and  Engineering";
      sa[4852] = "Patterson Companies, Inc.-Midland";
      sa[4853] = "Paul Davis Restoration and Remodeling";
      sa[4854] = "Paul, Hastings, Janofsky & Walker LLP";
      sa[4855] = "Paul, Weiss, Rifkind, Wharton & Garrison";
      sa[4856] = "Pavia-Marting & Co.";
      sa[4857] = "Pawtucket Fire Department";
      sa[4858] = "PayPal";
      sa[4859] = "Paychex";
      sa[4860] = "Paychex Inc";
      sa[4861] = "Payless";
      sa[4862] = "Peaberry's Cafe";
      sa[4863] = "Peabody press";
      sa[4864] = "Peace Health";
      sa[4865] = "Peace Over Violence";
      sa[4866] = "Peace Security";
      sa[4867] = "Pearce windows and doors";
      sa[4868] = "Pearson Education";
      sa[4869] = "Peckar & abramson";
      sa[4870] = "Pegasystems";
      sa[4871] = "Pekin Hospital";
      sa[4872] = "Pelco";
      sa[4873] = "Pella Windows";
      sa[4874] = "Pendleton's Hardware  and  Power Products";
      sa[4875] = "Pendum  LLC";
      sa[4876] = "Peninsula Counseling Center";
      sa[4877] = "Peninsula Regional Medical Center";
      sa[4878] = "Penn Presbyterian Hospital";
      sa[4879] = "Pennsylvania State University";
      sa[4880] = "PennyMac Loan Services";
      sa[4881] = "Pennyslvania College of Technology";
      sa[4882] = "Pensacola Christian College";
      sa[4883] = "Penske Automotive Group - BMW of SD";
      sa[4884] = "Penske Automotive Group, Inc.";
      sa[4885] = "Pentair Technical Products";
      sa[4886] = "Pentegra Retirement Services";
      sa[4887] = "Peoples Bank ";
      sa[4888] = "Peopletech Group";
      sa[4889] = "Peoria Unified School District";
      sa[4890] = "Pepboys";
      sa[4891] = "Pepper Hamilton LLP";
      sa[4892] = "Peppermill Casinos Inc";
      sa[4893] = "PepsiCo";
      sa[4894] = "Pepsico";
      sa[4895] = "Peralta Community College District";
      sa[4896] = "Percy Hoek Inc";
      sa[4897] = "Perdue Farms Inc.";
      sa[4898] = "PerfectServe";
      sa[4899] = "Performance Ready Mix ";
      sa[4900] = "Performance Rehabilitation";
      sa[4901] = "Performance Sign ";
      sa[4902] = "Pericom ";
      sa[4903] = "Perkin Elmer";
      sa[4904] = "Perkins Coie LLP";
      sa[4905] = "Perkins+Will";
      sa[4906] = "Permapier Foundation Repair";
      sa[4907] = "Perot Systems";
      sa[4908] = "Pesci Family";
      sa[4909] = "Pet Zoo Alaska LLC";
      sa[4910] = "PetFirst Healthcare";
      sa[4911] = "PetSmart";
      sa[4912] = "Pete Robertson Ins Inc.";
      sa[4913] = "Peter J Oliff DDS";
      sa[4914] = "Peter Roberts and Associates";
      sa[4915] = "Petobego LLC";
      sa[4916] = "Petroleum Geo Services";
      sa[4917] = "Pfizer";
      sa[4918] = "Pfizer Pharmaceuticals";
      sa[4919] = "Pfizer, Inc.";
      sa[4920] = "Pham's Car Care Center, Inc.";
      sa[4921] = "Phenom LLC";
      sa[4922] = "Phifer Inc";
      sa[4923] = "PhilCorr L.L.C";
      sa[4924] = "Philadelphia Federal Credit Union";
      sa[4925] = "Philadelphia Financial Group";
      sa[4926] = "Philadelphia Floor Store, Inc.";
      sa[4927] = "Philadelphia Insurance Company";
      sa[4928] = "Philips";
      sa[4929] = "Philips Healthcare";
      sa[4930] = "Phill Razitano";
      sa[4931] = "Phillips & Cohen LLP";
      sa[4932] = "Phillips Grading and Construction Inc.";
      sa[4933] = "Pho Jackie (Family Business)";
      sa[4934] = "Phoenix Airport Transportation";
      sa[4935] = "Phoenix Newspapers Inc.";
      sa[4936] = "Phoenix Resources  Inc.";
      sa[4937] = "Phoenix contact";
      sa[4938] = "Photodex Corporation";
      sa[4939] = "Photography By Foschi  LLC";
      sa[4940] = "Physical Sciences Inc.";
      sa[4941] = "Physician Billing & Collection";
      sa[4942] = "Physicians Reference Laboratory";
      sa[4943] = "Physio-Control Inc";
      sa[4944] = "Picarro, Inc.";
      sa[4945] = "Piccadilly Inn";
      sa[4946] = "Pierce County Library System";
      sa[4947] = "Piermont Wealth Management Inc";
      sa[4948] = "Pike Electric";
      sa[4949] = "Pillar Group";
      sa[4950] = "Pilot Fregith Services";
      sa[4951] = "Pima Colege";
      sa[4952] = "Pinellas county sheriff office ";
      sa[4953] = "Ping Identity";
      sa[4954] = "Pinkerton Government Services";
      sa[4955] = "Pinkham Real Estate";
      sa[4956] = "Pinnacle Airlines";
      sa[4957] = "Pinnacol Assurance";
      sa[4958] = "Pioneer Investments";
      sa[4959] = "Pioneer Landscape  and  Asphalt";
      sa[4960] = "Pioneer Nutritional";
      sa[4961] = "Pioneer Prep";
      sa[4962] = "Pioneer Property Group";
      sa[4963] = "Pischke Motors of La Crosse";
      sa[4964] = "PitNey Bowes";
      sa[4965] = "Pita Jungle";
      sa[4966] = "Pita Pit";
      sa[4967] = "Pitney Bowes";
      sa[4968] = "Pitt County Memorial Hospital";
      sa[4969] = "Pitt Memorial Hospital";
      sa[4970] = "Pittsburgh Gateways";
      sa[4971] = "Pittsfield Public Schools";
      sa[4972] = "Pixsy Corporation";
      sa[4973] = "Pizza Hut";
      sa[4974] = "Pizza Restaurant";
      sa[4975] = "Plant Engineering and Maintenance";
      sa[4976] = "Planview Inc";
      sa[4977] = "Plastic Surgery Associates of Lynchburg";
      sa[4978] = "Plateau Systems";
      sa[4979] = "Platinum Group of Companies";
      sa[4980] = "Platinum Solutions Inc.";
      sa[4981] = "Platte River Capital, LLC";
      sa[4982] = "Platts Motors Inc";
      sa[4983] = "PlayHaven";
      sa[4984] = "Plaza Gifts and Jewelry";
      sa[4985] = "Plexus";
      sa[4986] = "Plus One";
      sa[4987] = "PlusOne Holdings";
      sa[4988] = "Plymouth Canton Community Schools";
      sa[4989] = "Poet";
      sa[4990] = "PointBank";
      sa[4991] = "Pointserve, Inc.";
      sa[4992] = "Polaris Financial Partners, LLC";
      sa[4993] = "Polk Community College";
      sa[4994] = "Polk County School Board";
      sa[4995] = "Pollack & Rosen P.A.";
      sa[4996] = "Polmost Food Corp";
      sa[4997] = "Poly-America";
      sa[4998] = "Polygon Visual Effects, LLC";
      sa[4999] = "Pool & Spa Rx";
      sa[5000] = "Poole & Associates";
      sa[5001] = "Porsche Business Services";
      sa[5002] = "Porsche Cars N.A";
      sa[5003] = "Porsche Cars North America";
      sa[5004] = "Port Authority of NY & NJ";
      sa[5005] = "Port Townsend Sails";
      sa[5006] = "Port Washington Police District";
      sa[5007] = "Port of Everett";
      sa[5008] = "Port of Oakland";
      sa[5009] = "Port of Tacoma";
      sa[5010] = "Portland Public Schools";
      sa[5011] = "Posse Atlanta";
      sa[5012] = "Post Office";
      sa[5013] = "Post-Newsweek Stations";
      sa[5014] = "Potbelly sandwich shop";
      sa[5015] = "Powder River Energy";
      sa[5016] = "Power Sport Industries";
      sa[5017] = "PrO Unlimited";
      sa[5018] = "Prairie Family Therapy";
      sa[5019] = "Prairie Farms Dairy";
      sa[5020] = "PrePak Systems";
      sa[5021] = "Precision Camera";
      sa[5022] = "Precision Capital";
      sa[5023] = "Precision Castparts Corporation";
      sa[5024] = "Precision Concrete, Inc.";
      sa[5025] = "Precision Heliparts";
      sa[5026] = "Precision Work, Inc.";
      sa[5027] = "Preco Industries";
      sa[5028] = "Premier Academy";
      sa[5029] = "Premier Enterprise";
      sa[5030] = "Premier Security Services";
      sa[5031] = "Premier Transportation";
      sa[5032] = "Premiere Inc";
      sa[5033] = "Premiere Response";
      sa[5034] = "Presagis";
      sa[5035] = "Presbyterian Homes";
      sa[5036] = "Presidential Airways";
      sa[5037] = "Presto Products, Co";
      sa[5038] = "Pretzel& Stouffer, Chartered";
      sa[5039] = "Price Chopper";
      sa[5040] = "PriceWaterhouseCoopers LLP";
      sa[5041] = "Pricewaterhouse Coopers";
      sa[5042] = "PricewaterhouseCoopers";
      sa[5043] = "PricewaterhouseCoopers LLP";
      sa[5044] = "Primarily Kids Preschool";
      sa[5045] = "Primary Wave Music";
      sa[5046] = "Prime Advisors";
      sa[5047] = "Prime Deli Corporation";
      sa[5048] = "Prime Marine Services";
      sa[5049] = "Prime Resource Group";
      sa[5050] = "Primerica ";
      sa[5051] = "Primrerica Insurance";
      sa[5052] = "Prince George's County Public Schools";
      sa[5053] = "Prince Georges County PD";
      sa[5054] = "Princeton Consultants, Inc";
      sa[5055] = "Principal Financial Group";
      sa[5056] = "Priority Jet LLC.";
      sa[5057] = "Prism Microsystems, Inc.";
      sa[5058] = "Private family";
      sa[5059] = "Pro Image Sportswear";
      sa[5060] = "Pro Reps West";
      sa[5061] = "Pro-Telligent";
      sa[5062] = "Process Control Specialties, Inc.";
      sa[5063] = "Processes Unlimited";
      sa[5064] = "Procter and Gamble";
      sa[5065] = "Procter and Gamble Co.";
      sa[5066] = "Proctor and Gamble";
      sa[5067] = "Producers Inc";
      sa[5068] = "Product Quest mfg";
      sa[5069] = "Professional Project Services";
      sa[5070] = "Professional Rehab Services";
      sa[5071] = "Professional Risk Management Services";
      sa[5072] = "Profile Grinding, Inc.";
      sa[5073] = "Progress Energy";
      sa[5074] = "Progress Rail";
      sa[5075] = "Progressive Business Publications";
      sa[5076] = "Progressive Health and Rehabilitation";
      sa[5077] = "Progressive Heating, Cooling, & Refriger";
      sa[5078] = "Progressive Incorporated";
      sa[5079] = "Progressive Insurance";
      sa[5080] = "Project HOPE";
      sa[5081] = "Project Leadership Associates";
      sa[5082] = "Project Management Institute";
      sa[5083] = "Promenet inc";
      sa[5084] = "Prometric";
      sa[5085] = "Prosecuting Attorney's Council";
      sa[5086] = "Prospect Mortgage";
      sa[5087] = "Prospect Transportation Inc.";
      sa[5088] = "Prosperity Mortgage Company";
      sa[5089] = "Prostaff";
      sa[5090] = "Protective Life Insurance Company";
      sa[5091] = "Protiviti";
      sa[5092] = "Protiviti ";
      sa[5093] = "Proven Direct";
      sa[5094] = "Providence Associates Medical Laboratories";
      sa[5095] = "Providence Health Systems";
      sa[5096] = "Providence Health and Services";
      sa[5097] = "Providence Home Care";
      sa[5098] = "Providence VA Medical Center";
      sa[5099] = "Provider Insurance Group";
      sa[5100] = "Prudent Man Investment Management";
      sa[5101] = "Prudential Fox & Roach Realtors";
      sa[5102] = "Prudential Fox & Roach/Century21 Allianc";
      sa[5103] = "Prudential Rubloff Properties";
      sa[5104] = "Prudential Tropical Realty";
      sa[5105] = "Psychology Software Tools";
      sa[5106] = "Public Company Acct. Oversight Board";
      sa[5107] = "Public Storage";
      sa[5108] = "Publix";
      sa[5109] = "Pueblo of Sandia Tribal Gaming Comm.";
      sa[5110] = "Puget Sound Naval Shipyard";
      sa[5111] = "Pulaski Bank";
      sa[5112] = "Pulcinella's";
      sa[5113] = "Pulte Homes";
      sa[5114] = "Purcell Tire & Rubber Company";
      sa[5115] = "Purdum Gray Ingledue";
      sa[5116] = "PureScience Applications, LLC";
      sa[5117] = "Puzo Web Data";
      sa[5118] = "PwC";
      sa[5119] = "Pyramid Hotel Group";
      sa[5120] = "Pyramid Services Inc";
      sa[5121] = "QUEST DIAGNOSTICS";
      sa[5122] = "QW Express";
      sa[5123] = "QinetiQ, North America";
      sa[5124] = "Qscend Technologies, Inc.";
      sa[5125] = "Qteros  Inc.";
      sa[5126] = "Quadrangle Development Corporation";
      sa[5127] = "Quail Industries, Inc.";
      sa[5128] = "Quail Tools";
      sa[5129] = "Quaker Sales and Distribution";
      sa[5130] = "Quaker Valley School District";
      sa[5131] = "Qualcomm";
      sa[5132] = "Quality Carriers";
      sa[5133] = "Quality Food Centers";
      sa[5134] = "Quality King";
      sa[5135] = "Quality Nissan";
      sa[5136] = "Quality Professionals International";
      sa[5137] = "Quality Vision International";
      sa[5138] = "Quality machine shop";
      sa[5139] = "Quapaw Tribe";
      sa[5140] = "Queen Annes County";
      sa[5141] = "Queens College";
      sa[5142] = "Queens College CUNY";
      sa[5143] = "Quest Title Agency";
      sa[5144] = "Questmark Flooring";
      sa[5145] = "Quick Chek Corp";
      sa[5146] = "QuikTrip Corporation";
      sa[5147] = "Quill";
      sa[5148] = "Quintiles";
      sa[5149] = "Qwest";
      sa[5150] = "R & H Industries DBA Best Electric";
      sa[5151] = "R&O Construction";
      sa[5152] = "R&R Partners";
      sa[5153] = "R&R Retail Meats";
      sa[5154] = "R.E. Michel Company";
      sa[5155] = "R.E. Serrano";
      sa[5156] = "R.G. Niederhoffer Capital Management";
      sa[5157] = "R.W. Harden & Associates, Inc.";
      sa[5158] = "RAFFERTY SUBARU";
      sa[5159] = "RALPHS WAREHOUSE";
      sa[5160] = "RAM DME";
      sa[5161] = "RANKIN & RANKIN INC";
      sa[5162] = "RANSTAD";
      sa[5163] = "RBC Bank";
      sa[5164] = "RBC Bearings";
      sa[5165] = "RBG Managment Corp";
      sa[5166] = "RBM of Atlanta";
      sa[5167] = "RBS Data Services";
      sa[5168] = "RCI Sound Systems";
      sa[5169] = "RCM Inc.";
      sa[5170] = "RCPMS";
      sa[5171] = "RDF Media";
      sa[5172] = "RDY AGENCY";
      sa[5173] = "READER'S WORLD WHOLESALE, LTD";
      sa[5174] = "READINGTON FARMS";
      sa[5175] = "REC Solar";
      sa[5176] = "REEVES LAND ROVER";
      sa[5177] = "REHAB STAFFING";
      sa[5178] = "RESPIRATORY HEALTH SERVICES";
      sa[5179] = "RFI COMMUNICATIONS";
      sa[5180] = "RGIS";
      sa[5181] = "RGL Forensics";
      sa[5182] = "RINET Company, LLC";
      sa[5183] = "RISD";
      sa[5184] = "RLHICA";
      sa[5185] = "RML Specialty Hospital Hinsdale";
      sa[5186] = "ROBINS AIR FORCE BASE";
      sa[5187] = "ROSING PAINTING Co";
      sa[5188] = "ROTHROCK MOTORS";
      sa[5189] = "ROYSTON LLC";
      sa[5190] = "RRI";
      sa[5191] = "RRd Partners";
      sa[5192] = "RS Roofing & Sheet Metal Co, Inc,";
      sa[5193] = "RSI BUILDING PRODUCTS";
      sa[5194] = "RTI Biologics";
      sa[5195] = "RVi Planning";
      sa[5196] = "RWM, PLLC";
      sa[5197] = "Rabobank International";
      sa[5198] = "Rabobank NA";
      sa[5199] = "Rackspace";
      sa[5200] = "Rackspace Hosting";
      sa[5201] = "Radian Guaranty";
      sa[5202] = "Radiant Life Church";
      sa[5203] = "Radiant Systems";
      sa[5204] = "Rael & Letson";
      sa[5205] = "Ragnar Benson";
      sa[5206] = "Rail Europe Group";
      sa[5207] = "Rain Bird";
      sa[5208] = "Raleigh-Durham Airport Authority";
      sa[5209] = "Raley's";
      sa[5210] = "Ralphs Grocery Co.";
      sa[5211] = "Ralphs Market";
      sa[5212] = "Ranchers Club";
      sa[5213] = "Randall-Reilly Publishing Co.";
      sa[5214] = "Randolph County Schools";
      sa[5215] = "Raoul's Restaurant ";
      sa[5216] = "Rapid Systems";
      sa[5217] = "Rashmi C. Patel, DDS, Enfield, LLC";
      sa[5218] = "Rasmussen College";
      sa[5219] = "Ratliff & Assoc";
      sa[5220] = "Raven Industries";
      sa[5221] = "Ray Jordan  PC";
      sa[5222] = "Raymond James Financial";
      sa[5223] = "Raytheon";
      sa[5224] = "Raytheon ";
      sa[5225] = "Raytheon Company";
      sa[5226] = "Raytheon IDS";
      sa[5227] = "Raytheon SAS";
      sa[5228] = "Rbc bank";
      sa[5229] = "ReNEW Schools";
      sa[5230] = "Reachforce Inc.";
      sa[5231] = "Reading Rock";
      sa[5232] = "Realtor Assn of Greater Ft Lauderdale";
      sa[5233] = "Reasor's";
      sa[5234] = "Rebling Plastics";
      sa[5235] = "Reboot Networks";
      sa[5236] = "Recochem Inc.";
      sa[5237] = "Record Searchlight";
      sa[5238] = "Recycle Bookstore";
      sa[5239] = "Red Bluff Unified Elementary School District";
      sa[5240] = "Red Prairie";
      sa[5241] = "Red Rocket Merchandising Corp";
      sa[5242] = "Red Stone Equity Partners";
      sa[5243] = "Red Ventures";
      sa[5244] = "Redbird Boats";
      sa[5245] = "Redcats USA";
      sa[5246] = "Redi2 Technologies";
      sa[5247] = "Reed Trucking";
      sa[5248] = "Reflectx Staffing";
      sa[5249] = "Reflectx Staffing Services";
      sa[5250] = "Regal Bank & Trust";
      sa[5251] = "Regal Entertainment Group";
      sa[5252] = "Regal Pest Management";
      sa[5253] = "Regence";
      sa[5254] = "Regent Condominium";
      sa[5255] = "Regional Elite Airlines Services";
      sa[5256] = "Regional Medical Center of Orangeburg SC";
      sa[5257] = "Regional Transportation District - Denve";
      sa[5258] = "Regis Corporation";
      sa[5259] = "Registration Control Systems";
      sa[5260] = "Regulatory Affairs Professionals Society";
      sa[5261] = "Regus";
      sa[5262] = "Rehab Alliance";
      sa[5263] = "Reines RV Center";
      sa[5264] = "Reliable Industries";
      sa[5265] = "Renasant Bank";
      sa[5266] = "Renesas Technology America";
      sa[5267] = "Renfro Hot Tubs";
      sa[5268] = "Reno Hardware & Supply, Inc.";
      sa[5269] = "Reno- Sparks Convention Authority";
      sa[5270] = "Rentrak";
      sa[5271] = "Republic Airways Holdings";
      sa[5272] = "Republic First Bank";
      sa[5273] = "Republic National Distributing Company";
      sa[5274] = "Research Foundation Of Mental Hygeine- Columbia University";
      sa[5275] = "Research To Practice";
      sa[5276] = "Research Triangle Institute";
      sa[5277] = "ResortQuest By Wyndham Vacation Rentals";
      sa[5278] = "Resources for Seniors";
      sa[5279] = "Responsive Learning Technologies";
      sa[5280] = "Restaurant";
      sa[5281] = "Restaurant Associates";
      sa[5282] = "Restaurant Eve";
      sa[5283] = "Restoration Heat& Air";
      sa[5284] = "Restoration Management Company";
      sa[5285] = "Retired";
      sa[5286] = "Retired & Disability";
      sa[5287] = "Retired From Hoosier Energy";
      sa[5288] = "Retired Police Officer";
      sa[5289] = "Retired Veteran";
      sa[5290] = "Rewatchable, Inc.";
      sa[5291] = "Rexam";
      sa[5292] = "Reynolds Buick";
      sa[5293] = "Reynolds and Reynolds";
      sa[5294] = "Rhino Steel Building Systems";
      sa[5295] = "Rho";
      sa[5296] = "Rhode Island Public Transit Authority";
      sa[5297] = "Rhodes Auto";
      sa[5298] = "Rialto Unified School District";
      sa[5299] = "Rice University";
      sa[5300] = "Rich Dad Company";
      sa[5301] = "Rich Products Corporation";
      sa[5302] = "RichRelevance.com";
      sa[5303] = "Richard Tucker Music Foundation";
      sa[5304] = "Richemont North America";
      sa[5305] = "Richland County School District One";
      sa[5306] = "Richly Interactive, Inc.";
      sa[5307] = "Richmond County Sheriff's Department";
      sa[5308] = "Richter and Associates";
      sa[5309] = "Ricks Electric";
      sa[5310] = "Ricoh Printing Systems America, Inc";
      sa[5311] = "Ridgecrest Capital Partners";
      sa[5312] = "Ridgewell's, Inc.";
      sa[5313] = "Riedell & Company";
      sa[5314] = "Rillago Home Health Services";
      sa[5315] = "Rim of the World Unified School District";
      sa[5316] = "Rinchem Company Inc";
      sa[5317] = "Ring Power";
      sa[5318] = "Ripple IT";
      sa[5319] = "Risk Management Strategies/ Mary Mears Trust";
      sa[5320] = "Risk Placement Services, Inc - CM&M";
      sa[5321] = "Rite Aid";
      sa[5322] = "River Front Chrysler/Jeep/Dodge";
      sa[5323] = "Riverbend Financial Group";
      sa[5324] = "Riverchase Animal Hospital";
      sa[5325] = "Riverside County";
      sa[5326] = "Riverside County ";
      sa[5327] = "Riverstone Enterprise Solutions, LLC";
      sa[5328] = "Rivetal";
      sa[5329] = "Riviera Insurance Services";
      sa[5330] = "Riviera broadcast group LLC";
      sa[5331] = "Rivington Financial Services";
      sa[5332] = "RoadNarrows Robotics";
      sa[5333] = "Roadmasters";
      sa[5334] = "Robert Morris University";
      sa[5335] = "Roberts Markel PC";
      sa[5336] = "Roberts Truck Center";
      sa[5337] = "Robins AFB ";
      sa[5338] = "Robinson Nevada Mining Co";
      sa[5339] = "Robinson Nevada Mining Corp.";
      sa[5340] = "Robinson dairy INC";
      sa[5341] = "Robomodo";
      sa[5342] = "Rochester General Hospital";
      sa[5343] = "Rochester Institute of Technology";
      sa[5344] = "Rochester Meat co.";
      sa[5345] = "Rock City Gardens";
      sa[5346] = "RockTenn";
      sa[5347] = "Rockcastle County Board of Education";
      sa[5348] = "Rockingham County Public Schools";
      sa[5349] = "Rockland Golf Course";
      sa[5350] = "Rockwell Automation";
      sa[5351] = "Rockwell Collins";
      sa[5352] = "Rockwood School District";
      sa[5353] = "Rockwood Service Corp";
      sa[5354] = "Rocky Mountain Connections";
      sa[5355] = "Rocky Mountain Energy Solutions";
      sa[5356] = "Rodale";
      sa[5357] = "Rodan and Fields";
      sa[5358] = "Roerig, Oliveira & Fisher, LLP";
      sa[5359] = "Roger Dean Chevrolet";
      sa[5360] = "Roger George Rentals";
      sa[5361] = "Rohrich Toyota";
      sa[5362] = "Rollins Fire Sprinklers";
      sa[5363] = "Roma Bank";
      sa[5364] = "Ron Carter Ford";
      sa[5365] = "Ronald Parks";
      sa[5366] = "Roofers Plus";
      sa[5367] = "Rooms To Go";
      sa[5368] = "Roselle Park Board of Education";
      sa[5369] = "Rosenbauer General Safety";
      sa[5370] = "Ross & Yerger Insurance, Inc. ";
      sa[5371] = "Ross Stores";
      sa[5372] = "Ross Stores. inc.";
      sa[5373] = "Rostami OPC";
      sa[5374] = "Roswelll Regional Hospital";
      sa[5375] = "Rotech";
      sa[5376] = "Roth Building Company";
      sa[5377] = "Rothschild  and  Associates PLLC";
      sa[5378] = "Rothwell Figg Ernst + Manbeck P.C.";
      sa[5379] = "Rounder Records";
      sa[5380] = "Rouse Consulting Group";
      sa[5381] = "Routh Packing";
      sa[5382] = "Roux Associates, Inc.";
      sa[5383] = "Rowerdink Inc";
      sa[5384] = "Royal Ambulance";
      sa[5385] = "Royal Bank of Scotland";
      sa[5386] = "Royal Caribbean Cruises Ltd";
      sa[5387] = "Royal Processing Company, Inc.";
      sa[5388] = "Royale Group";
      sa[5389] = "Ruan Transportaion";
      sa[5390] = "Rubicon Financial";
      sa[5391] = "Ruby Tuesday";
      sa[5392] = "Ruby Tuesday, Inc";
      sa[5393] = "Rudder Inc";
      sa[5394] = "Ruddick Corp";
      sa[5395] = "Rudney Solomon Cohen & Felzer P. C.";
      sa[5396] = "Rudy's Barber Shops";
      sa[5397] = "Rudy's Barbershop";
      sa[5398] = "Rush Health Systems";
      sa[5399] = "Rush medical hospital";
      sa[5400] = "Rusk State Hospital";
      sa[5401] = "Russ Hadick & Associates, Inc";
      sa[5402] = "Rusty Armor";
      sa[5403] = "Ruth's Chris Steakhouse";
      sa[5404] = "Rutland Plastic Tech Inc";
      sa[5405] = "Ryder";
      sa[5406] = "Ryder Integrated Logistics";
      sa[5407] = "Ryla Teleservices";
      sa[5408] = "Ryzen Solutions";
      sa[5409] = "S E C U";
      sa[5410] = "S T L Architects";
      sa[5411] = "S&S Tire";
      sa[5412] = "S&W Wilson Enterprises INC.";
      sa[5413] = "S.C.A.R.C";
      sa[5414] = "S.C.I.";
      sa[5415] = "SA Quality Fence";
      sa[5416] = "SAC Capital Advisors";
      sa[5417] = "SAFE Security";
      sa[5418] = "SAIC";
      sa[5419] = "SAIF Corp.";
      sa[5420] = "SALINAS VALLEY FORD";
      sa[5421] = "SALON EVAMICHELLE ";
      sa[5422] = "SANUKA MEDICAL CENTER";
      sa[5423] = "SARA LEE BAKERY GROUP";
      sa[5424] = "SAS Institute";
      sa[5425] = "SAS Safety Corp";
      sa[5426] = "SAVA Senior Care";
      sa[5427] = "SAVVIS";
      sa[5428] = "SB New York";
      sa[5429] = "SC Dept. of Health & Environmental Ctr";
      sa[5430] = "SC Law Enforcement Division";
      sa[5431] = "SCA Personal Care NA";
      sa[5432] = "SCHOOLSFIRST FEDERAL CREDIT UNION";
      sa[5433] = "SCUHS";
      sa[5434] = "SD 129";
      sa[5435] = "SDG and E";
      sa[5436] = "SEI";
      sa[5437] = "SEI Investments, Co";
      sa[5438] = "SEIA";
      sa[5439] = "SELF";
      sa[5440] = "SELF EMPLOYED";
      sa[5441] = "SERVPRO of Wheaton/Glen Ellyn";
      sa[5442] = "SES";
      sa[5443] = "SFMTA";
      sa[5444] = "SGS North America";
      sa[5445] = "SGT";
      sa[5446] = "SHOPKO";
      sa[5447] = "SHOPRITE";
      sa[5448] = "SIEMENS BUILDING TECHNOLOGIES";
      sa[5449] = "SIMONS REAL ESTATE";
      sa[5450] = "SIRVA Relocation";
      sa[5451] = "SJ LEVINSON  and  SONS";
      sa[5452] = "SM Systems";
      sa[5453] = "SMG Search";
      sa[5454] = "SMITHSONIAN INSTITUTION (FEDERAL)";
      sa[5455] = "SNEC of SDA Churches";
      sa[5456] = "SNHU";
      sa[5457] = "SOCIAL SERVICES";
      sa[5458] = "SOMBRA HOMES, INC";
      sa[5459] = "SOPACO, INC.";
      sa[5460] = "SOS Security Inc";
      sa[5461] = "SOUTH BAY MOTORS";
      sa[5462] = "SOUTHEAST KANSAS EDUCATION SERVICE CENTE";
      sa[5463] = "SOUTHERN CALIFORNIA GRAPHICS";
      sa[5464] = "SOUTHERN WINE & SPIRITS";
      sa[5465] = "SOUTHPOINT VOLKSWAGEN";
      sa[5466] = "SOUTHWEST ADMIN INC";
      sa[5467] = "SP Newsprint";
      sa[5468] = "SPB Partners";
      sa[5469] = "SPM, LLC";
      sa[5470] = "SPRING HEATING  and  AC";
      sa[5471] = "SPS Inc";
      sa[5472] = "SQUEAKY CLEAN";
      sa[5473] = "SRA";
      sa[5474] = "SRA International";
      sa[5475] = "SRA International Inc.";
      sa[5476] = "SRHS";
      sa[5477] = "SRS Enterprisess";
      sa[5478] = "SS&C Technologies, Inc.";
      sa[5479] = "SSA";
      sa[5480] = "SSD";
      sa[5481] = "SSG Real Estate";
      sa[5482] = "SSPS/State of Washington";
      sa[5483] = "ST. FRANCES CABRINI HOSPITAL";
      sa[5484] = "STAAR Surgical Company";
      sa[5485] = "STARCON";
      sa[5486] = "STARK COUNTY COMMISSIONERS";
      sa[5487] = "STATE FARM INSURANCE COMPANIES";
      sa[5488] = "STATESTREET";
      sa[5489] = "STEWART TITLE ";
      sa[5490] = "STMicroelectronics";
      sa[5491] = "STS Property Management";
      sa[5492] = "SUBURBAN LOCK SERVICE";
      sa[5493] = "SUHSD";
      sa[5494] = "SULLIVAN ARC";
      sa[5495] = "SUNY ESF";
      sa[5496] = "SUPER FRESH/ A&P TEA CO. INC.";
      sa[5497] = "SWS REDISTRIBUTION COMPANY";
      sa[5498] = "SWVTC";
      sa[5499] = "SYMMETRY ELECTRONICS";
      sa[5500] = "SYNERGY FLAVORS ";
      sa[5501] = "SYNNEX";
      sa[5502] = "SYSCO VENTURA";
      sa[5503] = "SYSTEL BUSINESS EQUIPMENT CO. INC";
      sa[5504] = "SYSVA";
      sa[5505] = "Sabre Holdings";
      sa[5506] = "Sabreliner, Corp";
      sa[5507] = "Sacramento County Office of Education";
      sa[5508] = "Sacramento Sheriff's Department";
      sa[5509] = "Sacred Journey Hospice";
      sa[5510] = "SafeKick";
      sa[5511] = "Safebit Solutions Inc";
      sa[5512] = "Safeguard Properties";
      sa[5513] = "Safelite Auto Glass";
      sa[5514] = "Sage Insurance Services, Inc";
      sa[5515] = "SageFire";
      sa[5516] = "SailPoint Technologies";
      sa[5517] = "Sailor's Union of the Pacific";
      sa[5518] = "Saint Albans Town Educational Center";
      sa[5519] = "Saint Joseph Mercy Health-Huron Woods";
      sa[5520] = "Saint Joseph's OP Imaging Center";
      sa[5521] = "Saint Louis University";
      sa[5522] = "Saint Lucie County School Board";
      sa[5523] = "Saint Lukes Hospital";
      sa[5524] = "Saint-Gobain";
      sa[5525] = "Saks";
      sa[5526] = "Saks Fifth Avenue";
      sa[5527] = "Salamander Fire Protection";
      sa[5528] = "Sale solutions, inc";
      sa[5529] = "Salem Communications";
      sa[5530] = "Salinas Union High School District";
      sa[5531] = "Sally Plink";
      sa[5532] = "Salt lake Community College";
      sa[5533] = "Salvation Army";
      sa[5534] = "Sam Ash";
      sa[5535] = "Sammio's";
      sa[5536] = "Sampson Community College";
      sa[5537] = "Samson Products";
      sa[5538] = "Samuel French Bookshops Inc";
      sa[5539] = "San Antonio Humane Society";
      sa[5540] = "San Antonio Independent School District";
      sa[5541] = "San Bernardino City Unified School Distr";
      sa[5542] = "San Bernardino County";
      sa[5543] = "San Bernardino County Superior Court";
      sa[5544] = "San Bernedino County";
      sa[5545] = "San Diego County";
      sa[5546] = "San Diego Unified School District";
      sa[5547] = "San Francisco Brewcraft";
      sa[5548] = "San Francisco Opera";
      sa[5549] = "San Francisco Police Department";
      sa[5550] = "San Francisco State University";
      sa[5551] = "San Francisco Zoo";
      sa[5552] = "San Jacinto County";
      sa[5553] = "San Jacinto Unified School District";
      sa[5554] = "San Joaquin County";
      sa[5555] = "San Jose State University";
      sa[5556] = "San Marcos Unified School District";
      sa[5557] = "San Mateo County";
      sa[5558] = "San Quentin State Prison";
      sa[5559] = "Sanctuary at Bellbrook";
      sa[5560] = "Sandia Corp.";
      sa[5561] = "Sandia Hearing";
      sa[5562] = "Sandisk Corp";
      sa[5563] = "Sanford Burnham Medical Research Inst.";
      sa[5564] = "Santa Barbara Bank  and  Trust";
      sa[5565] = "Santa Barbara Bank & Trust";
      sa[5566] = "Santa Fe Public Schools";
      sa[5567] = "Santa Maria Software";
      sa[5568] = "Santa Rosa County School Board";
      sa[5569] = "Santa Rosa High School";
      sa[5570] = "Santander Consumer USA";
      sa[5571] = "Sapien LLC";
      sa[5572] = "Sapient Corporation";
      sa[5573] = "SapientNitro";
      sa[5574] = "Sapphire Technologies";
      sa[5575] = "Sara Lee";
      sa[5576] = "Sarasota County Sheriff's Office";
      sa[5577] = "Sarcom";
      sa[5578] = "Sargent  and  Lundy LLC";
      sa[5579] = "Sargent Manufacturing Co.";
      sa[5580] = "Sasaki Associates  Inc.";
      sa[5581] = "Sasquatch Advertising";
      sa[5582] = "Satco";
      sa[5583] = "Saturn Of Richmond";
      sa[5584] = "Sauder Woodworking Company";
      sa[5585] = "Sauk Prairie Memorial Hospital";
      sa[5586] = "Saul Ewing LLP";
      sa[5587] = "Sayreville Board of Education";
      sa[5588] = "Schechner Lifson Corp";
      sa[5589] = "Schenectady's ARC";
      sa[5590] = "Schernecker Property Services";
      sa[5591] = "Schiff Hardin";
      sa[5592] = "Schindler Elevator";
      sa[5593] = "Schlotzsky's Deli";
      sa[5594] = "Schneider Electric";
      sa[5595] = "Schneider National";
      sa[5596] = "Schnitzer Steel Ind.";
      sa[5597] = "Scholastic Inc.";
      sa[5598] = "School Board of Miami-Dade County";
      sa[5599] = "School District of Philadelphia";
      sa[5600] = "Schwans";
      sa[5601] = "Schwans Global Supply Chain Inc.";
      sa[5602] = "Sciele Pharma inc";
      sa[5603] = "Scientific Drilling Int. ";
      sa[5604] = "Scientific Research Corp.";
      sa[5605] = "Scientific Research Corporation";
      sa[5606] = "Scitor Corporation";
      sa[5607] = "Scoreboard Bar and Grill";
      sa[5608] = "Scott & White";
      sa[5609] = "Scott E Bittler";
      sa[5610] = "Scott Insurance";
      sa[5611] = "Scott and White Health Care";
      sa[5612] = "Scottel Voice and Data";
      sa[5613] = "Scottrade";
      sa[5614] = "Sea World of Florida";
      sa[5615] = "Seaboard Farms";
      sa[5616] = "Seacoast Motors";
      sa[5617] = "Seacoast Supply";
      sa[5618] = "Seacost nursing and rehab center";
      sa[5619] = "Seagate";
      sa[5620] = "Seagate Technology";
      sa[5621] = "Search Services";
      sa[5622] = "Sears";
      sa[5623] = "Sears Holding";
      sa[5624] = "Sears Holdings";
      sa[5625] = "Sears Holdings Corporation";
      sa[5626] = "Seaside Maintenance";
      sa[5627] = "Seattle Safety";
      sa[5628] = "Seawinns Security INC";
      sa[5629] = "Sec of State";
      sa[5630] = "Second Empire Furniture Inc.";
      sa[5631] = "Sectra NA";
      sa[5632] = "Securitas";
      sa[5633] = "Securitas Security";
      sa[5634] = "Securitas Security Services";
      sa[5635] = "Securitas Security Services USA Inc.";
      sa[5636] = "Securitas Security Services,Inc";
      sa[5637] = "Securitas USA";
      sa[5638] = "Security Business Bank";
      sa[5639] = "Security Lock and Key, Inc.";
      sa[5640] = "Security Service Federal Credit Union";
      sa[5641] = "Seealed Air Copr";
      sa[5642] = "Select Energy Services";
      sa[5643] = "Select Portfolio Servicing";
      sa[5644] = "SelectCare Benefits Network";
      sa[5645] = "Selective Insurance Company";
      sa[5646] = "Self";
      sa[5647] = "Self Employed";
      sa[5648] = "Self Employed VCF";
      sa[5649] = "Self Help fo the Elderly";
      sa[5650] = "Self-Employed";
      sa[5651] = "Self-employed";
      sa[5652] = "Self/ Ameriprise financial";
      sa[5653] = "Semcac Head Start";
      sa[5654] = "Seminole County Public Schools";
      sa[5655] = "Seminole County Public Schools Food Serv";
      sa[5656] = "Seminole Hard Rock Casino";
      sa[5657] = "Seminole Hard Rock Hotel & Casino";
      sa[5658] = "Seminole High School";
      sa[5659] = "Sensata Technologies";
      sa[5660] = "Sensiba San Filippo, LLP";
      sa[5661] = "Sentara";
      sa[5662] = "Sentara Health Care";
      sa[5663] = "Sentara Obici Hospital";
      sa[5664] = "Sentry Insurance";
      sa[5665] = "Sephora";
      sa[5666] = "Septa";
      sa[5667] = "Serco";
      sa[5668] = "Sergis Images";
      sa[5669] = "Servco Pacific";
      sa[5670] = "Server Admin Inc";
      sa[5671] = "Service By Air Inc";
      sa[5672] = "Service Champ";
      sa[5673] = "Servotech Engineering";
      sa[5674] = "Seton Hall University";
      sa[5675] = "Settlement Health";
      sa[5676] = "Settlers Creek Apartments";
      sa[5677] = "Seven Eleven, Inc.";
      sa[5678] = "Seven Hills School";
      sa[5679] = "Severstal N.A.";
      sa[5680] = "Seville Police Dept.";
      sa[5681] = "Shades Crest Baptist Church";
      sa[5682] = "Shadle Park Presbyterian Church";
      sa[5683] = "Shamrock Paving";
      sa[5684] = "Shands Healthcare";
      sa[5685] = "Sharp Healthcare";
      sa[5686] = "Sharp Lawn Inc.";
      sa[5687] = "Sharyland I.S.D.";
      sa[5688] = "Shasta County Sheriffs Office";
      sa[5689] = "ShatzmanBaker, PC";
      sa[5690] = "Shaw Industries";
      sa[5691] = "Shaw Science Partners";
      sa[5692] = "Shearers Foods Inc.";
      sa[5693] = "Sheboygan County";
      sa[5694] = "Shefsky & Froelich, Ltd.";
      sa[5695] = "Shelby County Commission";
      sa[5696] = "Shell Designs";
      sa[5697] = "Shell Oil Company";
      sa[5698] = "Shentel";
      sa[5699] = "Shepardville Construction";
      sa[5700] = "Sheraton";
      sa[5701] = "Sheraton Hotel Starwood ";
      sa[5702] = "Shercon, inc.";
      sa[5703] = "Sheridan Auto Group";
      sa[5704] = "Sherwin Williams";
      sa[5705] = "Sherwin-Williams Company";
      sa[5706] = "Shine Electronics Inc";
      sa[5707] = "Shinwa USA";
      sa[5708] = "Shoedazzle.com";
      sa[5709] = "Shoppers";
      sa[5710] = "Shoprite Supermarkets";
      sa[5711] = "Shred-it";
      sa[5712] = "Shulas";
      sa[5713] = "Shultz Bros. Trucking";
      sa[5714] = "Sidelines Inc";
      sa[5715] = "Siemens";
      sa[5716] = "Siemens Corporation";
      sa[5717] = "Siemens Energy, Inc.";
      sa[5718] = "Siemens water technologies";
      sa[5719] = "Sierra Business Council";
      sa[5720] = "Sierra Conservation Center";
      sa[5721] = "Sierra Hills Apartments";
      sa[5722] = "Sierra Medical Center";
      sa[5723] = "Sierra Nevada Corporation";
      sa[5724] = "Signal CDID (Civil Service)";
      sa[5725] = "Signs Now";
      sa[5726] = "Signs by Tomorrow";
      sa[5727] = "Sikorsky";
      sa[5728] = "Silicon Valley Bank";
      sa[5729] = "Silvertip Inc.";
      sa[5730] = "SimCom";
      sa[5731] = "Simmons & Company";
      sa[5732] = "Simon & Schuster";
      sa[5733] = "Simon & Schuster Inc./Total Warehouse";
      sa[5734] = "Simon Property Group";
      sa[5735] = "Simonsons Salon and Spa";
      sa[5736] = "SimplexGrinnell";
      sa[5737] = "Simply Fish, Inc";
      sa[5738] = "Simpson Gumpertz  and  Heger";
      sa[5739] = "Simpson Thacher  and  Bartlett LLP";
      sa[5740] = "SingerLewak LLC";
      sa[5741] = "Sisters of Mercy Health System";
      sa[5742] = "Sites USA, Inc";
      sa[5743] = "Sitesafe";
      sa[5744] = "Situs Ergonomics";
      sa[5745] = "Skanska USA Civil NE";
      sa[5746] = "Skehan Home center";
      sa[5747] = "Skillpath Seminars";
      sa[5748] = "Sky Lakes Medical Center";
      sa[5749] = "SkyBuilt Power";
      sa[5750] = "SkyWest Airlines";
      sa[5751] = "Skyline Vet Hospital";
      sa[5752] = "Slade Neighbors APLC";
      sa[5753] = "Slalom Consutling";
      sa[5754] = "Slocum Orthopedics P.C.";
      sa[5755] = "Slone Lumber and Millwork";
      sa[5756] = "Small Law Firm";
      sa[5757] = "Small Smiles Dental Centers";
      sa[5758] = "SmartCity Telecom";
      sa[5759] = "SmartDrive Systems";
      sa[5760] = "SmartHome Designer";
      sa[5761] = "SmartPak Equine LLC";
      sa[5762] = "Smith & Warren";
      sa[5763] = "Smith Moore Leatherwood LLP";
      sa[5764] = "Smith&Nephew";
      sa[5765] = "Smithsonian Institute";
      sa[5766] = "Smithtown Central School District";
      sa[5767] = "Smurfit-Stone";
      sa[5768] = "Smyth County Mutual Ins.";
      sa[5769] = "Snagajob";
      sa[5770] = "Snagajob.com";
      sa[5771] = "Snap On Tools";
      sa[5772] = "Snap-on Tools";
      sa[5773] = "Snell and Wilmer L.L.P.";
      sa[5774] = "SoBran  Inc";
      sa[5775] = "Social Security Adm";
      sa[5776] = "Social Security Administration";
      sa[5777] = "Social Security Administration (SSA)";
      sa[5778] = "Social Security Plus, LLC";
      sa[5779] = "Social Solutions Global, Inc";
      sa[5780] = "Societe Generale Investment bank";
      sa[5781] = "Sodexo";
      sa[5782] = "Sodexo/Regional Hospital";
      sa[5783] = "Soft Machines, Inc";
      sa[5784] = "Software Company";
      sa[5785] = "Soho house";
      sa[5786] = "Sol Meli<0x92DBCEDB92E4CE8D> Vacation Club";
      sa[5787] = "Solano College";
      sa[5788] = "Solomon Cordwell Buenz";
      sa[5789] = "Solstas Lab Partners";
      sa[5790] = "SolutionsWest Consulting";
      sa[5791] = "Somerset ISD";
      sa[5792] = "Songs Music Publishing";
      sa[5793] = "Sonny's BBQ";
      sa[5794] = "Sonnys BBQ";
      sa[5795] = "Sony";
      sa[5796] = "Sony Computer Entertainment";
      sa[5797] = "Sony Corporation";
      sa[5798] = "Sony Electronics";
      sa[5799] = "Sony Electronics Inc.";
      sa[5800] = "Sony Music";
      sa[5801] = "Sony Music Entertainment";
      sa[5802] = "Sony Online Entertainment";
      sa[5803] = "Sorrento Lactalis";
      sa[5804] = "Sound Medical";
      sa[5805] = "Sound Mental Health";
      sa[5806] = "Source4Teachers";
      sa[5807] = "SourceCorp Inc";
      sa[5808] = "SourceEcreative";
      sa[5809] = "SourceMedia";
      sa[5810] = "Sourthern Garden";
      sa[5811] = "South Bay Cable Corp";
      sa[5812] = "South Bay Hospital Sun City Center 33573";
      sa[5813] = "South Coast Systems";
      sa[5814] = "South Florida Wildlife Center";
      sa[5815] = "South Kitsap School District";
      sa[5816] = "South Nassau Communities Hospital";
      sa[5817] = "South San Francisco Fire Department";
      sa[5818] = "Southam & Associates";
      sa[5819] = "Southeast Goldbuyers";
      sa[5820] = "Southeast Metro Stormwater Authority";
      sa[5821] = "Southeastern Auto Auction";
      sa[5822] = "Southeastern Regional";
      sa[5823] = "Souther california edison";
      sa[5824] = "Southern Air Systems";
      sa[5825] = "Southern Arizona AIDS Foundation";
      sa[5826] = "Southern California Edison";
      sa[5827] = "Southern California Gas Co";
      sa[5828] = "Southern Company Services";
      sa[5829] = "Southern Construction Supply";
      sa[5830] = "Southern Counties Oil Co.";
      sa[5831] = "Southern NH Med Center";
      sa[5832] = "Southern Nuclear";
      sa[5833] = "Southern States, LLC";
      sa[5834] = "Southern Ute Indian Tribe";
      sa[5835] = "Southlake Baptist Church";
      sa[5836] = "Southside Baptist Church";
      sa[5837] = "Southwest Airlines";
      sa[5838] = "Southwest Counseling Solutions";
      sa[5839] = "Southwest Florida Home Care";
      sa[5840] = "Southwest Local School District";
      sa[5841] = "Southwest Rural metro";
      sa[5842] = "Southwestern Energy Co.";
      sa[5843] = "Southwestern Womens Surgery Ce";
      sa[5844] = "Southwind Properties";
      sa[5845] = "Sovereign Bank";
      sa[5846] = "Sovereign Consulting";
      sa[5847] = "Sowela Technical College";
      sa[5848] = "Spansion";
      sa[5849] = "Sparkart Group Inc";
      sa[5850] = "Sparrow Health";
      sa[5851] = "Sparrow Specialty Hospital";
      sa[5852] = "Spartan Solutions Inc";
      sa[5853] = "Spartan Stores Inc.";
      sa[5854] = "Specfab Services Inc";
      sa[5855] = "Special Aerospace Security Services Inc.";
      sa[5856] = "Special Inspections";
      sa[5857] = "Special Olympics Arkansas";
      sa[5858] = "Specialized Elevator Corp.";
      sa[5859] = "Specialty Rest Corp";
      sa[5860] = "Specialty Sports Venture";
      sa[5861] = "Specialty Transportation";
      sa[5862] = "Specpro Technical Services";
      sa[5863] = "Specs";
      sa[5864] = "Spectrum Comm Inc";
      sa[5865] = "Spectrum Health";
      sa[5866] = "Spectrum Information Services";
      sa[5867] = "Speedee Cash Managment";
      sa[5868] = "Sphere Consulting, Inc.";
      sa[5869] = "Spherion/Tatum";
      sa[5870] = "Spillars Medical";
      sa[5871] = "Spine and Pain Medicine Center";
      sa[5872] = "Spirit truck lines";
      sa[5873] = "Spiro Moss LLP";
      sa[5874] = "Spokane Neighborhood Action Partners";
      sa[5875] = "Sport Durst Millennium Automotive Group";
      sa[5876] = "Sport and Health Co";
      sa[5877] = "Sports Authority";
      sa[5878] = "Sports CLUB";
      sa[5879] = "Spot";
      sa[5880] = "Spottswood Law Firm";
      sa[5881] = "Spring Branch ISD";
      sa[5882] = "Spring Psychological Assoc";
      sa[5883] = "SpringSource LLC a division of VMWare";
      sa[5884] = "Springer Publishing Company";
      sa[5885] = "Sprint";
      sa[5886] = "St Anthonys Hospital";
      sa[5887] = "St Francis Medical Center";
      sa[5888] = "St James Mercy Hospital";
      sa[5889] = "St Johns County Sheriffs Office";
      sa[5890] = "St Joseph Homecare Network";
      sa[5891] = "St Joseph Regional Medical Center";
      sa[5892] = "St Joseph's Hospital";
      sa[5893] = "St Josephs Hospital";
      sa[5894] = "St Josephs Research Institute";
      sa[5895] = "St Pats Hospital";
      sa[5896] = "St Tammany Fire Protection District No One";
      sa[5897] = "St john hospital ";
      sa[5898] = "St. Aloysius";
      sa[5899] = "St. Alphonsus";
      sa[5900] = "St. Charles Medical";
      sa[5901] = "St. Cloud State University";
      sa[5902] = "St. Edward Mercy Medical Center";
      sa[5903] = "St. Elizabeth Medical Centers";
      sa[5904] = "St. John Properties  Inc.";
      sa[5905] = "St. John's Health System";
      sa[5906] = "St. Johns Regional Hospital";
      sa[5907] = "St. Joseph Hospital";
      sa[5908] = "St. Joseph's Hospital";
      sa[5909] = "St. Joseph's Regional Medical Center";
      sa[5910] = "St. Landry Parish School System";
      sa[5911] = "St. Lucie County School Board";
      sa[5912] = "St. Luke Hospital";
      sa[5913] = "St. Luke's Hospital";
      sa[5914] = "St. Mary's Hospital";
      sa[5915] = "St. Marys Hospital";
      sa[5916] = "St. Norbert College";
      sa[5917] = "St. Paul Public Schools";
      sa[5918] = "St. Peter's Prep";
      sa[5919] = "St. Philip's Episcopal Church";
      sa[5920] = "St. Rita's medical Center";
      sa[5921] = "St. Thomas More Parish School";
      sa[5922] = "St. Timothy Catholic Community";
      sa[5923] = "St. Vincent's Catholic Charities";
      sa[5924] = "St. Vincents Health System";
      sa[5925] = "St. Vincents Medical Center";
      sa[5926] = "St.Alexius Hospital";
      sa[5927] = "St.Bernard Hospital";
      sa[5928] = "StaffChex";
      sa[5929] = "Stafford Meat Co., Inc.";
      sa[5930] = "Stainless Sales Corporation";
      sa[5931] = "Stamps.com";
      sa[5932] = "Standard Secrurity Life Insurance Company of New York";
      sa[5933] = "Standard Steel LLC";
      sa[5934] = "Standby Power Enterprises";
      sa[5935] = "Stanford University";
      sa[5936] = "Stanford University School of Medicine";
      sa[5937] = "Stanford hospital";
      sa[5938] = "Stanislaus County";
      sa[5939] = "Stanley Black & Decker";
      sa[5940] = "Stanley Black and Decker";
      sa[5941] = "Stantec  Consulting";
      sa[5942] = "Staples";
      sa[5943] = "Staples Inc";
      sa[5944] = "Star Financial Services";
      sa[5945] = "Star Plastics Inc.";
      sa[5946] = "Starbucks";
      sa[5947] = "Starbucks Coffee";
      sa[5948] = "Starbucks Coffee Company";
      sa[5949] = "Stardust Video & Coffee";
      sa[5950] = "Stark Electric Inc";
      sa[5951] = "Stark Industrial LLC";
      sa[5952] = "Starr Home Health Agency";
      sa[5953] = "Starwood Hotels & Resorts";
      sa[5954] = "State Bar of Georgia";
      sa[5955] = "State Department";
      sa[5956] = "State Farm Insurance";
      sa[5957] = "State LLC";
      sa[5958] = "State Of Conn. Judicial Branch";
      sa[5959] = "State Of Florida";
      sa[5960] = "State Street";
      sa[5961] = "State Street Bank";
      sa[5962] = "State Street Bank & Trust";
      sa[5963] = "State Street Corp.";
      sa[5964] = "State Street Corporation";
      sa[5965] = "State of Alabama";
      sa[5966] = "State of Arizona";
      sa[5967] = "State of CT";
      sa[5968] = "State of CT DDS";
      sa[5969] = "State of Ca.";
      sa[5970] = "State of California";
      sa[5971] = "State of California ";
      sa[5972] = "State of California - Secretary of State";
      sa[5973] = "State of California Dept of Pesticide ";
      sa[5974] = "State of California- San Quentin";
      sa[5975] = "State of Colorado, Dept of Local Affairs";
      sa[5976] = "State of Connecticut";
      sa[5977] = "State of FL, Dept of Financial Services";
      sa[5978] = "State of Florida";
      sa[5979] = "State of Georgia";
      sa[5980] = "State of IL";
      sa[5981] = "State of Illinois";
      sa[5982] = "State of Kansas";
      sa[5983] = "State of Louisiana";
      sa[5984] = "State of Missouri";
      sa[5985] = "State of NC ITS";
      sa[5986] = "State of NJ";
      sa[5987] = "State of NV Wefare Division";
      sa[5988] = "State of New Jersey";
      sa[5989] = "State of New Mexico";
      sa[5990] = "State of Ohio";
      sa[5991] = "State of Ohio Dept. of Commerce";
      sa[5992] = "State of Oregon";
      sa[5993] = "State of Texas";
      sa[5994] = "State of Texas Health and Human Services Commission";
      sa[5995] = "State of Utah";
      sa[5996] = "State of Virginia";
      sa[5997] = "State of Washington";
      sa[5998] = "State of West Virginia";
      sa[5999] = "State of Wisconsin";
    }
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_7_2 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[6000] = "State of Wisconsin-DOC";
      sa[6001] = "StateStreet";
      sa[6002] = "Statye of Michigan Dept of Corrections";
      sa[6003] = "Steel Pan Naetworks";
      sa[6004] = "Steel Technologies";
      sa[6005] = "Steelscape";
      sa[6006] = "Stepan";
      sa[6007] = "Stephens";
      sa[6008] = "Stephens County Hospital ";
      sa[6009] = "Stephenville Independent School District";
      sa[6010] = "Sterling Equities";
      sa[6011] = "Sterling Helicopters Inc";
      sa[6012] = "Sterling Savings Bank";
      sa[6013] = "Steve Neumann and Friends";
      sa[6014] = "Stew Leonards";
      sa[6015] = "Stinger Wellhead Protection Serv";
      sa[6016] = "Stonebrook Studio, Inc. own business";
      sa[6017] = "Stonehedge of Chittenango";
      sa[6018] = "Stoney Creek";
      sa[6019] = "Stop and Shop";
      sa[6020] = "Stordok Document Destruction/Moreno Roofing Co.";
      sa[6021] = "Storms Ford Lincoln";
      sa[6022] = "Strategic Funding Source";
      sa[6023] = "Strategic Staffing Solutions";
      sa[6024] = "Stratford School";
      sa[6025] = "Strato inc";
      sa[6026] = "Stratton Publishing and Marketing, Inc";
      sa[6027] = "Street Solutions Inc";
      sa[6028] = "Strongbox Marketing Corp";
      sa[6029] = "Structural Technology Consult.";
      sa[6030] = "Struktol";
      sa[6031] = "Stryker  Tams and Dill";
      sa[6032] = "Stryker Instruments";
      sa[6033] = "Stryker Orthopaedics";
      sa[6034] = "Stubbs Alderton & Markiles";
      sa[6035] = "Student";
      sa[6036] = "Studio 94 Corp";
      sa[6037] = "Studio Say So Inc";
      sa[6038] = "Studsvik, Inc.";
      sa[6039] = "Subaru of Santa Monica";
      sa[6040] = "Suburban Sanitation";
      sa[6041] = "Subway";
      sa[6042] = "SuccessFactors";
      sa[6043] = "Suddenlink";
      sa[6044] = "Suffolk County District Attorney";
      sa[6045] = "Suffolk County Sheriff's office";
      sa[6046] = "Sugar & Felsenthal, LLP";
      sa[6047] = "Sullivan & Cromwell LLP";
      sa[6048] = "Sullivan ARC";
      sa[6049] = "Sumitomo Mitsui bkg";
      sa[6050] = "Summa Health Systems";
      sa[6051] = "Summerlin Hospital Medical Center";
      sa[6052] = "Summersville Pediatrics";
      sa[6053] = "Summit Industrial Products";
      sa[6054] = "Summit Mortgage Corp.";
      sa[6055] = "Sun Coast Police Benevolent Association";
      sa[6056] = "Sun Life Financial";
      sa[6057] = "Sun Microsystems Inc";
      sa[6058] = "Sun Products";
      sa[6059] = "Sun State Builders";
      sa[6060] = "SunGard Data Systems";
      sa[6061] = "SunTrust Bank";
      sa[6062] = "Sunbeam Television";
      sa[6063] = "Sunbelt Industrial Trucks";
      sa[6064] = "Sundance Institute";
      sa[6065] = "Sungard Availability Services";
      sa[6066] = "Sungard Higher Education";
      sa[6067] = "Sunham Home Fashions";
      sa[6068] = "Suniland Associates, LTD.";
      sa[6069] = "Sunny Sports, Inc";
      sa[6070] = "SunnySide Nursing Center";
      sa[6071] = "Sunray ISD";
      sa[6072] = "Sunrise Management";
      sa[6073] = "Sunrise Senior Living";
      sa[6074] = "Sunset Country Club";
      sa[6075] = "Sunshine Transport";
      sa[6076] = "Super Nails";
      sa[6077] = "Super Products, Inc.";
      sa[6078] = "Superior Beverage Group";
      sa[6079] = "Superior Court of Arizona";
      sa[6080] = "Superior Tank";
      sa[6081] = "Superior Technical Resources";
      sa[6082] = "Supervalu";
      sa[6083] = "Suram Trading Corp";
      sa[6084] = "Surgical Reimbursement Specialists";
      sa[6085] = "Sutter Connect";
      sa[6086] = "Sutter County Probation";
      sa[6087] = "Sutter Memorial Hospital";
      sa[6088] = "Sutter Physician's Health Foundation";
      sa[6089] = "Suwannee Valley Dental, Inc";
      sa[6090] = "Swagelok";
      sa[6091] = "Swagelok Company";
      sa[6092] = "Swarovski";
      sa[6093] = "Swedish Medical Center";
      sa[6094] = "SweetBay Supermarkets";
      sa[6095] = "Sweetwater Fire Department";
      sa[6096] = "Swimways Corp.";
      sa[6097] = "Swire Coca-Cola";
      sa[6098] = "Swisher Hygiene";
      sa[6099] = "Swiss Chalet Fine Foods";
      sa[6100] = "Swiss Re";
      sa[6101] = "Swiss Re Americas Holding Company";
      sa[6102] = "Sybron Implant Solutions";
      sa[6103] = "Sykes Enterprises";
      sa[6104] = "Symantec";
      sa[6105] = "Symantec Corp";
      sa[6106] = "Symantec Corp.";
      sa[6107] = "Synchronoss";
      sa[6108] = "Syncsort";
      sa[6109] = "Syndetix";
      sa[6110] = "Synergie (ATT Project)";
      sa[6111] = "Synergy Enterprises";
      sa[6112] = "Syngenta";
      sa[6113] = "Synovus Bank";
      sa[6114] = "Syntel Inc";
      sa[6115] = "Synthes USA";
      sa[6116] = "Syracuse City School District";
      sa[6117] = "Sysco Foods Atlanta";
      sa[6118] = "System One";
      sa[6119] = "Systematic Financial";
      sa[6120] = "Systems Plumbing";
      sa[6121] = "Syzygy 3, Inc.";
      sa[6122] = "T J MAX";
      sa[6123] = "T-Mobile";
      sa[6124] = "T-Mobile Corp";
      sa[6125] = "T-Mobile USA";
      sa[6126] = "T-mobile";
      sa[6127] = "TA Instruments";
      sa[6128] = "TAC Automotive";
      sa[6129] = "TARGET CORPORATION";
      sa[6130] = "TASC";
      sa[6131] = "TATA Consultancy Services";
      sa[6132] = "TBC-Brinadd";
      sa[6133] = "TCBY";
      sa[6134] = "TCI";
      sa[6135] = "TCO Satellite, Inc.";
      sa[6136] = "TCS Associates";
      sa[6137] = "TD Bank";
      sa[6138] = "TD Bank, N.A.";
      sa[6139] = "TDAmeritrade";
      sa[6140] = "TDCJ";
      sa[6141] = "TECHNOLOGY CREDIT UNION";
      sa[6142] = "TEEX Public Safety and Security Divsion";
      sa[6143] = "TEK Systems";
      sa[6144] = "TEKsystems Global Services";
      sa[6145] = "TGI Fridays";
      sa[6146] = "THE GEO GROUP INC";
      sa[6147] = "THE PANTRY";
      sa[6148] = "THUNDER FACTORY";
      sa[6149] = "TIAA-CREF";
      sa[6150] = "TIB-The Independent Bankers Bank";
      sa[6151] = "TIBCO Software";
      sa[6152] = "TJ's Corner Market";
      sa[6153] = "TJ's Window Cleaning";
      sa[6154] = "TKC Global";
      sa[6155] = "TLC";
      sa[6156] = "TM Financial Forensics";
      sa[6157] = "TMP Worldwide";
      sa[6158] = "TMP worldwide";
      sa[6159] = "TOAST.net Internet SVC";
      sa[6160] = "TOM JOHNSONCAMPING CENTER";
      sa[6161] = "TOV LEV ENTERPRISES INC.";
      sa[6162] = "TOWN OF PLATTEKILL";
      sa[6163] = "TPG Capital";
      sa[6164] = "TQS";
      sa[6165] = "TRA";
      sa[6166] = "TRADER JOE'S";
      sa[6167] = "TRAFFIC TECH";
      sa[6168] = "TS Tech";
      sa[6169] = "TSA";
      sa[6170] = "TSL Seed Co.";
      sa[6171] = "TSM Corporation";
      sa[6172] = "TTM Technologies";
      sa[6173] = "TVO North America";
      sa[6174] = "TVR Communications";
      sa[6175] = "TWI";
      sa[6176] = "TWOHEY PLUMBING";
      sa[6177] = "Tad Pgs";
      sa[6178] = "Talent Partner";
      sa[6179] = "Talentburst";
      sa[6180] = "Tallahassee Community College";
      sa[6181] = "Tallahassee Primary Care Associates";
      sa[6182] = "Tamko";
      sa[6183] = "Tampa General Hospital";
      sa[6184] = "Tampa Truck Center LLC";
      sa[6185] = "Tank Components";
      sa[6186] = "Tanner Health System";
      sa[6187] = "Tapemation Machining Inc.";
      sa[6188] = "Tarantino Properties";
      sa[6189] = "Target";
      sa[6190] = "Target Corporation";
      sa[6191] = "Target Distribution";
      sa[6192] = "Target Stores";
      sa[6193] = "Targus Information Corporation";
      sa[6194] = "Tasc";
      sa[6195] = "Taylor Creative Co.";
      sa[6196] = "Taylor Morrison";
      sa[6197] = "Taylor Olson Adkins Sralla & Elam, LLP";
      sa[6198] = "Taylor Termite  and  Pest Control";
      sa[6199] = "Tazewell County Sheriffs Office";
      sa[6200] = "Te'Kila";
      sa[6201] = "Team Health";
      sa[6202] = "Team Industrial Services";
      sa[6203] = "Team Industries";
      sa[6204] = "Team Washington";
      sa[6205] = "TeamSoft INC";
      sa[6206] = "Tech Credit Union";
      sa[6207] = "Tech Data Corporation";
      sa[6208] = "TechMahindra(America) Inc";
      sa[6209] = "Technical insite";
      sa[6210] = "Technicolor Creative Services";
      sa[6211] = "Technip USA";
      sa[6212] = "Technisource ";
      sa[6213] = "Tecniplast USA";
      sa[6214] = "Tecogen";
      sa[6215] = "Tecolote Research  Inc";
      sa[6216] = "Tecolote Research, Inc.";
      sa[6217] = "Tegron";
      sa[6218] = "Tek Nokari";
      sa[6219] = "Tek Systems";
      sa[6220] = "TekSystems";
      sa[6221] = "Telasic Communications";
      sa[6222] = "TeleTech Holdings, Inc.";
      sa[6223] = "Teledyne Brown Engineering";
      sa[6224] = "Telefutura Net";
      sa[6225] = "Teleperformance";
      sa[6226] = "Teleperformance USA";
      sa[6227] = "Telestream, Inc.";
      sa[6228] = "Teletrac, inc";
      sa[6229] = "TellaS, Ltd.";
      sa[6230] = "Tellabs";
      sa[6231] = "Telos Corporation";
      sa[6232] = "Telstra Inc.";
      sa[6233] = "Temecula Creek Christian Fellowship";
      sa[6234] = "Temp Right Service";
      sa[6235] = "Temple Shaaray Tefila; New York Sports ";
      sa[6236] = "Temple University";
      sa[6237] = "Temple University Hospital";
      sa[6238] = "Tennant Company";
      sa[6239] = "Teoco Corporation/Respond.com";
      sa[6240] = "Teradyne Inc";
      sa[6241] = "Teragram LLC";
      sa[6242] = "Terra Form Inc";
      sa[6243] = "Terracon";
      sa[6244] = "Terracon Consulting";
      sa[6245] = "Terralever";
      sa[6246] = "Terrazzo & Marble Supply Company";
      sa[6247] = "Terrebonne Homecare Inc";
      sa[6248] = "Terumo Cardiovascular";
      sa[6249] = "Tesoro Refining";
      sa[6250] = "Tessada & Associates";
      sa[6251] = "Test Devices Inc";
      sa[6252] = "Tetra Tech";
      sa[6253] = "Texas A&M University";
      sa[6254] = "Texas AirSystems";
      sa[6255] = "Texas Business Source, Inc";
      sa[6256] = "Texas Department of Criminal Justice";
      sa[6257] = "Texas Department of Information Resources";
      sa[6258] = "Texas Department of Insurance";
      sa[6259] = "Texas Dept of Public Safety";
      sa[6260] = "Texas Health Care Association";
      sa[6261] = "Texas Health Resources";
      sa[6262] = "Texas Inpatient Consultants";
      sa[6263] = "Texas Instruments";
      sa[6264] = "Texas Parks and Wildlife Department";
      sa[6265] = "Texas Picnic Company";
      sa[6266] = "Texas Security Bank";
      sa[6267] = "Texas State University";
      sa[6268] = "Texas Tech University";
      sa[6269] = "TexasRAS.com";
      sa[6270] = "Textilemaster, LLC";
      sa[6271] = "Tgi Fridays";
      sa[6272] = "Thales Avionics";
      sa[6273] = "That's Great News";
      sa[6274] = "The Accessory corp";
      sa[6275] = "The Aerospace Corp";
      sa[6276] = "The American Red Cross";
      sa[6277] = "The American Sugar Refiining Co";
      sa[6278] = "The Ant Farm  LLC";
      sa[6279] = "The Art Medium Company";
      sa[6280] = "The Aspen Group";
      sa[6281] = "The Atlantic Club";
      sa[6282] = "The Ayco Company";
      sa[6283] = "The Back Abbey";
      sa[6284] = "The Bank of Harlan";
      sa[6285] = "The Bank of New York Mellon";
      sa[6286] = "The Benefits Agency";
      sa[6287] = "The Biltmore Hotel";
      sa[6288] = "The Boeing Company";
      sa[6289] = "The Boston Consulting Group";
      sa[6290] = "The Bowery Hotel";
      sa[6291] = "The Brattleboro Savings  and  Loan Association  F.A.";
      sa[6292] = "The Cadmus Group";
      sa[6293] = "The Car Works";
      sa[6294] = "The Carriage House Companies, Inc";
      sa[6295] = "The Center for the Partially Sighted";
      sa[6296] = "The Charles Machine Works, Inc.";
      sa[6297] = "The Children's House Montessori School";
      sa[6298] = "The Cimarron Group";
      sa[6299] = "The Citizens Bank of Valley Head";
      sa[6300] = "The Coca-Cola Company";
      sa[6301] = "The College Board";
      sa[6302] = "The Conifer Group";
      sa[6303] = "The Corcoran Group";
      sa[6304] = "The Dalton School";
      sa[6305] = "The Dana On Mission Bay";
      sa[6306] = "The Dannon Company";
      sa[6307] = "The ExecuSearch Group";
      sa[6308] = "The Food Bank of WMA";
      sa[6309] = "The Gambrinus Company";
      sa[6310] = "The Grand Canal Shoppes at The Venetian";
      sa[6311] = "The Hartford";
      sa[6312] = "The Hartford Insurance Company";
      sa[6313] = "The Herald-Dispatch";
      sa[6314] = "The Holmes Organisation, Inc.";
      sa[6315] = "The Home Depot";
      sa[6316] = "The Home Depot ";
      sa[6317] = "The Home Depot Inc.";
      sa[6318] = "The Home Depot RDC 5086";
      sa[6319] = "The J.M. Smucker Company";
      sa[6320] = "The Johns Hopkins University";
      sa[6321] = "The Jones Group USA, Inc";
      sa[6322] = "The Just Company";
      sa[6323] = "The Kohner Agency";
      sa[6324] = "The Kramer Group";
      sa[6325] = "The Kroger Co Fred Meyer Jewelers";
      sa[6326] = "The League School of Greater Boston";
      sa[6327] = "The Lightstone Group";
      sa[6328] = "The Lineage Group";
      sa[6329] = "The Maiman Company";
      sa[6330] = "The Man";
      sa[6331] = "The Marketing Division";
      sa[6332] = "The Mayo Clinic";
      sa[6333] = "The McGraw-Hill Companies";
      sa[6334] = "The McLaughlin Brothers, P.C.";
      sa[6335] = "The Men's Wearhouse";
      sa[6336] = "The Methodist Hospital";
      sa[6337] = "The NASAH Group";
      sa[6338] = "The NPD Group";
      sa[6339] = "The National Association of Asian MBAs";
      sa[6340] = "The Nielsen Company";
      sa[6341] = "The Northern Trust Corporation";
      sa[6342] = "The Nutty Irishman";
      sa[6343] = "The Ohio State University Medical Center";
      sa[6344] = "The Okonite Cable Company";
      sa[6345] = "The Palace";
      sa[6346] = "The Pantry";
      sa[6347] = "The Perfect Body, Inc.";
      sa[6348] = "The Phoenix Center";
      sa[6349] = "The PrivateBank";
      sa[6350] = "The Providence Plan";
      sa[6351] = "The Ritz-Carlton";
      sa[6352] = "The Sagemont School";
      sa[6353] = "The Salvation Army";
      sa[6354] = "The Seven Hills School";
      sa[6355] = "The Shaw Group Inc";
      sa[6356] = "The State of New Jersey";
      sa[6357] = "The Superior Group";
      sa[6358] = "The Telephone Connection";
      sa[6359] = "The Topps Company, Inc.";
      sa[6360] = "The Toro Company";
      sa[6361] = "The Trump Network";
      sa[6362] = "The UPS Store";
      sa[6363] = "The Ultimate Software Group, Inc";
      sa[6364] = "The University Club";
      sa[6365] = "The University of Akron";
      sa[6366] = "The Vanguard Group";
      sa[6367] = "The Village at Duxbury";
      sa[6368] = "The Vineyard";
      sa[6369] = "The W Hotel San Diego";
      sa[6370] = "The Walt Disney Company";
      sa[6371] = "The Warranty Group";
      sa[6372] = "The Washington Home & Community Hospices";
      sa[6373] = "The Weglarz Co.";
      sa[6374] = "The WellPoint Companies  Inc";
      sa[6375] = "The Whiting-Turner Contracting Co.";
      sa[6376] = "The Woodlands Financial Group";
      sa[6377] = "The federal government or postal service";
      sa[6378] = "The joule under Richfield mangement";
      sa[6379] = "Therapy Management Coporation";
      sa[6380] = "Therapy Services, LLC";
      sa[6381] = "Thermadyne Holdings  LLC";
      sa[6382] = "Thermal Air Inc ";
      sa[6383] = "Thermo Fisher Scientific,Inc";
      sa[6384] = "Thibiant International";
      sa[6385] = "Thinc Systems Inc";
      sa[6386] = "Think Fixed";
      sa[6387] = "ThinkBold Corporate Communications, LLC";
      sa[6388] = "Third Baptist Church";
      sa[6389] = "Third Ward Cafe";
      sa[6390] = "Thomas Barry & Associates";
      sa[6391] = "Thomas J. Apts";
      sa[6392] = "Thomas Jefferson School of Law";
      sa[6393] = "Thomas Weisel Partners";
      sa[6394] = "Thomasville Furniture";
      sa[6395] = "Thomco Specialty Products";
      sa[6396] = "Thompson safety";
      sa[6397] = "Thomson Reuters";
      sa[6398] = "Thorek Memorial Hospital";
      sa[6399] = "Thunderbird Hockey Enterprises  LLC";
      sa[6400] = "Ticketmaster";
      sa[6401] = "Tidwell Cancer Treatment Center";
      sa[6402] = "Tier Technologies";
      sa[6403] = "Tiffany & Co.";
      sa[6404] = "Tiffany & Company UK";
      sa[6405] = "Tift Regional Medical Center";
      sa[6406] = "Tighe Patton Armstrong Teasdale";
      sa[6407] = "Tile Interiors";
      sa[6408] = "Tim Hortons";
      sa[6409] = "Tim McCarter Plumbing Inc";
      sa[6410] = "Timber Ridge Ranch";
      sa[6411] = "Timberline Construction, Inc.";
      sa[6412] = "Time Frame";
      sa[6413] = "Time WARNER Cable";
      sa[6414] = "Time Warner Cable";
      sa[6415] = "Time Warner Inc.";
      sa[6416] = "Timelink International";
      sa[6417] = "Times Herald Record";
      sa[6418] = "Timet";
      sa[6419] = "Timken Co.";
      sa[6420] = "Timmons Group";
      sa[6421] = "TinWerks Corporation";
      sa[6422] = "Tinker AFB";
      sa[6423] = "Tinker Air Force Base";
      sa[6424] = "Tires Plus";
      sa[6425] = "Titan Reinforcing LLC";
      sa[6426] = "Tj Maxx";
      sa[6427] = "Toccoa Family Medicine";
      sa[6428] = "Toddler Town Daycare LLC";
      sa[6429] = "Toler Law Group";
      sa[6430] = "Tolleson Wealth Management";
      sa[6431] = "Tolliver Group";
      sa[6432] = "Tom Cat Bakery, Inc";
      sa[6433] = "Tom King";
      sa[6434] = "Tom Thumb";
      sa[6435] = "Tom Tom";
      sa[6436] = "Tomblin, Farmer & Morris, PLLC";
      sa[6437] = "Tony Pai LLC";
      sa[6438] = "Top Care Inc.";
      sa[6439] = "Topeka Ear Nose & Throat";
      sa[6440] = "Tops Engineering";
      sa[6441] = "Topway Enterprise";
      sa[6442] = "Toray CFA Inc.";
      sa[6443] = "Toray Carbon Fibers America, Inc.";
      sa[6444] = "Toray Composites America";
      sa[6445] = "Toray Plastics";
      sa[6446] = "Tory Burch";
      sa[6447] = "Toshiba Business Solutions";
      sa[6448] = "Total Systems Development";
      sa[6449] = "Total Terminals International, LLC";
      sa[6450] = "Total Wellness Center";
      sa[6451] = "Total technology Solutions";
      sa[6452] = "TotalTrax";
      sa[6453] = "Touchstone Incentives";
      sa[6454] = "Tourneau ";
      sa[6455] = "Towbin Infiniti";
      sa[6456] = "Tower Credit Union";
      sa[6457] = "Towers Watson";
      sa[6458] = "Towers Watson Data Services";
      sa[6459] = "Town  and  Country Painting";
      sa[6460] = "Town & Country Markets INC";
      sa[6461] = "Town Of Bedford";
      sa[6462] = "Town Of Truckee";
      sa[6463] = "Town Sports International";
      sa[6464] = "Town and Country Medical";
      sa[6465] = "Town of Douglas";
      sa[6466] = "Town of Greene";
      sa[6467] = "Town of Hubbardston";
      sa[6468] = "Town of Mansfield";
      sa[6469] = "Town of Massena";
      sa[6470] = "Town of Middleboro";
      sa[6471] = "Town of Rockland";
      sa[6472] = "Town of Wareham";
      sa[6473] = "Town of West Hartford";
      sa[6474] = "Town of Westerly";
      sa[6475] = "Town of Windham";
      sa[6476] = "Townsend";
      sa[6477] = "Township of North Bergen";
      sa[6478] = "Towson University";
      sa[6479] = "Toyota";
      sa[6480] = "Toyota Financial Svcs";
      sa[6481] = "Tractor Supply Co";
      sa[6482] = "Trader Joe's";
      sa[6483] = "Trader Joes";
      sa[6484] = "Tradesmen International";
      sa[6485] = "Tradestation Group";
      sa[6486] = "Tradition North America";
      sa[6487] = "Trane";
      sa[6488] = "TransCanada";
      sa[6489] = "TransContinental Direct";
      sa[6490] = "TransFirst";
      sa[6491] = "TransUnion";
      sa[6492] = "Transamerica";
      sa[6493] = "Transocean ";
      sa[6494] = "Transperfect Translation";
      sa[6495] = "Transportation Security Administration";
      sa[6496] = "Transquest";
      sa[6497] = "Transwestern";
      sa[6498] = "Travel Centers of America";
      sa[6499] = "Travel Corp";
      sa[6500] = "Traveler's Insurance";
      sa[6501] = "Travelers Insurance";
      sa[6502] = "Travelers Insurance ";
      sa[6503] = "Treasure Coast Pool Service,LLC";
      sa[6504] = "Treasure Island";
      sa[6505] = "Tree of Knowledge Educational Services Inc.";
      sa[6506] = "Trenton Public Schools";
      sa[6507] = "Tri-River Design & Construction";
      sa[6508] = "Tri-Star Marketing";
      sa[6509] = "Tri-State Care Flight";
      sa[6510] = "TriHealth";
      sa[6511] = "Triad Isotopes";
      sa[6512] = "Trial court of Massachusetts";
      sa[6513] = "Trident Mortgage Company";
      sa[6514] = "Trinity Clinic";
      sa[6515] = "Trinity Community Church";
      sa[6516] = "Trinity EMS";
      sa[6517] = "Triple Canopy";
      sa[6518] = "Triple Threat Performing Arts";
      sa[6519] = "Tristate-Brickface Stucco";
      sa[6520] = "Triton College";
      sa[6521] = "Triunfo-Mex Inc ";
      sa[6522] = "Troup County Schools LCMS";
      sa[6523] = "Trowel Arts Corporation";
      sa[6524] = "Troy City Schools";
      sa[6525] = "Truck Enterprises Inc.";
      sa[6526] = "Truckee Meadows Optical";
      sa[6527] = "True North";
      sa[6528] = "TrueCar";
      sa[6529] = "Trustees of Boston University";
      sa[6530] = "Tucker Griffin Barnes P.C.";
      sa[6531] = "Tucson Airport Authority";
      sa[6532] = "Tulley";
      sa[6533] = "Tulsa Public Schools";
      sa[6534] = "TurboChef Technologies Inc";
      sa[6535] = "Turco Construction ";
      sa[6536] = "Turner Broadcasting";
      sa[6537] = "Turner Studios";
      sa[6538] = "Turning Point Services, Inc.";
      sa[6539] = "Turning Point for God";
      sa[6540] = "Tuscany  Eyewear";
      sa[6541] = "Twin River Casino";
      sa[6542] = "Twin Valley School District";
      sa[6543] = "Twinspires";
      sa[6544] = "Two Rivers Enterprises";
      sa[6545] = "Tyco";
      sa[6546] = "Tykan Group";
      sa[6547] = "Tyler Technologies";
      sa[6548] = "U S Postal Service";
      sa[6549] = "U-haul";
      sa[6550] = "U. S Department of Housing and Urban Dev";
      sa[6551] = "U. S Postal Service";
      sa[6552] = "U. S. Army";
      sa[6553] = "U. S. COAST GUARD";
      sa[6554] = "U. S. Coast Guard";
      sa[6555] = "U. S. Steel Corp";
      sa[6556] = "U.S Army";
      sa[6557] = "U.S army";
      sa[6558] = "U.S.  House of Rep";
      sa[6559] = "U.S. Air Force";
      sa[6560] = "U.S. Air Force Civilian";
      sa[6561] = "U.S. Army";
      sa[6562] = "U.S. Army Corps Engineers";
      sa[6563] = "U.S. Border Patrol";
      sa[6564] = "U.S. Bureau of Economic Analysis";
      sa[6565] = "U.S. COAST GUARD";
      sa[6566] = "U.S. Coast Gaurd";
      sa[6567] = "U.S. Coast Guard";
      sa[6568] = "U.S. Customs & Border Protection";
      sa[6569] = "U.S. Customs and Border Protection";
      sa[6570] = "U.S. Department of Agriculture";
      sa[6571] = "U.S. Department of Homeland Security";
      sa[6572] = "U.S. Department of Labor";
      sa[6573] = "U.S. Department of Treasury";
      sa[6574] = "U.S. Department of Veteran Affairs";
      sa[6575] = "U.S. Dept. Of Homeland Security";
      sa[6576] = "U.S. Dept. of Housing and Urban Develop.";
      sa[6577] = "U.S. District Court";
      sa[6578] = "U.S. Fish & Wildlife Service";
      sa[6579] = "U.S. Forest Service";
      sa[6580] = "U.S. Government";
      sa[6581] = "U.S. Government, Dept of Homeland Securi";
      sa[6582] = "U.S. MARINE CORPS";
      sa[6583] = "U.S. Military";
      sa[6584] = "U.S. Navy";
      sa[6585] = "U.S. Patent and Trademark Office";
      sa[6586] = "U.S. Probation Office";
      sa[6587] = "U.S. Treasury Department";
      sa[6588] = "U.S. Trust, Bank of America";
      sa[6589] = "U.S. department of Justice";
      sa[6590] = "U.S.P.S";
      sa[6591] = "U.S.Postal Service";
      sa[6592] = "U.S.Postal Servive";
      sa[6593] = "UAB";
      sa[6594] = "UBS";
      sa[6595] = "UBS AG";
      sa[6596] = "UBS Financial Services";
      sa[6597] = "UBS Financial Services, Inc";
      sa[6598] = "UBS Investment Bank";
      sa[6599] = "UBS SECURITIES LLC";
      sa[6600] = "UC Berkeley";
      sa[6601] = "UC Davis";
      sa[6602] = "UC Davis Medical Center";
      sa[6603] = "UC Santa Cruz";
      sa[6604] = "UCG";
      sa[6605] = "UCLA";
      sa[6606] = "UCLA medical center";
      sa[6607] = "UCSF";
      sa[6608] = "UCSF Dept. of Radiology";
      sa[6609] = "UCSF Medical Center";
      sa[6610] = "UCSF Police Department";
      sa[6611] = "UDFI";
      sa[6612] = "UEI College";
      sa[6613] = "UM SCCC";
      sa[6614] = "UNICON International Inc.";
      sa[6615] = "UNISYS";
      sa[6616] = "UNIT4 CODA";
      sa[6617] = "UNITED LIGHTING & ELECTRICAL GROUP";
      sa[6618] = "UNITED STATES MARINE CORPS";
      sa[6619] = "UNITED STATES POSTAL SERVICE";
      sa[6620] = "UNIVERSITY OF CALIFORNIA";
      sa[6621] = "UPMC";
      sa[6622] = "UPMC Presbyterian Shadyside";
      sa[6623] = "UPS";
      sa[6624] = "UPS Freight";
      sa[6625] = "UPS Supply Chain Solutions";
      sa[6626] = "URS";
      sa[6627] = "URS Corporation";
      sa[6628] = "US AIR FORCE";
      sa[6629] = "US ARMY";
      sa[6630] = "US Air Force";
      sa[6631] = "US Army";
      sa[6632] = "US Army ";
      sa[6633] = "US Army Corps of Engineers";
      sa[6634] = "US BANK";
      sa[6635] = "US Bank";
      sa[6636] = "US Border Patrol";
      sa[6637] = "US COAST GUARD";
      sa[6638] = "US CUSTOMS AND BORDER PROTECTION";
      sa[6639] = "US Cellular";
      sa[6640] = "US Census Bureau";
      sa[6641] = "US Citizenship and Immigration Services";
      sa[6642] = "US Coast Guard";
      sa[6643] = "US Customs";
      sa[6644] = "US Customs & Border Protection";
      sa[6645] = "US Customs and Border Protection/ HomeL";
      sa[6646] = "US DEPT OF HOMELAND SECURITY";
      sa[6647] = "US DOJ/FCI Fort Dix";
      sa[6648] = "US Dep. Of Homeland Security";
      sa[6649] = "US Department of Commerce";
      sa[6650] = "US Department of HUD";
      sa[6651] = "US Department of Veterans Affairs";
      sa[6652] = "US Dept of Commercce";
      sa[6653] = "US Dept of Homeland Security OIG";
      sa[6654] = "US Dept of Veterans Affairs";
      sa[6655] = "US Dept. of Justice";
      sa[6656] = "US District Court";
      sa[6657] = "US EPA";
      sa[6658] = "US Environmental Protection Agency";
      sa[6659] = "US Federal Government";
      sa[6660] = "US Federal Government, NIH";
      sa[6661] = "US Forest Service";
      sa[6662] = "US Government";
      sa[6663] = "US Health Works";
      sa[6664] = "US Jewelry House, Ltd";
      sa[6665] = "US Military";
      sa[6666] = "US NAVY";
      sa[6667] = "US National Central Bureau - Interpol";
      sa[6668] = "US National Park Service";
      sa[6669] = "US Navy";
      sa[6670] = "US Navy ";
      sa[6671] = "US POSTAL SERVICE";
      sa[6672] = "US Post Office";
      sa[6673] = "US Postal Service";
      sa[6674] = "US Security Associates";
      sa[6675] = "US State Department";
      sa[6676] = "US Tech Solutions";
      sa[6677] = "US Treasury";
      sa[6678] = "US Xpress, INC";
      sa[6679] = "US department of Defense";
      sa[6680] = "US military army";
      sa[6681] = "US-Brazil Grocery";
      sa[6682] = "US-DHS";
      sa[6683] = "US.  Dept of Labor";
      sa[6684] = "USA Properties Fund, Inc.";
      sa[6685] = "USAA";
      sa[6686] = "USAF";
      sa[6687] = "USBank";
      sa[6688] = "USC";
      sa[6689] = "USC Shoah Foundation Institute";
      sa[6690] = "USD 253";
      sa[6691] = "USD 281: Hill City Grade School";
      sa[6692] = "USD 362";
      sa[6693] = "USD 383 School District";
      sa[6694] = "USDA Forest Service";
      sa[6695] = "USDA Risk Management Agency";
      sa[6696] = "USDA Rural Development";
      sa[6697] = "USDA-FSA";
      sa[6698] = "USDA/FMMA";
      sa[6699] = "USDA/NRCS";
      sa[6700] = "USGS";
      sa[6701] = "USI ";
      sa[6702] = "USIS";
      sa[6703] = "USMC";
      sa[6704] = "USN";
      sa[6705] = "USPOSTALSERVICE";
      sa[6706] = "USPS";
      sa[6707] = "USPS/Nashua L&DC";
      sa[6708] = "USPostal Service";
      sa[6709] = "UT Dallas";
      sa[6710] = "UT Health Science Center";
      sa[6711] = "UT MD Anderson Cancer Center";
      sa[6712] = "UT Southwestern";
      sa[6713] = "UT Southwestern/Neuroscience";
      sa[6714] = "UTHSC";
      sa[6715] = "UTSW med cntr at Dallas";
      sa[6716] = "UW HealthPartners";
      sa[6717] = "UW-Madison";
      sa[6718] = "Uhaul";
      sa[6719] = "Ulbrich of California";
      sa[6720] = "Ulta";
      sa[6721] = "Ultimate Link Corp";
      sa[6722] = "Ultimo Software Solutions Inc";
      sa[6723] = "Underwriters Laboratories";
      sa[6724] = "Unifoil";
      sa[6725] = "Unimark construction";
      sa[6726] = "Union Bank";
      sa[6727] = "Union Electronics Distributors";
      sa[6728] = "Union Pacific Railroad";
      sa[6729] = "Unique Industries";
      sa[6730] = "Unisys Corporation";
      sa[6731] = "United Airlines";
      sa[6732] = "United Aluminum";
      sa[6733] = "United Assistance Group";
      sa[6734] = "United Bankers' Bank";
      sa[6735] = "United Celebral Paulsy Assoc";
      sa[6736] = "United Central Bank";
      sa[6737] = "United Electric";
      sa[6738] = "United Fire Group";
      sa[6739] = "United Health Group Inc.";
      sa[6740] = "United HealthCare";
      sa[6741] = "United Healthcare";
      sa[6742] = "United Local Credit Union";
      sa[6743] = "United Nations";
      sa[6744] = "United Parcel Service";
      sa[6745] = "United Parcel Services ";
      sa[6746] = "United Plate Glass";
      sa[6747] = "United Process";
      sa[6748] = "United Regional Hospital";
      sa[6749] = "United Sates Air Force";
      sa[6750] = "United State Department of Agriculture";
      sa[6751] = "United States Air Force";
      sa[6752] = "United States Armed Forces";
      sa[6753] = "United States Army";
      sa[6754] = "United States Army Reserves";
      sa[6755] = "United States Capitol Police";
      sa[6756] = "United States Coast Guard";
      sa[6757] = "United States Courts";
      sa[6758] = "United States Department of State";
      sa[6759] = "United States Dept. of State";
      sa[6760] = "United States District Court";
      sa[6761] = "United States Geological Survey";
      sa[6762] = "United States Government - CDC/NIOSH";
      sa[6763] = "United States Marine Corps";
      sa[6764] = "United States Marshals Service";
      sa[6765] = "United States Military";
      sa[6766] = "United States Navy";
      sa[6767] = "United States Post Office";
      sa[6768] = "United States Postal Service";
      sa[6769] = "United States Probation";
      sa[6770] = "United Stationers";
      sa[6771] = "United Van Lines";
      sa[6772] = "United staes dept of justice";
      sa[6773] = "UnitedHealth Group";
      sa[6774] = "UnitedHealthcare";
      sa[6775] = "Unitel Global";
      sa[6776] = "Unity Electric LLC";
      sa[6777] = "Univ of Colorado  Boulder";
      sa[6778] = "Universal Janitorial Services, Inc.";
      sa[6779] = "Universal Mind";
      sa[6780] = "Universal Software Corporation Inc.";
      sa[6781] = "Universal Technical Institute";
      sa[6782] = "UniversalPegasus International";
      sa[6783] = "University Center At Princeton";
      sa[6784] = "University Hospital";
      sa[6785] = "University Of Cincinnati";
      sa[6786] = "University Of Connecticut";
      sa[6787] = "University Of Florida College of Pharm";
      sa[6788] = "University of Alabama at Birmingham Hosp";
      sa[6789] = "University of CA San Diego";
      sa[6790] = "University of California";
      sa[6791] = "University of California -- San Francisc";
      sa[6792] = "University of California San Francisco";
      sa[6793] = "University of California, Davis";
      sa[6794] = "University of California, Irvine";
      sa[6795] = "University of California, San Diego";
      sa[6796] = "University of California, San Francisco";
      sa[6797] = "University of Chicago";
      sa[6798] = "University of Chicago Medical Center";
      sa[6799] = "University of Florida";
      sa[6800] = "University of Georgia";
      sa[6801] = "University of Houston";
      sa[6802] = "University of Illinois";
      sa[6803] = "University of Louisville";
      sa[6804] = "University of Massachusetts";
      sa[6805] = "University of Miami";
      sa[6806] = "University of Minnesota";
      sa[6807] = "University of Mississippi Medical Center";
      sa[6808] = "University of Nebraska-Lincoln";
      sa[6809] = "University of Nevada, Las Vegas";
      sa[6810] = "University of New Hampshire";
      sa[6811] = "University of North Carolina Wilmington ";
      sa[6812] = "University of Oklahoma";
      sa[6813] = "University of Pennsylvania";
      sa[6814] = "University of Phoenix";
      sa[6815] = "University of Pittsburgh";
      sa[6816] = "University of Southern California";
      sa[6817] = "University of Texas San ANtonio";
      sa[6818] = "University of Texas at Austin";
      sa[6819] = "University of Texas-Austin";
      sa[6820] = "University of Vermont";
      sa[6821] = "University of Virginia";
      sa[6822] = "University of Washington";
      sa[6823] = "Universityof California Davis";
      sa[6824] = "Univest";
      sa[6825] = "Univision Television Group  Inc.";
      sa[6826] = "Untied States Postal Service";
      sa[6827] = "Unum";
      sa[6828] = "Unviersity of Massachsuetts ";
      sa[6829] = "Upham oil and gas";
      sa[6830] = "Upper Lakes Foods";
      sa[6831] = "Upsher-Smith Laboratories";
      sa[6832] = "Urban Health Plan";
      sa[6833] = "Urban Outfitters";
      sa[6834] = "Us Army";
      sa[6835] = "Us Dept of Homeland Security";
      sa[6836] = "Us Navy";
      sa[6837] = "Us army";
      sa[6838] = "Us marines";
      sa[6839] = "Utah State University";
      sa[6840] = "Uti United states ";
      sa[6841] = "Utiliquest";
      sa[6842] = "V Capital";
      sa[6843] = "V&F Transformer Corporation";
      sa[6844] = "VA";
      sa[6845] = "VA GI Bill Education";
      sa[6846] = "VA Hospital";
      sa[6847] = "VA Hospital Madison, WI";
      sa[6848] = "VA Medical Center";
      sa[6849] = "VALASSIS DIRECT MAIL";
      sa[6850] = "VALLEYCARE MED CENTER";
      sa[6851] = "VASNHS";
      sa[6852] = "VCA pets are people too";
      sa[6853] = "VCUHS";
      sa[6854] = "VERIZON";
      sa[6855] = "VERIZON WIRELESS";
      sa[6856] = "VERONIS SUHLER STEVENSON";
      sa[6857] = "VIP Grooming";
      sa[6858] = "VIP Petcare Services";
      sa[6859] = "VMC Consulting";
      sa[6860] = "VMware Inc";
      sa[6861] = "VOLT MANAGEMENT";
      sa[6862] = "VRMA";
      sa[6863] = "VSR";
      sa[6864] = "VSS";
      sa[6865] = "VSS Monitoring, Inc";
      sa[6866] = "VUTEC, CORP";
      sa[6867] = "VVF llc";
      sa[6868] = "Va. Dept of Conservation/Recreation";
      sa[6869] = "Vacuum Barrier Alliance, Inc.";
      sa[6870] = "Valeocon";
      sa[6871] = "Valiant Industries Inc";
      sa[6872] = "Valiant Insurance Company";
      sa[6873] = "Valic";
      sa[6874] = "Valir Health";
      sa[6875] = "Valley Ambulance Authority";
      sa[6876] = "Valley Learning Center";
      sa[6877] = "Valley National Bank";
      sa[6878] = "Valley Tire Co Inc";
      sa[6879] = "Valor Security Services";
      sa[6880] = "Value Added Communications";
      sa[6881] = "Van Buren Police";
      sa[6882] = "Van Devere, Inc.";
      sa[6883] = "Van Tuyl Group";
      sa[6884] = "Van-Dee Manufacturing Co.";
      sa[6885] = "Vangent";
      sa[6886] = "Vanguard";
      sa[6887] = "Vanilla Urban Threads";
      sa[6888] = "Vantage Apparel";
      sa[6889] = "Vantage Oncology Inc.";
      sa[6890] = "Varian Medical Systems";
      sa[6891] = "Vascular Imaging of Arizona";
      sa[6892] = "Vaughn & Melton";
      sa[6893] = "Vaultronics, LLC";
      sa[6894] = "Vector Marketing";
      sa[6895] = "Velocity Sports Performance";
      sa[6896] = "Venice Consulting Group";
      sa[6897] = "Ventura County HSA";
      sa[6898] = "Veolia Environmental Services";
      sa[6899] = "Veolia Transportation";
      sa[6900] = "Veritiss, LLC";
      sa[6901] = "Verizon";
      sa[6902] = "Verizon Business";
      sa[6903] = "Verizon California Inc.";
      sa[6904] = "Verizon Communications";
      sa[6905] = "Verizon Federal, Inc.";
      sa[6906] = "Verizon Wieless";
      sa[6907] = "Verizon Wireless";
      sa[6908] = "Verizon Wireless ";
      sa[6909] = "Verizon wireless";
      sa[6910] = "Vernon College";
      sa[6911] = "Versus";
      sa[6912] = "Versus Trading Company";
      sa[6913] = "Vertical Screen, Inc.";
      sa[6914] = "Vertrade d.b.a Systeam";
      sa[6915] = "Verus Financial";
      sa[6916] = "Vespa Sarasota";
      sa[6917] = "Veterans Administration";
      sa[6918] = "Veterans Administration HCS";
      sa[6919] = "Veterans Affairs";
      sa[6920] = "ViTrax";
      sa[6921] = "Viasat, Inc.";
      sa[6922] = "Vibe Teacher Recruitment";
      sa[6923] = "Victor & Envelope Manufacturing";
      sa[6924] = "Victorias Secret";
      sa[6925] = "Victory Land Group, Inc.";
      sa[6926] = "Vidalia city schools";
      sa[6927] = "Video Monitoring Services";
      sa[6928] = "Viewpoint School";
      sa[6929] = "Viget Labs";
      sa[6930] = "Vigilant Services Corporation";
      sa[6931] = "Viking Services";
      sa[6932] = "Villa Maria Nursing Center";
      sa[6933] = "Village Dermatology";
      sa[6934] = "Village of Central City";
      sa[6935] = "Village of Mt Prospect";
      sa[6936] = "Village of Stone Park";
      sa[6937] = "Vineland board of Education";
      sa[6938] = "Vintage Senior Living";
      sa[6939] = "VirTra Systems";
      sa[6940] = "Virginia Commerce Bank";
      sa[6941] = "Virginia Mason Medical Center";
      sa[6942] = "Virginia Military Institute";
      sa[6943] = "Virginia State Police";
      sa[6944] = "VirginiaMasonMedicalCenter";
      sa[6945] = "Vishay Intertechnology";
      sa[6946] = "Visi-Line Inc";
      sa[6947] = "Vision Service Plan";
      sa[6948] = "Visionary Home Builders of CA";
      sa[6949] = "Viskase Companies";
      sa[6950] = "Vista Community Clinic";
      sa[6951] = "Vista Irrigation District";
      sa[6952] = "Visual Goodness";
      sa[6953] = "Vitamin Shoppe, Inc";
      sa[6954] = "Vitra Inc.";
      sa[6955] = "Voce Communications";
      sa[6956] = "Vogel Plumbing";
      sa[6957] = "Voice Prepaid, Inc.";
      sa[6958] = "Voiplink";
      sa[6959] = "Volt Management Services";
      sa[6960] = "Volt Technical Resources";
      sa[6961] = "Volunteers of America";
      sa[6962] = "Volunteers of America  Inc.";
      sa[6963] = "Volvo Group NA";
      sa[6964] = "Vonage";
      sa[6965] = "Vortex Aviation";
      sa[6966] = "Vumii, Inc.";
      sa[6967] = "W Hotel";
      sa[6968] = "W South Beach";
      sa[6969] = "W&G";
      sa[6970] = "W.E. Bowers";
      sa[6971] = "WABC-TV";
      sa[6972] = "WACHOVIA BANK";
      sa[6973] = "WAL-MART";
      sa[6974] = "WALMART STORES";
      sa[6975] = "WAY-FM Media Inc";
      sa[6976] = "WDW";
      sa[6977] = "WELLS FARGO";
      sa[6978] = "WELLS FARGO BANK";
      sa[6979] = "WELLS FARGO BANK, N.A.";
      sa[6980] = "WELLS FARGO HOME MORTGAGE";
      sa[6981] = "WESTOWER";
      sa[6982] = "WESTSIDE UNION SCHOOL DISTRICT";
      sa[6983] = "WEst I-10 Fire Department";
      sa[6984] = "WI DOC";
      sa[6985] = "WIL Research Laboratories";
      sa[6986] = "WILL-BURT";
      sa[6987] = "WIlliams Lea Inc.";
      sa[6988] = "WL Gore";
      sa[6989] = "WL Gore and Associates";
      sa[6990] = "WMC";
      sa[6991] = "WMC Global";
      sa[6992] = "WMCR";
      sa[6993] = "WOW";
      sa[6994] = "WSAV-TV";
      sa[6995] = "WSR Solutions";
      sa[6996] = "WV Army National Guard";
      sa[6997] = "WV Dept Transportation Div. of Highways";
      sa[6998] = "WW Reese Inc";
      sa[6999] = "WWL TV";
      sa[7000] = "WWTS";
      sa[7001] = "WXYZ-TV";
      sa[7002] = "Wachovia Bank";
      sa[7003] = "Wachovia Corp.";
      sa[7004] = "Wachovia Dealer Services";
      sa[7005] = "Wachovia-Wells Fargo";
      sa[7006] = "Wachovia.Bank";
      sa[7007] = "Wackenhut Security";
      sa[7008] = "Wackenhut Services, INC.";
      sa[7009] = "Wacker Silicone";
      sa[7010] = "Waggener Edstrom WW";
      sa[7011] = "Wagner & Company, CPA";
      sa[7012] = "Wahl Refractory Solutions";
      sa[7013] = "Wai-ching";
      sa[7014] = "Wakely Consulting Group, Inc.";
      sa[7015] = "Wal Mart";
      sa[7016] = "Wal-Mart";
      sa[7017] = "Wal-Mart Distribution center";
      sa[7018] = "Wal-Mart Stores, Inc";
      sa[7019] = "WalMart";
      sa[7020] = "Walgreen";
      sa[7021] = "Walgreen Co";
      sa[7022] = "Walgreen Co.";
      sa[7023] = "Walgreen Costumer Care";
      sa[7024] = "Walgreens";
      sa[7025] = "Walgreens Infusion Services";
      sa[7026] = "Walker & Moody Architects";
      sa[7027] = "Walla Walla University";
      sa[7028] = "Wallace Appraisal Service";
      sa[7029] = "Wallstreet Insurance Group";
      sa[7030] = "Walmart";
      sa[7031] = "Walmart DC 6069";
      sa[7032] = "Walmart Information Systems Division";
      sa[7033] = "Walmart Stores Inc";
      sa[7034] = "Walmart Stores, Inc - Sam's Club";
      sa[7035] = "Walmart Stores, Inc.";
      sa[7036] = "Walmart Super Center  ";
      sa[7037] = "Walt Disney World";
      sa[7038] = "Walt Disney World Co.";
      sa[7039] = "Wards Cove";
      sa[7040] = "Warner Bros. Television";
      sa[7041] = "Warner Music Group";
      sa[7042] = "Warren Hospital";
      sa[7043] = "Warren Truck & Trailer";
      sa[7044] = "Wasa Electrical Services";
      sa[7045] = "Washingotn County Hospital";
      sa[7046] = "Washington Army National Guard";
      sa[7047] = "Washington Center For Dentistry";
      sa[7048] = "Washington DC Transit";
      sa[7049] = "Washington Metropolitan Area Transit Aut";
      sa[7050] = "Washington State Department of Revenue";
      sa[7051] = "Washington State Ferries";
      sa[7052] = "Washington State Patrol";
      sa[7053] = "Washington Trust Company";
      sa[7054] = "Washington Unified School District";
      sa[7055] = "Washington University School of Medicine";
      sa[7056] = "Washoe County Court";
      sa[7057] = "Washoe County School District";
      sa[7058] = "Wasp Barcode Inc";
      sa[7059] = "Waste Industries";
      sa[7060] = "Waste Services Inc";
      sa[7061] = "Waterbury Hospital";
      sa[7062] = "Waterfall Mobile";
      sa[7063] = "Waterford Wedgwood USA";
      sa[7064] = "Waterstreet Specialty";
      sa[7065] = "Watterson Electric";
      sa[7066] = "Wausau Paper";
      sa[7067] = "Waxie Sanitary";
      sa[7068] = "Wayne County";
      sa[7069] = "Wcities.com";
      sa[7070] = "WeatherBELL Analytics LLC";
      sa[7071] = "Weatherby Locums ";
      sa[7072] = "Weatherford Independent School District";
      sa[7073] = "Web Creations & Consulting, LLC";
      sa[7074] = "Web.com";
      sa[7075] = "Webcom Communications";
      sa[7076] = "Webroot Software";
      sa[7077] = "Wegmans";
      sa[7078] = "Weichert Realtors, Pat Mote Properties";
      sa[7079] = "Weichert, Realtors";
      sa[7080] = "Weightpack Inc,";
      sa[7081] = "Weis  Markets";
      sa[7082] = "WeiserMazars LLP";
      sa[7083] = "Weiss Realty LLC";
      sa[7084] = "Weiss Special Operations";
      sa[7085] = "Weissman Nowack Curry & Wilco, PC";
      sa[7086] = "Weld County Sheriff's Office";
      sa[7087] = "Weld Cty School District RE3J/Spouse too";
      sa[7088] = "WellCare Health Plans";
      sa[7089] = "Wellington Management Company LLP";
      sa[7090] = "Wellogic Inc";
      sa[7091] = "Wellpoint";
      sa[7092] = "Wellpoint, Inc.";
      sa[7093] = "Wells Fargo";
      sa[7094] = "Wells Fargo ";
      sa[7095] = "Wells Fargo Advisors";
      sa[7096] = "Wells Fargo Advisors, LLC ";
      sa[7097] = "Wells Fargo Bank";
      sa[7098] = "Wells Fargo Foothill";
      sa[7099] = "Wells Fargo Home Mortgage";
      sa[7100] = "Wells Fargo Insurance Services";
      sa[7101] = "Wells Fargo Insurance Services USA, Inc.";
      sa[7102] = "Wells Fargo Investments";
      sa[7103] = "Wells Fargo-Wachovia";
      sa[7104] = "Wellsfargo Home Mortgage";
      sa[7105] = "Wellspring Healthcare Services";
      sa[7106] = "Wellstar Health System";
      sa[7107] = "Wendy's/Arby's Group, Inc.";
      sa[7108] = "Wendys OFH of New York Inc";
      sa[7109] = "Wesley Community Services";
      sa[7110] = "Wesley Glen";
      sa[7111] = "Wesleyan University";
      sa[7112] = "West Asset Management";
      sa[7113] = "West Central Roofing";
      sa[7114] = "West Chester Area School District";
      sa[7115] = "West Coast Arborists, Inc.";
      sa[7116] = "West Coast Charters";
      sa[7117] = "West Coast Property Management";
      sa[7118] = "West Haven Board of Education";
      sa[7119] = "West Islip Public Schools";
      sa[7120] = "West Manatee Fire Rescue";
      sa[7121] = "West Marine";
      sa[7122] = "West Metro Education Partners";
      sa[7123] = "West Pharmaceutical Services";
      sa[7124] = "West Springfield Auto Parts";
      sa[7125] = "West Suburban Bank";
      sa[7126] = "West Virginia University";
      sa[7127] = "WestStar Autoplex";
      sa[7128] = "Westat";
      sa[7129] = "Western Beverage";
      sa[7130] = "Western Carolina University ";
      sa[7131] = "Western College";
      sa[7132] = "Western Digital";
      sa[7133] = "Western Refining Wholesale Inc";
      sa[7134] = "Western Reserve Eatery";
      sa[7135] = "Western Riverside Council of Governments";
      sa[7136] = "Western Southern Life";
      sa[7137] = "Western State Hospital";
      sa[7138] = "Western Union";
      sa[7139] = "Western Union LLC";
      sa[7140] = "Western Wayne Physicians, PLC";
      sa[7141] = "Westlake Financial Services";
      sa[7142] = "Westlake Woods Assisted Living";
      sa[7143] = "Westlake financial ";
      sa[7144] = "Westminster Police Department";
      sa[7145] = "Weston Outpatient Surgical Center";
      sa[7146] = "Westside Neurology";
      sa[7147] = "Westway Feed Products";
      sa[7148] = "Wethersfield Public Schools";
      sa[7149] = "Weyerhaeuser Corp.";
      sa[7150] = "Wheaton College";
      sa[7151] = "Wheaton Franciscan";
      sa[7152] = "Wheelabrator Technologies Inc.";
      sa[7153] = "Whidbey telecom";
      sa[7154] = "Whirlpool  Corp";
      sa[7155] = "Whitaker Bank";
      sa[7156] = "White County BOC";
      sa[7157] = "White Lodging Services";
      sa[7158] = "White Memorial Medical Center";
      sa[7159] = "White's Lumber";
      sa[7160] = "WhiteWave Foods";
      sa[7161] = "Whitechapel Gallery";
      sa[7162] = "Whiting-Turner";
      sa[7163] = "Whitman Financial Services";
      sa[7164] = "Whittier Union High School District";
      sa[7165] = "Whittmanhart";
      sa[7166] = "Whole Foods Market";
      sa[7167] = "WideOrbit";
      sa[7168] = "Wilbert Plastic Services";
      sa[7169] = "Wildman Harrold Allen & Dixon";
      sa[7170] = "Willamette University";
      sa[7171] = "Willamette Valley Medical Center";
      sa[7172] = "Willdan Energy Solutions";
      sa[7173] = "William C. Smith + Co.";
      sa[7174] = "Williams Blackstock Architects";
      sa[7175] = "Williams Lea";
      sa[7176] = "Williams-Sonoma Inc";
      sa[7177] = "Willis Insurance Services of CA";
      sa[7178] = "Willis Personal Insurance";
      sa[7179] = "Willow Park Baptist Church";
      sa[7180] = "Willow Valley Retirement Communities";
      sa[7181] = "Willowood Care Center";
      sa[7182] = "WilmerHale";
      sa[7183] = "Wilmes Chevrolet Buick GMC";
      sa[7184] = "Wilmington Paper";
      sa[7185] = "Wilmington Trust Company; M&T Bank ";
      sa[7186] = "Wilson Memorial Hospital";
      sa[7187] = "Wilsonart  International";
      sa[7188] = "Winchester Medical Center";
      sa[7189] = "Winchester Recreation";
      sa[7190] = "Winchester Savings Bank";
      sa[7191] = "Winco Foods";
      sa[7192] = "Windham School District";
      sa[7193] = "Windsor Solutions, Inc.";
      sa[7194] = "Windsor Unified School District";
      sa[7195] = "Windstream Communications";
      sa[7196] = "Wingfoot Commercial Tire Company";
      sa[7197] = "Wings Nine Inc.";
      sa[7198] = "Winn Army Comm. Hospital";
      sa[7199] = "Winn-Dixie";
      sa[7200] = "Winslow Animal Clinic";
      sa[7201] = "Winstar World Casino";
      sa[7202] = "Wipro";
      sa[7203] = "Wipro Technologies";
      sa[7204] = "Wisconsin Aluminum Foundry";
      sa[7205] = "Wisconsin Womens' Business Initiative Co";
      sa[7206] = "Wise County Public Schools";
      sa[7207] = "With A Little Help";
      sa[7208] = "Woburn Fire Department";
      sa[7209] = "Wolverine Machine Products Co.";
      sa[7210] = "Women's Prison Association";
      sa[7211] = "Wood Group - TransCanada Turbines";
      sa[7212] = "Woodforest National Bank";
      sa[7213] = "Woods Hole Oceanographic Institute";
      sa[7214] = "Woods Hole Oceanographic Institution";
      sa[7215] = "Woodstock School District #200";
      sa[7216] = "Word & Brown";
      sa[7217] = "Word and Brown General Agency";
      sa[7218] = "Workers Compensation Fund";
      sa[7219] = "Workforce Advantage";
      sa[7220] = "Worklife Financial and PF Changs China Bistro";
      sa[7221] = "Worktopia";
      sa[7222] = "World Bank";
      sa[7223] = "World Financial Group";
      sa[7224] = "World Heir Inc.";
      sa[7225] = "World Security Bureau";
      sa[7226] = "World Travel Holdings";
      sa[7227] = "World Wide Technology";
      sa[7228] = "WorldAPP, Inc.";
      sa[7229] = "WorldMark by Wyndham";
      sa[7230] = "WorldStrides ";
      sa[7231] = "WorldStrides Inc";
      sa[7232] = "WorldWater & Solar Technologies, Inc";
      sa[7233] = "WorldWater & Solar Technologies, Inc.";
      sa[7234] = "Worldwide Tech Services";
      sa[7235] = "Wrenshall Public School District #100";
      sa[7236] = "Wright Family Dentistry P.C. ";
      sa[7237] = "Wyndham Vacation Ownership";
      sa[7238] = "Wynn Resorts";
      sa[7239] = "Wyoming State Hospital";
      sa[7240] = "X-Factor Communications";
      sa[7241] = "XO Communications";
      sa[7242] = "XONEX Relocation";
      sa[7243] = "XYPRO Technology";
      sa[7244] = "XYPRO Technology Corporation";
      sa[7245] = "Xam Business Services";
      sa[7246] = "Xcel Energy";
      sa[7247] = "Xerox";
      sa[7248] = "Xorail";
      sa[7249] = "Xtiva Financial Systems";
      sa[7250] = "Xtreme Automotive Group, Inc";
      sa[7251] = "Xxtreme Group";
      sa[7252] = "YAI/NIPD";
      sa[7253] = "YAMILL GLASS @ WINDOWS";
      sa[7254] = "YCUSD";
      sa[7255] = "YELLOW ROADWAY CORP";
      sa[7256] = "YES Prep Public Schools";
      sa[7257] = "YH America Inc.";
      sa[7258] = "YMCA of Greater Salt Lake";
      sa[7259] = "YMCA of San Francisco";
      sa[7260] = "Yahoo";
      sa[7261] = "Yale Carolinas Inc";
      sa[7262] = "Yale New Haven Hospital";
      sa[7263] = "Yale University";
      sa[7264] = "Yamato Restaurant";
      sa[7265] = "Yankee Candle Company";
      sa[7266] = "Yankee Greyhound Racing, Inc.";
      sa[7267] = "Yard House";
      sa[7268] = "Yardley Dermatology Associates";
      sa[7269] = "Yarmuth Wilsdon Calfo PLLC";
      sa[7270] = "Yavapai County";
      sa[7271] = "Yellow Book USA";
      sa[7272] = "Yellowstone Club";
      sa[7273] = "Ymca Central Florida";
      sa[7274] = "Yonkers Public Schools ";
      sa[7275] = "Yorba Regional Animal Hospital";
      sa[7276] = "Young Star Liquor";
      sa[7277] = "Youth Co Op Inc";
      sa[7278] = "Youth Continuum";
      sa[7279] = "Youth Education in the Arts";
      sa[7280] = "Youth Empowerment Project";
      sa[7281] = "Yucca Valley Ford Center";
      sa[7282] = "Yuma Nursing Home Ctr";
      sa[7283] = "Yumband .INC";
      sa[7284] = "ZF INDUSTRIES";
      sa[7285] = "ZIGZAG Inc.";
      sa[7286] = "Zachry Construction Corporation";
      sa[7287] = "Zalman Roth";
      sa[7288] = "Zaner-Bloser Publishing";
      sa[7289] = "Zena Shoes";
      sa[7290] = "Zenger Folkman Company";
      sa[7291] = "Zeno Group, Inc";
      sa[7292] = "Zeno Office Solutions";
      sa[7293] = "Zensar Technologies Inc";
      sa[7294] = "Zep, Inc.";
      sa[7295] = "Zephyrhills Water";
      sa[7296] = "Ziff Davis Enterprise";
      sa[7297] = "Zimmerman Advertising";
      sa[7298] = "Zinio, LLC";
      sa[7299] = "Zone 7 Water Agency";
      sa[7300] = "Zone Striping";
      sa[7301] = "Zone57, Inc.";
      sa[7302] = "Zurich Financial Services - Global Corporate";
      sa[7303] = "Zurich North America";
      sa[7304] = "Zurich North American";
      sa[7305] = "a.w.a.c.";
      sa[7306] = "aNb Media";
      sa[7307] = "accenture";
      sa[7308] = "accord eng";
      sa[7309] = "accurate finishing";
      sa[7310] = "advance bldg";
      sa[7311] = "advance plumbing";
      sa[7312] = "advantage sales and marketing";
      sa[7313] = "affordable spiral stairs";
      sa[7314] = "agilent technologies";
      sa[7315] = "agility health";
      sa[7316] = "airtran airways";
      sa[7317] = "al di la trattoria";
      sa[7318] = "all american heating inc.";
      sa[7319] = "all for you photography";
      sa[7320] = "allied barton";
      sa[7321] = "allison smith company llc";
      sa[7322] = "aloha precast";
      sa[7323] = "amb security";
      sa[7324] = "amco ranger pest control";
      sa[7325] = "amcor precast";
      sa[7326] = "american furniture gallaries ";
      sa[7327] = "american precions spring";
      sa[7328] = "americold lig.";
      sa[7329] = "ameriprise financial";
      sa[7330] = "anlex consulant inc";
      sa[7331] = "antana lining";
      sa[7332] = "antelope valley hospital";
      sa[7333] = "apartment management associates llc";
      sa[7334] = "applied IndustrialTechnoliges";
      sa[7335] = "arab city schools";
      sa[7336] = "aramark";
      sa[7337] = "arb inc";
      sa[7338] = "architectural window mfg";
      sa[7339] = "army";
      sa[7340] = "army ";
      sa[7341] = "army fleet support";
      sa[7342] = "asi constactors";
      sa[7343] = "aspen";
      sa[7344] = "aspen square management";
      sa[7345] = "aspen waste systems";
      sa[7346] = "at&t";
      sa[7347] = "athenahealth";
      sa[7348] = "athletic fields of america";
      sa[7349] = "atlantic express";
      sa[7350] = "atlanticare";
      sa[7351] = "att";
      sa[7352] = "att ";
      sa[7353] = "autozone";
      sa[7354] = "avery consulting";
      sa[7355] = "bakenjoy foods";
      sa[7356] = "baker hughes";
      sa[7357] = "ball corp";
      sa[7358] = "bancroft";
      sa[7359] = "bank of america";
      sa[7360] = "bank of new york mellon";
      sa[7361] = "bare bones";
      sa[7362] = "bath and body works";
      sa[7363] = "battaglia";
      sa[7364] = "battaglia dist";
      sa[7365] = "battery systems inc.";
      sa[7366] = "bay 101 casino";
      sa[7367] = "bay club at mattapoisett";
      sa[7368] = "baystate builders";
      sa[7369] = "bd construction";
      sa[7370] = "bd of ed";
      sa[7371] = "bdp international inc";
      sa[7372] = "beaver oil co. inc";
      sa[7373] = "bed bath and beyond";
      sa[7374] = "beer capitol";
      sa[7375] = "behan ling  and  ruta";
      sa[7376] = "belvedere club";
      sa[7377] = "berdon llp";
      sa[7378] = "berkeley police department";
      sa[7379] = "bethesda ";
      sa[7380] = "big boyz bail bonds";
      sa[7381] = "bigfoot moving company";
      sa[7382] = "bioLINIA";
      sa[7383] = "bloomingdales";
      sa[7384] = "blue haven pools";
      sa[7385] = "blue line";
      sa[7386] = "blue rhino";
      sa[7387] = "bluebird holdings cmv llc";
      sa[7388] = "bmw maufacturing";
      sa[7389] = "bnsf railway";
      sa[7390] = "board of ed";
      sa[7391] = "bonefish";
      sa[7392] = "borough of prospect park police dept";
      sa[7393] = "boston herald";
      sa[7394] = "boulder station hotel casino";
      sa[7395] = "boydsflooring";
      sa[7396] = "bradco supply";
      sa[7397] = "bren-tronics";
      sa[7398] = "brewster central school";
      sa[7399] = "bridgestone/firestone";
      sa[7400] = "brooks howell home";
      sa[7401] = "brookshires grocery company";
      sa[7402] = "brookwarehouse.com";
      sa[7403] = "bryant and straton college";
      sa[7404] = "bryce hospital";
      sa[7405] = "builders works";
      sa[7406] = "bunzl";
      sa[7407] = "burger bros/burger king franchise";
      sa[7408] = "cPanel Inc";
      sa[7409] = "cablevision";
      sa[7410] = "cafe ba ba reeba";
      sa[7411] = "cajun country computers";
      sa[7412] = "cal-trans";
      sa[7413] = "caliber collision center";
      sa[7414] = "california amforge corp";
      sa[7415] = "california pacific orthopaedics & sports";
      sa[7416] = "california spectra instumetation";
      sa[7417] = "caltech";
      sa[7418] = "canonsburg Hospital";
      sa[7419] = "canvas systems";
      sa[7420] = "capital remodeling";
      sa[7421] = "cardiology consultans of Philadelphia";
      sa[7422] = "career staff unlimited";
      sa[7423] = "carlyle";
      sa[7424] = "carolina health care";
      sa[7425] = "carolinas medical center";
      sa[7426] = "carrerstaff unlimited";
      sa[7427] = "carrige house inc. co.";
      sa[7428] = "casey's general store";
      sa[7429] = "cassadaga valley school";
      sa[7430] = "catherine;s plus sizes";
      sa[7431] = "catholic charities";
      sa[7432] = "cattaraugus community action";
      sa[7433] = "ccc transportation";
      sa[7434] = "celebrate the children school for children with alternative learning styles";
      sa[7435] = "cenveo";
      sa[7436] = "ces";
      sa[7437] = "chandler-amtek engineering";
      sa[7438] = "change 1 child inc";
      sa[7439] = "chart industries";
      sa[7440] = "chartis insurance";
      sa[7441] = "chase ";
      sa[7442] = "chase bank";
      sa[7443] = "chelsea senior living ";
      sa[7444] = "chevron";
      sa[7445] = "chevron mining inc";
      sa[7446] = "chevron station";
      sa[7447] = "childrens daycare";
      sa[7448] = "chilis";
      sa[7449] = "chilton hospital";
      sa[7450] = "chris family restaurant";
      sa[7451] = "chugach government services";
      sa[7452] = "cincinnati public schools";
      sa[7453] = "cincinnati water works";
      sa[7454] = "cintas";
      sa[7455] = "cintas first aid and safety";
      sa[7456] = "circle four farms";
      sa[7457] = "cirkle k";
      sa[7458] = "cisco systems";
      sa[7459] = "citibank";
      sa[7460] = "citifinancial";
      sa[7461] = "citigroup";
      sa[7462] = "citizens financial group";
      sa[7463] = "city and county of San francisco";
      sa[7464] = "city of Phoenix Fire Dept";
      sa[7465] = "city of brigeport";
      sa[7466] = "city of cadillac";
      sa[7467] = "city of charleston";
      sa[7468] = "city of new york";
      sa[7469] = "city of new york hra";
      sa[7470] = "city of phoenix";
      sa[7471] = "city of richland";
      sa[7472] = "city of rowlett";
      sa[7473] = "city of seattle";
      sa[7474] = "city of south daytona";
      sa[7475] = "city of tyler";
      sa[7476] = "claires";
      sa[7477] = "clark county";
      sa[7478] = "clayton county water authority";
      sa[7479] = "clayton homes";
      sa[7480] = "clean harbors industrial services";
      sa[7481] = "cleveland plain dealer";
      sa[7482] = "clovernook health care";
      sa[7483] = "cnsi";
      sa[7484] = "coastal healthcare";
      sa[7485] = "coastal tec";
      sa[7486] = "cohoes police dept";
      sa[7487] = "coke";
      sa[7488] = "colorado natural meats";
      sa[7489] = "colrado clean-up";
      sa[7490] = "columbus metropolitan library";
      sa[7491] = "comcast";
      sa[7492] = "commercial express-hvac";
      sa[7493] = "community hospital of san bernardino";
      sa[7494] = "con edison";
      sa[7495] = "con-way freight";
      sa[7496] = "concord toyota";
      sa[7497] = "conicelli toyota";
      sa[7498] = "connolly's pub and restaurant";
      sa[7499] = "conrail";
      sa[7500] = "continental web press";
      sa[7501] = "control air";
      sa[7502] = "cooks collision";
      sa[7503] = "copperhead grille";
      sa[7504] = "corporate graphics commericial";
      sa[7505] = "costco";
      sa[7506] = "country side care center";
      sa[7507] = "county of ventura";
      sa[7508] = "countyofplumas";
      sa[7509] = "covanta energy";
      sa[7510] = "crater lake ford";
      sa[7511] = "crump ins srvs";
      sa[7512] = "csh";
      sa[7513] = "ctl aerospace inc.";
      sa[7514] = "cummins construction";
      sa[7515] = "curt g joa inc";
      sa[7516] = "d&d sexton inc";
      sa[7517] = "dakota pride";
      sa[7518] = "dan mcguinness";
      sa[7519] = "daniels  heating and a/c";
      sa[7520] = "data net";
      sa[7521] = "datastream";
      sa[7522] = "davis polk and wardwell";
      sa[7523] = "dawn";
      sa[7524] = "dcp dunkin donuts";
      sa[7525] = "dekadt marketing and research";
      sa[7526] = "deloitte tax llp";
      sa[7527] = "delta airlines";
      sa[7528] = "department of defense";
      sa[7529] = "department of health";
      sa[7530] = "department of homeland security";
      sa[7531] = "department of treasury";
      sa[7532] = "department of veterans affairs";
      sa[7533] = "dept of corrections";
      sa[7534] = "dept of corrections st. of ct.";
      sa[7535] = "dept of justice";
      sa[7536] = "dept of veterans affairs";
      sa[7537] = "dept. of homeland security";
      sa[7538] = "desert sands unified school district";
      sa[7539] = "destination hotels and resorts";
      sa[7540] = "dewitt & associates behavioral service";
      sa[7541] = "dhl express";
      sa[7542] = "dial seven limo servive";
      sa[7543] = "dimension one ";
      sa[7544] = "discount drug mart";
      sa[7545] = "doctors hospital";
      sa[7546] = "dod dasg";
      sa[7547] = "domtar";
      sa[7548] = "don pablos";
      sa[7549] = "donatwald+haque";
      sa[7550] = "done right automotive";
      sa[7551] = "douglas elliman";
      sa[7552] = "dover board of education";
      sa[7553] = "dr reynaldo godines";
      sa[7554] = "dr. behravan";
      sa[7555] = "dsa sports";
      sa[7556] = "dubois regional medical center";
      sa[7557] = "dunklin county court house";
      sa[7558] = "duro  dag";
      sa[7559] = "e-MDs";
      sa[7560] = "e.clarke travel";
      sa[7561] = "eBrothers Solutions, Inc.";
      sa[7562] = "eChalk";
      sa[7563] = "eCity Interactive";
      sa[7564] = "eDocument Resources";
      sa[7565] = "ecolab";
      sa[7566] = "ecsm uitilty contractors";
      sa[7567] = "eddie braun";
      sa[7568] = "eiqnetworks";
      sa[7569] = "ellen elder care";
      sa[7570] = "elvins mechanical";
      sa[7571] = "emeroson animal hospital";
      sa[7572] = "emmaus borough";
      sa[7573] = "emory adventist";
      sa[7574] = "emory university";
      sa[7575] = "ensco";
      sa[7576] = "enterprise";
      sa[7577] = "enterprise rent a car";
      sa[7578] = "entirenet";
      sa[7579] = "er motorsinc";
      sa[7580] = "ernst young";
      sa[7581] = "eshelman transportation";
      sa[7582] = "essex county dept. of corrections";
      sa[7583] = "estes express lines";
      sa[7584] = "europe star construction";
      sa[7585] = "excalibur";
      sa[7586] = "express energy";
      sa[7587] = "eye care center of virginia";
      sa[7588] = "faa";
      sa[7589] = "fairbanks northstar borough school district";
      sa[7590] = "fairfield properties";
      sa[7591] = "federal reserve bank of san francisco";
      sa[7592] = "fedex";
      sa[7593] = "fedex express";
      sa[7594] = "fil-mor express";
      sa[7595] = "first student";
      sa[7596] = "florida hospital";
      sa[7597] = "floridean health care";
      sa[7598] = "foam design";
      sa[7599] = "ford motor co";
      sa[7600] = "fort worth fire department";
      sa[7601] = "fowlers machine works inc.";
      sa[7602] = "fox tv studios";
      sa[7603] = "frc-southwest";
      sa[7604] = "freeman hospital";
      sa[7605] = "freudenberg";
      sa[7606] = "fritz plumbing";
      sa[7607] = "frontier communications";
      sa[7608] = "ftd";
      sa[7609] = "full time contract w/Ideocore Corporation";
      sa[7610] = "galls";
      sa[7611] = "garage managment comp.";
      sa[7612] = "gaucho";
      sa[7613] = "gc services";
      sa[7614] = "gemini motor transport LP";
      sa[7615] = "getty images";
      sa[7616] = "gexpro";
      sa[7617] = "giant food";
      sa[7618] = "glendale memorial hospital";
      sa[7619] = "glenwood foreign car";
      sa[7620] = "gloucester city nj";
      sa[7621] = "gmb rental";
      sa[7622] = "gods love inc.";
      sa[7623] = "golden state foods";
      sa[7624] = "golden state overnite";
      sa[7625] = "golfsmith";
      sa[7626] = "goodyear";
      sa[7627] = "grand ledge public schools";
      sa[7628] = "grand teton association";
      sa[7629] = "great clips";
      sa[7630] = "gulfstream cafe";
      sa[7631] = "gunn infiniti";
      sa[7632] = "gurly leep";
      sa[7633] = "halifax regional medical center";
      sa[7634] = "hap inc";
      sa[7635] = "hard rock casino";
      sa[7636] = "hardin co board of Education";
      sa[7637] = "harris teeter";
      sa[7638] = "hatteras press co";
      sa[7639] = "hawker beechcraft corporation";
      sa[7640] = "heartland hospital";
      sa[7641] = "heidler,inc";
      sa[7642] = "hellmann worldwide logistics";
      sa[7643] = "hennes  and  mauritz  LP";
      sa[7644] = "henry arnold ford co inc";
      sa[7645] = "here! Networks";
      sa[7646] = "hertz equipment rental";
      sa[7647] = "hf palm corp";
      sa[7648] = "hhc";
      sa[7649] = "holiday inn";
      sa[7650] = "home depot";
      sa[7651] = "homeland security";
      sa[7652] = "honda of america";
      sa[7653] = "honeywell int.";
      sa[7654] = "hopewell-prince george driving school";
      sa[7655] = "hoselton toyota";
      sa[7656] = "hospice";
      sa[7657] = "houston electric";
      sa[7658] = "hustler casino";
      sa[7659] = "hyatt regency";
      sa[7660] = "hyatt select";
      sa[7661] = "i.l.a";
      sa[7662] = "iBiquity Digital";
      sa[7663] = "iCrossing Inc.";
      sa[7664] = "iRise";
      sa[7665] = "iStreamPlanet";
      sa[7666] = "ibc (wonder bread Hostess)";
      sa[7667] = "ibew local union #3";
      sa[7668] = "ibm";
      sa[7669] = "icon parking systems";
      sa[7670] = "ics logistics";
      sa[7671] = "ideal products";
      sa[7672] = "idearc media";
      sa[7673] = "ihop";
      sa[7674] = "ihss";
      sa[7675] = "ikon office solutions";
      sa[7676] = "il. dept of corrections";
      sa[7677] = "imgram micro";
      sa[7678] = "incNETWORKS";
      sa[7679] = "indigo delivery services";
      sa[7680] = "ingersoll rand";
      sa[7681] = "innotrac";
      sa[7682] = "inskip";
      sa[7683] = "instant air";
      sa[7684] = "insurance technologies";
      sa[7685] = "international paper";
      sa[7686] = "ipworldtv inc";
      sa[7687] = "irs";
      sa[7688] = "isoTree LLC";
      sa[7689] = "iws";
      sa[7690] = "j & k";
      sa[7691] = "j & n auto electric";
      sa[7692] = "jackson co bd of edu";
      sa[7693] = "jacksonville auto salvage";
      sa[7694] = "james and kutyla";
      sa[7695] = "jasmar enterprises inc ";
      sa[7696] = "jay jay fashions pk wsm";
      sa[7697] = "jb hunt";
      sa[7698] = "jb&p plumbing";
      sa[7699] = "jbhunt";
      sa[7700] = "jcpenney";
      sa[7701] = "jd school";
      sa[7702] = "jersey city public school";
      sa[7703] = "jetBlue Airways";
      sa[7704] = "jetblue airways";
      sa[7705] = "jiffy lube";
      sa[7706] = "jim s coffee shop";
      sa[7707] = "job options, inc";
      sa[7708] = "johnny rockets";
      sa[7709] = "johns hopkins hospital";
      sa[7710] = "jonesboro surgery center";
      sa[7711] = "jp morgan chase";
      sa[7712] = "jpc builder";
      sa[7713] = "juno beach fish house";
      sa[7714] = "justice Works Youth Care";
      sa[7715] = "jw molding";
      sa[7716] = "kaiser permanente";
      sa[7717] = "kane auto parts inc.";
      sa[7718] = "kansas state university";
      sa[7719] = "kehe Distributors";
      sa[7720] = "kelco laundry";
      sa[7721] = "kelloggs corp.";
      sa[7722] = "kelly services";
      sa[7723] = "kenan advantage group west";
      sa[7724] = "kenover marketing";
      sa[7725] = "kiawah island golf resort";
      sa[7726] = "kik custom rpoducts";
      sa[7727] = "kinder morgan";
      sa[7728] = "kitchen classics llc";
      sa[7729] = "klj review";
      sa[7730] = "kllm transport services";
      sa[7731] = "knauz motors";
      sa[7732] = "knxv-tv";
      sa[7733] = "kone";
      sa[7734] = "kool Smiles";
      sa[7735] = "kraft foods";
      sa[7736] = "kroger inc";
      sa[7737] = "laborers local  #91";
      sa[7738] = "lahey clinic";
      sa[7739] = "lakeside memorial hospital";
      sa[7740] = "landmark servives Inc.";
      sa[7741] = "landmark theatres";
      sa[7742] = "lanier village estates";
      sa[7743] = "law office of C.Robert BAKAE";
      sa[7744] = "lawton media";
      sa[7745] = "le lycee francais de los angeles";
      sa[7746] = "leggett & platt, Inc";
      sa[7747] = "lil rascals academy";
      sa[7748] = "local 26";
      sa[7749] = "local 52 I.A.T.S.E.";
      sa[7750] = "local union 3";
      sa[7751] = "lockheed martin aeronautics corp.";
      sa[7752] = "lompoc correction center";
      sa[7753] = "lormarautogroup";
      sa[7754] = "los Cuates";
      sa[7755] = "los angeles county ";
      sa[7756] = "los angeles county fire department";
      sa[7757] = "los angeles superior court";
      sa[7758] = "lowe's ";
      sa[7759] = "lowes";
      sa[7760] = "lowes rdc961";
      sa[7761] = "lsw";
      sa[7762] = "lynsmith chevrolet";
      sa[7763] = "m/s tube technologies";
      sa[7764] = "macerich";
      sa[7765] = "macys";
      sa[7766] = "madera community hospital";
      sa[7767] = "magic scissors hair styling";
      sa[7768] = "majjor investments inc";
      sa[7769] = "management support";
      sa[7770] = "manatee glens";
      sa[7771] = "mandile fruit co";
      sa[7772] = "manor-care";
      sa[7773] = "marist college";
      sa[7774] = "mark dunning industries";
      sa[7775] = "market basket";
      sa[7776] = "maroone chevrolet of west dade";
      sa[7777] = "marsden maint. llc";
      sa[7778] = "marshall";
      sa[7779] = "marvell technology group";
      sa[7780] = "marymount school";
      sa[7781] = "mashantucket pequot gaming ent";
      sa[7782] = "matrix energy solutions";
      sa[7783] = "mavis tire";
      sa[7784] = "max-m-co";
      sa[7785] = "mckesson";
      sa[7786] = "mckinstry co.";
      sa[7787] = "mcmaster-carr";
      sa[7788] = "meadwestvaco";
      sa[7789] = "medplast group inc";
      sa[7790] = "memorial Sloan Kettering Cancer Center";
      sa[7791] = "memorial hospital ";
      sa[7792] = "merck";
      sa[7793] = "merck  and  Co.  Inc.";
      sa[7794] = "mercy mount shasta";
      sa[7795] = "merrill lynch";
      sa[7796] = "metropolitan hospital";
      sa[7797] = "metropolitan opera";
      sa[7798] = "miami beach police dept";
      sa[7799] = "michaigan state univeersity";
      sa[7800] = "mid lane truck & equipment repair";
      sa[7801] = "midway car rental";
      sa[7802] = "midwest collision center";
      sa[7803] = "midwest family";
      sa[7804] = "military";
      sa[7805] = "military sealift command";
      sa[7806] = "mill";
      sa[7807] = "millenium honda";
      sa[7808] = "miller appliance";
      sa[7809] = "millercoors";
      sa[7810] = "millers ale house";
      sa[7811] = "minneapolis club";
      sa[7812] = "mirabito holdings,inc";
      sa[7813] = "mission hospitals";
      sa[7814] = "mitchells salon and day spa";
      sa[7815] = "modern publishing";
      sa[7816] = "mohawk tile & marble of delaware";
      sa[7817] = "mold base industries, inc.";
      sa[7818] = "monterey financial services";
      sa[7819] = "morgan stanley";
      sa[7820] = "morries automotive group";
      sa[7821] = "morrison clark";
      sa[7822] = "msi credit solutions";
      sa[7823] = "mss multi sponsor studies";
      sa[7824] = "mts";
      sa[7825] = "myrvpartsplace.com";
      sa[7826] = "nCircle Inc";
      sa[7827] = "nail expo";
      sa[7828] = "napa distribution center ";
      sa[7829] = "napco chemical";
      sa[7830] = "nassau inn";
      sa[7831] = "nation auto house";
      sa[7832] = "national bronze";
      sa[7833] = "navajo";
      sa[7834] = "navy";
      sa[7835] = "neigborhoohealtcare";
      sa[7836] = "neiman marcus";
      sa[7837] = "nestle waters (arrowhead)";
      sa[7838] = "net ministries";
      sa[7839] = "network building and consulting";
      sa[7840] = "nevada D.O.T";
      sa[7841] = "new england tire";
      sa[7842] = "new view gifts & accessories";
      sa[7843] = "new york city marshal";
      sa[7844] = "new york city transit authority";
      sa[7845] = "new york state department of corections ";
      sa[7846] = "ngnn shipbuilding";
      sa[7847] = "niagara academy";
      sa[7848] = "nicholas & co";
      sa[7849] = "nickerson realty";
      sa[7850] = "nj transit";
      sa[7851] = "njsea";
      sa[7852] = "north central construction";
      sa[7853] = "north rockland central school district";
      sa[7854] = "northeast utilities";
      sa[7855] = "northrop grumman";
      sa[7856] = "northside independent school district";
      sa[7857] = "novant health";
      sa[7858] = "nurse on call";
      sa[7859] = "nutrilite";
      sa[7860] = "ny presbyterian hospital";
      sa[7861] = "nyc department of sanitation";
      sa[7862] = "nypd";
      sa[7863] = "nysdoc";
      sa[7864] = "oakwood fire department";
      sa[7865] = "obara corporation";
      sa[7866] = "ohio department of job and family services";
      sa[7867] = "ojai oil company";
      sa[7868] = "old chicago";
      sa[7869] = "old hammer service";
      sa[7870] = "old ranch country club";
      sa[7871] = "opdyke gas station,inc";
      sa[7872] = "open text corp";
      sa[7873] = "oracle corp";
      sa[7874] = "orange county head start";
      sa[7875] = "oregon electric";
      sa[7876] = "original roadhouse grill";
      sa[7877] = "orin telecom usa";
      sa[7878] = "otb";
      sa[7879] = "oum elqura corp";
      sa[7880] = "our lady of lourdes hospital ";
      sa[7881] = "overland park regional medical center";
      sa[7882] = "owens corning";
      sa[7883] = "ozarks family vision centre";
      sa[7884] = "paccar parts";
      sa[7885] = "pacific city bank";
      sa[7886] = "pacific coast breaker";
      sa[7887] = "package plus printing";
      sa[7888] = "palm beach county school board";
      sa[7889] = "pan american tool corp";
      sa[7890] = "panache";
      sa[7891] = "pantusos";
      sa[7892] = "paradise locker meats";
      sa[7893] = "park ridge taxi";
      sa[7894] = "parsonskellogg";
      sa[7895] = "patterson freight";
      sa[7896] = "pcc airfoils";
      sa[7897] = "pci health training";
      sa[7898] = "pearl harbor naval shipyard";
      sa[7899] = "pechanga resort & casino";
      sa[7900] = "penrose main hospital";
      sa[7901] = "pepperdine university";
      sa[7902] = "pepsi";
      sa[7903] = "pepsi beverages company";
      sa[7904] = "pepsico";
      sa[7905] = "perlmart shoprite";
      sa[7906] = "petitto mine equipment";
      sa[7907] = "phi delta theta";
      sa[7908] = "phil long ford";
      sa[7909] = "piggly wiggly";
      sa[7910] = "pinellas county schools";
      sa[7911] = "pinnacledietary.com";
      sa[7912] = "pioneer telephone";
      sa[7913] = "pittsburgh public shools";
      sa[7914] = "pittsgrove twp schools";
      sa[7915] = "pizza hut";
      sa[7916] = "placon";
      sa[7917] = "planned buliding services";
      sa[7918] = "plumbers&pipefittets local 773";
      sa[7919] = "plus One";
      sa[7920] = "pni";
      sa[7921] = "pointe Hilton";
      sa[7922] = "polk county sheriff's dept";
      sa[7923] = "poolcraft";
      sa[7924] = "popchips";
      sa[7925] = "portfolio recovery";
      sa[7926] = "postal service";
      sa[7927] = "power and process, inc";
      sa[7928] = "powerline";
      sa[7929] = "powertrack international";
      sa[7930] = "precise construction";
      sa[7931] = "precision machine ";
      sa[7932] = "precision machine specialist";
      sa[7933] = "precision plumbing";
      sa[7934] = "prime columbia-greene medical associates";
      sa[7935] = "prime innovations";
      sa[7936] = "professional wireline rentals";
      sa[7937] = "ps1 contemporary art center";
      sa[7938] = "publix supermarket";
      sa[7939] = "putnam  ridge  nersing   home";
      sa[7940] = "quaker city castings";
      sa[7941] = "qualcomm";
      sa[7942] = "quality calibration service";
      sa[7943] = "qwest communications";
      sa[7944] = "r&r sheetmetal";
      sa[7945] = "r.e.merlo farming";
      sa[7946] = "rac mechanical";
      sa[7947] = "rachlin managemet";
      sa[7948] = "radius health care center danver";
      sa[7949] = "ralphs grocery";
      sa[7950] = "raton natural gas co.";
      sa[7951] = "rayovac";
      sa[7952] = "realistic Computing";
      sa[7953] = "red cross school";
      sa[7954] = "redriver federal credit union";
      sa[7955] = "regis hairstylist";
      sa[7956] = "reliable carbonic";
      sa[7957] = "renaissance hotel";
      sa[7958] = "renkow mechanical";
      sa[7959] = "resurrection healthcare";
      sa[7960] = "retail convergence";
      sa[7961] = "reynolds transport";
      sa[7962] = "rice &werthmann";
      sa[7963] = "rick bates garage";
      sa[7964] = "rite aid ";
      sa[7965] = "rivercross hospice";
      sa[7966] = "robert bowden";
      sa[7967] = "rolling hills casino";
      sa[7968] = "rombra us, inc";
      sa[7969] = "rons food farm";
      sa[7970] = "rons staffing";
      sa[7971] = "route relievers/bimbo bakeries";
      sa[7972] = "rr donnelley hoechstetter plant";
      sa[7973] = "rust tech";
      sa[7974] = "s rothschild";
      sa[7975] = "s.c.p.t.a.c";
      sa[7976] = "s.rothschild";
      sa[7977] = "sacramento city unified schoold district";
      sa[7978] = "sacred heart university";
      sa[7979] = "sam's club";
      sa[7980] = "sams club";
      sa[7981] = "samuraisushi restaurant";
      sa[7982] = "san diego city School district";
      sa[7983] = "san diego regional center";
      sa[7984] = "san diego theatres";
      sa[7985] = "san gabriel transit inc";
      sa[7986] = "santa clara unifed school district";
      sa[7987] = "sarah tuxis";
      sa[7988] = "satellites unlimited";
      sa[7989] = "saucon valley country club";
      sa[7990] = "sause bros.";
      sa[7991] = "sb landscaping inc";
      sa[7992] = "schindler elevator";
      sa[7993] = "schindler elevator corp";
      sa[7994] = "schlumberger";
      sa[7995] = "schneider national carriers";
      sa[7996] = "sco";
      sa[7997] = "screen actors guild";
      sa[7998] = "scvmc";
      sa[7999] = "seaboard folding";
      sa[8000] = "sears holdings co.";
      sa[8001] = "self";
      sa[8002] = "self employed";
      sa[8003] = "self-contract labor";
      sa[8004] = "self-employed";
      sa[8005] = "sephora";
      sa[8006] = "sgk home solutions";
      sa[8007] = "sharp memmorial hospital";
      sa[8008] = "shaw ";
      sa[8009] = "shear fx salon";
      sa[8010] = "shilo restaurant";
      sa[8011] = "shoprite";
      sa[8012] = "shoreone";
      sa[8013] = "siemens";
      sa[8014] = "sierra army depot";
      sa[8015] = "sierra doctors medical group";
      sa[8016] = "sigma aldrich";
      sa[8017] = "signature health care";
      sa[8018] = "silvi concrete";
      sa[8019] = "sioux falls school district";
      sa[8020] = "sj thomas co.";
      sa[8021] = "sky powersports";
      sa[8022] = "slone associates";
      sa[8023] = "smiths medical";
      sa[8024] = "snydermanufacturing inc";
      sa[8025] = "so cal custon inc";
      sa[8026] = "social security";
      sa[8027] = "soldevilla inc";
      sa[8028] = "solesbee auto crafts";
      sa[8029] = "solil management";
      sa[8030] = "south county hospital";
      sa[8031] = "southsan isd";
      sa[8032] = "southwest administrators, inc";
      sa[8033] = "southwest airlines";
      sa[8034] = "southwyck golf club - century golf ";
      sa[8035] = "spa";
      sa[8036] = "special events production inc.";
      sa[8037] = "sport chalet";
      sa[8038] = "sportmode";
      sa[8039] = "sports authority";
      sa[8040] = "springfield acura";
      sa[8041] = "sprint";
      sa[8042] = "sra international ";
      sa[8043] = "st anthony's hospital";
      sa[8044] = "st catherine of siena";
      sa[8045] = "st elizqabeth medical center";
      sa[8046] = "st. anne's";
      sa[8047] = "st. lukes hospital";
      sa[8048] = "st. raymond h.s.";
      sa[8049] = "standard register";
      sa[8050] = "star satellite";
      sa[8051] = "starwood";
      sa[8052] = "starwood hotels & resorts";
      sa[8053] = "state of Illinois";
      sa[8054] = "state of florida";
      sa[8055] = "steck schulte supply";
      sa[8056] = "stericycle";
      sa[8057] = "stew leonard";
      sa[8058] = "stimson lumbermill";
      sa[8059] = "stmicroelectronics";
      sa[8060] = "stockers excavating llc";
      sa[8061] = "storage power battery";
      sa[8062] = "stowe mountain lodge";
      sa[8063] = "structural perservation system";
      sa[8064] = "sunchemical";
      sa[8065] = "sunrise assisted living";
      sa[8066] = "superhero graphics";
      sa[8067] = "superior bank";
      sa[8068] = "sur la table";
      sa[8069] = "swagelok";
      sa[8070] = "swedish covenant hospital";
      sa[8071] = "swissport cargo services";
      sa[8072] = "synapse group inc";
      sa[8073] = "sysco eastern maryland";
      sa[8074] = "sysco food service";
      sa[8075] = "sysco foods la";
      sa[8076] = "t-mobile";
      sa[8077] = "tampa bay rays baseball";
      sa[8078] = "target";
      sa[8079] = "td bank";
      sa[8080] = "tect utica";
      sa[8081] = "teksystems";
      sa[8082] = "tempe high school";
      sa[8083] = "the Partnership for the Homeless";
      sa[8084] = "the automaster";
      sa[8085] = "the brickmangroup";
      sa[8086] = "the childrens courtyard";
      sa[8087] = "the home depot";
      sa[8088] = "the howard elliott collection";
      sa[8089] = "the m resort";
      sa[8090] = "the new york post";
      sa[8091] = "the ohio state university medical center";
      sa[8092] = "the reis group";
      sa[8093] = "the severn group";
      sa[8094] = "the shoops at vanderbuilt";
      sa[8095] = "the vancouver clinic ";
      sa[8096] = "thornton river grille";
      sa[8097] = "time warner cable";
      sa[8098] = "tire kingdom";
      sa[8099] = "titusville dairy products";
      sa[8100] = "total health skills";
      sa[8101] = "towXchange, Inc.";
      sa[8102] = "tower insurance companies";
      sa[8103] = "tower water";
      sa[8104] = "trader joes";
      sa[8105] = "transitown usa";
      sa[8106] = "transparent financial llc";
      sa[8107] = "travelers insurance";
      sa[8108] = "triad family services";
      sa[8109] = "trihealth";
      sa[8110] = "tronox";
      sa[8111] = "truetech";
      sa[8112] = "tstrim ind";
      sa[8113] = "turning stone casino resort";
      sa[8114] = "tw telecom";
      sa[8115] = "tyco electronics";
      sa[8116] = "u s coast guard";
      sa[8117] = "u s sugar co";
      sa[8118] = "u.s postal ";
      sa[8119] = "u.s. air force";
      sa[8120] = "u.s. security assoiciates inc";
      sa[8121] = "u.s.healttwork medical group";
      sa[8122] = "u.s.p.s";
      sa[8123] = "ubc 124";
      sa[8124] = "unicco services";
      sa[8125] = "union pacific railroad";
      sa[8126] = "united  airlines";
      sa[8127] = "united States Army";
      sa[8128] = "united envelope";
      sa[8129] = "united health care";
      sa[8130] = "united nations secretariat";
      sa[8131] = "united parcel service";
      sa[8132] = "united parcel service (ups)";
      sa[8133] = "united states air force";
      sa[8134] = "united states army";
      sa[8135] = "united states coast guard";
      sa[8136] = "universal";
      sa[8137] = "university health associates";
      sa[8138] = "university medical center";
      sa[8139] = "university of california of riverside";
      sa[8140] = "university of florida";
      sa[8141] = "university of south carolina";
      sa[8142] = "upper merion area school dist.";
      sa[8143] = "ups";
      sa[8144] = "us army";
      sa[8145] = "us bank";
      sa[8146] = "us bankcorp fund services";
      sa[8147] = "us dollar plus";
      sa[8148] = "us forest horseshoe meadow hothots";
      sa[8149] = "us forest service";
      sa[8150] = "us government";
      sa[8151] = "us postal";
      sa[8152] = "usa medical center";
      sa[8153] = "usbank";
      sa[8154] = "usmc";
      sa[8155] = "usps";
      sa[8156] = "utmb";
      sa[8157] = "vallarta supermarkets";
      sa[8158] = "van galder bus co.";
      sa[8159] = "vana beauty salon";
      sa[8160] = "vca southwick animal hospital";
      sa[8161] = "verizon";
      sa[8162] = "verizon communications";
      sa[8163] = "verizon wireless";
      sa[8164] = "veterans administration";
      sa[8165] = "veterans affairs";
      sa[8166] = "veterans affairs medical center";
      sa[8167] = "vidpro corp";
      sa[8168] = "village supermarket, inc";
      sa[8169] = "vintage real estate services";
      sa[8170] = "visting nurse service of new york";
      sa[8171] = "vmware";
      sa[8172] = "vta";
      sa[8173] = "wal mart";
      sa[8174] = "wal-mart";
      sa[8175] = "walmart";
      sa[8176] = "walmart distribution";
      sa[8177] = "walterreed commissary";
      sa[8178] = "waltz engineering";
      sa[8179] = "washington university";
      sa[8180] = "waste management";
      sa[8181] = "wcch";
      sa[8182] = "wdw";
      sa[8183] = "webb1realty";
      sa[8184] = "wells fargo";
      sa[8185] = "wells fargo ";
      sa[8186] = "wells fargo bank";
      sa[8187] = "wells fargo bank`";
      sa[8188] = "wellsfargo";
      sa[8189] = "west covina unified school district";
      sa[8190] = "westcoast ambulance";
      sa[8191] = "western asset mgmt.";
      sa[8192] = "westerville city schools";
      sa[8193] = "westfield eye center";
      sa[8194] = "weston adams law firm";
      sa[8195] = "wexfordhealth/stateville cc";
      sa[8196] = "white knight limo";
      sa[8197] = "whiting-turner contracting co.";
      sa[8198] = "williams service co";
      sa[8199] = "willis trucking";
      sa[8200] = "winco foods";
      sa[8201] = "windsor staffing";
      sa[8202] = "wkp laboratories";
      sa[8203] = "wood you furniture";
      sa[8204] = "workman oil";
      sa[8205] = "world confections inc";
      sa[8206] = "wrico";
      sa[8207] = "wrisco";
      sa[8208] = "xcel fire protection";
      sa[8209] = "xpedite technologies inc";
      sa[8210] = "ymca";
      sa[8211] = "york hospital dental center";
      sa[8212] = "zachry industral inc";
      sa[8213] = "zion lutheran school";
      sa[8214] = "zozaya officiating";
    }
  }
}
// The class representing column emp_length
class GBM_model_python_1589382591366_1_ColInfo_8 implements java.io.Serializable {
  public static final String[] VALUES = new String[12];
  static {
    GBM_model_python_1589382591366_1_ColInfo_8_0.fill(VALUES);
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_8_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1 year";
      sa[1] = "10+ years";
      sa[2] = "2 years";
      sa[3] = "3 years";
      sa[4] = "4 years";
      sa[5] = "5 years";
      sa[6] = "6 years";
      sa[7] = "7 years";
      sa[8] = "8 years";
      sa[9] = "9 years";
      sa[10] = "< 1 year";
      sa[11] = "n/a";
    }
  }
}
// The class representing column home_ownership
class GBM_model_python_1589382591366_1_ColInfo_9 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    GBM_model_python_1589382591366_1_ColInfo_9_0.fill(VALUES);
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_9_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "MORTGAGE";
      sa[1] = "NONE";
      sa[2] = "OTHER";
      sa[3] = "OWN";
      sa[4] = "RENT";
    }
  }
}
// The class representing column verification_status
class GBM_model_python_1589382591366_1_ColInfo_11 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    GBM_model_python_1589382591366_1_ColInfo_11_0.fill(VALUES);
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_11_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "VERIFIED - income";
      sa[1] = "VERIFIED - income source";
      sa[2] = "not verified";
    }
  }
}
// The class representing column pymnt_plan
class GBM_model_python_1589382591366_1_ColInfo_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    GBM_model_python_1589382591366_1_ColInfo_12_0.fill(VALUES);
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "n";
      sa[1] = "y";
    }
  }
}
// The class representing column purpose
class GBM_model_python_1589382591366_1_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[14];
  static {
    GBM_model_python_1589382591366_1_ColInfo_13_0.fill(VALUES);
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "car";
      sa[1] = "credit_card";
      sa[2] = "debt_consolidation";
      sa[3] = "educational";
      sa[4] = "home_improvement";
      sa[5] = "house";
      sa[6] = "major_purchase";
      sa[7] = "medical";
      sa[8] = "moving";
      sa[9] = "other";
      sa[10] = "renewable_energy";
      sa[11] = "small_business";
      sa[12] = "vacation";
      sa[13] = "wedding";
    }
  }
}
// The class representing column title
class GBM_model_python_1589382591366_1_ColInfo_14 implements java.io.Serializable {
  public static final String[] VALUES = new String[5746];
  static {
    GBM_model_python_1589382591366_1_ColInfo_14_0.fill(VALUES);
    GBM_model_python_1589382591366_1_ColInfo_14_1.fill(VALUES);
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_14_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "$10,000 needed for wedding";
      sa[1] = "$15K";
      sa[2] = "$2400 Loan Needed";
      sa[3] = "$5K Refi";
      sa[4] = "$8,000 ";
      sa[5] = "'08 & '09 Roth IRA Investments";
      sa[6] = "'08 Rehab";
      sa[7] = "*** Paying Off All Debts ***";
      sa[8] = "0";
      sa[9] = "03 softail";
      sa[10] = "1 EZ Payment";
      sa[11] = "1 Step Closer to Freedom";
      sa[12] = "1 cent";
      sa[13] = "10-Mar";
      sa[14] = "10-Nov";
      sa[15] = "10/26/11";
      sa[16] = "100% payback";
      sa[17] = "10000";
      sa[18] = "1010";
      sa[19] = "10K";
      sa[20] = "10k";
      sa[21] = "11-Aug";
      sa[22] = "11-Jan";
      sa[23] = "11-Oct";
      sa[24] = "11k";
      sa[25] = "13K in 26 mnts";
      sa[26] = "14k Loan";
      sa[27] = "15000";
      sa[28] = "16-Oct-10";
      sa[29] = "17000 loan Lendingclub";
      sa[30] = "1717";
      sa[31] = "176 Citrus Ave.";
      sa[32] = "17th green";
      sa[33] = "18k";
      sa[34] = "1941 Chevrolet 3100";
      sa[35] = "1959MGA";
      sa[36] = "1967 Triumph Bonneville";
      sa[37] = "1968 Triumph";
      sa[38] = "1969 mustang restoration";
      sa[39] = "1975 Shovelhead";
      sa[40] = "1978 Corvette";
      sa[41] = "1991 Airstream ";
      sa[42] = "1998 Chevelet Camaro";
      sa[43] = "1999 Audi A4 Quattro";
      sa[44] = "1st Financial APRs WAY too high! :-)";
      sa[45] = "1st Loan";
      sa[46] = "1st Time Buyer - Financially Secure";
      sa[47] = "1st step to fredom";
      sa[48] = "2-Card Consolidation";
      sa[49] = "2002 Jayco Pop up camper";
      sa[50] = "2002 SUGAR SAND";
      sa[51] = "2003 Ford Taurus";
      sa[52] = "2003 Harley";
      sa[53] = "2003 Honda Civic";
      sa[54] = "2003 f-350";
      sa[55] = "2005 Harley Davidson Road Glide";
      sa[56] = "2008 Harly-Davidson 883 Sportster";
      sa[57] = "2009 Federal Tax Help";
      sa[58] = "2010";
      sa[59] = "2010 Debt Consolidation";
      sa[60] = "2010 GOAL";
      sa[61] = "2010 LC Loan";
      sa[62] = "2010 Relief from high interest";
      sa[63] = "2010 Success";
      sa[64] = "2010 purchase plan";
      sa[65] = "2010 yamaha grizzly";
      sa[66] = "2011";
      sa[67] = "2011 - Freedom from cc debt";
      sa[68] = "2011 CC Pay-Off";
      sa[69] = "2011 Consolidation";
      sa[70] = "2011 Credit Card Payoff";
      sa[71] = "2011 Debt Consolidation";
      sa[72] = "2011 Debt consolidation loan";
      sa[73] = "2011 Debt elimination plan";
      sa[74] = "2011 Get on track loan";
      sa[75] = "2011 Holiday";
      sa[76] = "2011 Loan";
      sa[77] = "2011 New Start";
      sa[78] = "2011 loan";
      sa[79] = "2011loan";
      sa[80] = "2011loanconsol";
      sa[81] = "2012 Back on Track Loan";
      sa[82] = "2012 Debt Consolidation";
      sa[83] = "2012loan";
      sa[84] = "20K Lending Club";
      sa[85] = "21 years on job";
      sa[86] = "21k Loan";
      sa[87] = "25% is ridiculous!!";
      sa[88] = "25k at 10+%";
      sa[89] = "2908 Home Improvement";
      sa[90] = "2D Loan";
      sa[91] = "2k Debt Consolidation";
      sa[92] = "2nd";
      sa[93] = "2nd Consolidation Loan";
      sa[94] = "2nd Mortgage Payoff";
      sa[95] = "2nd Phase Business Expansion";
      sa[96] = "2nd loan";
      sa[97] = "3 POWER";
      sa[98] = "3 Year Debt Consolidation";
      sa[99] = "3 Year Debt Plan";
      sa[100] = "3 Yr Consolidation Loan";
      sa[101] = "3 variable credit cards into a $15k fixed loan";
      sa[102] = "3 year itch";
      sa[103] = "3 year plan";
      sa[104] = "30 Day 401K Payoff";
      sa[105] = "35k";
      sa[106] = "36";
      sa[107] = "3711 Home Improvement";
      sa[108] = "3K";
      sa[109] = "3K Loan";
      sa[110] = "3K Personal Loan";
      sa[111] = "3yr Consolodation Loan";
      sa[112] = "3yrs to freedom";
      sa[113] = "40 desert acres to unplug";
      sa[114] = "401(K) PAYOFF LOAN";
      sa[115] = "401-k payoff";
      sa[116] = "401k Payoff";
      sa[117] = "401k Repayment";
      sa[118] = "401k/creditcard";
      sa[119] = "4800";
      sa[120] = "4WD Chevy";
      sa[121] = "5 done";
      sa[122] = "5 year debt free loan";
      sa[123] = "5000";
      sa[124] = "528i";
      sa[125] = "53 CC Debt Consolidation Loan";
      sa[126] = "56 Olds 98";
      sa[127] = "5600 Credit Card";
      sa[128] = "5k loan";
      sa[129] = "6 months loan";
      sa[130] = "6 year existing business loan";
      sa[131] = "616";
      sa[132] = "66 Mustang";
      sa[133] = "69 Camaro";
      sa[134] = "6k";
      sa[135] = "6kloan";
      sa[136] = "7-Dec";
      sa[137] = "7.2k Loan";
      sa[138] = "70%Attached room,30%cc-loanconsolidation";
      sa[139] = "7000";
      sa[140] = "720 + Debt Consolidation Loan";
      sa[141] = "72003yr";
      sa[142] = "77911";
      sa[143] = "780+ Credit Score -- Seeking Advanced Education Funding Help (Quant Finance)";
      sa[144] = "7k Personal Loan";
      sa[145] = "8-Nov";
      sa[146] = "8301962";
      sa[147] = "850";
      sa[148] = "8k option";
      sa[149] = "9.09 Loan";
      sa[150] = "911 Load";
      sa[151] = "??";
      sa[152] = "A Change Is Gonna Come";
      sa[153] = "A Fresh Start";
      sa[154] = "A Loan to Get Back Under Control after an Illness";
      sa[155] = "A Small Personal Loan";
      sa[156] = "A Tech and a Camera";
      sa[157] = "A better rate loan for cards we dont use";
      sa[158] = "A business ";
      sa[159] = "A filmmaker who needs a new camera.";
      sa[160] = "A little Debt Consolidation";
      sa[161] = "A little help needed";
      sa[162] = "A medical expense to change a life";
      sa[163] = "A mess";
      sa[164] = "A new MacBook to function as my primary work computer";
      sa[165] = "A push to start my business";
      sa[166] = "A simple Debt Consolidation";
      sa[167] = "A winner";
      sa[168] = "A-tier credit. Vacation loan";
      sa[169] = "A1";
      sa[170] = "AAAA Loan";
      sa[171] = "AB Consolidation Loan";
      sa[172] = "ABmaster";
      sa[173] = "AC Home";
      sa[174] = "AC Unit";
      sa[175] = "AD _ DEBT CONSOLIDATION (";
      sa[176] = "ADN-RN to RN-BSN loan :-)";
      sa[177] = "ADS 3 yr plan ";
      sa[178] = "ADrew";
      sa[179] = "AJ Fixed Loan";
      sa[180] = "ALLTHATNFANCYTOO";
      sa[181] = "AMEX";
      sa[182] = "AMEX & Discover";
      sa[183] = "AMEX Payoff";
      sa[184] = "ANGTAN4EVER";
      sa[185] = "AP Personal Loan";
      sa[186] = "APinkDoor";
      sa[187] = "AT+T";
      sa[188] = "ATD Loan";
      sa[189] = "ATV";
      sa[190] = "ATV loan";
      sa[191] = "AUTO";
      sa[192] = "AUTO LOAN";
      sa[193] = "AV Loan";
      sa[194] = "AYUDA";
      sa[195] = "Aaron's Car";
      sa[196] = "Aaron's Loan";
      sa[197] = "Aaron's car loan";
      sa[198] = "Above Ground Pool";
      sa[199] = "Ac &floor";
      sa[200] = "Accounting Debt Loans";
      sa[201] = "Acquire existing franchises to add to our own";
      sa[202] = "Adding 4th Unit on 3 Unit Home";
      sa[203] = "Adding HVAC and Bedrooms to Rental Prop";
      sa[204] = "Adding Inventory";
      sa[205] = "Adding Value to Cash Flowing Rental Property";
      sa[206] = "Adding a room for rent";
      sa[207] = "Addition and Remodule";
      sa[208] = "Addition to Home";
      sa[209] = "Additional Funding for Home Purchase";
      sa[210] = "Additional start capital for a business";
      sa[211] = "Adin";
      sa[212] = "Adios, Credit Cards!";
      sa[213] = "Adopt a math student!";
      sa[214] = "Adopting our first child from Vietnam";
      sa[215] = "Adoption Expenses";
      sa[216] = "Adoption Journey Begins.....";
      sa[217] = "Advancing Career with Continuing Education";
      sa[218] = "Advertising professional trying for a clean slate!";
      sa[219] = "African Safari Wedding";
      sa[220] = "Aftra Membership";
      sa[221] = "Ahmed";
      sa[222] = "Aid for Credit Card Debt Loan";
      sa[223] = "Air Conditioner Loan";
      sa[224] = "Aircraft Partnership Loan";
      sa[225] = "Ajith's Debt Consoliation Loan";
      sa[226] = "Al's Loan";
      sa[227] = "Alabama Consolidation Loan";
      sa[228] = "Alan's Personal Loan";
      sa[229] = "Albert's loan";
      sa[230] = "Alex";
      sa[231] = "Alex Loan";
      sa[232] = "Alfa";
      sa[233] = "Alfonso Silva";
      sa[234] = "Alfredo's Loan";
      sa[235] = "Ali Pay Off";
      sa[236] = "Alison Braen";
      sa[237] = "All Clear";
      sa[238] = "All Consumer Debt Loan";
      sa[239] = "All Debt Consolidate";
      sa[240] = "All Debts Consolidate";
      sa[241] = "All In One Bill";
      sa[242] = "All bills into One";
      sa[243] = "Allen Loan";
      sa[244] = "Allen's Debt Consolidation Loan";
      sa[245] = "Allen's Granny Flat home project";
      sa[246] = "Allison";
      sa[247] = "Almost There debt consolidation";
      sa[248] = "Almost There!";
      sa[249] = "Almost out of Debt.....";
      sa[250] = "Always on time with payments";
      sa[251] = "Always pays on time";
      sa[252] = "AmEx";
      sa[253] = "Amanda and Tyler's wedding fund";
      sa[254] = "American Dreamcard payoff";
      sa[255] = "American Enterprise";
      sa[256] = "American Express";
      sa[257] = "American Union";
      sa[258] = "Amex";
      sa[259] = "Amex Payoff";
      sa[260] = "Amy";
      sa[261] = "Amy's Wedding";
      sa[262] = "Andrea's Consolidation Loan";
      sa[263] = "Andrew";
      sa[264] = "Andrew's Debt Help";
      sa[265] = "Andy ";
      sa[266] = "Andy's Bailout";
      sa[267] = "Angela Kay Myrick";
      sa[268] = "Angela's Debt Consolidation";
      sa[269] = "Angela- Home imp loan";
      sa[270] = "Anniv. Gift";
      sa[271] = "Another take on Credit Card Reform ";
      sa[272] = "Apartment";
      sa[273] = "Apartment Initiative";
      sa[274] = "Apartment Loan";
      sa[275] = "Appendectomy";
      sa[276] = "Apple Tree";
      sa[277] = "Appreciative Borrower";
      sa[278] = "April 2011 Lending Club";
      sa[279] = "Archie's loan";
      sa[280] = "Ashley's Consolidation";
      sa[281] = "Askerlik";
      sa[282] = "Aspiring CPA";
      sa[283] = "Assist Family Members";
      sa[284] = "Assist in buying used car";
      sa[285] = "Assistance";
      sa[286] = "Astoria";
      sa[287] = "Attic Renovation Project";
      sa[288] = "Attorney Fees";
      sa[289] = "Attorney Fees for Child Custody";
      sa[290] = "Attorney retainer";
      sa[291] = "Audra's Dreamhouse";
      sa[292] = "August";
      sa[293] = "August loan";
      sa[294] = "Austin";
      sa[295] = "Auto";
      sa[296] = "Auto Down payment";
      sa[297] = "Auto Loan";
      sa[298] = "Auto Refinance";
      sa[299] = "Auto Refinancing";
      sa[300] = "Auto Repair";
      sa[301] = "Auto Repair Loan";
      sa[302] = "Auto Repairs";
      sa[303] = "Auto body shop";
      sa[304] = "Auto invest";
      sa[305] = "Auto loan";
      sa[306] = "Auto loan Warranty";
      sa[307] = "Auto purchase";
      sa[308] = "Auto wholesaler loan";
      sa[309] = "Automobile Loan";
      sa[310] = "Away with credit card debt!";
      sa[311] = "Awesome credit";
      sa[312] = "Axing the APR";
      sa[313] = "Ayoung48";
      sa[314] = "B of A Payoff";
      sa[315] = "BA Chase USAA";
      sa[316] = "BA Refinance";
      sa[317] = "BEAUTY SCHOOL";
      sa[318] = "BIKE LOAN";
      sa[319] = "BILL PAYER";
      sa[320] = "BILLS BILLS BILLS";
      sa[321] = "BJC's Debt Consolidation";
      sa[322] = "BK Credit Card Refi";
      sa[323] = "BMW R1100 RS";
      sa[324] = "BOA payoff";
      sa[325] = "BOB'S BUSINESS LOAN";
      sa[326] = "BOFA+CITI";
      sa[327] = "BOOKPUB";
      sa[328] = "BRAND SPANKIN NEW used CAR!";
      sa[329] = "BRUNO";
      sa[330] = "BUSINESS";
      sa[331] = "BUSINESS LOAN";
      sa[332] = "BUSINESS PERSONAL CONTRIBUTION";
      sa[333] = "Baby Expenses";
      sa[334] = "Baby Formula Dispensing Product";
      sa[335] = "Baby On The Way";
      sa[336] = "Baby Room";
      sa[337] = "Baby loan";
      sa[338] = "Baby on the way!";
      sa[339] = "Back In The Past Collectibles Loan";
      sa[340] = "Back On Track";
      sa[341] = "Back Yard";
      sa[342] = "Back on Track";
      sa[343] = "Back to Debt Free";
      sa[344] = "Back to Life with no credit card debt";
      sa[345] = "Backyard Renovation";
      sa[346] = "Bail & Lawyer";
      sa[347] = "Bailey - credit card consolidation";
      sa[348] = "Bailey's Nest";
      sa[349] = "Bailout continuation";
      sa[350] = "Balance";
      sa[351] = "Baltimore City";
      sa[352] = "BamaGal";
      sa[353] = "Bank of America ";
      sa[354] = "Bank of America Shysters";
      sa[355] = "Bank of America- Blah!";
      sa[356] = "Bariatric surgery";
      sa[357] = "Basement";
      sa[358] = "Basement Loan";
      sa[359] = "Basement Renovation Loan";
      sa[360] = "Basement Repair";
      sa[361] = "Bathroom";
      sa[362] = "Bathroom /kitchen";
      sa[363] = "Bathroom Remodel";
      sa[364] = "Bathroom Repair & Renovation";
      sa[365] = "Bathroom addition";
      sa[366] = "Bathroom and Room Remodeling Loan";
      sa[367] = "Bathroom loan";
      sa[368] = "Bathroom repair";
      sa[369] = "Bathrooms";
      sa[370] = "Baylor - Fall 2009";
      sa[371] = "Be Debt Free";
      sa[372] = "Be My Consolidator";
      sa[373] = "Be Unique Gifts....by Brandy";
      sa[374] = "Be a Hero! Save me from 30% interest rates!!!";
      sa[375] = "Beat discover card's interest rate";
      sa[376] = "Beat the Tax Man";
      sa[377] = "Beating them at their own game";
      sa[378] = "Beautiful R1";
      sa[379] = "Become Debt Free in 5 Years";
      sa[380] = "Becoming Debt Free";
      sa[381] = "Believe";
      sa[382] = "Ben's Personal Loan";
      sa[383] = "BenPlatt";
      sa[384] = "Best Life Yet";
      sa[385] = "Beth";
      sa[386] = "Better Credit Card Rate";
      sa[387] = "Better Credit Card Rate.";
      sa[388] = "Better Rate ";
      sa[389] = "Better Rate at Lending Club";
      sa[390] = "Better Rate for Credit Cards";
      sa[391] = "Better future";
      sa[392] = "Better than USBank's Rate...";
      sa[393] = "Bettesbills";
      sa[394] = "Big Blue Toy";
      sa[395] = "Big Boy";
      sa[396] = "Bike";
      sa[397] = "Bike Loan";
      sa[398] = "Bikesrus";
      sa[399] = "Bill Buster";
      sa[400] = "Bill Consolidation";
      sa[401] = "Bill Consolidation; Business Venture";
      sa[402] = "Bill Cushion";
      sa[403] = "Bill Pay";
      sa[404] = "Bill Pay off";
      sa[405] = "Bill Payments";
      sa[406] = "Bill Payoff";
      sa[407] = "Bill consolidation";
      sa[408] = "Bill help";
      sa[409] = "Bill loan";
      sa[410] = "Bill pay ";
      sa[411] = "Bill pay and Christmas";
      sa[412] = "Bill payoff";
      sa[413] = "Bills";
      sa[414] = "Bills Consolidator";
      sa[415] = "Bills!!!";
      sa[416] = "Billy's consolidation ";
      sa[417] = "Biz Inventory and Acquisition Funding";
      sa[418] = "Blackwalnut";
      sa[419] = "Blank Backyard Canvas; Need Resources";
      sa[420] = "Blazer";
      sa[421] = "Blessed indeed!";
      sa[422] = "Blue Jeep";
      sa[423] = "Blue Skies";
      sa[424] = "Bo and Koko Loan";
      sa[425] = "BoA Visa Gold CC Consolidation";
      sa[426] = "Boa, citi and chase ";
      sa[427] = "Boat";
      sa[428] = "Boat Loan";
      sa[429] = "Boat Purchase";
      sa[430] = "Boat Trailer";
      sa[431] = "Bob";
      sa[432] = "Bob Credit Card Loan";
      sa[433] = "Bobbie";
      sa[434] = "BofA";
      sa[435] = "BofA + Chase Consolidation Loan";
      sa[436] = "BofA CC refi";
      sa[437] = "BofA Payoff";
      sa[438] = "Book Marketing";
      sa[439] = "Book publicity loan";
      sa[440] = "Bookcases for my wife";
      sa[441] = "Booming Web-Marketing Business";
      sa[442] = "Boost Credit Score";
      sa[443] = "Borrowing to Invest";
      sa[444] = "Borrowing to expand investment";
      sa[445] = "Boston Move";
      sa[446] = "Boston Whaler";
      sa[447] = "Brad's Debt Consolidition";
      sa[448] = "BrayLoan";
      sa[449] = "Break  The Rates ";
      sa[450] = "Breaking Up with Bank of America ";
      sa[451] = "Breathe";
      sa[452] = "Breathe Easier";
      sa[453] = "Breathing Room";
      sa[454] = "Bridge Loan";
      sa[455] = "Bridge Loan for Household expenses";
      sa[456] = "Bridge to Late February";
      sa[457] = "Bright Future";
      sa[458] = "Bright Spot";
      sa[459] = "BrightFuture";
      sa[460] = "Bringing It Together";
      sa[461] = "Broncos";
      sa[462] = "Budget Loan";
      sa[463] = "Buh-Bye High Interest Cards";
      sa[464] = "Building Credit and Consolidating";
      sa[465] = "Building a bridge to new opportunity";
      sa[466] = "Building credit";
      sa[467] = "Building my credit history.";
      sa[468] = "Business";
      sa[469] = "Business Advance Loan";
      sa[470] = "Business Bridging Loan";
      sa[471] = "Business CC debt Just need a little help";
      sa[472] = "Business Capital";
      sa[473] = "Business Credit Card ";
      sa[474] = "Business Equipment";
      sa[475] = "Business Equity Refinance";
      sa[476] = "Business Expansion";
      sa[477] = "Business Expense & Repair";
      sa[478] = "Business Idea Head Start";
      sa[479] = "Business Inventory";
      sa[480] = "Business Inventory Loan";
      sa[481] = "Business Investment";
      sa[482] = "Business Is Booming!!!";
      sa[483] = "Business Loan";
      sa[484] = "Business Loan ";
      sa[485] = "Business Loan - Working Capital";
      sa[486] = "Business Loan 2011";
      sa[487] = "Business Loan For New E Commerce Site";
      sa[488] = "Business Loan for Expansion";
      sa[489] = "Business Loan to help grow business";
      sa[490] = "Business Loan with friends";
      sa[491] = "Business Needs to Grow";
      sa[492] = "Business Opening family sports Pub";
      sa[493] = "Business Purchase";
      sa[494] = "Business Registration and Licensing";
      sa[495] = "Business School Payoff";
      sa[496] = "Business Start Up";
      sa[497] = "Business Start Up Capital";
      sa[498] = "Business Start-up";
      sa[499] = "Business debt extension";
      sa[500] = "Business equipment";
      sa[501] = "Business expansion";
      sa[502] = "Business loan";
      sa[503] = "Business loan for side job.";
      sa[504] = "Business online";
      sa[505] = "Business savvy: Insurance Premiums";
      sa[506] = "Business start";
      sa[507] = "Business start-up Inventory";
      sa[508] = "Business startup funds";
      sa[509] = "Business/Personal Investments";
      sa[510] = "Busy Tax Office Wants to Grow";
      sa[511] = "Buy a small diner/Restaurant ";
      sa[512] = "Buy into Franchise";
      sa[513] = "Buy salon equipment for business";
      sa[514] = "Buying Cafe";
      sa[515] = "Buying IPODs for my Store in Miami Beach";
      sa[516] = "Buying Inflation Insurance";
      sa[517] = "Buying a Auction home";
      sa[518] = "Buying a Car";
      sa[519] = "Buying a painting";
      sa[520] = "Buying a used truck";
      sa[521] = "Buying the Lot next to my home";
      sa[522] = "Buying/Selling Home ";
      sa[523] = "Bye Bye Credit Card Debt!";
      sa[524] = "Bye Bye Credit Cards";
      sa[525] = "Bye Bye STUPID CREDIT CARDS";
      sa[526] = "Bye Bye credit card";
      sa[527] = "ByeBye BofA";
      sa[528] = "C & S Relocation Fund";
      sa[529] = "C.C. Loan";
      sa[530] = "C.C. Payoff";
      sa[531] = "C.Card Consolidation";
      sa[532] = "CANVAS PRINTER";
      sa[533] = "CAR LOAN";
      sa[534] = "CB350";
      sa[535] = "CBR1000";
      sa[536] = "CC";
      sa[537] = "CC Bye Bye";
      sa[538] = "CC Clean up";
      sa[539] = "CC Con";
      sa[540] = "CC Consol";
      sa[541] = "CC Consolidate - Home Improve";
      sa[542] = "CC Consolidation";
      sa[543] = "CC Consolidation Loan";
      sa[544] = "CC Debt";
      sa[545] = "CC Debt Consolidation Loan";
      sa[546] = "CC Debt Consolidation for Excellent Borrower";
      sa[547] = "CC LOAN";
      sa[548] = "CC Loan";
      sa[549] = "CC Loan Payoff";
      sa[550] = "CC Paid";
      sa[551] = "CC Pay";
      sa[552] = "CC Pay Off Loan";
      sa[553] = "CC Pay off";
      sa[554] = "CC Payoff";
      sa[555] = "CC REFI";
      sa[556] = "CC REFINANCE";
      sa[557] = "CC ReFi";
      sa[558] = "CC Refi";
      sa[559] = "CC Refi Loan";
      sa[560] = "CC Refi Loan ";
      sa[561] = "CC Refinance";
      sa[562] = "CC consolidation";
      sa[563] = "CC consolidation.  Zero Late Payments.";
      sa[564] = "CC debt";
      sa[565] = "CC loan";
      sa[566] = "CC pay off";
      sa[567] = "CC payoff";
      sa[568] = "CC refi";
      sa[569] = "CC refinance";
      sa[570] = "CC repayment";
      sa[571] = "CC0710HMS";
      sa[572] = "CC2";
      sa[573] = "CCBalancedown";
      sa[574] = "CCDEBT";
      sa[575] = "CCFree";
      sa[576] = "CCK2010";
      sa[577] = "CCPayoff";
      sa[578] = "CCR";
      sa[579] = "CCdebt";
      sa[580] = "CD Consolidation Loan";
      sa[581] = "CDT CARD RAISING RATE FR/17 TO 27 % ";
      sa[582] = "CES Consolidation";
      sa[583] = "CFII Loan";
      sa[584] = "CHASE / CITI PAYOFF";
      sa[585] = "CHRISTMAS";
      sa[586] = "CIGNA";
      sa[587] = "CIti Pay off loan";
      sa[588] = "CJ ";
      sa[589] = "CK debt free";
      sa[590] = "CONSOLIDATE";
      sa[591] = "CONSOLIDATING";
      sa[592] = "CONSOLIDATION";
      sa[593] = "CONSOLIDATION 2011";
      sa[594] = "CONSOLIDATION LOAN";
      sa[595] = "COPART";
      sa[596] = "COSMETIC SURGERY";
      sa[597] = "CP Consolidation 062011";
      sa[598] = "CREDIT CARD BEGONE";
      sa[599] = "CREDIT CARD CONSOLIDATION";
      sa[600] = "CREDIT CARD DEBT";
      sa[601] = "CREDIT CARD INTEREST REDUCTION";
      sa[602] = "CREDIT CARD PAYOFF";
      sa[603] = "CREDIT CARD PAYOFF LOAN";
      sa[604] = "CREDIT CARD REF/CONSOLIDATE";
      sa[605] = "CREDIT CARD REFINANCE";
      sa[606] = "CREDIT CARD/MEDICAL/STARTUP BUSINESS/";
      sa[607] = "CREDIT CARDS";
      sa[608] = "CRUISE VACTION";
      sa[609] = "CSY 44";
      sa[610] = "CUSHION";
      sa[611] = "CUTUPMYCARD";
      sa[612] = "CYCLE LOAN";
      sa[613] = "C^3: Credit Card Consolidation";
      sa[614] = "Cabin fever";
      sa[615] = "Caitlyn";
      sa[616] = "Cali Bound";
      sa[617] = "California or Bust";
      sa[618] = "Caliornia";
      sa[619] = "Camper";
      sa[620] = "Camper Loan";
      sa[621] = "Cancer patients medical bills";
      sa[622] = "Candy123";
      sa[623] = "Capital One";
      sa[624] = "Capital One Payoff";
      sa[625] = "Capital One Refinance";
      sa[626] = "Capital Replacement";
      sa[627] = "Capital to run an Insurance business";
      sa[628] = "Captial Financing";
      sa[629] = "Car";
      sa[630] = "Car ";
      sa[631] = "Car Acquisition";
      sa[632] = "Car Consolidation";
      sa[633] = "Car Finance";
      sa[634] = "Car Financing";
      sa[635] = "Car Improvement";
      sa[636] = "Car Load";
      sa[637] = "Car Loan";
      sa[638] = "Car Loan ";
      sa[639] = "Car Loan 2010";
      sa[640] = "Car Loan Application";
      sa[641] = "Car Loan for VW Passat";
      sa[642] = "Car Payment";
      sa[643] = "Car Refinance";
      sa[644] = "Car Refinancing";
      sa[645] = "Car Repair";
      sa[646] = "Car Repairs";
      sa[647] = "Car Repairs and Life";
      sa[648] = "Car Tags";
      sa[649] = "Car for son by consolidating debt";
      sa[650] = "Car loan";
      sa[651] = "Car loan ";
      sa[652] = "Car payment";
      sa[653] = "Car payoff";
      sa[654] = "Car repair loan";
      sa[655] = "Car repairs";
      sa[656] = "Car,Credit,Etc";
      sa[657] = "Car/bills";
      sa[658] = "Card Consoildation";
      sa[659] = "Card Consolidation";
      sa[660] = "Card Loan";
      sa[661] = "Card Pay Off";
      sa[662] = "Card PayOff & Add'l Cards";
      sa[663] = "Card Payoff";
      sa[664] = "Card Re Finance";
      sa[665] = "Card ReFi Loan";
      sa[666] = "Card Refi";
      sa[667] = "Card Refinance";
      sa[668] = "Card's";
      sa[669] = "CardRefi";
      sa[670] = "Cards";
      sa[671] = "Cards - Refinanced";
      sa[672] = "Cards and Loan";
      sa[673] = "CareCredit Refinance";
      sa[674] = "Career Training Loan";
      sa[675] = "Caretaker";
      sa[676] = "Cargo Van";
      sa[677] = "Carlitos";
      sa[678] = "Carlos Loan";
      sa[679] = "Carlscreditresolve";
      sa[680] = "Carnival of Credit Card Consoldiation";
      sa[681] = "Carol's kitchen update";
      sa[682] = "Carrie's debt pay-off";
      sa[683] = "Cars";
      sa[684] = "Casey";
      sa[685] = "Cash";
      sa[686] = "Cash Flow insurance";
      sa[687] = "Cash Need";
      sa[688] = "Cash Tree";
      sa[689] = "Cash money!";
      sa[690] = "Cash toward down payment";
      sa[691] = "Cash_Flow";
      sa[692] = "Casinobill";
      sa[693] = "Catching Up";
      sa[694] = "Cc";
      sa[695] = "Cc  loan";
      sa[696] = "Cc payoff";
      sa[697] = "Celebration Location";
      sa[698] = "Cement Work";
      sa[699] = "Certification Training";
      sa[700] = "Changes";
      sa[701] = "Changing my Life for the Better! Ready to make my dreams a reality!";
      sa[702] = "Charming Business Loan";
      sa[703] = "Chase";
      sa[704] = "Chase Card Elimination";
      sa[705] = "Chase Chase Credit Away";
      sa[706] = "Chase Credit Card Consolidation";
      sa[707] = "Chase Credit Card Paydown";
      sa[708] = "Chase Credit Card Payoff";
      sa[709] = "Chase Credit Cards";
      sa[710] = "Chase Credit card";
      sa[711] = "Chase Debt Consolidation";
      sa[712] = "Chase Home Improvement Loan";
      sa[713] = "Chase Payoff";
      sa[714] = "Chase Payoff loan 1";
      sa[715] = "Chase and HSN Loan";
      sa[716] = "Chase consolidation";
      sa[717] = "Chase payoff";
      sa[718] = "Chase, Chase, Chase, 1FBUSA, Other";
      sa[719] = "Chase/Amex";
      sa[720] = "ChaseAmex";
      sa[721] = "Cheshire";
      sa[722] = "Chevy Impala Payoff";
      sa[723] = "Chicago move";
      sa[724] = "Chicago-Expenses";
      sa[725] = "Child choir";
      sa[726] = "Chris Loan";
      sa[727] = "Christa's loan";
      sa[728] = "Christina  Roberts Debt Consolidation";
      sa[729] = "Christine";
      sa[730] = "Christmas Loan";
      sa[731] = "Christmas airfare 1 week before payday";
      sa[732] = "Cisco CCVP training for IT professional";
      sa[733] = "Citi Bank sucks at 29.99% rate";
      sa[734] = "Citi Card Refinance";
      sa[735] = "Citi Loan";
      sa[736] = "Citi Rate";
      sa[737] = "Citi card consolidation";
      sa[738] = "CitiCard";
      sa[739] = "CitiCard Consolidation";
      sa[740] = "CitiCard Pay Off";
      sa[741] = "CitiCard PayOff";
      sa[742] = "CitiFinancial Payoff";
      sa[743] = "Citibank 5 yr payoff";
      sa[744] = "Citibank AA MC refinance";
      sa[745] = "Citibank Credit Consolidation";
      sa[746] = "Citibank Payoff";
      sa[747] = "Citibank Refinance";
      sa[748] = "Citibank rate increase from 4% to 16%";
      sa[749] = "Citibank refi";
      sa[750] = "Citizens Bank & NEA CC";
      sa[751] = "Claire's Goody Fund";
      sa[752] = "Clare's Motorcycle!!!";
      sa[753] = "Clarence and Alphie's Shaved Ice";
      sa[754] = "Classic Monte Carlo Car Loan";
      sa[755] = "Clean Slate";
      sa[756] = "Clean Slate 2010!";
      sa[757] = "Clean Start in the New Year";
      sa[758] = "Clean Up";
      sa[759] = "Clean credit - needs consolidation until investments pan out";
      sa[760] = "Clean up";
      sa[761] = "Clean-Slate Debt Consolidation Loan ";
      sa[762] = "Cleaning House";
      sa[763] = "Cleaning Up My Act";
      sa[764] = "Cleaning it up";
      sa[765] = "Clear Creidit card debt";
      sa[766] = "Clear high interest cards";
      sa[767] = "Clear-set terms to completion";
      sa[768] = "Clearing out Credit Card Debt";
      sa[769] = "Clearing out Debt/High Interest Rates";
      sa[770] = "Click pool loan";
      sa[771] = "Clint's Personal Loan";
      sa[772] = "Closing";
      sa[773] = "Closing Cost for New Home";
      sa[774] = "Closing Costs";
      sa[775] = "Closing Credit Cards";
      sa[776] = "Closing Sears credit card at 21 percent";
      sa[777] = "Closing costs for my first home ";
      sa[778] = "Club loan";
      sa[779] = "Cnsolidation";
      sa[780] = "Coffee Company Expansion";
      sa[781] = "Coffee Roastery";
      sa[782] = "CoffeeHouse Start-Up";
      sa[783] = "Coin-Op Billiard";
      sa[784] = "Colinsnana";
      sa[785] = "College";
      sa[786] = "College Credit Card Pay off";
      sa[787] = "College Debt";
      sa[788] = "College Fees";
      sa[789] = "College Funds";
      sa[790] = "College Grad needs to consolidate debt";
      sa[791] = "College Graduate's Fresh(er) Start";
      sa[792] = "College Loan";
      sa[793] = "College Repayment";
      sa[794] = "College Summer Semester";
      sa[795] = "College Tuition";
      sa[796] = "College Tuition for my Son";
      sa[797] = "Columbus";
      sa[798] = "Combine Bills";
      sa[799] = "Combine Sallie Mae w/ Two Credit Cards";
      sa[800] = "Comet Loan";
      sa[801] = "Coming off a divorce and looking to consolidate debt";
      sa[802] = "Complete Apartment Complex";
      sa[803] = "Computer Loan";
      sa[804] = "Computer/Moving Expenses Loan";
      sa[805] = "Computor Loan";
      sa[806] = "Concentrating several small balances";
      sa[807] = "Concession Stand";
      sa[808] = "Concrete Repairs";
      sa[809] = "Condo Garage Parking";
      sa[810] = "Condo Loan";
      sa[811] = "Conscientious Borrower";
      sa[812] = "Consloidation loan";
      sa[813] = "Conso Loan";
      sa[814] = "Consol Loan";
      sa[815] = "Consol-Gen";
      sa[816] = "Consoladation";
      sa[817] = "Consolidate";
      sa[818] = "Consolidate ";
      sa[819] = "Consolidate 3 CreditCards + Bike";
      sa[820] = "Consolidate Bills";
      sa[821] = "Consolidate Bills/ Home Improvement ";
      sa[822] = "Consolidate CC debt";
      sa[823] = "Consolidate CC's / Moving Relocation";
      sa[824] = "Consolidate Car";
      sa[825] = "Consolidate Car and Card";
      sa[826] = "Consolidate Credit & Education Debt";
      sa[827] = "Consolidate Credit Card Debt";
      sa[828] = "Consolidate Credit Card Payments";
      sa[829] = "Consolidate Credit Cards";
      sa[830] = "Consolidate Credit Cards and Payoff Once and For all";
      sa[831] = "Consolidate Debt";
      sa[832] = "Consolidate Debt & StartUp Business";
      sa[833] = "Consolidate Debt / Arbitrage ";
      sa[834] = "Consolidate Debt to Start Business";
      sa[835] = "Consolidate Debt used for home improveme";
      sa[836] = "Consolidate Debts";
      sa[837] = "Consolidate High Interest Credit Cards";
      sa[838] = "Consolidate High Interest Rate Cards";
      sa[839] = "Consolidate Hight Interest Credit Cards";
      sa[840] = "Consolidate Loan";
      sa[841] = "Consolidate Me!!";
      sa[842] = "Consolidate Medical School Debt";
      sa[843] = "Consolidate My Debt - One Payment";
      sa[844] = "Consolidate Pesky high interest rates";
      sa[845] = "Consolidate Remaining CC debt; NO RISK";
      sa[846] = "Consolidate SZ8J4F";
      sa[847] = "Consolidate Store Credit Cards";
      sa[848] = "Consolidate Tahiti Village";
      sa[849] = "Consolidate Wedding Expenses";
      sa[850] = "Consolidate and Build";
      sa[851] = "Consolidate and Conquer";
      sa[852] = "Consolidate and Home Improvement";
      sa[853] = "Consolidate and Lower Monthly Payment";
      sa[854] = "Consolidate and Simplify";
      sa[855] = "Consolidate and Win";
      sa[856] = "Consolidate and regain my sanity";
      sa[857] = "Consolidate bills";
      sa[858] = "Consolidate cc";
      sa[859] = "Consolidate cc debt";
      sa[860] = "Consolidate college tuition debt";
      sa[861] = "Consolidate credit card debt";
      sa[862] = "Consolidate credit card payments";
      sa[863] = "Consolidate credit cards";
      sa[864] = "Consolidate credit cards ";
      sa[865] = "Consolidate debt";
      sa[866] = "Consolidate debt and be debt free in three years.";
      sa[867] = "Consolidate debt and replace appliances";
      sa[868] = "Consolidate debt for a better rate";
      sa[869] = "Consolidate debt into one auto-payment";
      sa[870] = "Consolidate debt to Prepare for our Baby";
      sa[871] = "Consolidate debt.. Never late..";
      sa[872] = "Consolidate debt/home improvement";
      sa[873] = "Consolidate for 2012";
      sa[874] = "Consolidate high interest credit cards";
      sa[875] = "Consolidate monthly payments";
      sa[876] = "Consolidate my Debt";
      sa[877] = "Consolidate my credit cards";
      sa[878] = "Consolidate my credit cards!";
      sa[879] = "Consolidate my debt!";
      sa[880] = "Consolidate relocation debt";
      sa[881] = "Consolidate some other loans";
      sa[882] = "Consolidate the debt";
      sa[883] = "Consolidate this debt!";
      sa[884] = "Consolidate to Eliminate";
      sa[885] = "Consolidate to attain debt-free living";
      sa[886] = "Consolidate to help with College Wife";
      sa[887] = "Consolidate&PAYOFFCar& Credit";
      sa[888] = "Consolidate,etc";
      sa[889] = "Consolidate- MAC, Kangen & Capital One";
      sa[890] = "Consolidate/Reduce Credit Card Payments";
      sa[891] = "Consolidate2";
      sa[892] = "ConsolidateCCs";
      sa[893] = "Consolidated";
      sa[894] = "Consolidated Credit Cards";
      sa[895] = "Consolidated Loan";
      sa[896] = "Consolidated loan";
      sa[897] = "Consolidating";
      sa[898] = "Consolidating $16,000 debt, good credit";
      sa[899] = "Consolidating & Simplifying";
      sa[900] = "Consolidating ALL debt in good standing, at lower rate.";
      sa[901] = "Consolidating Accounts";
      sa[902] = "Consolidating All Debt Into One Loan";
      sa[903] = "Consolidating Bills";
      sa[904] = "Consolidating Bills Into One Bill";
      sa[905] = "Consolidating CC Debt";
      sa[906] = "Consolidating CC's previously used for prosecution of alleged child molestor";
      sa[907] = "Consolidating CC's with high Interest ";
      sa[908] = "Consolidating CCs after medical expenses";
      sa[909] = "Consolidating Credit";
      sa[910] = "Consolidating Credit Card Debt";
      sa[911] = "Consolidating Credit Cards";
      sa[912] = "Consolidating Credit Cards with 30% APR!";
      sa[913] = "Consolidating Debt";
      sa[914] = "Consolidating Debt at a lower rate...";
      sa[915] = "Consolidating Debt at lower rates.";
      sa[916] = "Consolidating Debt, paying taxes";
      sa[917] = "Consolidating Debts";
      sa[918] = "Consolidating High Interest Credit Cards";
      sa[919] = "Consolidating High Interest Credit Debt";
      sa[920] = "Consolidating High Interest Rates";
      sa[921] = "Consolidating High-Interest Personal Loan Used to Buy Computer";
      sa[922] = "Consolidating Higher Rate Loans";
      sa[923] = "Consolidating My Credit Card Debt";
      sa[924] = "Consolidating My Debt";
      sa[925] = "Consolidating My Debts = Much Easier";
      sa[926] = "Consolidating My Debts in 2011";
      sa[927] = "Consolidating To a Fixed Lower Rate";
      sa[928] = "Consolidating credit card debt";
      sa[929] = "Consolidating credit cards";
      sa[930] = "Consolidating debt";
      sa[931] = "Consolidating debt & paying it faster!";
      sa[932] = "Consolidating debt for extra $$ for new baby";
      sa[933] = "Consolidating debt to buy 1st house";
      sa[934] = "Consolidating everything";
      sa[935] = "Consolidating for 2011";
      sa[936] = "Consolidating high APR/interest credit";
      sa[937] = "Consolidating my Debt";
      sa[938] = "Consolidating revolving credit";
      sa[939] = "Consolidating the Last of My Credit Cards (and Vet Bills)";
      sa[940] = "Consolidating wedding and cc debt";
      sa[941] = "Consolidating...";
      sa[942] = "Consolidation";
      sa[943] = "Consolidation ";
      sa[944] = "Consolidation 11/11";
      sa[945] = "Consolidation 2010";
      sa[946] = "Consolidation 2011";
      sa[947] = "Consolidation Credit";
      sa[948] = "Consolidation Loan";
      sa[949] = "Consolidation Loan 2011";
      sa[950] = "Consolidation Loan December 2011";
      sa[951] = "Consolidation Loan Request";
      sa[952] = "Consolidation Loan for Business/Personal";
      sa[953] = "Consolidation Loan into One Payment";
      sa[954] = "Consolidation One";
      sa[955] = "Consolidation Success";
      sa[956] = "Consolidation Support";
      sa[957] = "Consolidation and Liquidity Opportunity";
      sa[958] = "Consolidation for better interest";
      sa[959] = "Consolidation loan";
      sa[960] = "Consolidation of CC Balances";
      sa[961] = "Consolidation of Credit Card Debt";
      sa[962] = "Consolidation of Credit Cards";
      sa[963] = "Consolidation of Debt";
      sa[964] = "Consolidation of debt loan";
      sa[965] = "Consolidation/Car Repairs/Personal Use";
      sa[966] = "Consolidation01";
      sa[967] = "Consolidation2";
      sa[968] = "Consolidation52811";
      sa[969] = "ConsolidationLoan";
      sa[970] = "Consolidations";
      sa[971] = "Consolodate Debt";
      sa[972] = "Consolodating Student Loans";
      sa[973] = "Consolodation";
      sa[974] = "Consolodation Loan";
      sa[975] = "Consolodation loan";
      sa[976] = "Construction";
      sa[977] = "Construction Completion";
      sa[978] = "Construction Truck";
      sa[979] = "Consumer Relations";
      sa[980] = "Continental Debt";
      sa[981] = "Continued Debt Consolidation";
      sa[982] = "Continuing School";
      sa[983] = "Controlled Debt Payoff";
      sa[984] = "Coop";
      sa[985] = "Corey Loan";
      sa[986] = "Coslidation";
      sa[987] = "Cosolidation";
      sa[988] = "Country wide";
      sa[989] = "Courtney";
      sa[990] = "Courtney Loan";
      sa[991] = "Cover & Salt";
      sa[992] = "Covering gap in wedding expenses.";
      sa[993] = "Crabtree";
      sa[994] = "Craig's 1998 E300TD";
      sa[995] = "Craig's Money";
      sa[996] = "Creative Rights Expansion";
      sa[997] = "Credit";
      sa[998] = "Credit ";
      sa[999] = "Credit  Consolidater";
      sa[1000] = "Credit Card";
      sa[1001] = "Credit Card ";
      sa[1002] = "Credit Card  Refinancing";
      sa[1003] = "Credit Card & Home Equity Consolidation";
      sa[1004] = "Credit Card & Surgery";
      sa[1005] = "Credit Card Balance Payoff";
      sa[1006] = "Credit Card Clean Up";
      sa[1007] = "Credit Card Consolidate & Pay Off";
      sa[1008] = "Credit Card Consolidation";
      sa[1009] = "Credit Card Consolidation ";
      sa[1010] = "Credit Card Consolidation & Closure";
      sa[1011] = "Credit Card Consolidation (27% to 10%)";
      sa[1012] = "Credit Card Consolidation (Remainder)";
      sa[1013] = "Credit Card Consolidation Loan";
      sa[1014] = "Credit Card Consolidation at Lower Rate";
      sa[1015] = "Credit Card Consolidation loan";
      sa[1016] = "Credit Card Consolidation..Lower my Rate";
      sa[1017] = "Credit Card Consolidation/Refinancing";
      sa[1018] = "Credit Card Consolodate";
      sa[1019] = "Credit Card Consuladation";
      sa[1020] = "Credit Card Crunch";
      sa[1021] = "Credit Card Cut  Up Party";
      sa[1022] = "Credit Card Debit";
      sa[1023] = "Credit Card Debt";
      sa[1024] = "Credit Card Debt ";
      sa[1025] = "Credit Card Debt Cons";
      sa[1026] = "Credit Card Debt Consolidation";
      sa[1027] = "Credit Card Debt Down";
      sa[1028] = "Credit Card Debt Elimination";
      sa[1029] = "Credit Card Debt Free";
      sa[1030] = "Credit Card Debt Pay-Off Plan";
      sa[1031] = "Credit Card Debt Payment";
      sa[1032] = "Credit Card Debt Payoff";
      sa[1033] = "Credit Card Debt Relief";
      sa[1034] = "Credit Card Debt Restructuring";
      sa[1035] = "Credit Card Debt from College";
      sa[1036] = "Credit Card Debt!";
      sa[1037] = "Credit Card Debts";
      sa[1038] = "Credit Card Debts 2/4/11";
      sa[1039] = "Credit Card Eater";
      sa[1040] = "Credit Card Elimination";
      sa[1041] = "Credit Card Elimination ";
      sa[1042] = "Credit Card Eliminator";
      sa[1043] = "Credit Card Eradication";
      sa[1044] = "Credit Card Freedom loan";
      sa[1045] = "Credit Card Insanity";
      sa[1046] = "Credit Card Interest Rate Is a Money Pit";
      sa[1047] = "Credit Card Loa ";
      sa[1048] = "Credit Card Loan";
      sa[1049] = "Credit Card PAY OFF!!!";
      sa[1050] = "Credit Card Pay Off";
      sa[1051] = "Credit Card Paydown";
      sa[1052] = "Credit Card Payment";
      sa[1053] = "Credit Card Payments";
      sa[1054] = "Credit Card Payoff";
      sa[1055] = "Credit Card Payoff $8K";
      sa[1056] = "Credit Card Payoff Loan";
      sa[1057] = "Credit Card Payoff/ Car Repairs";
      sa[1058] = "Credit Card Payoffs";
      sa[1059] = "Credit Card Re finance";
      sa[1060] = "Credit Card Re-Financing";
      sa[1061] = "Credit Card Reduction";
      sa[1062] = "Credit Card Refi";
      sa[1063] = "Credit Card Refi 2011";
      sa[1064] = "Credit Card Refinace";
      sa[1065] = "Credit Card Refinance";
      sa[1066] = "Credit Card Refinance ";
      sa[1067] = "Credit Card Refinance Loan";
      sa[1068] = "Credit Card Refinance Loan 1";
      sa[1069] = "Credit Card Refinancing";
      sa[1070] = "Credit Card Repayment";
      sa[1071] = "Credit Card Repayment Loan";
      sa[1072] = "Credit Card Rescue";
      sa[1073] = "Credit Card and Bill Loan";
      sa[1074] = "Credit Card and Debt Consolidation";
      sa[1075] = "Credit Card and Loan Consolidation";
      sa[1076] = "Credit Card and Taxes";
      sa[1077] = "Credit Card and Wedding";
      sa[1078] = "Credit Card consolidation";
      sa[1079] = "Credit Card debt";
      sa[1080] = "Credit Card debt Cosolidation.";
      sa[1081] = "Credit Card debt loan";
      sa[1082] = "Credit Card for home improvement ";
      sa[1083] = "Credit Card freedom";
      sa[1084] = "Credit Card loan";
      sa[1085] = "Credit Card pay off";
      sa[1086] = "Credit Card payment";
      sa[1087] = "Credit Card payoff";
      sa[1088] = "Credit Card payoff + expenses";
      sa[1089] = "Credit Card refi and consolidation";
      sa[1090] = "Credit Card refinance ";
      sa[1091] = "Credit Card refinance from 20+%";
      sa[1092] = "Credit Card refinancing";
      sa[1093] = "Credit Card smackola";
      sa[1094] = "Credit Cards";
      sa[1095] = "Credit Cards & Laptop";
      sa[1096] = "Credit Cards - Pay off Debts";
      sa[1097] = "Credit Cards Away with Thee!";
      sa[1098] = "Credit Cards Consolidation";
      sa[1099] = "Credit Cards Gone";
      sa[1100] = "Credit Cards Loan";
      sa[1101] = "Credit Cards Payoff";
      sa[1102] = "Credit Cards Refinance";
      sa[1103] = "Credit Cards Suck";
      sa[1104] = "Credit Cards no more";
      sa[1105] = "Credit Consolidation";
      sa[1106] = "Credit Consolidation Sept 2010";
      sa[1107] = "Credit Crd Refinance";
      sa[1108] = "Credit Crunch got me need to consolidate";
      sa[1109] = "Credit Debt";
      sa[1110] = "Credit Debt No MORE!";
      sa[1111] = "Credit Debt No More";
      sa[1112] = "Credit Debt Payoff";
      sa[1113] = "Credit Freedom";
      sa[1114] = "Credit Improvement Refinance Loan";
      sa[1115] = "Credit Pay Off";
      sa[1116] = "Credit Payment";
      sa[1117] = "Credit Payoff";
      sa[1118] = "Credit Refi";
      sa[1119] = "Credit Refinance Loan";
      sa[1120] = "Credit Relief";
      sa[1121] = "Credit Repair";
      sa[1122] = "Credit and Vehicle Refinance";
      sa[1123] = "Credit car payoff";
      sa[1124] = "Credit card";
      sa[1125] = "Credit card Debt";
      sa[1126] = "Credit card Interest rate reduction";
      sa[1127] = "Credit card consolidation";
      sa[1128] = "Credit card consolidation loan";
      sa[1129] = "Credit card debt";
      sa[1130] = "Credit card debt consildation";
      sa[1131] = "Credit card debt consolidation";
      sa[1132] = "Credit card debt repayment";
      sa[1133] = "Credit card fix loan";
      sa[1134] = "Credit card free in 3!";
      sa[1135] = "Credit card loan";
      sa[1136] = "Credit card paid off";
      sa[1137] = "Credit card pay";
      sa[1138] = "Credit card pay off";
      sa[1139] = "Credit card pay off.";
      sa[1140] = "Credit card payment";
      sa[1141] = "Credit card payoff";
      sa[1142] = "Credit card payoff loan";
      sa[1143] = "Credit card reduction";
      sa[1144] = "Credit card refi";
      sa[1145] = "Credit card refinance";
      sa[1146] = "Credit card refinance loan";
      sa[1147] = "Credit card refinancing";
      sa[1148] = "Credit card/transportation";
      sa[1149] = "Credit cards";
      sa[1150] = "Credit cards ";
      sa[1151] = "Credit cards and med";
      sa[1152] = "Credit cards payment";
      sa[1153] = "Credit cards refinance";
      sa[1154] = "Credit cards to refinance, thanks LC!";
      sa[1155] = "Credit consolidation and refinance";
      sa[1156] = "Credit is almost 700 but banks say no.";
      sa[1157] = "Credit payoff";
      sa[1158] = "Credit refinance";
      sa[1159] = "Credit report error fixed; rates high ";
      sa[1160] = "Credit-Bustin' APR Reducin' DebtCon Loan";
      sa[1161] = "Credit-card ";
      sa[1162] = "CreditCard PayOff";
      sa[1163] = "CreditCardConsolidation";
      sa[1164] = "CreditCardPayoff";
      sa[1165] = "CreditCards";
      sa[1166] = "Cruise";
      sa[1167] = "Crystal's Consolidator";
      sa[1168] = "Culinary Education Loan";
      sa[1169] = "Custody Legal Bills";
      sa[1170] = "Custom Motorcycle Purchase";
      sa[1171] = "Cut the Crazy Interest";
      sa[1172] = "Cut the credit cards Loan";
      sa[1173] = "Cutting Debt Re-Fi Loan 2011Q4";
      sa[1174] = "Cyndi's Freedom Loan";
      sa[1175] = "DAYCARE";
      sa[1176] = "DC 2011";
      sa[1177] = "DC Loan";
      sa[1178] = "DC State move";
      sa[1179] = "DC loan";
      sa[1180] = "DCL";
      sa[1181] = "DCL  DEBT CONSOLIDATION LOAN";
      sa[1182] = "DEBT BE GONE";
      sa[1183] = "DEBT CONSO LOAN";
      sa[1184] = "DEBT CONSOLIDATION";
      sa[1185] = "DEBT CONSOLIDATION LOAN";
      sa[1186] = "DEBT CONSOLODATION";
      sa[1187] = "DEBT ELIMINATOR";
      sa[1188] = "DEBT FREE";
      sa[1189] = "DEBT FREE LOAN";
      sa[1190] = "DEBT HELP";
      sa[1191] = "DEBT LOAD";
      sa[1192] = "DEBT LOAN";
      sa[1193] = "DEBT PAYOFFS";
      sa[1194] = "DEBT REDUCTION";
      sa[1195] = "DEBT RELIEF";
      sa[1196] = "DEBT consolidation...";
      sa[1197] = "DEPT";
      sa[1198] = "DLC Debt Consolidation Loan";
      sa[1199] = "DONDON";
      sa[1200] = "DORCAS LOAN";
      sa[1201] = "DRB1";
      sa[1202] = "DREAM HOME IT IS A BUYER'S MARKET NOW";
      sa[1203] = "DScott";
      sa[1204] = "DVD Now Kiosk";
      sa[1205] = "DVD Rental Machine Purchase";
      sa[1206] = "DaD";
      sa[1207] = "Dad's care";
      sa[1208] = "Daddy pays down Debt";
      sa[1209] = "Dads loan";
      sa[1210] = "Dale's loan";
      sa[1211] = "Damaged Pool";
      sa[1212] = "Damn the Man";
      sa[1213] = "Dan - Debt Consolodation";
      sa[1214] = "Dan and Jenny Honeymoon";
      sa[1215] = "Dan's Consolidaton Loan";
      sa[1216] = "Dan's Loan";
      sa[1217] = "Dan's Personal Loan";
      sa[1218] = "Dance for a Purpose";
      sa[1219] = "Daniel Debt Consolidation";
      sa[1220] = "Daniel's medical";
      sa[1221] = "Daniel17";
      sa[1222] = "Daryl's loan";
      sa[1223] = "Daughter saved most for 1st car";
      sa[1224] = "Daughter's Hosptial Visit";
      sa[1225] = "Daughter's Wedding";
      sa[1226] = "Daughter's college";
      sa[1227] = "Daughter's wedding";
      sa[1228] = "Dave Bike";
      sa[1229] = "David";
      sa[1230] = "David & Erin Loan";
      sa[1231] = "David's Personal Loan";
      sa[1232] = "DavidYuLoan";
      sa[1233] = "Dawn";
      sa[1234] = "Dbet Consolidation";
      sa[1235] = "Dean ";
      sa[1236] = "Death To My Credit Cards";
      sa[1237] = "Debbie";
      sa[1238] = "Debit";
      sa[1239] = "Debit Consolidation";
      sa[1240] = "Debit Loan";
      sa[1241] = "Debt";
      sa[1242] = "Debt ";
      sa[1243] = "Debt  consolidation";
      sa[1244] = "Debt 2001";
      sa[1245] = "Debt 2011";
      sa[1246] = "Debt At One Place";
      sa[1247] = "Debt Away";
      sa[1248] = "Debt Be Gone!";
      sa[1249] = "Debt Con Hill";
      sa[1250] = "Debt Cons";
      sa[1251] = "Debt Cons.";
      sa[1252] = "Debt Cons./Website Business Launch";
      sa[1253] = "Debt Consadilation";
      sa[1254] = "Debt Consalidation";
      sa[1255] = "Debt Consalidation ";
      sa[1256] = "Debt Considation";
      sa[1257] = "Debt Consildate CC";
      sa[1258] = "Debt Consildation Loan";
      sa[1259] = "Debt Consilidation";
      sa[1260] = "Debt Consilidation & Vacation";
      sa[1261] = "Debt Conslidation";
      sa[1262] = "Debt Conso";
      sa[1263] = "Debt Consoidation";
      sa[1264] = "Debt Consol";
      sa[1265] = "Debt Consol/Moving";
      sa[1266] = "Debt Console";
      sa[1267] = "Debt Consoliation";
      sa[1268] = "Debt Consoliation loan";
      sa[1269] = "Debt Consolidat";
      sa[1270] = "Debt Consolidate";
      sa[1271] = "Debt Consolidate & School";
      sa[1272] = "Debt Consolidate (Wedding)";
      sa[1273] = "Debt Consolidate and Eliminate";
      sa[1274] = "Debt Consolidated";
      sa[1275] = "Debt Consolidating";
      sa[1276] = "Debt Consolidatio/Payoff";
      sa[1277] = "Debt Consolidation";
      sa[1278] = "Debt Consolidation ";
      sa[1279] = "Debt Consolidation #2";
      sa[1280] = "Debt Consolidation & Home Improvement";
      sa[1281] = "Debt Consolidation (Auto & Credit Cards)";
      sa[1282] = "Debt Consolidation (CC, Auto, laptop)";
      sa[1283] = "Debt Consolidation (Get Out From Under Citi)";
      sa[1284] = "Debt Consolidation (Graduate School)";
      sa[1285] = "Debt Consolidation - Path to Success";
      sa[1286] = "Debt Consolidation / Lower CC Rate";
      sa[1287] = "Debt Consolidation / Saving for wedding ";
      sa[1288] = "Debt Consolidation 1";
      sa[1289] = "Debt Consolidation 101";
      sa[1290] = "Debt Consolidation 2";
      sa[1291] = "Debt Consolidation 2010";
      sa[1292] = "Debt Consolidation 2011";
      sa[1293] = "Debt Consolidation 720+ Credit Score";
      sa[1294] = "Debt Consolidation Before Wedding";
      sa[1295] = "Debt Consolidation Completed";
      sa[1296] = "Debt Consolidation Desired!";
      sa[1297] = "Debt Consolidation February";
      sa[1298] = "Debt Consolidation Free";
      sa[1299] = "Debt Consolidation HELP";
      sa[1300] = "Debt Consolidation Help";
      sa[1301] = "Debt Consolidation Helping Family";
      sa[1302] = "Debt Consolidation Initiative";
      sa[1303] = "Debt Consolidation June 2011";
      sa[1304] = "Debt Consolidation Load";
      sa[1305] = "Debt Consolidation Loan";
      sa[1306] = "Debt Consolidation Loan ";
      sa[1307] = "Debt Consolidation Loan - Credit Cards";
      sa[1308] = "Debt Consolidation Loan Applicant";
      sa[1309] = "Debt Consolidation Machine";
      sa[1310] = "Debt Consolidation Needed";
      sa[1311] = "Debt Consolidation Plan";
      sa[1312] = "Debt Consolidation Purposes";
      sa[1313] = "Debt Consolidation and Major Purchase";
      sa[1314] = "Debt Consolidation and Payoffs";
      sa[1315] = "Debt Consolidation and Refinancing";
      sa[1316] = "Debt Consolidation and Vacation";
      sa[1317] = "Debt Consolidation and better rate";
      sa[1318] = "Debt Consolidation and home improvements";
      sa[1319] = "Debt Consolidation and more!";
      sa[1320] = "Debt Consolidation at Lower Rates";
      sa[1321] = "Debt Consolidation for Credit Cards";
      sa[1322] = "Debt Consolidation for Disney";
      sa[1323] = "Debt Consolidation for Wedding, School & Medical Bills";
      sa[1324] = "Debt Consolidation for a Software Engineer";
      sa[1325] = "Debt Consolidation for lower Rate";
      sa[1326] = "Debt Consolidation for mf";
      sa[1327] = "Debt Consolidation from excellent payer";
      sa[1328] = "Debt Consolidation into one Loan";
      sa[1329] = "Debt Consolidation loan";
      sa[1330] = "Debt Consolidation loan ";
      sa[1331] = "Debt Consolidation on Back Taxes";
      sa[1332] = "Debt Consolidation to Purchase Home";
      sa[1333] = "Debt Consolidation to Start A Family";
      sa[1334] = "Debt Consolidation to a lower rate";
      sa[1335] = "Debt Consolidation!";
      sa[1336] = "Debt Consolidation, Liability Reduction";
      sa[1337] = "Debt Consolidation, September 2010";
      sa[1338] = "Debt Consolidation-Fresh Start";
      sa[1339] = "Debt Consolidation.";
      sa[1340] = "Debt Consolidation/Home Purchase";
      sa[1341] = "Debt Consolidation/Medical";
      sa[1342] = "Debt Consolidation/Payoff";
      sa[1343] = "Debt Consolidation/Reduction";
      sa[1344] = "Debt Consolidation/Wedding";
      sa[1345] = "Debt Consolidation: Fall 2011";
      sa[1346] = "Debt Consolidations of Credit Cards";
      sa[1347] = "Debt Consolidation|Mom's Medical";
      sa[1348] = "Debt Consolidaton";
      sa[1349] = "Debt Consolidator";
      sa[1350] = "Debt Consolodation";
      sa[1351] = "Debt Consolodation Loan";
      sa[1352] = "Debt Consolodation from Home Remodel";
      sa[1353] = "Debt Cosolidation";
      sa[1354] = "Debt Eliminate";
      sa[1355] = "Debt Elimination";
      sa[1356] = "Debt Elimination Loan";
      sa[1357] = "Debt Eraser";
      sa[1358] = "Debt FREE and Following My Dreams!!";
      sa[1359] = "Debt Free";
      sa[1360] = "Debt Free ";
      sa[1361] = "Debt Free .Peace of Mind.";
      sa[1362] = "Debt Free 2012";
      sa[1363] = "Debt Free 36";
      sa[1364] = "Debt Free By Thirty, at least before I turn 40";
      sa[1365] = "Debt Free Future";
      sa[1366] = "Debt Free Goal";
      sa[1367] = "Debt Free In The City";
      sa[1368] = "Debt Free Monkey";
      sa[1369] = "Debt Free by 2013!";
      sa[1370] = "Debt Help";
      sa[1371] = "Debt Loan";
      sa[1372] = "Debt Loan ";
      sa[1373] = "Debt Loan 2011";
      sa[1374] = "Debt Management";
      sa[1375] = "Debt Management Loan";
      sa[1376] = "Debt Pay Consolodation";
      sa[1377] = "Debt Pay Off";
      sa[1378] = "Debt Pay Off ";
      sa[1379] = "Debt Pay off";
      sa[1380] = "Debt Pay-Off";
      sa[1381] = "Debt Paydown";
      sa[1382] = "Debt Paydown Acceleration";
      sa[1383] = "Debt Payment";
      sa[1384] = "Debt Payoff";
      sa[1385] = "Debt Payout";
      sa[1386] = "Debt Reconsolidation";
      sa[1387] = "Debt Reduction";
      sa[1388] = "Debt Reduction Loan";
      sa[1389] = "Debt Refi & Consolidation";
      sa[1390] = "Debt Refinance";
      sa[1391] = "Debt Refinancing";
      sa[1392] = "Debt Refinancing Loan ";
      sa[1393] = "Debt Relief";
      sa[1394] = "Debt Removal";
      sa[1395] = "Debt Repayment";
      sa[1396] = "Debt Restructure";
      sa[1397] = "Debt Saver";
      sa[1398] = "Debt Snowball";
      sa[1399] = "Debt Take Out";
      sa[1400] = "Debt and Currency Purchase";
      sa[1401] = "Debt and Grad School";
      sa[1402] = "Debt and Tuition";
      sa[1403] = "Debt b gone";
      sa[1404] = "Debt be gone";
      sa[1405] = "Debt cc auto ";
      sa[1406] = "Debt cleanup";
      sa[1407] = "Debt cnsolidation";
      sa[1408] = "Debt cons. Loan";
      sa[1409] = "Debt consillidation";
      sa[1410] = "Debt consol";
      sa[1411] = "Debt consoldation ";
      sa[1412] = "Debt consolidate I";
      sa[1413] = "Debt consolidate five year term";
      sa[1414] = "Debt consolidated";
      sa[1415] = "Debt consolidation";
      sa[1416] = "Debt consolidation ";
      sa[1417] = "Debt consolidation - short term";
      sa[1418] = "Debt consolidation 6 month goal";
      sa[1419] = "Debt consolidation Exc Borrower";
      sa[1420] = "Debt consolidation Loan";
      sa[1421] = "Debt consolidation all payments 1 place";
      sa[1422] = "Debt consolidation and engagement ring";
      sa[1423] = "Debt consolidation and refinancing";
      sa[1424] = "Debt consolidation and vacation";
      sa[1425] = "Debt consolidation and wedding";
      sa[1426] = "Debt consolidation at a lower rate";
      sa[1427] = "Debt consolidation for on-time payer";
      sa[1428] = "Debt consolidation loan";
      sa[1429] = "Debt consolidation loan ";
      sa[1430] = "Debt consolidation-vacation";
      sa[1431] = "Debt consolidation/Home AC replacement";
      sa[1432] = "Debt consolodation";
      sa[1433] = "Debt cosilidation";
      sa[1434] = "Debt cosolidation";
      sa[1435] = "Debt free";
      sa[1436] = "Debt free in 2011";
      sa[1437] = "Debt free in 3!";
      sa[1438] = "Debt go away!";
      sa[1439] = "Debt killer";
      sa[1440] = "Debt loan";
      sa[1441] = "Debt loan / 2nd part / remaining balance";
      sa[1442] = "Debt merger";
      sa[1443] = "Debt payment";
      sa[1444] = "Debt payoff";
      sa[1445] = "Debt payoff and consolidation";
      sa[1446] = "Debt reducer";
      sa[1447] = "Debt reduct";
      sa[1448] = "Debt reduction";
      sa[1449] = "Debt reduction - lower monthly payments";
      sa[1450] = "Debt refinance";
      sa[1451] = "Debt relief";
      sa[1452] = "Debt-down";
      sa[1453] = "Debt-free plan";
      sa[1454] = "Debt/Credit Card Consolidation";
      sa[1455] = "Debt2";
      sa[1456] = "Debt2010";
      sa[1457] = "DebtCon";
      sa[1458] = "DebtConslidation";
      sa[1459] = "DebtConsol2011";
      sa[1460] = "DebtConsolidation";
      sa[1461] = "DebtConsolidationLoan";
      sa[1462] = "DebtPayOff";
      sa[1463] = "DebtPayoff";
      sa[1464] = "Debts";
      sa[1465] = "Debts 2011";
      sa[1466] = "Debts paid";
      sa[1467] = "Debutante";
      sa[1468] = "Dec2310 Loan";
      sa[1469] = "December 2009 Loan";
      sa[1470] = "December 2009 Plan";
      sa[1471] = "December 2011 Credit Card Loan";
      sa[1472] = "December Loan";
      sa[1473] = "Decrease Credit Card Debt";
      sa[1474] = "Dect Consol";
      sa[1475] = "Dee's";
      sa[1476] = "Del Sol";
      sa[1477] = "Delta Boat";
      sa[1478] = "Denise";
      sa[1479] = "Dennell";
      sa[1480] = "Dental";
      sa[1481] = "Dental Expenses";
      sa[1482] = "Dental Implants";
      sa[1483] = "Dental expense";
      sa[1484] = "Dental loan";
      sa[1485] = "Dental surgery";
      sa[1486] = "Dental work";
      sa[1487] = "Dental work Feb-March 2010";
      sa[1488] = "Dental work/Vacation/Family Reunion";
      sa[1489] = "Dental, Tuition and Debt";
      sa[1490] = "Dentaldebt";
      sa[1491] = "Denture Payment";
      sa[1492] = "Dependable debt consolidation.";
      sa[1493] = "Deployment Gear";
      sa[1494] = "Deployment Loan Consolidation";
      sa[1495] = "Dept";
      sa[1496] = "Dept Con";
      sa[1497] = "Dept Consolidation";
      sa[1498] = "Dept Payoff";
      sa[1499] = "Derek's Debt Consolidation";
      sa[1500] = "Devine Marketing";
      sa[1501] = "Devious";
      sa[1502] = "Dewin ";
      sa[1503] = "Dext Consolidation";
      sa[1504] = "Diagnostic Bill";
      sa[1505] = "Diamond Loan";
      sa[1506] = "Diamond Ring";
      sa[1507] = "Dieu Loan";
      sa[1508] = "Digging Out! Debt Consolidation";
      sa[1509] = "Diligence";
      sa[1510] = "Discover & Visa Payoff";
      sa[1511] = "Discover Card Pay Off";
      sa[1512] = "Discover Payoff";
      sa[1513] = "Discover Refinance";
      sa[1514] = "Discover no debt";
      sa[1515] = "DiscoverKohlsBillmelater";
      sa[1516] = "Disney CC";
      sa[1517] = "Disneyland";
      sa[1518] = "Ditch the Cards";
      sa[1519] = "Divinely Inspired Land Project";
      sa[1520] = "Divorce Loan";
      sa[1521] = "Divorced Dad's Debt Consolidation";
      sa[1522] = "Doctor Bills on my Credit Card";
      sa[1523] = "Doctoral Program";
      sa[1524] = "Dodge Dakota";
      sa[1525] = "Dodge Van";
      sa[1526] = "Dodge power ram";
      sa[1527] = "Dog Loan";
      sa[1528] = "Domestic Adoption Expenses";
      sa[1529] = "Dominate my credit!";
      sa[1530] = "Don't really need it ";
      sa[1531] = "Done in March 2013";
      sa[1532] = "Doozer";
      sa[1533] = "Doris F. Eash";
      sa[1534] = "Double Bass";
      sa[1535] = "Doug's Dream Deck";
      sa[1536] = "Doug's Loan";
      sa[1537] = "Down Payment";
      sa[1538] = "Down Payment for Florida Condo";
      sa[1539] = "Down payment";
      sa[1540] = "Down payment for car purchase.";
      sa[1541] = "Down to one payment.";
      sa[1542] = "Down with the Debt";
      sa[1543] = "Downpayment Help for Dream Vacation Spot";
      sa[1544] = "Downpayment for dream home!";
      sa[1545] = "Dr. bills";
      sa[1546] = "Drain system for under the house";
      sa[1547] = "Dream Car";
      sa[1548] = "Dream House";
      sa[1549] = "Dream Vaction and Other Personal Items";
      sa[1550] = "Dream Wedding";
      sa[1551] = "Dream Wedding ";
      sa[1552] = "Dream West Expeditions";
      sa[1553] = "Dream boat restoration";
      sa[1554] = "Dreams";
      sa[1555] = "Driver's Edge Refinance";
      sa[1556] = "Drivers License";
      sa[1557] = "Driveway";
      sa[1558] = "Driveway loan";
      sa[1559] = "Drowning in debt";
      sa[1560] = "Drum set loan";
      sa[1561] = "Ducati";
      sa[1562] = "Duffy Loan";
      sa[1563] = "Duke";
      sa[1564] = "Duplex Upgrade";
      sa[1565] = "Duster";
      sa[1566] = "Dustin<0x92DBCEE492E4CE82>s loan";
      sa[1567] = "Dynamic Executive";
      sa[1568] = "Dynamic Manager";
      sa[1569] = "E-Man's loan";
      sa[1570] = "E04";
      sa[1571] = "EAC Debt Reduction";
      sa[1572] = "EBAY AUTO LOAN";
      sa[1573] = "EDUCATEME";
      sa[1574] = "EDUCATION";
      sa[1575] = "EJM Debt Consol Loan 2011";
      sa[1576] = "ETLoan";
      sa[1577] = "EZ money";
      sa[1578] = "Easy Payment";
      sa[1579] = "Easy Return for this Small Loan";
      sa[1580] = "Ebay Harley";
      sa[1581] = "Ebay Purchase";
      sa[1582] = "Ebay purchase";
      sa[1583] = "Eddie Debt Loan";
      sa[1584] = "Education";
      sa[1585] = "Education & Daycare";
      sa[1586] = "Education loan for Masters";
      sa[1587] = "Education purposes";
      sa[1588] = "Educational Loan";
      sa[1589] = "Educator Seeking DebtConsolidation";
      sa[1590] = "Eduloan";
      sa[1591] = "Edward's Debt Consolidation";
      sa[1592] = "Eileen ";
      sa[1593] = "Elderly Homecare Start-Up Loan";
      sa[1594] = "Eliminate Citi Credit Card";
      sa[1595] = "Eliminate Credit Card Debt Loan";
      sa[1596] = "Eliminate Debts";
      sa[1597] = "Eliminate high interest cc";
      sa[1598] = "Eliminating Credit Card Debt";
      sa[1599] = "Eliminating Debt and Stress";
      sa[1600] = "Eliminating credit card";
      sa[1601] = "Emergency";
      sa[1602] = "Emergency Dental Work";
      sa[1603] = "Emergency Funds";
      sa[1604] = "Emergency Loan";
      sa[1605] = "Emergency dental work";
      sa[1606] = "Emergency fund";
      sa[1607] = "Emigrant Refinance";
      sa[1608] = "Employed, Honest, and Thankful!";
      sa[1609] = "End Credit card debt!!";
      sa[1610] = "Ending Sisyphus's Curse";
      sa[1611] = "Energy Drink";
      sa[1612] = "Energy Efficient Home Improvement";
      sa[1613] = "Energy Fund Investment";
      sa[1614] = "Energy Saver";
      sa[1615] = "Energy Star home improvements to take advantage tax credits";
      sa[1616] = "Eng. PhD Student Debt Consolidation";
      sa[1617] = "Engagement";
      sa[1618] = "Engagement & Wedding Rings";
      sa[1619] = "Engagement Ring";
      sa[1620] = "Engagement Ring Loan";
      sa[1621] = "Engagement Ring Partial Loan";
      sa[1622] = "Engagement Ring Payment";
      sa[1623] = "Engagement Ring Shopping";
      sa[1624] = "Engagement Ring for a Wonderful Woman";
      sa[1625] = "Engagement Ring loan";
      sa[1626] = "Engagement and Wedding Loan";
      sa[1627] = "Engagement and more";
      sa[1628] = "Engagement ring";
      sa[1629] = "Engagement/Wedding Band";
      sa[1630] = "Engagement/Wedding Expenses";
      sa[1631] = "Engagment Ring";
      sa[1632] = "Engineer looking to consolidate debt";
      sa[1633] = "Engineer seeks Environmental Training";
      sa[1634] = "Engineering Laptop Purchase";
      sa[1635] = "Enough is Enough";
      sa[1636] = "Eq8rbnd";
      sa[1637] = "Equinox";
      sa[1638] = "Equipment";
      sa[1639] = "Equipment Loan";
      sa[1640] = "Equipment and Marketing Loan";
      sa[1641] = "Equitable Distribution of Assets";
      sa[1642] = "Equity Loan Payoff";
      sa[1643] = "Equity Pay Down";
      sa[1644] = "Erase Credit Card Debt";
      sa[1645] = "Erase My Debt, Clear My Mind!";
      sa[1646] = "Eric and AJ Wedding";
      sa[1647] = "Eric's Loan ";
      sa[1648] = "Erica's Loan";
      sa[1649] = "Ericas Loan";
      sa[1650] = "Erin";
      sa[1651] = "Erin Debt";
      sa[1652] = "Erins Ears";
      sa[1653] = "Escape credit card insanity - debt consolidation";
      sa[1654] = "Escape from ridiculous interest";
      sa[1655] = "Essentials";
      sa[1656] = "Established Business- Working Capital Needs";
      sa[1657] = "Establishing Credit and transportation";
      sa[1658] = "Estimated Taxes";
      sa[1659] = "Euphemistically Frugal ---Yes , that would be CHEAP!";
      sa[1660] = "Europe";
      sa[1661] = "Evaluating LendingClub - Intend to prepay";
      sa[1662] = "Excelerator Productions loan request";
      sa[1663] = "Excellent Credit";
      sa[1664] = "Excellent Credit Loan";
      sa[1665] = "Excellent credit, high salary; 401(k) loan payoff";
      sa[1666] = "Exchange Variable for Fixed";
      sa[1667] = "Executive Needs Cash between now and bonus";
      sa[1668] = "Exhilarating..";
      sa[1669] = "Existing LendingClub Loan Refinance";
      sa[1670] = "Expanding Business (again)";
      sa[1671] = "Expanding Services at my Car Wash";
      sa[1672] = "Expanding Successful Business";
      sa[1673] = "Expanding my growing Business";
      sa[1674] = "Expanding our health and wellness center";
      sa[1675] = "Expansion";
      sa[1676] = "Expansion on business venture";
      sa[1677] = "Expenses";
      sa[1678] = "Expensive Hobby, but Highly Lucrative!";
      sa[1679] = "Experienced Landlord to Rehab Condo";
      sa[1680] = "Extensive Dental Work Needed";
      sa[1681] = "Extention to house";
      sa[1682] = "Extra";
      sa[1683] = "Extra Money for HouseHold furnitre";
      sa[1684] = "Eye On the Prize";
      sa[1685] = "Eye surgury";
      sa[1686] = "FA Debt Consolidation";
      sa[1687] = "FICO score 762 want's to buy a new car";
      sa[1688] = "FINANCIAL RELIEF";
      sa[1689] = "FIT startup loan";
      sa[1690] = "FInal Debt Consolidation";
      sa[1691] = "FREDDY'S LOAN";
      sa[1692] = "FREEDOM";
      sa[1693] = "FREEZER";
      sa[1694] = "FRESH START - NO MORE DEBT";
      sa[1695] = "FS";
      sa[1696] = "FULL DEBT REPAYMENT";
      sa[1697] = "FULLY FUNDED";
      sa[1698] = "FUNERAL COSTS";
      sa[1699] = "FUTURE MD";
      sa[1700] = "Faith";
      sa[1701] = "Fall Home Improvements";
      sa[1702] = "Family Backyard Oasis";
      sa[1703] = "Family Bills";
      sa[1704] = "Family Consolidation Loan";
      sa[1705] = "Family Debt";
      sa[1706] = "Family Emergencies";
      sa[1707] = "Family Emergency Funds";
      sa[1708] = "Family Fun Loan";
      sa[1709] = "Family Fund";
      sa[1710] = "Family Home Improvement";
      sa[1711] = "Family Loan";
      sa[1712] = "Family Medical";
      sa[1713] = "Family Personal Loan";
      sa[1714] = "Family Plan";
      sa[1715] = "Family Support Loan";
      sa[1716] = "Family Trip";
      sa[1717] = "Family Vacation";
      sa[1718] = "Family assistance";
      sa[1719] = "Family property";
      sa[1720] = "Family reunion";
      sa[1721] = "Fast Return Invt I";
      sa[1722] = "Fast and easy pay";
      sa[1723] = "Father's Debt";
      sa[1724] = "Feb Loan";
      sa[1725] = "Federal Job Relocation";
      sa[1726] = "Felicia's Emergency Loan";
      sa[1727] = "Fence";
      sa[1728] = "Fence Loan";
      sa[1729] = "Ferrari";
      sa[1730] = "Fianancial Freedom";
      sa[1731] = "Fiancee education and debt consolidation";
      sa[1732] = "Fifteen Thousand Dollar Credit Line";
      sa[1733] = "Finacial Freedom";
      sa[1734] = "Final Credit Card ";
      sa[1735] = "Final Payment";
      sa[1736] = "Final Payoff";
      sa[1737] = "Final debt consolidation";
      sa[1738] = "Final payoff";
      sa[1739] = "FinalCCPayment";
      sa[1740] = "Finally Over";
      sa[1741] = "Finally get out of debt loan";
      sa[1742] = "Finally paying off credit cards";
      sa[1743] = "Finance Consolidation";
      sa[1744] = "Finance Wedding Expenses";
      sa[1745] = "Finance an escrow deficit.";
      sa[1746] = "Finance improvement";
      sa[1747] = "Finances New Beginning  ";
      sa[1748] = "Financial Abundance! ";
      sa[1749] = "Financial Cleanup!";
      sa[1750] = "Financial Freedom";
      sa[1751] = "Financial Freedom Loan";
      sa[1752] = "Financial Health!";
      sa[1753] = "Financial Hope";
      sa[1754] = "Financial Relief";
      sa[1755] = "Financial Software  ";
      sa[1756] = "Financial Sources";
      sa[1757] = "Financial Stability Plan";
      sa[1758] = "Financial freedom";
      sa[1759] = "Financial help for my parents";
      sa[1760] = "Financial reorganization";
      sa[1761] = "Finish Basement";
      sa[1762] = "Finish Home Construction";
      sa[1763] = "Finish Patent Expenses/ Consolidate Debt";
      sa[1764] = "Finish landscaping and improvements";
      sa[1765] = "Finishing Basement";
      sa[1766] = "Finishing Up 2011";
      sa[1767] = "Finishing my debt ";
      sa[1768] = "Firebird loan";
      sa[1769] = "Firebolt";
      sa[1770] = "Firing the credit card companies";
      sa[1771] = "First";
      sa[1772] = "First Home";
      sa[1773] = "First Loan";
      sa[1774] = "First Step To Freedom";
      sa[1775] = "First and Last Loan";
      sa[1776] = "First consolidate, then eliminate";
      sa[1777] = "First home down payment";
      sa[1778] = "FirstTime Home Buyer Assistance";
      sa[1779] = "Fiscal Responsibility";
      sa[1780] = "Fitness Company Expansion";
      sa[1781] = "Five Year Loan";
      sa[1782] = "Fix Debt";
      sa[1783] = "Fix Her Up Phase 2";
      sa[1784] = "Fix R Up";
      sa[1785] = "Fix Up Investment Property";
      sa[1786] = "Fix car in order to sell and pay cc";
      sa[1787] = "Fix it";
      sa[1788] = "Fix my smile";
      sa[1789] = "Fixed term and rate loan requested";
      sa[1790] = "Fixing Up Duplex";
      sa[1791] = "Fixing car";
      sa[1792] = "Fixing up front porch";
      sa[1793] = "Fixing up my little abode";
      sa[1794] = "Fixing up rental to reduce debt";
      sa[1795] = "Fixing up this old house";
      sa[1796] = "Flight Lesson";
      sa[1797] = "Flight Lessons";
      sa[1798] = "Flip This House";
      sa[1799] = "Flipflop Girl Wants To Be Debt-Free!!";
      sa[1800] = "Floor";
      sa[1801] = "Florida";
      sa[1802] = "Fluffy";
      sa[1803] = "Focused on House";
      sa[1804] = "For Help";
      sa[1805] = "For Love Always";
      sa[1806] = "For My Son";
      sa[1807] = "For a 01 BMW X5 waaay under book";
      sa[1808] = "For construction equipment.";
      sa[1809] = "For opening a cleaning business.";
      sa[1810] = "For the future";
      sa[1811] = "For those that said i couldn't";
      sa[1812] = "Ford Bronco Loan";
      sa[1813] = "Ford Crown Vic";
      sa[1814] = "Ford Excursion Load";
      sa[1815] = "Form Fit 24 Hour Fitness Center";
      sa[1816] = "Fort Lauterdale";
      sa[1817] = "Foster Trucking Co";
      sa[1818] = "Found my Dream car";
      sa[1819] = "Foundation Replacement";
      sa[1820] = "Four Winns 268 Vista Boat";
      sa[1821] = "Frank's Loan";
      sa[1822] = "Frank's loan";
      sa[1823] = "Freash Start!";
      sa[1824] = "Freds Laon";
      sa[1825] = "Free ";
      sa[1826] = "Free CC 2011";
      sa[1827] = "Free From College Credit Card Debt";
      sa[1828] = "Free at last";
      sa[1829] = "Free from credit cards";
      sa[1830] = "Freedom";
      sa[1831] = "Freedom ";
      sa[1832] = "Freedom 2011";
      sa[1833] = "Freedom 999";
      sa[1834] = "Freedom Express";
      sa[1835] = "Freedom From Debt Payoff Loan";
      sa[1836] = "Freedom Loan";
      sa[1837] = "Freedom Plan";
      sa[1838] = "Freedom for my Evil Target Credit Card";
      sa[1839] = "Freedom from debt loan";
      sa[1840] = "Freedom from debt!";
      sa[1841] = "Freedom from every day";
      sa[1842] = "Freedom loan";
      sa[1843] = "Freeing Myself From Credit Card Debt";
      sa[1844] = "Freesdom2";
      sa[1845] = "Fresh Start";
      sa[1846] = "Fresh Start 2010";
      sa[1847] = "Fresh Start Loan";
      sa[1848] = "Fresh Start with a Spin";
      sa[1849] = "From One angel to another ...";
      sa[1850] = "Ft Worth Relocation";
      sa[1851] = "Full Return plus Interest";
      sa[1852] = "Fully Employed, just payin off card & trying to save on lame fees";
      sa[1853] = "Funches & Associates LLC";
      sa[1854] = "Fund a US Veteran..";
      sa[1855] = "Fund me you wont regret it!";
      sa[1856] = "Funding my growing business!";
      sa[1857] = "Funding web design project";
      sa[1858] = "Funds for Moving ";
      sa[1859] = "Funds getting put to good use.";
      sa[1860] = "Furnace";
      sa[1861] = "Furninshing and Moving to New Home";
      sa[1862] = "Furnishing First Apartment";
      sa[1863] = "Furniture ";
      sa[1864] = "Furniture Purchase";
      sa[1865] = "Future ";
      sa[1866] = "G.B. Loan";
      sa[1867] = "GAC Credit Card";
      sa[1868] = "GAraimo";
      sa[1869] = "GET IN BACK";
      sa[1870] = "GET OF DEBT LOAN";
      sa[1871] = "GET OUT OF DEBT LOAN";
      sa[1872] = "GET OUTTA DEBT";
      sa[1873] = "GMU";
      sa[1874] = "GOLF CART 1";
      sa[1875] = "GSXR";
      sa[1876] = "GSXR1000";
      sa[1877] = "GW Debt";
      sa[1878] = "GWU";
      sa[1879] = "Gabe's Loan";
      sa[1880] = "Garage Loan";
      sa[1881] = "Garry's Credit Card Consolidation Loan";
      sa[1882] = "Garys credit card payoff";
      sa[1883] = "GedLending";
      sa[1884] = "Gene Debt Consolidation";
      sa[1885] = "General Loan";
      sa[1886] = "General Purpose";
      sa[1887] = "General Purpose Loan";
      sa[1888] = "Generic";
      sa[1889] = "Geothermal Heat Pump";
      sa[1890] = "Germany";
      sa[1891] = "Get My Debt Under Control";
      sa[1892] = "Get Out Of Debt";
      sa[1893] = "Get Out of Debt";
      sa[1894] = "Get Out of Debt Free";
      sa[1895] = "Get Out of Debt Loan";
      sa[1896] = "Get Out of My House Loan";
      sa[1897] = "Get Out of the Hole";
      sa[1898] = "Get Rid Of My Bills";
      sa[1899] = "Get Rid of Debt to Own a House";
      sa[1900] = "Get ahead loan";
      sa[1901] = "Get ahead on payments";
      sa[1902] = "Get back on feet";
      sa[1903] = "Get high balances off credit cards";
      sa[1904] = "Get id of high interest cards";
      sa[1905] = "Get it Paid off!!!";
      sa[1906] = "Get it Together";
      sa[1907] = "Get my life back out of credit cards";
      sa[1908] = "Get our of debt";
      sa[1909] = "Get out of CC Debt";
      sa[1910] = "Get out of Ccard debt";
      sa[1911] = "Get out of DEBT";
      sa[1912] = "Get out of DEBT!";
      sa[1913] = "Get out of Debt";
      sa[1914] = "Get out of Debt Loan";
      sa[1915] = "Get out of Debt by 2014 Loan";
      sa[1916] = "Get out of credit debt";
      sa[1917] = "Get out of debt";
      sa[1918] = "Get out of debt ";
      sa[1919] = "Get out of debt and be free!";
      sa[1920] = "Get out of debt faster and better rate.";
      sa[1921] = "Get out of debt soon loan";
      sa[1922] = "Get out of debt!";
      sa[1923] = "Get rid of debt";
      sa[1924] = "Get rid of high interest credit card";
      sa[1925] = "Get square with the IRS";
      sa[1926] = "Get those cards paid!";
      sa[1927] = "Getting Married";
      sa[1928] = "Getting Mom's Beast Off My Back";
      sa[1929] = "Getting My Finances STRAIGHT!";
      sa[1930] = "Getting Out Of Debt";
      sa[1931] = "Getting Out of Debt the Right Way";
      sa[1932] = "Getting Ready for Retirement";
      sa[1933] = "Getting Rid Of CC debt!";
      sa[1934] = "Getting Rid of All Credit Card Debt!!!!";
      sa[1935] = "Getting Rid of Credit Card Debt";
      sa[1936] = "Getting The Monkey Off My Back";
      sa[1937] = "Getting a better loan rate";
      sa[1938] = "Getting a head start";
      sa[1939] = "Getting back at Bankers";
      sa[1940] = "Getting back on Track";
      sa[1941] = "Getting back on track";
      sa[1942] = "Getting life back on track";
      sa[1943] = "Getting me out of a Cosigned Loan!";
      sa[1944] = "Getting my act together";
      sa[1945] = "Getting out of CC debt";
      sa[1946] = "Getting out of Credit Card Hell";
      sa[1947] = "Getting out of college debt!";
      sa[1948] = "Getting out of the Rat Race";
      sa[1949] = "Getting over the Hump";
      sa[1950] = "Getting ready for retirement!";
      sa[1951] = "Getting rid of Credit Card debt for good";
      sa[1952] = "Getting rid of c.card debt for good";
      sa[1953] = "Getting rid of credit card debt for good";
      sa[1954] = "Getting rid of terrible intrest rate!";
      sa[1955] = "Gina's Loan";
      sa[1956] = "Gluten Free Bakery in ideal town for it";
      sa[1957] = "Go Away Credit Cards";
      sa[1958] = "Go Blue";
      sa[1959] = "Go Jags Go";
      sa[1960] = "Go for Broke";
      sa[1961] = "Goal of being Debt Free";
      sa[1962] = "God loves me";
      sa[1963] = "Going Debt Free!";
      sa[1964] = "Going Green!  Installing Energy Efficient Windows in My Home";
      sa[1965] = "Going to live payment free!";
      sa[1966] = "Gold";
      sa[1967] = "Gold Wing";
      sa[1968] = "Goldwing";
      sa[1969] = "Golf Academy";
      sa[1970] = "Golf Cart Concession";
      sa[1971] = "GonnaBeDebtFree";
      sa[1972] = "Good Credit Loan";
      sa[1973] = "Good Faith";
      sa[1974] = "Good Investment";
      sa[1975] = "Good advice pays off";
      sa[1976] = "Good bye high interest cc";
      sa[1977] = "Good credit - consolidating expenses";
      sa[1978] = "Good for Payback";
      sa[1979] = "Good income & credit";
      sa[1980] = "Good investment";
      sa[1981] = "Good-bye High Interest";
      sa[1982] = "GoodPayHistory";
      sa[1983] = "Goodby Discover";
      sa[1984] = "Goodbye Debt";
      sa[1985] = "Goodbye High Interest Credit Cards";
      sa[1986] = "Goodbye High Interest Credit Cards!!!";
      sa[1987] = "Goodbye struggle";
      sa[1988] = "Goodbye to Credit Cards & High Rates";
      sa[1989] = "Goodbye to rate-adjusting credit cards!";
      sa[1990] = "Goodbye, B of A!";
      sa[1991] = "Goodbye, Debt.";
      sa[1992] = "Gov Travel";
      sa[1993] = "Grad school for my daughter";
      sa[1994] = "Graduate School";
      sa[1995] = "Graduate School Fund";
      sa[1996] = "Graduation Present";
      sa[1997] = "Grand Cayman and Cozumel";
      sa[1998] = "Grandkids to Disney";
      sa[1999] = "Grandview";
      sa[2000] = "Grateful Getting Out of Debt for Good";
      sa[2001] = "GreaFunding1";
      sa[2002] = "Great Credit History Never Missed Payment";
      sa[2003] = "Great Credit Individual Seeking Loan";
      sa[2004] = "Great Fix up opportunity in Bay Point!";
      sa[2005] = "Great Job/Divorce Settlement";
      sa[2006] = "Green";
      sa[2007] = "Green Loan";
      sa[2008] = "Greg's Get Out of Debt Loan";
      sa[2009] = "Group 5";
      sa[2010] = "Growing Business";
      sa[2011] = "Growing up loan!";
      sa[2012] = "Guaranteed Income for Life";
      sa[2013] = "Guaranteed repayment";
      sa[2014] = "Guitar pickup design start up";
      sa[2015] = "H's Moving Forward Plan";
      sa[2016] = "HALAT";
      sa[2017] = "HAPPY TO RETURN";
      sa[2018] = "HD Loan";
      sa[2019] = "HD Refinance";
      sa[2020] = "HELP";
      sa[2021] = "HELP ME BE DEBT FREE";
      sa[2022] = "HELP ME OUT!";
      sa[2023] = "HELP ME!!!";
      sa[2024] = "HELP! CREDIT CARD DEBT HAS A HOLD ON ME!";
      sa[2025] = "HG Loan";
      sa[2026] = "HH Loan";
      sa[2027] = "HI Loan";
      sa[2028] = "HOME";
      sa[2029] = "HOME IMPROV";
      sa[2030] = "HOME IMPROVEMENT";
      sa[2031] = "HOME IMPROVEMENT ";
      sa[2032] = "HOME IMPROVEMENTS";
      sa[2033] = "HOME IMPROVEMNET";
      sa[2034] = "HOME IMPROVMENT";
      sa[2035] = "HOME REMODEL";
      sa[2036] = "HOME REPAIRS";
      sa[2037] = "HONDA RUCKUS";
      sa[2038] = "HOPE...FAITH...& HARD WORK";
      sa[2039] = "HORIZON IN SIGHT";
      sa[2040] = "HSBC refinance loan";
      sa[2041] = "HSBC/Citi1";
      sa[2042] = "HUD uninsured";
      sa[2043] = "Hair Stylist Expanding Business";
      sa[2044] = "Halbert 2010";
      sa[2045] = "Hanging on";
      sa[2046] = "Hannah";
      sa[2047] = "Happy Home";
      sa[2048] = "Hard Worker - NEVER LATE - Fresh Start";
      sa[2049] = "Hard Working individual Paying off Credit Card Debt";
      sa[2050] = "Hard Working, Trust Worthy and Honest!!!";
      sa[2051] = "Hardwood Floors";
      sa[2052] = "Harley Loan";
      sa[2053] = "Harley loan";
      sa[2054] = "Harmony 2 You";
      sa[2055] = "Harnessing credit debt for a stable future.";
      sa[2056] = "Harold";
      sa[2057] = "Have Assets To satisfy Loan";
      sa[2058] = "Have a home emergency";
      sa[2059] = "Hay purchase";
      sa[2060] = "Head Start Loan";
      sa[2061] = "Head above Water loan";
      sa[2062] = "Head above water";
      sa[2063] = "HealBySteel";
      sa[2064] = "Health and well being";
      sa[2065] = "Heard about Peer Lending";
      sa[2066] = "Heartbreaking Work of Staggering Genius!";
      sa[2067] = "Heat Pump";
      sa[2068] = "Heather Loan";
      sa[2069] = "Heating & Air";
      sa[2070] = "Heating, Ventilation, and Cooling (HVAC)";
      sa[2071] = "HeatingAndAirConditioning";
      sa[2072] = "Hedgerose";
      sa[2073] = "Heidi'sDebtConsolidation";
      sa[2074] = "Hello";
      sa[2075] = "Help";
      sa[2076] = "Help Alex";
      sa[2077] = "Help Daughter Pay Off Ph.D-done, just needs to pay dissertation fees.";
      sa[2078] = "Help Free a Slave to Old Debt!";
      sa[2079] = "Help Lisa";
      sa[2080] = "Help Me Buy a Beachfront Cafe in Florida";
      sa[2081] = "Help Me Finish My Degree";
      sa[2082] = "Help Me Get Back on My Feet";
      sa[2083] = "Help Me, Help You!";
      sa[2084] = "Help My Family";
      sa[2085] = "Help Pay off Medical Bills";
      sa[2086] = "Help a reseacher to cover medical bills";
      sa[2087] = "Help bring down cc debit";
      sa[2088] = "Help from Abroad";
      sa[2089] = "Help make me the happiest man alive";
      sa[2090] = "Help me Help you";
      sa[2091] = "Help me build up my credit!";
      sa[2092] = "Help me complete my internet business";
      sa[2093] = "Help me consolidate my debt";
      sa[2094] = "Help me escape the Credit Card Companies";
      sa[2095] = "Help me finish off this credit card debt";
      sa[2096] = "Help me get rid of high interest rates!!";
      sa[2097] = "Help me kick Citi to the Curb!";
      sa[2098] = "Help me low my interest rate";
      sa[2099] = "Help me pay off my credit card";
      sa[2100] = "Help me pay off my debt with less interest.";
      sa[2101] = "Help me pay off my student loans!";
      sa[2102] = "Help me pay off some debt before my wedding!";
      sa[2103] = "Help me purchase a Car";
      sa[2104] = "Help me refi my credit card";
      sa[2105] = "Help me, Help you.";
      sa[2106] = "Help me, help you! Credit Card Refinance";
      sa[2107] = "Help needed to clean up credit card debt";
      sa[2108] = "Help our small business expand!";
      sa[2109] = "Help start up my business";
      sa[2110] = "Help to bring my long time dream home!";
      sa[2111] = "Help to pay for School";
      sa[2112] = "Help us pay for our wedding back home!";
      sa[2113] = "Help with Business School (MBA) Tuition";
      sa[2114] = "Help with Financing NYC Apt Sec. Deposit";
      sa[2115] = "Help with Lump Sum Medical Expenses";
      sa[2116] = "Help with Moving";
      sa[2117] = "Help with my high interest payments";
      sa[2118] = "Helpforme";
      sa[2119] = "Helping ";
      sa[2120] = "Helping Business";
      sa[2121] = "Helping Hand";
      sa[2122] = "Helping My Debt";
      sa[2123] = "Helping a working man avoid the way high interest rates r";
      sa[2124] = "Helping me pay off bad debt";
      sa[2125] = "Helping my 17 yo son";
      sa[2126] = "Helping to Bridge a Credit Crunch";
      sa[2127] = "HelpingHands";
      sa[2128] = "Henrys loan";
      sa[2129] = "Hidden Creek";
      sa[2130] = "High Income Professional needs quick loan to consolidate debt";
      sa[2131] = "High Interest Credit Card Consolidation";
      sa[2132] = "High Interest Credit Card Refinancing";
      sa[2133] = "High Interest Credit Line";
      sa[2134] = "High Interest Debt Consolidation";
      sa[2135] = "High Interest Debt Loan";
      sa[2136] = "High Interest Rate";
      sa[2137] = "High Interest conslidation";
      sa[2138] = "High Probability Options Monthly Income";
      sa[2139] = "High Profile new business loan";
      sa[2140] = "High Tech Business Startup";
      sa[2141] = "High end motorscooter business purchase";
      sa[2142] = "High interest Credit card payoff";
      sa[2143] = "High interest credit card consolidation";
      sa[2144] = "High intrest Consolidation";
      sa[2145] = "High score debt consolidation";
      sa[2146] = "High-Interest Debt Consolidation";
      sa[2147] = "Higher Credit Card Refi";
      sa[2148] = "Highlander";
      sa[2149] = "Historic Family Relocation";
      sa[2150] = "Holiday Gifts";
      sa[2151] = "Holiday Loan";
      sa[2152] = "Holiday loan";
      sa[2153] = "Holistic Wellness Center";
      sa[2154] = "Holy Matrimony";
      sa[2155] = "Home";
      sa[2156] = "Home AC Units & Other debt";
      sa[2157] = "Home Basement Construction";
      sa[2158] = "Home Building";
      sa[2159] = "Home Buying";
      sa[2160] = "Home Depot payoff";
      sa[2161] = "Home Down Payment";
      sa[2162] = "Home Down Payment Assistance";
      sa[2163] = "Home Downpayment";
      sa[2164] = "Home Entertainment System";
      sa[2165] = "Home Free";
      sa[2166] = "Home Imp Loan";
      sa[2167] = "Home Improovement Loan";
      sa[2168] = "Home Improve and CC";
      sa[2169] = "Home Improvement";
      sa[2170] = "Home Improvement ";
      sa[2171] = "Home Improvement & debt consolidation";
      sa[2172] = "Home Improvement - Garage";
      sa[2173] = "Home Improvement - Kitchen";
      sa[2174] = "Home Improvement 1";
      sa[2175] = "Home Improvement 2011";
      sa[2176] = "Home Improvement Baby on the Way";
      sa[2177] = "Home Improvement Debt Consolidation";
      sa[2178] = "Home Improvement Loan";
      sa[2179] = "Home Improvement Loan ";
      sa[2180] = "Home Improvement Loan for Siding";
      sa[2181] = "Home Improvement loan";
      sa[2182] = "Home Improvement loan ";
      sa[2183] = "Home Improvement loan 1";
      sa[2184] = "Home Improvement to make Home Green (Energy Efficient)";
      sa[2185] = "Home Improvement/ Investment ";
      sa[2186] = "Home Improvement/fence/pool";
      sa[2187] = "Home Improvements";
      sa[2188] = "Home Improvements ";
      sa[2189] = "Home Improvements, plain and simple";
      sa[2190] = "Home Improvenet Project";
      sa[2191] = "Home Improvment";
      sa[2192] = "Home Improvment Loan From San Jose CA";
      sa[2193] = "Home Improvment Loan Needed";
      sa[2194] = "Home Improvments";
      sa[2195] = "Home Imprv. Loan";
      sa[2196] = "Home Inprovement";
      sa[2197] = "Home Loan";
      sa[2198] = "Home Loan Downpayment";
      sa[2199] = "Home Lona Down Payment";
      sa[2200] = "Home Maintnance";
      sa[2201] = "Home Makeup";
      sa[2202] = "Home One";
      sa[2203] = "Home Project";
      sa[2204] = "Home Purchase";
      sa[2205] = "Home Redecorating";
      sa[2206] = "Home Refurbishment";
      sa[2207] = "Home Remodel";
      sa[2208] = "Home Remodeling Time";
      sa[2209] = "Home Renovations";
      sa[2210] = "Home Repairs";
      sa[2211] = "Home SOS";
      sa[2212] = "Home Stuff";
      sa[2213] = "Home Update";
      sa[2214] = "Home and Business";
      sa[2215] = "Home care during recovery from surgery";
      sa[2216] = "Home debt";
      sa[2217] = "Home down payment";
      sa[2218] = "Home down payment loan";
      sa[2219] = "Home expenses";
      sa[2220] = "Home improve";
      sa[2221] = "Home improvement";
      sa[2222] = "Home improvement ";
      sa[2223] = "Home improvement Loan ";
      sa[2224] = "Home improvement for Extra bedroom";
      sa[2225] = "Home improvement lo";
      sa[2226] = "Home improvement loan";
      sa[2227] = "Home improvement project";
      sa[2228] = "Home improvement room addition";
      sa[2229] = "Home improvement short term loan";
      sa[2230] = "Home improvement time";
      sa[2231] = "Home improvement/ consolidate debt";
      sa[2232] = "Home improvements";
      sa[2233] = "Home improvent";
      sa[2234] = "Home purchase";
      sa[2235] = "Home re-model";
      sa[2236] = "Home remodel";
      sa[2237] = "Home remodeling";
      sa[2238] = "Home repair";
      sa[2239] = "Home repair and Loan payoff";
      sa[2240] = "Home repair flood damage in Thailand";
      sa[2241] = "Home repairs";
      sa[2242] = "HomeImprov";
      sa[2243] = "HomeImprov1";
      sa[2244] = "HomeLoan";
      sa[2245] = "Home_Improvement Loan";
      sa[2246] = "Home_Improvements";
      sa[2247] = "Homr Improvement Load";
      sa[2248] = "Honda CB 350";
      sa[2249] = "Honda Civic";
      sa[2250] = "Honda Loan";
      sa[2251] = "Honda Rebel";
      sa[2252] = "Honda Shadow";
      sa[2253] = "Honda refinancing";
      sa[2254] = "Honest guy, pays on time, consistent, loyal";
      sa[2255] = "Honeymoon Loan";
      sa[2256] = "HonoluluHahi";
      sa[2257] = "Hookah Dance Club Seattle U-District";
      sa[2258] = "Hope";
      sa[2259] = "Hopeful Loan";
      sa[2260] = "Horrible Auto Loan - Help!";
      sa[2261] = "Horse";
      sa[2262] = "Hot Issue";
      sa[2263] = "Hot Item";
      sa[2264] = "Hot Tub";
      sa[2265] = "Hot Tub Loan";
      sa[2266] = "Hot Tube";
      sa[2267] = "House";
      sa[2268] = "House Improvement Loan";
      sa[2269] = "House Loan";
      sa[2270] = "House Painting";
      sa[2271] = "House Prep";
      sa[2272] = "House Project";
      sa[2273] = "House Rehab";
      sa[2274] = "House Renovation-2011";
      sa[2275] = "House Repairs";
      sa[2276] = "House Selling Costs";
      sa[2277] = "House Selloff";
      sa[2278] = "House Upgrade";
      sa[2279] = "House donw payment, fix ups and furniture for it";
      sa[2280] = "House to call a home";
      sa[2281] = "House2";
      sa[2282] = "Household";
      sa[2283] = "Housing Market is Rebounding - Go USA";
      sa[2284] = "Human consolidation";
      sa[2285] = "Hurricane Katrina GoZone Renewal";
      sa[2286] = "Hurricane Rita Caused a Pressure Wound";
      sa[2287] = "Hurricane Shutters";
      sa[2288] = "Husband goes back to school";
      sa[2289] = "I Graduated! Moving Closer to Work";
      sa[2290] = "I Need Out";
      sa[2291] = "I Pay On Time";
      sa[2292] = "I WOULD LIKE TO FURNISH MY APARTMENT";
      sa[2293] = "I Want To Be Free Of Debt";
      sa[2294] = "I Want To Retire Debt Free";
      sa[2295] = "I am expanding my business.";
      sa[2296] = "I am looking for a better rate.";
      sa[2297] = "I am very reliable!";
      sa[2298] = "I hate Chase";
      sa[2299] = "I hate my credit cards";
      sa[2300] = "I just need a chance";
      sa[2301] = "I need help";
      sa[2302] = "I need to consolidate";
      sa[2303] = "I need to do some home improvements";
      sa[2304] = "I need to maintain my business";
      sa[2305] = "I owe";
      sa[2306] = "I want my pre-debt life back!";
      sa[2307] = "I want to be (credit card debt) free";
      sa[2308] = "I want to pay off my credit cards";
      sa[2309] = "I would like to pay off my credit card!";
      sa[2310] = "I'd Rather Pay Interest To You Than BOA";
      sa[2311] = "I'm Moving!";
      sa[2312] = "I'm done buying tools loan";
      sa[2313] = "I'm getting MCSA Certification";
      sa[2314] = "IMPROVEMENT";
      sa[2315] = "IMPROVEMENTS IN MY HOME IN HOLLYWOOD, CA";
      sa[2316] = "IN THE GREEN";
      sa[2317] = "INTOWN";
      sa[2318] = "IOU Smartly";
      sa[2319] = "IRA contribution";
      sa[2320] = "IRS Payment";
      sa[2321] = "IRSWoes";
      sa[2322] = "ISK";
      sa[2323] = "IVF";
      sa[2324] = "IVF 2011";
      sa[2325] = "IVF Loan";
      sa[2326] = "Ian Ferro";
      sa[2327] = "Ida Personal Load";
      sa[2328] = "Il Bello Flyscooter";
      sa[2329] = "Improve the home, build equity, Win-Win!";
      sa[2330] = "Improvement";
      sa[2331] = "Improvements";
      sa[2332] = "Improving my Life";
      sa[2333] = "In Hope of Life Changing Makeover";
      sa[2334] = "In Need of Post-College Assistance";
      sa[2335] = "In need loan";
      sa[2336] = "In-Ground Pool Loan";
      sa[2337] = "Income Property Improvemnt Loan Needed";
      sa[2338] = "Income Tax + Debt Consolidation Loan";
      sa[2339] = "Income Taxes";
      sa[2340] = "Income tax";
      sa[2341] = "Increase my down payment";
      sa[2342] = "Increasing home value ";
      sa[2343] = "India Property Loan";
      sa[2344] = "Infusion Group,LLC";
      sa[2345] = "Inground Pool ";
      sa[2346] = "Inheritance";
      sa[2347] = "Install Energy Efficient Windows";
      sa[2348] = "Install Truck";
      sa[2349] = "Install new fence in yard";
      sa[2350] = "Institut de Francais";
      sa[2351] = "Insurance Agency Business";
      sa[2352] = "Insurance Agency- Start-Up";
      sa[2353] = "Insurance License Loan";
      sa[2354] = "Integra Loan";
      sa[2355] = "Interest Rate Reduction.";
      sa[2356] = "Interest Reduction Loan";
      sa[2357] = "Interest rate reduction";
      sa[2358] = "Interest rate too high on credit card";
      sa[2359] = "Interior Renovation for Condo";
      sa[2360] = "Internet / Television Production Company";
      sa[2361] = "Inventory Expansion For Tech Retail Biz";
      sa[2362] = "Inventory boost for growing business.";
      sa[2363] = "Inventory/Cash Flow";
      sa[2364] = "Invesment Guaranteed!";
      sa[2365] = "Invest In Others";
      sa[2366] = "Invest in NYC Bar in Tribeca";
      sa[2367] = "Invest in an entrepreneur!";
      sa[2368] = "Invest in my Debt Consolidation";
      sa[2369] = "Invest in my future";
      sa[2370] = "Investing";
      sa[2371] = "Investing In Education";
      sa[2372] = "Investing in Lending Club Notes";
      sa[2373] = "Investing in my consulting business";
      sa[2374] = "Investing in my family's music business";
      sa[2375] = "Investing in my success";
      sa[2376] = "Investment";
      sa[2377] = "Investment 1";
      sa[2378] = "Investment Money for MBST";
      sa[2379] = "Investment Opportunity";
      sa[2380] = "Investment Property";
      sa[2381] = "Investment Property Rehab Project";
      sa[2382] = "Investment in Advance of Year End Bonus";
      sa[2383] = "Investment in Education.";
      sa[2384] = "Investment loan";
      sa[2385] = "Investment on property.";
      sa[2386] = "Investment property";
      sa[2387] = "Investments";
      sa[2388] = "Irs Loan";
      sa[2389] = "Isuzu2005";
      sa[2390] = "J.L.";
      sa[2391] = "JACAUnlimited";
      sa[2392] = "JAIME'S LOAN";
      sa[2393] = "JB Debt Consolidation";
      sa[2394] = "JB LLC";
      sa[2395] = "JB Motorcycle";
      sa[2396] = "JC";
      sa[2397] = "JD's Wedding";
      sa[2398] = "JENNIFER'S RECOVERY";
      sa[2399] = "JESSICA LOAN";
      sa[2400] = "JFP Loan";
      sa[2401] = "JHPENSION LOAN";
      sa[2402] = "JIM";
      sa[2403] = "JJ TWins";
      sa[2404] = "JOSCH53";
      sa[2405] = "JP's Hassel";
      sa[2406] = "JRW Debt Consolidation";
      sa[2407] = "JUST A HELPING HAND";
      sa[2408] = "JW PERSONAL LOAN";
      sa[2409] = "JW-L Debt Consolidation Loan";
      sa[2410] = "Jabs High Interest Consolidation Loan";
      sa[2411] = "Jaguar";
      sa[2412] = "Jake";
      sa[2413] = "Jake's Air Conditioner";
      sa[2414] = "Jakes personal loan";
      sa[2415] = "James Clark";
      sa[2416] = "Jamie CC Loan";
      sa[2417] = "January 2009 refinance";
      sa[2418] = "Jasmine";
      sa[2419] = "Jason Weidert";
      sa[2420] = "Jason's Loan";
      sa[2421] = "Jasons loan";
      sa[2422] = "Jay's Debt Consolation";
      sa[2423] = "Jds Loan";
      sa[2424] = "Jeab";
      sa[2425] = "Jeep";
      sa[2426] = "Jeep Financing";
      sa[2427] = "Jeep Loan";
      sa[2428] = "Jeep Repair Loan";
      sa[2429] = "Jeep wagoneer";
      sa[2430] = "Jeff's Debt Consolidation Loan";
      sa[2431] = "Jenn's Debt Consolidation for Increased Rainy Day Savings";
      sa[2432] = "Jennifer";
      sa[2433] = "Jennifer's Attempt To Dig Herself Out";
      sa[2434] = "Jenny Dreams";
      sa[2435] = "Jeremy's Loan";
      sa[2436] = "Jess Consolidate";
      sa[2437] = "Jessica's Future";
      sa[2438] = "Jessica's Ring";
      sa[2439] = "Jessie's loan";
      sa[2440] = "Jetta";
      sa[2441] = "Jewel's loan";
      sa[2442] = "JimnTyis";
      sa[2443] = "Joe's Debt consolidation";
      sa[2444] = "Joe's Personal Loan";
      sa[2445] = "Joe's consolodation loan";
      sa[2446] = "Joel Home Improvement";
      sa[2447] = "John needs a loan";
      sa[2448] = "John's Debt Consolidation";
      sa[2449] = "John's Loan";
      sa[2450] = "John's Loan 1";
      sa[2451] = "Johnson Consolidation";
      sa[2452] = "Jon's Loan";
      sa[2453] = "Jonesey";
      sa[2454] = "Jordiana";
      sa[2455] = "Josh's Debt Consolidation Loan";
      sa[2456] = "Joshua";
      sa[2457] = "Joy's Last Chance";
      sa[2458] = "Julie's Debt Payoff Plan";
      sa[2459] = "Julie_B_personal_loan";
      sa[2460] = "July 2010 Loan";
      sa[2461] = "JumpshotPhoto Startup Loan";
      sa[2462] = "June 11 Consolidation";
      sa[2463] = "June CC Refinance";
      sa[2464] = "June_rework";
      sa[2465] = "Just honorably discharged from military ";
      sa[2466] = "Just in case";
      sa[2467] = "Justice";
      sa[2468] = "Justin's Loan";
      sa[2469] = "Justin's Wedding";
      sa[2470] = "K. Rupert Basement";
      sa[2471] = "KAL N CINDY";
      sa[2472] = "KD's Debt Consolidation Loan";
      sa[2473] = "KEN PERSONAL LOAN";
      sa[2474] = "KHALSA";
      sa[2475] = "KIM DEBT CONSOLIDATE";
      sa[2476] = "KKR Loan";
      sa[2477] = "KLT1960";
      sa[2478] = "KP";
      sa[2479] = "KT Personal";
      sa[2480] = "KTM";
      sa[2481] = "Kalamazoo Konsolidation";
      sa[2482] = "Kangen water appliance";
      sa[2483] = "Karen & Tom's visa cards";
      sa[2484] = "Karen's Loan";
      sa[2485] = "Kari's Consolidation Plan";
      sa[2486] = "Karilyn";
      sa[2487] = "Karma Loan";
      sa[2488] = "Karp's Consolidation";
      sa[2489] = "Kart loan";
      sa[2490] = "Katie";
      sa[2491] = "Katie Credit Card Reformation";
      sa[2492] = "Kawasaki";
      sa[2493] = "Kawasaki teryx";
      sa[2494] = "Keeping My Word!";
      sa[2495] = "Keiths Loan";
      sa[2496] = "Keller Grad School";
      sa[2497] = "Kelley's Personal Loan";
      sa[2498] = "Kelli's Home Improvement";
      sa[2499] = "Kelly H";
      sa[2500] = "Kevin's Debt consolidation";
      sa[2501] = "Kick those crappy rewards cards";
      sa[2502] = "Kicking Chase Butt";
      sa[2503] = "Kids growing up fast";
      sa[2504] = "Kill 29.9% loan + 27.24% cc + others";
      sa[2505] = "Kill All Credit Cards";
      sa[2506] = "Kill the Credit Cards Consolidation";
      sa[2507] = "Killing my Debt";
      sa[2508] = "Kim's biz";
      sa[2509] = "Kina's Loan";
      sa[2510] = "Kissapher";
      sa[2511] = "Kissin' the Mastercard goodbye! Shouldn't of raised your interest rate so high!!";
      sa[2512] = "Kitch Remodel";
      sa[2513] = "Kitchen";
      sa[2514] = "Kitchen & Bath Remodel";
      sa[2515] = "Kitchen Countertops";
      sa[2516] = "Kitchen Improvements";
      sa[2517] = "Kitchen RENO";
      sa[2518] = "Kitchen Remodel";
      sa[2519] = "Kitchen Renovation";
      sa[2520] = "Kitchen Upgrade";
      sa[2521] = "Kitchen and Bathroom Remodel";
      sa[2522] = "Kitchen and Bathroom Remodeling";
      sa[2523] = "Kitchen and Deck for home";
      sa[2524] = "Kitchen and bath re-model 30% LTV!";
      sa[2525] = "Kitchen remodel";
      sa[2526] = "Kitchen remodel and landscaping";
      sa[2527] = "Kitchen, Bathroom, Office rehab";
      sa[2528] = "Knock down the cards";
      sa[2529] = "Koons";
      sa[2530] = "Kredietkaart";
      sa[2531] = "Kris Kringle";
      sa[2532] = "Kristen's Loan";
      sa[2533] = "Kurtis";
      sa[2534] = "L.Priebe 1/1/11";
      sa[2535] = "LABs Loan";
      sa[2536] = "LAND IN MEXICO";
      sa[2537] = "LC";
      sa[2538] = "LC - Finished basement loan";
      sa[2539] = "LC CC Consolidation";
      sa[2540] = "LC LOAN";
      sa[2541] = "LC Loan";
      sa[2542] = "LC Personal Loan 2010";
      sa[2543] = "LENDING CLUB INVESTEMENT  PART DUEX";
      sa[2544] = "LIFE SAVER";
      sa[2545] = "LIVING AMELIORATION ";
      sa[2546] = "LN$5000";
      sa[2547] = "LOAN";
      sa[2548] = "LOAN CONSOLIDATION";
      sa[2549] = "LOAN1";
      sa[2550] = "LOW INTEREST LOAN";
      sa[2551] = "LOW RISK WITH ME";
      sa[2552] = "LOWERING APR";
      sa[2553] = "LOWERRATE";
      sa[2554] = "LTDream Loan Consolidation";
      sa[2555] = "LUNENTREK";
      sa[2556] = "LW Med Loan";
      sa[2557] = "La fin des cartes de credit";
      sa[2558] = "Labors of Love";
      sa[2559] = "Lacey Wedding ring";
      sa[2560] = "Lakshmi";
      sa[2561] = "Lambright1";
      sa[2562] = "Land Balloon Payment";
      sa[2563] = "Land Loan";
      sa[2564] = "Land Purchase";
      sa[2565] = "Land of Enchantment";
      sa[2566] = "Land_of_Lincoln";
      sa[2567] = "Landscape";
      sa[2568] = "Landscape Project";
      sa[2569] = "Landscaping";
      sa[2570] = "Landscaping and Debt Consolidation";
      sa[2571] = "Landscaping loan";
      sa[2572] = "Large Purchase";
      sa[2573] = "Laser Tag Working Capital";
      sa[2574] = "Lasik";
      sa[2575] = "Last Credit Card Refinance";
      sa[2576] = "Last Ditch Effort";
      sa[2577] = "Last High Interest Credit Cards";
      sa[2578] = "Last Loan";
      sa[2579] = "Last Two & Half years of college";
      sa[2580] = "Last of Revolving Credit to be paid off";
      sa[2581] = "Launching apparel brand w/Patent";
      sa[2582] = "Laura's Loan";
      sa[2583] = "Law Firm";
      sa[2584] = "Law School";
      sa[2585] = "Lawn and sunroom";
      sa[2586] = "Lawyer refinancing higher rate debt ";
      sa[2587] = "Laying a new driveway";
      sa[2588] = "Learning German in Berlin!";
      sa[2589] = "LedingClubLoan";
      sa[2590] = "Legal";
      sa[2591] = "Legal Defence Loan";
      sa[2592] = "Legal Expenses Loan";
      sa[2593] = "Legal fees for divorce";
      sa[2594] = "Legal payment";
      sa[2595] = "Lender Getting Married";
      sa[2596] = "Lendernotborrower";
      sa[2597] = "Lending Club";
      sa[2598] = "Lending Club 1";
      sa[2599] = "Lending Club Consolidation Loan";
      sa[2600] = "Lending Club Investment";
      sa[2601] = "Lending Club Loan";
      sa[2602] = "Lending Club Loan 1";
      sa[2603] = "Lending Club Loan at 14.34";
      sa[2604] = "Lending Club Offer/Suggestion";
      sa[2605] = "Lending Club Redux";
      sa[2606] = "Lending Club loan 11.58%";
      sa[2607] = "Lending Club personal";
      sa[2608] = "Lending Tree Loan";
      sa[2609] = "Lending Tree Personal Loan - New Street";
      sa[2610] = "Lending a Hand";
      sa[2611] = "Lending club";
      sa[2612] = "Lending club 2";
      sa[2613] = "Lending club Loan";
      sa[2614] = "Lending club/credit card refi";
      sa[2615] = "LendingClub";
      sa[2616] = "LendingClub Loan";
      sa[2617] = "LendingClubPayoff";
      sa[2618] = "Leslie debt free";
      sa[2619] = "Less than $5 group";
      sa[2620] = "Let's Consolidate Some Debt";
      sa[2621] = "Let's work together to drop my rate";
      sa[2622] = "LetsGetOuttaDebtFaster";
      sa[2623] = "Level 2 CFA exam. ";
      sa[2624] = "Lewis";
      sa[2625] = "Liability for 3rd party IRS debt";
      sa[2626] = "Licensing and inventory";
      sa[2627] = "Life";
      sa[2628] = "Life Continuos";
      sa[2629] = "Life Improvement Loan";
      sa[2630] = "Life Plan";
      sa[2631] = "Life Renovation/Consolidation.";
      sa[2632] = "Life changing loan";
      sa[2633] = "Life on Life's Terms";
      sa[2634] = "Life on track";
      sa[2635] = "Life saver";
      sa[2636] = "Lifesaver";
      sa[2637] = "Linda";
      sa[2638] = "Lindsay";
      sa[2639] = "Lindsay's Loan";
      sa[2640] = "Lindsey's Loan";
      sa[2641] = "Lisa Loan";
      sa[2642] = "Lisa Wedding Ring";
      sa[2643] = "Lisa's Bills";
      sa[2644] = "Little Giant";
      sa[2645] = "Little Guy 6 Wide Sport";
      sa[2646] = "Livestock Purchase";
      sa[2647] = "Living Debt-Free";
      sa[2648] = "Living Establishment";
      sa[2649] = "Living... Again... Consolidation";
      sa[2650] = "Liz's loan";
      sa[2651] = "LoPrestiLoan";
      sa[2652] = "Loan";
      sa[2653] = "Loan ";
      sa[2654] = "Loan - Dan";
      sa[2655] = "Loan 1";
      sa[2656] = "Loan 1.1";
      sa[2657] = "Loan 1a";
      sa[2658] = "Loan 2";
      sa[2659] = "Loan 2010";
      sa[2660] = "Loan 2011";
      sa[2661] = "Loan 4.5k";
      sa[2662] = "Loan Club";
      sa[2663] = "Loan Consolidation";
      sa[2664] = "Loan Consolidation 2";
      sa[2665] = "Loan Details";
      sa[2666] = "Loan For Child's Professional Education";
      sa[2667] = "Loan For Home";
      sa[2668] = "Loan For New Roof";
      sa[2669] = "Loan Funds1";
      sa[2670] = "Loan Info";
      sa[2671] = "Loan Needed";
      sa[2672] = "Loan Needed for Home Improvement";
      sa[2673] = "Loan One";
      sa[2674] = "Loan Payoff and Home Improvement";
      sa[2675] = "Loan Refinance";
      sa[2676] = "Loan Repay ";
      sa[2677] = "Loan Request";
      sa[2678] = "Loan T";
      sa[2679] = "Loan To Eliminate Credit Card Debt";
      sa[2680] = "Loan Venture";
      sa[2681] = "Loan consolidation";
      sa[2682] = "Loan consolidation & property taxes";
      sa[2683] = "Loan for Bills";
      sa[2684] = "Loan for Debt";
      sa[2685] = "Loan for Debt Consolidation";
      sa[2686] = "Loan for Deck";
      sa[2687] = "Loan for Family vacation and Christmas presents";
      sa[2688] = "Loan for Home repair credit card pay off";
      sa[2689] = "Loan for Job Training";
      sa[2690] = "Loan for ME";
      sa[2691] = "Loan for RN to BSN education";
      sa[2692] = "Loan for Summer Course";
      sa[2693] = "Loan for Vehicle Purchase";
      sa[2694] = "Loan for a bike. ";
      sa[2695] = "Loan for a transportation vehicle";
      sa[2696] = "Loan for apartment deposit for a student";
      sa[2697] = "Loan for debt consolidation";
      sa[2698] = "Loan for debts";
      sa[2699] = "Loan for dental implants";
      sa[2700] = "Loan for family member emergency";
      sa[2701] = "Loan for home-office set up, furnishings";
      sa[2702] = "Loan for my son";
      sa[2703] = "Loan for taxes";
      sa[2704] = "Loan for wedding & honeymoon";
      sa[2705] = "Loan needed for business expansion";
      sa[2706] = "Loan needed for engagement ring";
      sa[2707] = "Loan repayment 100 % Guaranteed!!";
      sa[2708] = "Loan request for debt consolidation & independent consulting practice";
      sa[2709] = "Loan to Clear Debt";
      sa[2710] = "Loan to Dancer for Pilates Certification";
      sa[2711] = "Loan to Knock Down Debt/CCs for Good";
      sa[2712] = "Loan to Pay Moving Costs";
      sa[2713] = "Loan to Pay Taxes Owed to IRS";
      sa[2714] = "Loan to buy Home ";
      sa[2715] = "Loan to buy antique to sell";
      sa[2716] = "Loan to consolidate debt";
      sa[2717] = "Loan to consolidate dept to one payment";
      sa[2718] = "Loan to invest";
      sa[2719] = "Loan to pay high interest debt.";
      sa[2720] = "Loan to pay medical bills, and car repairs";
      sa[2721] = "Loan to pay off Credit cards";
      sa[2722] = "Loan1";
      sa[2723] = "Loan2";
      sa[2724] = "Loan2011";
      sa[2725] = "Loan75";
      sa[2726] = "Long Island Aerial Photography";
      sa[2727] = "Long term investment";
      sa[2728] = "Looking for Car Financing.";
      sa[2729] = "Looking for Operating/Growth Capital";
      sa[2730] = "Looking for Used Reliable family car";
      sa[2731] = "Looking for a Car loan";
      sa[2732] = "Looking for a credit consolidation loan";
      sa[2733] = "Looking for help to start the year off in the right direction!";
      sa[2734] = "Looking for help! Very Reliable!";
      sa[2735] = "Looking for home repair loan";
      sa[2736] = "Looking for new home, Please help!";
      sa[2737] = "Looking to Consolidate!";
      sa[2738] = "Looking to consolidate ";
      sa[2739] = "Looking to consolidate some debt";
      sa[2740] = "Looking to get ahead";
      sa[2741] = "Looking to invest in kitchen upgrades. ";
      sa[2742] = "Looking to make some housing upgrades";
      sa[2743] = "Looking to pay off my only credit card";
      sa[2744] = "Looking to paying off credit cards.";
      sa[2745] = "Looking to purchase a Motorcycle";
      sa[2746] = "Looking to purchase first home";
      sa[2747] = "Loree English Horn";
      sa[2748] = "Lori's Misc";
      sa[2749] = "Lot Next Door";
      sa[2750] = "Love Money";
      sa[2751] = "Love My Home";
      sa[2752] = "Loved one is sick";
      sa[2753] = "Lovely Improvements";
      sa[2754] = "Low APR credit card";
      sa[2755] = "Low Rate Consolidation Loan";
      sa[2756] = "Low Risk - Great Return - Second Loan";
      sa[2757] = "Low Risk CC Balance Transfer Loan";
      sa[2758] = "Lower Credit Card Rate";
      sa[2759] = "Lower Interest";
      sa[2760] = "Lower Interest & Pay off faster single c";
      sa[2761] = "Lower Interest Rate";
      sa[2762] = "Lower Interest Rate Loan";
      sa[2763] = "Lower Interest on Original LendingClub";
      sa[2764] = "Lower Interest rate";
      sa[2765] = "Lower Intrest";
      sa[2766] = "Lower Monthly Payment";
      sa[2767] = "Lower My Utilities - Go Green";
      sa[2768] = "Lower Payments";
      sa[2769] = "Lower Rate";
      sa[2770] = "Lower credit card rates and pay off";
      sa[2771] = "Lower interest loan";
      sa[2772] = "Lower interest, save more money.";
      sa[2773] = "Lower my Credit Card rate";
      sa[2774] = "Lower my apr";
      sa[2775] = "Lower my payments to ease the burden";
      sa[2776] = "Lower payments";
      sa[2777] = "Lower rate for credit card consolidation";
      sa[2778] = "Lowering Car Rate and Moving";
      sa[2779] = "Lowering My Interest Costs";
      sa[2780] = "Lowering My Monthly Bills";
      sa[2781] = "Lowering revolving lines of credit";
      sa[2782] = "Lowrey Organ & Wellness Ctr. For Seniors";
      sa[2783] = "Lucky 22";
      sa[2784] = "Lucrative";
      sa[2785] = "Lucrative Project";
      sa[2786] = "Lucy's Loan";
      sa[2787] = "Luisa's Debt Consolidation Loan";
      sa[2788] = "Luke's Debt";
      sa[2789] = "Luke's Debt Consolidation";
      sa[2790] = "M1028";
      sa[2791] = "M35A3 loan";
      sa[2792] = "MARGE'S";
      sa[2793] = "MBA Expenses";
      sa[2794] = "MBA Loan Consolidation";
      sa[2795] = "MBA, Executive, Perfect Credit, Great Income";
      sa[2796] = "MBNA";
      sa[2797] = "MCP Home Improvement Loan";
      sa[2798] = "MCycle";
      sa[2799] = "MD";
      sa[2800] = "MEDICAL LOAN";
      sa[2801] = "MF Debt Consolidation and Eradication";
      sa[2802] = "MFD loan";
      sa[2803] = "MG Home Improvement";
      sa[2804] = "MG's No More Headache's Loan";
      sa[2805] = "MILITARY LEAVE:  PENSION BUYBACK";
      sa[2806] = "MJM";
      sa[2807] = "MONEY FOR CONSOLIDATION";
      sa[2808] = "MOTORCYCLE";
      sa[2809] = "MP Income Supp";
      sa[2810] = "MSA Settlement Payment";
      sa[2811] = "MY EDUCATIONAL FUTURE IS COUNTING ON IT!";
      sa[2812] = "MY FREEDOM";
      sa[2813] = "MY LOAN";
      sa[2814] = "MYSTIC LOAN";
      sa[2815] = "Main";
      sa[2816] = "Maine Getaway";
      sa[2817] = "Maintenance";
      sa[2818] = "Major Credit Card Consolidation";
      sa[2819] = "Major Purchas";
      sa[2820] = "Major Purchase";
      sa[2821] = "Major Purchase Loan";
      sa[2822] = "Major Purchase/Investment";
      sa[2823] = "Major purchase";
      sa[2824] = "Make BoA SoL";
      sa[2825] = "Making Life Easy";
      sa[2826] = "Making Sound Financial Choices";
      sa[2827] = "Making things better";
      sa[2828] = "Manage My Debt Now Loan";
      sa[2829] = "Manageable Debt Consolidation";
      sa[2830] = "Managing my money";
      sa[2831] = "Manhattan Apartment Downpayment";
      sa[2832] = "Manufacturing Business Financing";
      sa[2833] = "Manzi's Loan";
      sa[2834] = "March 2011 Loan";
      sa[2835] = "Maria Elena";
      sa[2836] = "Marie's Loan";
      sa[2837] = "Mario";
      sa[2838] = "Mark";
      sa[2839] = "Mark's College Bailout Plan";
      sa[2840] = "Mark's Loan";
      sa[2841] = "Market Bamboo Furniture";
      sa[2842] = "Marlon's Loan";
      sa[2843] = "Marna loan";
      sa[2844] = "Marriage Loan";
      sa[2845] = "Mason School";
      sa[2846] = "Massage/Home";
      sa[2847] = "Master Bedroom Addition";
      sa[2848] = "Master bath remodel";
      sa[2849] = "MastercardPaydownLoan";
      sa[2850] = "MathewG";
      sa[2851] = "Matt Rohwer";
      sa[2852] = "Matt's Divorce Loan";
      sa[2853] = "Matt's Loan";
      sa[2854] = "Mauricio";
      sa[2855] = "May 2010 Loan- $1200";
      sa[2856] = "May's Loan";
      sa[2857] = "Mayo Card payment";
      sa[2858] = "Mazda 3";
      sa[2859] = "Med Bills Q4";
      sa[2860] = "Med Money for Med Student";
      sa[2861] = "Med bills";
      sa[2862] = "Medical";
      sa[2863] = "Medical ";
      sa[2864] = "Medical + Education";
      sa[2865] = "Medical Bill Consolidation";
      sa[2866] = "Medical Bill Loan";
      sa[2867] = "Medical Bills";
      sa[2868] = "Medical Bills 2011";
      sa[2869] = "Medical Consolidation";
      sa[2870] = "Medical Emergency";
      sa[2871] = "Medical Expense";
      sa[2872] = "Medical Expense Loan";
      sa[2873] = "Medical Expenses";
      sa[2874] = "Medical Expenses ";
      sa[2875] = "Medical Expenses & Credit Card Refinance";
      sa[2876] = "Medical Help";
      sa[2877] = "Medical Loan";
      sa[2878] = "Medical Loan for Single Independent Woman";
      sa[2879] = "Medical Needs";
      sa[2880] = "Medical Procedure";
      sa[2881] = "Medical Transcriptionist Course Fees";
      sa[2882] = "Medical and Credit Debt";
      sa[2883] = "Medical and Debts";
      sa[2884] = "Medical and Post Graduate Education Expenses";
      sa[2885] = "Medical bills";
      sa[2886] = "Medical costs";
      sa[2887] = "Medical expense loan";
      sa[2888] = "Medical expenses";
      sa[2889] = "Medical for Heather";
      sa[2890] = "Medical loan";
      sa[2891] = "Medical loan ";
      sa[2892] = "Medical supplies, adaptive equiptment. ";
      sa[2893] = "Medical/Vacation";
      sa[2894] = "MedicalConsolidation";
      sa[2895] = "MedicalExpense";
      sa[2896] = "MedicalRental";
      sa[2897] = "Megan's loan";
      sa[2898] = "Mel's Financial Success Loan";
      sa[2899] = "Meltor";
      sa[2900] = "Mercedes";
      sa[2901] = "Merging 2 Accounts into one to save $$";
      sa[2902] = "Merrimac";
      sa[2903] = "Merry Holiday Home Reconstruction";
      sa[2904] = "Merry's Loan";
      sa[2905] = "Miata Loan";
      sa[2906] = "Michael";
      sa[2907] = "Michelle's Medical loan";
      sa[2908] = "Mick Bathroom Loan";
      sa[2909] = "Mid Age excitement.";
      sa[2910] = "Middle Class Bail-Out Loan!";
      sa[2911] = "Midwives";
      sa[2912] = "Miguel";
      sa[2913] = "Mike P";
      sa[2914] = "Mike's Loan ";
      sa[2915] = "Mike's consolidation loan";
      sa[2916] = "Mike's loan";
      sa[2917] = "MikeLMB";
      sa[2918] = "Mikes Loan";
      sa[2919] = "Mikes Personal Loan";
      sa[2920] = "Military Helping Out a Family In Need";
      sa[2921] = "Military Home Purchase";
      sa[2922] = "Military Officer to Consolidate Debt";
      sa[2923] = "Mindimum Loan";
      sa[2924] = "Mine";
      sa[2925] = "Ministerial Sabbatical, Book Tour, Works";
      sa[2926] = "Minivan";
      sa[2927] = "Mint Consolidation";
      sa[2928] = "Miracle Loan";
      sa[2929] = "Mirirai1";
      sa[2930] = "Misc";
      sa[2931] = "Miscelaneous";
      sa[2932] = "Miscellaneous";
      sa[2933] = "Mission: Debt Free";
      sa[2934] = "Mitch's Loan";
      sa[2935] = "Mnwolves12";
      sa[2936] = "Mobile Billboard Company w/ Built in Custome Base";
      sa[2937] = "Mobile Home";
      sa[2938] = "Mobile Payoff";
      sa[2939] = "Mobile home purchase";
      sa[2940] = "Mohsen";
      sa[2941] = "Molecular";
      sa[2942] = "Molly's Get Out of Debt Plan";
      sa[2943] = "Mom & Dad";
      sa[2944] = "Money";
      sa[2945] = "Money 2010";
      sa[2946] = "Money Loan";
      sa[2947] = "Money for Grad School";
      sa[2948] = "Money for down payment on wedding venue";
      sa[2949] = "Money saver";
      sa[2950] = "Monkey";
      sa[2951] = "Monkey Off My Back";
      sa[2952] = "Monthly Debt Relief/Investing/Saving";
      sa[2953] = "More capital to buy existing business";
      sa[2954] = "More land in Florida";
      sa[2955] = "Morgage Pay off";
      sa[2956] = "Mororcco Vacation";
      sa[2957] = "Mortgage Insurance";
      sa[2958] = "Mortgage Payment";
      sa[2959] = "Mortgage Pre-Payment";
      sa[2960] = "Mortgage Principal Reduction";
      sa[2961] = "Mother's Funeral";
      sa[2962] = "Moto";
      sa[2963] = "Moto Loan";
      sa[2964] = "Motorcycle";
      sa[2965] = "Motorcycle Build";
      sa[2966] = "Motorcycle Loan";
      sa[2967] = "Motorcycle loan";
      sa[2968] = "Motorcycle loan - 2005 Suzuki GSXR600";
      sa[2969] = "Motorycycle";
      sa[2970] = "Move Forward";
      sa[2971] = "Move from Atlanta to Los Angeles";
      sa[2972] = "Move to Michigan";
      sa[2973] = "Movement Loan";
      sa[2974] = "Moving";
      sa[2975] = "Moving & Taxes";
      sa[2976] = "Moving And Covering Expenses";
      sa[2977] = "Moving Costs";
      sa[2978] = "Moving Expense Loan";
      sa[2979] = "Moving Expenses";
      sa[2980] = "Moving Expenses 2009";
      sa[2981] = "Moving Expenses Long Time Employee";
      sa[2982] = "Moving Expenses Needed";
      sa[2983] = "Moving Forward";
      sa[2984] = "Moving Loan";
      sa[2985] = "Moving Loan ";
      sa[2986] = "Moving Loan for Immediate Moving Costs";
      sa[2987] = "Moving Lon";
      sa[2988] = "Moving Out Loan";
      sa[2989] = "Moving and Expenses";
      sa[2990] = "Moving and Relocatio";
      sa[2991] = "Moving and relocation Loan";
      sa[2992] = "Moving and rental fees";
      sa[2993] = "Moving card debt to my account";
      sa[2994] = "Moving costs added up quick!";
      sa[2995] = "Moving expenses";
      sa[2996] = "Moving expenses / security deposit";
      sa[2997] = "Moving expenses and security deposit";
      sa[2998] = "Moving for a New Job";
      sa[2999] = "Moving into new home and need funds to buy appliances";
    }
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_14_1 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[3000] = "Moving lending club loan";
      sa[3001] = "Moving to California for My New Job";
      sa[3002] = "Moving to Delaware";
      sa[3003] = "Moving to Georgia";
      sa[3004] = "Moving to NYC";
      sa[3005] = "Moving to St Augustine";
      sa[3006] = "Moving to Texas";
      sa[3007] = "Moving to better job; help a veteran!";
      sa[3008] = "Moving to north plano";
      sa[3009] = "Moving to the new house!";
      sa[3010] = "Moving up!";
      sa[3011] = "Moving/Appartment Loan";
      sa[3012] = "Moving/Relocation";
      sa[3013] = "Moving/Travel";
      sa[3014] = "Mr";
      sa[3015] = "Mr. Three Thousand";
      sa[3016] = "Msit loan";
      sa[3017] = "Much Needed";
      sa[3018] = "Much needed, long coming vacation";
      sa[3019] = "Multiple Credit Card Consolidation";
      sa[3020] = "Muscle Car";
      sa[3021] = "Mushroom Finds Insurnace";
      sa[3022] = "Music Business - Publishing and Recording";
      sa[3023] = "Must Eliminate 25K C.U. Debt w/ High APR";
      sa[3024] = "Mustang";
      sa[3025] = "Mutual Benefit ";
      sa[3026] = "My $ + Lending Club $ = Pool";
      sa[3027] = "My Auto Loan";
      sa[3028] = "My Bailout";
      sa[3029] = "My Bike Loan";
      sa[3030] = "My CC consolidation loan";
      sa[3031] = "My CCC";
      sa[3032] = "My CORE Loan";
      sa[3033] = "My Cessna Airplane Needs Engine Overhaul";
      sa[3034] = "My Child is Growing too fast! Need clothes, shoes, etc.";
      sa[3035] = "My Credit card";
      sa[3036] = "My CreditCards";
      sa[3037] = "My Debt Considation Loan";
      sa[3038] = "My Debt Consolidation";
      sa[3039] = "My Debt Consolidation Loan";
      sa[3040] = "My Debt Free Loan";
      sa[3041] = "My Debt Freedom Plan";
      sa[3042] = "My Debt Payoff";
      sa[3043] = "My Dream Wedding";
      sa[3044] = "My End to Bad Spending Habits Plan";
      sa[3045] = "My Financial Plan to Reduce Debt";
      sa[3046] = "My First & Only Wedding";
      sa[3047] = "My First Loan";
      sa[3048] = "My Freedom Loan";
      sa[3049] = "My Help Loan";
      sa[3050] = "My Helpful loan";
      sa[3051] = "My Home";
      sa[3052] = "My Home Project";
      sa[3053] = "My Horrible, No, Good, Very Bad Debt";
      sa[3054] = "My Loan";
      sa[3055] = "My Loan Application";
      sa[3056] = "My Major Purchase Loan";
      sa[3057] = "My New Life";
      sa[3058] = "My Own 203K Home Improvement Loan";
      sa[3059] = "My Path to Debt Freedom";
      sa[3060] = "My Personal Loan";
      sa[3061] = "My Son";
      sa[3062] = "My biz loan";
      sa[3063] = "My brighter future";
      sa[3064] = "My car needs a bedroom";
      sa[3065] = "My credit card payoff loan.";
      sa[3066] = "My credit card rates are too high";
      sa[3067] = "My debt consolidation loan";
      sa[3068] = "My dream come true";
      sa[3069] = "My last car almost made it to 300k!";
      sa[3070] = "My learning sailboat";
      sa[3071] = "My loan";
      sa[3072] = "My loan1";
      sa[3073] = "My money";
      sa[3074] = "My off many bills for one bill loan";
      sa[3075] = "My personal Loan";
      sa[3076] = "My personal Loan ";
      sa[3077] = "My personal loan";
      sa[3078] = "My personel";
      sa[3079] = "My savings plan";
      sa[3080] = "MyConsolidation";
      sa[3081] = "MyFreedom";
      sa[3082] = "MyLendingClubLoan";
      sa[3083] = "MyLoan";
      sa[3084] = "MyLoan 2011";
      sa[3085] = "Myloan";
      sa[3086] = "Myreduction";
      sa[3087] = "N/A";
      sa[3088] = "NEED A LOAN";
      sa[3089] = "NEED A LOAN TO COVER VACATION AND O. EXP";
      sa[3090] = "NEW ROOF";
      sa[3091] = "NEW START";
      sa[3092] = "NEW WATER HEATER ETC.";
      sa[3093] = "NFL Card Payoff";
      sa[3094] = "NO MORE DEBT";
      sa[3095] = "NRC";
      sa[3096] = "NY";
      sa[3097] = "NYC Debt Consolidation";
      sa[3098] = "NYC Investment Banker";
      sa[3099] = "NYU SUMMER LOAN";
      sa[3100] = "Nagle";
      sa[3101] = "Nannys Car";
      sa[3102] = "Nantucket Antique Store - '11 Inventory";
      sa[3103] = "Natwood 070110";
      sa[3104] = "Necessity";
      sa[3105] = "Need  a lower rate";
      sa[3106] = "Need 9K Loan, Annual Income 98K Verifiable";
      sa[3107] = "Need Home improvement laod";
      sa[3108] = "Need In a HURRY!";
      sa[3109] = "Need Master's Degree for Promotion";
      sa[3110] = "Need Money";
      sa[3111] = "Need Money Fast";
      sa[3112] = "Need Tile for home improvements";
      sa[3113] = "Need a better rate on Visa";
      sa[3114] = "Need a better rate than Citibank!";
      sa[3115] = "Need a better rate than my credit card";
      sa[3116] = "Need a debt consolidation loan";
      sa[3117] = "Need a little help to pay of credit card";
      sa[3118] = "Need a loan to attain a professional management degree";
      sa[3119] = "Need capital to make adjustments";
      sa[3120] = "Need car & pay some bills";
      sa[3121] = "Need cash flow for 3 month. ";
      sa[3122] = "Need down payment for home";
      sa[3123] = "Need extra funds for wedding expenses";
      sa[3124] = "Need funding for start up consulting biz";
      sa[3125] = "Need good Karma? Save me from High Interest Rate Hell.";
      sa[3126] = "Need help consoldating a little debt";
      sa[3127] = "Need help with credit card debt!!!!";
      sa[3128] = "Need help with high-interest balance!";
      sa[3129] = "Need help with recent medical bills";
      sa[3130] = "Need money for college";
      sa[3131] = "Need new car for work";
      sa[3132] = "Need to Consolidate Debt";
      sa[3133] = "Need to Refinance - Please Help";
      sa[3134] = "Need to buy Toyota Truck for Work";
      sa[3135] = "Need to buy one piece of equipment to increase profit of my small business:";
      sa[3136] = "Need to finish our home";
      sa[3137] = "Need to get control of my expenses";
      sa[3138] = "Need to pay high rate credit cards";
      sa[3139] = "Need to pay less for my gas each week";
      sa[3140] = "Need to pay off credit card ";
      sa[3141] = "Need to pay off student expenses at a better rate";
      sa[3142] = "Need to pay rent ASAP!";
      sa[3143] = "Need to payoff CC bills";
      sa[3144] = "Need to payoff credit card";
      sa[3145] = "Need working capital for winter";
      sa[3146] = "Needed";
      sa[3147] = "Needing New Roof and Windows";
      sa[3148] = "Negative Equity Payoff";
      sa[3149] = "Neighborhood";
      sa[3150] = "NelLoan";
      sa[3151] = "Never Again ";
      sa[3152] = "Never See Snow Again";
      sa[3153] = "Never Use Credit Cards Again";
      sa[3154] = "New";
      sa[3155] = "New ";
      sa[3156] = "New Appliances! Fridge, Washer & Dryer";
      sa[3157] = "New Baby";
      sa[3158] = "New Basement";
      sa[3159] = "New Beginning";
      sa[3160] = "New Beginning!";
      sa[3161] = "New Beginning-Out of debt starting 2010";
      sa[3162] = "New Beginnings";
      sa[3163] = "New Bike";
      sa[3164] = "New Business Loan - Working Capital";
      sa[3165] = "New Business Start Up";
      sa[3166] = "New Cabinets for my KITCHEN";
      sa[3167] = "New California Attorney Wants 2 Lower Interest Rate on High Interest Credit Card";
      sa[3168] = "New Car";
      sa[3169] = "New Card";
      sa[3170] = "New Career Loan";
      sa[3171] = "New Computer";
      sa[3172] = "New Consolidation";
      sa[3173] = "New Direction";
      sa[3174] = "New Driveway";
      sa[3175] = "New Furance";
      sa[3176] = "New Garage";
      sa[3177] = "New Heater & A/C";
      sa[3178] = "New Heating and A/C System";
      sa[3179] = "New Home";
      sa[3180] = "New Home Buyer";
      sa[3181] = "New Home Expenses and Investment Funding";
      sa[3182] = "New Home Improvements";
      sa[3183] = "New House";
      sa[3184] = "New House stuff";
      sa[3185] = "New Job = Paying Debt";
      sa[3186] = "New Kitchen";
      sa[3187] = "New Life";
      sa[3188] = "New Life Loan";
      sa[3189] = "New Living Space - Home Values Rising";
      sa[3190] = "New Loan";
      sa[3191] = "New MBA Wanting to Consolidate Debt";
      sa[3192] = "New Patent Lawyer @Fortune 10 Co. consolidating CCs from Undergrad & Law School";
      sa[3193] = "New Personal Business Initiative ";
      sa[3194] = "New Project";
      sa[3195] = "New Restaurant In Boca Raton FL";
      sa[3196] = "New Roof";
      sa[3197] = "New Roof and Gutters";
      sa[3198] = "New Roof for Family";
      sa[3199] = "New Start";
      sa[3200] = "New Technology for My Small Business";
      sa[3201] = "New Travel Trailer";
      sa[3202] = "New Work Truck";
      sa[3203] = "New Year, New Beginnings";
      sa[3204] = "New Year, New Finances! ";
      sa[3205] = "New York Banker Working on Wall St.";
      sa[3206] = "New beginning";
      sa[3207] = "New car!";
      sa[3208] = "New job, New State, Great opportunity";
      sa[3209] = "New kitchen";
      sa[3210] = "New roof for house";
      sa[3211] = "NewBeginning";
      sa[3212] = "NewOrganic";
      sa[3213] = "Newlyweds Working to Financial Freedom";
      sa[3214] = "Newlyweds consolidating debt NO DQ'S!";
      sa[3215] = "Next Car - Let me pay you, not a bank!";
      sa[3216] = "Nick and Laura's Loan";
      sa[3217] = "Nicole";
      sa[3218] = "Nicole - payoff";
      sa[3219] = "Nissan Car Loan";
      sa[3220] = "No Debt Loan";
      sa[3221] = "No More Credit Cards";
      sa[3222] = "No More Credit Cards!!";
      sa[3223] = "No More Credit Cards!!!";
      sa[3224] = "No more";
      sa[3225] = "No more Credit cards";
      sa[3226] = "No more credit cards";
      sa[3227] = "Noelle's debt consol.";
      sa[3228] = "Nordstrom Card";
      sa[3229] = "Not Interested in Paying Interest to Banks Anymore";
      sa[3230] = "Not so new car";
      sa[3231] = "November Loan ";
      sa[3232] = "Nurse needs kitchen with a pulse";
      sa[3233] = "OCC Financing";
      sa[3234] = "Observation Loan";
      sa[3235] = "October Living Loan";
      sa[3236] = "October Wedding";
      sa[3237] = "Off to work I go";
      sa[3238] = "Oil & Gas Investment";
      sa[3239] = "Olf Veldhuisloan";
      sa[3240] = "On My Last Year of College";
      sa[3241] = "On My Way";
      sa[3242] = "On My Way to Being Debt Free!";
      sa[3243] = "On the Road To Getting Out of Debt";
      sa[3244] = "On the mend in 2010";
      sa[3245] = "On the path to debt free";
      sa[3246] = "On the road to being debt free";
      sa[3247] = "One Bill Debt Consolidation - Thank You";
      sa[3248] = "One Debt";
      sa[3249] = "One Payment Alone!";
      sa[3250] = "One Payment Only";
      sa[3251] = "One Payment Per Month";
      sa[3252] = "One Payment YAY!";
      sa[3253] = "One Payment for credit cards";
      sa[3254] = "One and Only ";
      sa[3255] = "One debt, less mess!";
      sa[3256] = "One loan Only";
      sa[3257] = "One more year till Graduation";
      sa[3258] = "One payment";
      sa[3259] = "Online loan";
      sa[3260] = "Online seller of American Made Boots";
      sa[3261] = "Operating Capital";
      sa[3262] = "Operation Credit Cards Blow";
      sa[3263] = "Operation Freedom";
      sa[3264] = "Operation: ROCK the HOUSE";
      sa[3265] = "Operation:bye-bye";
      sa[3266] = "Opportunity";
      sa[3267] = "Opportunity to Succeed";
      sa[3268] = "Organic snack company expansion";
      sa[3269] = "Organize";
      sa[3270] = "Other";
      sa[3271] = "Other Loan";
      sa[3272] = "Other loan";
      sa[3273] = "Our Credit Card Debt";
      sa[3274] = "Our Debt";
      sa[3275] = "Our Engagement Ring";
      sa[3276] = "Our Family's Future";
      sa[3277] = "Our Home";
      sa[3278] = "Our little wedding!";
      sa[3279] = "Out from under credit cards";
      sa[3280] = "Out of Debt Loan";
      sa[3281] = "Out of debt loan";
      sa[3282] = "Outdoor Recreation Equipment";
      sa[3283] = "Outright Ownership for my car";
      sa[3284] = "Outstanding Balances";
      sa[3285] = "PA to CA";
      sa[3286] = "PAULA'SDEBTLOAN";
      sa[3287] = "PAULSLOAN";
      sa[3288] = "PAY DOWN LOAN";
      sa[3289] = "PAY FOR PORTION OF MY MASTERS";
      sa[3290] = "PAY MY CAR PAYMENT IN FULL..";
      sa[3291] = "PAY OFF CREDIT CARD ";
      sa[3292] = "PAY OFF EVERYTHING  1 PAYMENT ONLY";
      sa[3293] = "PAY OFF MY DEBT ";
      sa[3294] = "PAY OFF THE GIANTS";
      sa[3295] = "PAYING OFF MY CITICARD";
      sa[3296] = "PAYINGG CREDIT CARDS. PAYING RENT";
      sa[3297] = "PAYOFF";
      sa[3298] = "PEACE  OF  MIND";
      sa[3299] = "PERSONAL";
      sa[3300] = "PERSONAL LN";
      sa[3301] = "PERSONAL LOAN";
      sa[3302] = "PERSONAL STI";
      sa[3303] = "PERUNS REFINANCE";
      sa[3304] = "PHEV Conversion Loan";
      sa[3305] = "PHILLIPANDDEBORAGH";
      sa[3306] = "PL 2010";
      sa[3307] = "PLEASE HELP-NEED HOPE";
      sa[3308] = "PMF ";
      sa[3309] = "POFF";
      sa[3310] = "POOL";
      sa[3311] = "PREVAILING";
      sa[3312] = "PRODUCTIVE TALENTS";
      sa[3313] = "PRSNL LN";
      sa[3314] = "PSU Card";
      sa[3315] = "PT Android Developer-Craigslist Reseller";
      sa[3316] = "PURCHASE & SELL CARS";
      sa[3317] = "PURCHASE OF RENTAL PROPERTY IN INDY";
      sa[3318] = "Packleader's Dough";
      sa[3319] = "Page2010";
      sa[3320] = "Paid off credit debt";
      sa[3321] = "Paradise Vacation package";
      sa[3322] = "Paramedic School ";
      sa[3323] = "Parent Attend Navy Induction";
      sa[3324] = "Parents";
      sa[3325] = "Parents vacation";
      sa[3326] = "Partner Buy Out";
      sa[3327] = "Partnership Bridge Loan";
      sa[3328] = "Party Store";
      sa[3329] = "Passat";
      sa[3330] = "Path to Freedom";
      sa[3331] = "Path to freedom from credit card debt";
      sa[3332] = "Pathfinder";
      sa[3333] = "Patio Gazebo";
      sa[3334] = "Patio/Landscaping/Fence";
      sa[3335] = "Patrick's Loan";
      sa[3336] = "Patti's Debt consolidation";
      sa[3337] = "Paul";
      sa[3338] = "Paula's Loan";
      sa[3339] = "Pay 4 credit cards with high interest";
      sa[3340] = "Pay Back Citi Card";
      sa[3341] = "Pay Bills";
      sa[3342] = "Pay Bills/Home Improvement";
      sa[3343] = "Pay CC";
      sa[3344] = "Pay Credit Cards";
      sa[3345] = "Pay Credit Cards with High Interest Rate";
      sa[3346] = "Pay Day Loan";
      sa[3347] = "Pay Debt Faster";
      sa[3348] = "Pay Down Debt";
      sa[3349] = "Pay It Off";
      sa[3350] = "Pay Off";
      sa[3351] = "Pay Off - Consolidation";
      sa[3352] = "Pay Off All Credit Cards";
      sa[3353] = "Pay Off CC";
      sa[3354] = "Pay Off CC Debt Used to Start Business";
      sa[3355] = "Pay Off CCs";
      sa[3356] = "Pay Off Card";
      sa[3357] = "Pay Off Chase Card Loan";
      sa[3358] = "Pay Off Consumer Credit Cards";
      sa[3359] = "Pay Off Credit Card Debt";
      sa[3360] = "Pay Off Credit Cards";
      sa[3361] = "Pay Off Credit Cards and Personal Loans";
      sa[3362] = "Pay Off Debt";
      sa[3363] = "Pay Off HIGH Interest Rate Credit Cards";
      sa[3364] = "Pay Off High Interest Credit Cards";
      sa[3365] = "Pay Off High Interest Credit Cards.";
      sa[3366] = "Pay Off High Interest Debt";
      sa[3367] = "Pay Off High-APR Credit Card";
      sa[3368] = "Pay Off Higher APR";
      sa[3369] = "Pay Off Medical Expenses";
      sa[3370] = "Pay Off Some Smaller Credit Cards";
      sa[3371] = "Pay Off The Plastic For Good";
      sa[3372] = "Pay Off a Higher Rate Credit Card";
      sa[3373] = "Pay Off the High Interest Credit Cards";
      sa[3374] = "Pay Uncle Sam";
      sa[3375] = "Pay YOU instead of Chase & CitiBank";
      sa[3376] = "Pay back Dad and consolidate credit card";
      sa[3377] = "Pay bills and fix car";
      sa[3378] = "Pay bills to get ahead";
      sa[3379] = "Pay credit card off";
      sa[3380] = "Pay credit cards";
      sa[3381] = "Pay credit cards off ";
      sa[3382] = "Pay down high interest cards";
      sa[3383] = "Pay for Last Class in Grad School";
      sa[3384] = "Pay for education";
      sa[3385] = "Pay grandmother's estate";
      sa[3386] = "Pay if off";
      sa[3387] = "Pay it DOWN!";
      sa[3388] = "Pay it Down";
      sa[3389] = "Pay it Off";
      sa[3390] = "Pay it off FINALLY!";
      sa[3391] = "Pay it off!";
      sa[3392] = "Pay my taxes";
      sa[3393] = "Pay of CC's";
      sa[3394] = "Pay of Credit Cards and Household improv";
      sa[3395] = "Pay of House";
      sa[3396] = "Pay of high apr credit cards";
      sa[3397] = "Pay of my debt for good! ";
      sa[3398] = "Pay off";
      sa[3399] = "Pay off 2 High interest Credit cards";
      sa[3400] = "Pay off 2011";
      sa[3401] = "Pay off A  High Interest Rate Loan";
      sa[3402] = "Pay off American Express";
      sa[3403] = "Pay off B of A card";
      sa[3404] = "Pay off Bills and Education";
      sa[3405] = "Pay off CC";
      sa[3406] = "Pay off CC debt";
      sa[3407] = "Pay off Centennial Bank";
      sa[3408] = "Pay off Chase";
      sa[3409] = "Pay off Citi card";
      sa[3410] = "Pay off College Debts ";
      sa[3411] = "Pay off Credit Cards";
      sa[3412] = "Pay off Credit Cards ";
      sa[3413] = "Pay off Credit Cards with High rates";
      sa[3414] = "Pay off Credit cards loan";
      sa[3415] = "Pay off Debt";
      sa[3416] = "Pay off Debt, Help kid ready for college";
      sa[3417] = "Pay off Discover";
      sa[3418] = "Pay off Divorce Settlement";
      sa[3419] = "Pay off High Interest Credit Card";
      sa[3420] = "Pay off Home Depot and First line";
      sa[3421] = "Pay off Loan";
      sa[3422] = "Pay off Medical Bills & Be Debt Free!";
      sa[3423] = "Pay off Renovations Loan";
      sa[3424] = "Pay off Target Visa";
      sa[3425] = "Pay off Tax Bill";
      sa[3426] = "Pay off Yamaha and cc card";
      sa[3427] = "Pay off a credit card";
      sa[3428] = "Pay off a private car loan";
      sa[3429] = "Pay off accounts";
      sa[3430] = "Pay off bills";
      sa[3431] = "Pay off car";
      sa[3432] = "Pay off card";
      sa[3433] = "Pay off cards";
      sa[3434] = "Pay off cc debt";
      sa[3435] = "Pay off credit bills";
      sa[3436] = "Pay off credit card";
      sa[3437] = "Pay off credit card debt";
      sa[3438] = "Pay off credit card with LC's lower rate";
      sa[3439] = "Pay off credit cards";
      sa[3440] = "Pay off credit cards & student loans";
      sa[3441] = "Pay off credit cards *credit score 712*";
      sa[3442] = "Pay off credit lines & increase mktng.";
      sa[3443] = "Pay off current Lending Club Loan";
      sa[3444] = "Pay off debt";
      sa[3445] = "Pay off debt and fix truck";
      sa[3446] = "Pay off debt and start buisness";
      sa[3447] = "Pay off dept";
      sa[3448] = "Pay off dept for wedding";
      sa[3449] = "Pay off fast";
      sa[3450] = "Pay off high APR credit";
      sa[3451] = "Pay off high apr on CitiFinancial";
      sa[3452] = "Pay off high interest";
      sa[3453] = "Pay off high interest credit cards";
      sa[3454] = "Pay off high interest debt!";
      sa[3455] = "Pay off high interest rate credit card";
      sa[3456] = "Pay off high intrest ";
      sa[3457] = "Pay off high-end credit cards";
      sa[3458] = "Pay off higher rate credit cards";
      sa[3459] = "Pay off intro credit card rate... From 2.9% for the first year to 20.99 % in Jul";
      sa[3460] = "Pay off my Credit Cards";
      sa[3461] = "Pay off my Debt";
      sa[3462] = "Pay off my cards!";
      sa[3463] = "Pay off my credit card";
      sa[3464] = "Pay off my debt";
      sa[3465] = "Pay off personal debt ";
      sa[3466] = "Pay off remaining credit card debt";
      sa[3467] = "Pay off revolving debt";
      sa[3468] = "Pay off small credit card debt";
      sa[3469] = "Pay off some outstanding loans";
      sa[3470] = "Pay off this card!";
      sa[3471] = "Pay off variable rate credit card";
      sa[3472] = "Pay on Credit card";
      sa[3473] = "Pay the Bills";
      sa[3474] = "Pay those Cards Off!!";
      sa[3475] = "Pay-Off Credit Card";
      sa[3476] = "Pay-off high interest credit cards.";
      sa[3477] = "PayOff";
      sa[3478] = "PayOffDebt";
      sa[3479] = "PayThatCreditCardOFF!!!";
      sa[3480] = "Payback";
      sa[3481] = "Paydown Loan";
      sa[3482] = "Payed Off!";
      sa[3483] = "Payinf off credit cards";
      sa[3484] = "Paying  off debts ";
      sa[3485] = "Paying Cash for Primary Residence";
      sa[3486] = "Paying Down Credit Card Debt";
      sa[3487] = "Paying Down Debts";
      sa[3488] = "Paying Down Higher Rate Credit Cards";
      sa[3489] = "Paying Down my Debt";
      sa[3490] = "Paying My Taxes and Started School";
      sa[3491] = "Paying Off A Family Loan";
      sa[3492] = "Paying Off Credit Cards For Better Rate";
      sa[3493] = "Paying Off NYU";
      sa[3494] = "Paying Off a Loan in 3 years vs. 10";
      sa[3495] = "Paying Uncle Sam";
      sa[3496] = "Paying back dad";
      sa[3497] = "Paying bills";
      sa[3498] = "Paying down my debt";
      sa[3499] = "Paying down the credit cards";
      sa[3500] = "Paying for Grad School";
      sa[3501] = "Paying for my last semester of college";
      sa[3502] = "Paying it back";
      sa[3503] = "Paying of medical and small card bills";
      sa[3504] = "Paying off Credit Card";
      sa[3505] = "Paying off Credit Card Debt";
      sa[3506] = "Paying off Credit Card balances";
      sa[3507] = "Paying off Credit Cards";
      sa[3508] = "Paying off High Interest Credit Cards";
      sa[3509] = "Paying off Mum's surgery";
      sa[3510] = "Paying off a high interest credit card";
      sa[3511] = "Paying off a personal loan";
      sa[3512] = "Paying off all credit cards";
      sa[3513] = "Paying off bills";
      sa[3514] = "Paying off consumer debt";
      sa[3515] = "Paying off corporate card";
      sa[3516] = "Paying off credit card";
      sa[3517] = "Paying off credit cards";
      sa[3518] = "Paying off debt";
      sa[3519] = "Paying off debt & Summer school";
      sa[3520] = "Paying off financial oversight.";
      sa[3521] = "Paying off high % credit";
      sa[3522] = "Paying off high interest CC debt";
      sa[3523] = "Paying off high interest credit card";
      sa[3524] = "Paying off high interest credit cards ";
      sa[3525] = "Paying off high interest debt";
      sa[3526] = "Paying off higher interest credit cards";
      sa[3527] = "Paying off my Credit Card Debt";
      sa[3528] = "Paying off my Credit Cards";
      sa[3529] = "Paying off my Credit Cards!";
      sa[3530] = "Paying off my credit card";
      sa[3531] = "Paying off my credit card debt";
      sa[3532] = "Paying off my credit cards";
      sa[3533] = "Paying off my son's dept...";
      sa[3534] = "Paying off those credit cards FOR GOOD!";
      sa[3535] = "Payoff";
      sa[3536] = "Payoff ";
      sa[3537] = "Payoff & convert into one monthly paymen";
      sa[3538] = "Payoff Amex Blue and Discover";
      sa[3539] = "Payoff CCs with lower interest rate";
      sa[3540] = "Payoff Credit Card Debt";
      sa[3541] = "Payoff Credit Cards";
      sa[3542] = "Payoff Credit cards at better rate";
      sa[3543] = "Payoff Debt";
      sa[3544] = "Payoff Debt ";
      sa[3545] = "Payoff Debt Loan";
      sa[3546] = "Payoff Flooring and appliance loans";
      sa[3547] = "Payoff HELOC to refi house";
      sa[3548] = "Payoff High Interest Debt";
      sa[3549] = "Payoff House Short Sale";
      sa[3550] = "Payoff ING PLOC";
      sa[3551] = "Payoff Juniper Card";
      sa[3552] = "Payoff Loan";
      sa[3553] = "Payoff Medical Bills";
      sa[3554] = "Payoff Personal debt";
      sa[3555] = "Payoff TSP";
      sa[3556] = "Payoff The cards";
      sa[3557] = "Payoff Uncle Sam";
      sa[3558] = "Payoff credit";
      sa[3559] = "Payoff credit cards 2008";
      sa[3560] = "Payoff debts plus some extra cash out";
      sa[3561] = "Payoff high interest credit card";
      sa[3562] = "Payoff time";
      sa[3563] = "Payoff wrapped in one";
      sa[3564] = "Payoff. Live Better";
      sa[3565] = "Payoffdiscover";
      sa[3566] = "Payout";
      sa[3567] = "Paypal Credit Loan";
      sa[3568] = "Peace of Mind";
      sa[3569] = "Pediatrician Office";
      sa[3570] = "Pensacola rental units";
      sa[3571] = "Pension";
      sa[3572] = "Perfect credit 740 beacon";
      sa[3573] = "Perfection";
      sa[3574] = "Person Loan";
      sa[3575] = "Personal";
      sa[3576] = "Personal ";
      sa[3577] = "Personal Auto Loan";
      sa[3578] = "Personal Auto Repair ";
      sa[3579] = "Personal Bridge Loan";
      sa[3580] = "Personal Business Loan";
      sa[3581] = "Personal CC";
      sa[3582] = "Personal Car Loan";
      sa[3583] = "Personal Consid";
      sa[3584] = "Personal Consolidate";
      sa[3585] = "Personal Consolidation";
      sa[3586] = "Personal Debt Consol";
      sa[3587] = "Personal Debt Consolidation";
      sa[3588] = "Personal Debt Loan";
      sa[3589] = "Personal Financial Clearing";
      sa[3590] = "Personal Growth";
      sa[3591] = "Personal Improvement Loan";
      sa[3592] = "Personal Investment";
      sa[3593] = "Personal Investment / Asset Purchase";
      sa[3594] = "Personal LOan";
      sa[3595] = "Personal Line of Credit";
      sa[3596] = "Personal Loan";
      sa[3597] = "Personal Loan ";
      sa[3598] = "Personal Loan (Not School Related)";
      sa[3599] = "Personal Loan - Credit Card Consolidation";
      sa[3600] = "Personal Loan 10-22-11";
      sa[3601] = "Personal Loan 11/2009";
      sa[3602] = "Personal Loan 2010";
      sa[3603] = "Personal Loan AS";
      sa[3604] = "Personal Loan DQ";
      sa[3605] = "Personal Loan One";
      sa[3606] = "Personal Loan for BOA Debt";
      sa[3607] = "Personal Loan for College Educatio";
      sa[3608] = "Personal Loan for Education";
      sa[3609] = "Personal Loan for Family Event";
      sa[3610] = "Personal Loan for Purchase of a Honda";
      sa[3611] = "Personal Loan for RV (trailer)";
      sa[3612] = "Personal Loan for Ricks Tuition";
      sa[3613] = "Personal Loan for Teacher";
      sa[3614] = "Personal Loan for a Master's Program";
      sa[3615] = "Personal Loan for moving";
      sa[3616] = "Personal Loan to Consolidate Debt";
      sa[3617] = "Personal Loan to Purchase a Truck";
      sa[3618] = "Personal Loan to Refinance Debt";
      sa[3619] = "Personal Loan1";
      sa[3620] = "Personal LoanSep2011";
      sa[3621] = "Personal Needs";
      sa[3622] = "Personal and Family Loan";
      sa[3623] = "Personal debt consolidation";
      sa[3624] = "Personal debt consolidation loan";
      sa[3625] = "Personal events";
      sa[3626] = "Personal expenses";
      sa[3627] = "Personal legal fees";
      sa[3628] = "Personal loan";
      sa[3629] = "Personal loan ";
      sa[3630] = "Personal loan for collector car";
      sa[3631] = "Personal loan for engagement/wedding";
      sa[3632] = "Personal needs";
      sa[3633] = "Personal purchase";
      sa[3634] = "Personal-1";
      sa[3635] = "Personal/Medical Expenses";
      sa[3636] = "PersonalLoan";
      sa[3637] = "PersonalP";
      sa[3638] = "Personal\\Debt\\Home Imp Loan";
      sa[3639] = "Personel loan";
      sa[3640] = "Personnel loan";
      sa[3641] = "Pet Business";
      sa[3642] = "Pete and Lauras Wedding";
      sa[3643] = "Pete's Home Improvement Loan";
      sa[3644] = "Petropolis";
      sa[3645] = "Pharmacist Credit Card Refinance Loan";
      sa[3646] = "Phase III Improvements";
      sa[3647] = "Pheonix ";
      sa[3648] = "Philippines";
      sa[3649] = "Phoenix";
      sa[3650] = "Phoenix2011";
      sa[3651] = "Photo-venture!";
      sa[3652] = "Pick me!  Pick me!  Pick me!";
      sa[3653] = "Pick me, pick me!";
      sa[3654] = "Piece of mind ";
      sa[3655] = "Pizza Conica Loan";
      sa[3656] = "Planning to pay off in less than 3 yrs";
      sa[3657] = "Plastic";
      sa[3658] = "Plastic Surgery";
      sa[3659] = "Plastic Surgery Financing";
      sa[3660] = "Playing catchup / paying off cards";
      sa[3661] = "Please & Thank - you!!";
      sa[3662] = "Please Get Us Out of Debt";
      sa[3663] = "Please Help Me Eliminate High Interest Credit!";
      sa[3664] = "Please Send Me to World Cup 2010";
      sa[3665] = "Please help lower monthly payments!";
      sa[3666] = "Please help me become debt & worry free";
      sa[3667] = "Please help me get out of credit card debt";
      sa[3668] = "Please help me pay high APR% card off.";
      sa[3669] = "Plumbing Repair";
      sa[3670] = "Plumbing Repairs";
      sa[3671] = "Polyaspatric Protective Coatings";
      sa[3672] = "Pool";
      sa[3673] = "Pool Cleaning System";
      sa[3674] = "Pool Construction Loan";
      sa[3675] = "Pool Installation";
      sa[3676] = "Pool Liner";
      sa[3677] = "Pool Loan";
      sa[3678] = "Pool Renovation";
      sa[3679] = "Pool Time";
      sa[3680] = "Pool Update";
      sa[3681] = "Pool and Pay off American Express";
      sa[3682] = "Pool and Spa";
      sa[3683] = "Pool landscaping";
      sa[3684] = "Pool loan";
      sa[3685] = "Pool needs finishing";
      sa[3686] = "Pool renovation";
      sa[3687] = "Pool repair";
      sa[3688] = "Popup Camper";
      sa[3689] = "Posh Promotions";
      sa[3690] = "Positioning";
      sa[3691] = "Positive Choice";
      sa[3692] = "Positive Results Loan";
      sa[3693] = "Posojilo";
      sa[3694] = "Post College Credit Card Refinance";
      sa[3695] = "Post-Graduate Internship Funding";
      sa[3696] = "Post-Graduation Credit Consolidation";
      sa[3697] = "Postal";
      sa[3698] = "Poulsbo";
      sa[3699] = "Pre-Consulting Travel";
      sa[3700] = "Prefer the stability of a fixed rate";
      sa[3701] = "Pregnant and need a foundation!";
      sa[3702] = "Prep Property To Become Rental";
      sa[3703] = "Preparing home for sale";
      sa[3704] = "Price Loan";
      sa[3705] = "Prius";
      sa[3706] = "Privacy Needed";
      sa[3707] = "Private Seller Auto Loan.";
      sa[3708] = "Production camera, tripod and lav mics";
      sa[3709] = "Professional Ballet Dancer Website";
      sa[3710] = "Professional Expansion";
      sa[3711] = "Project 1";
      sa[3712] = "Project 2011";
      sa[3713] = "Project Debt Free!";
      sa[3714] = "Promised Pay";
      sa[3715] = "Promote music Album";
      sa[3716] = "Promotional Products Business";
      sa[3717] = "Property Investment";
      sa[3718] = "Property Loan";
      sa[3719] = "Property Management";
      sa[3720] = "Property Purchase and Repair";
      sa[3721] = "Prosperity";
      sa[3722] = "Proven Borrower - Consolidating School Debt";
      sa[3723] = "Puerto Vallarta";
      sa[3724] = "Purchase";
      sa[3725] = "Purchase Ford Bronco";
      sa[3726] = "Purchase bike";
      sa[3727] = "Purchase car for daughter in college";
      sa[3728] = "Purchase inventory for resale";
      sa[3729] = "Purchase of second vehicle to reduce carbon footprint and fuel costs";
      sa[3730] = "Purchase year of service credit in TRS";
      sa[3731] = "Purchased a house at looking to improve";
      sa[3732] = "Purchasing Engagement Ring";
      sa[3733] = "Purchasing Two Used Cars";
      sa[3734] = "Purchasing a Laundromat";
      sa[3735] = "Purchasing a commuting Bike ";
      sa[3736] = "Purchasing an established business";
      sa[3737] = "Purpose is to pay federal income taxes";
      sa[3738] = "Pursuing my passion - Club DJing";
      sa[3739] = "Putting it all together";
      sa[3740] = "Quality Home improvement systems";
      sa[3741] = "Queen Ann";
      sa[3742] = "Quick 1,000 will payback without doubt";
      sa[3743] = "Quick Car Financing";
      sa[3744] = "Quick Fix";
      sa[3745] = "Quicker the better";
      sa[3746] = "Quickrepay";
      sa[3747] = "Quilter needs your help";
      sa[3748] = "R&RLoan";
      sa[3749] = "RATE REDUCTION LOAN";
      sa[3750] = "RAY'S LOAN";
      sa[3751] = "RB Loan";
      sa[3752] = "RC51";
      sa[3753] = "RCs";
      sa[3754] = "RDW DC Loan";
      sa[3755] = "RE Investment Property at 62% of Value";
      sa[3756] = "RE-DO LOAN";
      sa[3757] = "REC";
      sa[3758] = "RECOVERY MODE";
      sa[3759] = "REFI";
      sa[3760] = "REFINANCING";
      sa[3761] = "REI Repayment";
      sa[3762] = "RELIEF LOAN";
      sa[3763] = "REM";
      sa[3764] = "RETIRED US ARMY CW4";
      sa[3765] = "RIP Civic";
      sa[3766] = "RJD";
      sa[3767] = "RKP";
      sa[3768] = "RLJ - Payoff Citi & Part of Chase";
      sa[3769] = "RLOC Payoff Loan";
      sa[3770] = "RM Resort";
      sa[3771] = "RMRVACLN10";
      sa[3772] = "ROBERTS LOAN";
      sa[3773] = "ROLL CONSOLIDATION";
      sa[3774] = "RRJ3";
      sa[3775] = "RRJLoan";
      sa[3776] = "RV";
      sa[3777] = "RV LOAN";
      sa[3778] = "RV Loan";
      sa[3779] = "RV loan";
      sa[3780] = "Rabbit Year Loan";
      sa[3781] = "Racked up the cards, making them go away";
      sa[3782] = "Radu C";
      sa[3783] = "Rafael Consolidation";
      sa[3784] = "Raintree";
      sa[3785] = "Rainy Day";
      sa[3786] = "Raising the Debt Ceiling";
      sa[3787] = "Ral";
      sa[3788] = "Ralph 2010";
      sa[3789] = "Ralphs bike";
      sa[3790] = "Ram 50";
      sa[3791] = "Randy's Debt Elimination";
      sa[3792] = "Randys car";
      sa[3793] = "Ranger17";
      sa[3794] = "Rare motorcycle purchase";
      sa[3795] = "Rate Reduction";
      sa[3796] = "Ratha's loan";
      sa[3797] = "Ratherpaypeoplebackthanbanks";
      sa[3798] = "Raven and Wayne";
      sa[3799] = "Ray's personal loan";
      sa[3800] = "Re consolidation";
      sa[3801] = "Re-Fi $15K Credit Card";
      sa[3802] = "Re-financing";
      sa[3803] = "ReFi CC";
      sa[3804] = "Ready to Move";
      sa[3805] = "Ready to be Debt Free";
      sa[3806] = "Ready to go from Borrower to Investor!";
      sa[3807] = "Ready to knock all debt out of the park.";
      sa[3808] = "Real Estate Investor Loan";
      sa[3809] = "Real Estate Loan";
      sa[3810] = "RealEstateInvestmentEducation";
      sa[3811] = "Reason for loan";
      sa[3812] = "Reasonable Auto Loan";
      sa[3813] = "Rebuild";
      sa[3814] = "Recent College Grad Moving to Job Locati";
      sa[3815] = "Recent College Grad with New Job";
      sa[3816] = "Recent grad needs to move to Chicago!";
      sa[3817] = "Recent graduate getting out of debt";
      sa[3818] = "Recently Engaged wants to pay off CC's";
      sa[3819] = "Recently had a baby...";
      sa[3820] = "Recession Help";
      sa[3821] = "Recession-friendly Loan";
      sa[3822] = "Recon2012";
      sa[3823] = "Recovery";
      sa[3824] = "Reduce CC Rate Loan";
      sa[3825] = "Reduce Cost of Debt";
      sa[3826] = "Reduce Credit Card Debt";
      sa[3827] = "Reduce Credit Card Interest Rate";
      sa[3828] = "Reduce high APR on 2 CC's & Consolidate";
      sa[3829] = "Reducing Credit Card at a better rate";
      sa[3830] = "Reducing high rate debt";
      sa[3831] = "Reestablishing Finance";
      sa[3832] = "Reeve";
      sa[3833] = "Referee 1978";
      sa[3834] = "Refi";
      sa[3835] = "Refi And payoff Credit card debt";
      sa[3836] = "Refi Cards/Debts";
      sa[3837] = "Refi Credit Card";
      sa[3838] = "Refi Credit Card for Better Rate for Indiv. w/ Excellent FICO and 6-fig income";
      sa[3839] = "Refi Credit Cards";
      sa[3840] = "Refi Refi Refi - I'd Rather Pay You Then The Bank";
      sa[3841] = "Refi for lower rate on existing debt";
      sa[3842] = "Refi loan";
      sa[3843] = "Refi to Lower Rate";
      sa[3844] = "Refinace Credit Cards";
      sa[3845] = "Refinacing Lending Club Loan";
      sa[3846] = "Refinance";
      sa[3847] = "Refinance & Consolidate my CCs";
      sa[3848] = "Refinance A High Interest Credit Card";
      sa[3849] = "Refinance BoA Rate";
      sa[3850] = "Refinance Credit Card";
      sa[3851] = "Refinance Credit Card Debt";
      sa[3852] = "Refinance Credit Card Debt to Lower Rate";
      sa[3853] = "Refinance Credit Cards.";
      sa[3854] = "Refinance Debt";
      sa[3855] = "Refinance Debt Consolidation";
      sa[3856] = "Refinance Increasing Credit Card Rates";
      sa[3857] = "Refinance Lending Loan";
      sa[3858] = "Refinance Loan";
      sa[3859] = "Refinance Mastercard";
      sa[3860] = "Refinance My Cards";
      sa[3861] = "Refinance My Credit card";
      sa[3862] = "Refinance Student CC's ";
      sa[3863] = "Refinance Unexpected Expense";
      sa[3864] = "Refinance WIndows";
      sa[3865] = "Refinance a car and pay off credit cards";
      sa[3866] = "Refinance credit card";
      sa[3867] = "Refinance credit card debt";
      sa[3868] = "Refinance credit cards at a better rate";
      sa[3869] = "Refinance exiting home loan.";
      sa[3870] = "Refinance high balance cards, help investors prosper";
      sa[3871] = "Refinance my High interest credit cards ";
      sa[3872] = "Refinance my car";
      sa[3873] = "Refinance of Debt";
      sa[3874] = "Refinance of credit card";
      sa[3875] = "Refinance to improve finances";
      sa[3876] = "Refinance your credit debt into one";
      sa[3877] = "Refinance/Consolidate Before Grad School";
      sa[3878] = "RefinanceVisaCardDebt";
      sa[3879] = "Refinancing";
      sa[3880] = "Refinancing CC Debt";
      sa[3881] = "Refinancing Credit Card";
      sa[3882] = "Refinancing Credit Card Debt";
      sa[3883] = "Refinancing Credit Card at a better rate";
      sa[3884] = "Refinancing Loan";
      sa[3885] = "Refinancing Motorcycle/ Purchase Vehicle";
      sa[3886] = "Refinancing car to restructure debt";
      sa[3887] = "Refinancing credit card";
      sa[3888] = "Refinancing credit card debt ";
      sa[3889] = "Refinancing getting out of debt";
      sa[3890] = "Refinancing high interest credit card, never late on a payment";
      sa[3891] = "Refinancing my Life";
      sa[3892] = "Refinancing my US credit card debt";
      sa[3893] = "Refinancing my high-interest Credit Card";
      sa[3894] = "Refinancing personal loan";
      sa[3895] = "Refinancing wedding debt.";
      sa[3896] = "Refinancing with better rate";
      sa[3897] = "Refinancinig Debt, Never Missed Payments";
      sa[3898] = "Reflective";
      sa[3899] = "Refresh";
      sa[3900] = "Region 12 education";
      sa[3901] = "Registered nurse wanting no credit debt anymore!";
      sa[3902] = "Rehab Complete";
      sa[3903] = "Reinvest as a lender";
      sa[3904] = "Relative Issues";
      sa[3905] = "Relaxation Spa Investment";
      sa[3906] = "Reliable Borrower";
      sa[3907] = "Reliable Car";
      sa[3908] = "Reliable borrower with excellent credit history";
      sa[3909] = "Reliable-Hardworking-25yr old Female With Proven Loan Repayment";
      sa[3910] = "Reliance999";
      sa[3911] = "Relief 2011";
      sa[3912] = "Relief from ridiculous interest rate";
      sa[3913] = "Relisted-Working Capital For Family Business";
      sa[3914] = "Relocating";
      sa[3915] = "Relocation Expenses";
      sa[3916] = "Relocation Loan";
      sa[3917] = "Relocation Maintain Credit";
      sa[3918] = "Relocation expenses";
      sa[3919] = "Relocation for GREAT Career Advancement";
      sa[3920] = "Relocation for new ENGINEERING Grad";
      sa[3921] = "Relocation loan";
      sa[3922] = "Remaining Balance";
      sa[3923] = "Remaining Senior Plan Loan";
      sa[3924] = "Remodel";
      sa[3925] = "Remodel kitchen,dining, and living room";
      sa[3926] = "Remodel my kitchen";
      sa[3927] = "Remodel of Apartment";
      sa[3928] = "Remodeled Basement";
      sa[3929] = "Remodeling";
      sa[3930] = "Remodeling of Rental property";
      sa[3931] = "Remodeling the Basement";
      sa[3932] = "Remote Site Paramedicine Contractor";
      sa[3933] = "Renewable Energy";
      sa[3934] = "Renovation";
      sa[3935] = "Renovation of apartment in two family";
      sa[3936] = "Rental Property purchase";
      sa[3937] = "Rental repair";
      sa[3938] = "Reorganized my debt";
      sa[3939] = "Repairs";
      sa[3940] = "Repay 401K loan";
      sa[3941] = "Repaying a 401K Loan";
      sa[3942] = "Repeater";
      sa[3943] = "Replace Air Conditioning";
      sa[3944] = "Replace HVAC";
      sa[3945] = "Replace High APR";
      sa[3946] = "Replace blown outboard engine";
      sa[3947] = "Replacement Windows - High Rate Card";
      sa[3948] = "Request";
      sa[3949] = "Request to Consolidate debt";
      sa[3950] = "Reroof";
      sa[3951] = "Research On Global Warming";
      sa[3952] = "Resident Physician Needs Wedding Help ";
      sa[3953] = "Responsible ";
      sa[3954] = "Responsible Borrower Seeking to Simplify";
      sa[3955] = "Responsible College Grad to Refinance CC";
      sa[3956] = "Responsible Debt Consolidation";
      sa[3957] = "Responsible Loan II";
      sa[3958] = "Responsible individual consolidating";
      sa[3959] = "Responsible professional trying to pay o";
      sa[3960] = "Responsible, Never Late, Trustworthy";
      sa[3961] = "Responsibly getting out of debt.";
      sa[3962] = "Rest & Relaxation";
      sa[3963] = "Restaurant Loan";
      sa[3964] = "Restoration";
      sa[3965] = "Restructuring Debt & Home Repair";
      sa[3966] = "Retail store on Nantucket inventory reup";
      sa[3967] = "Retirement funding";
      sa[3968] = "Retooling my finances";
      sa[3969] = "Reunion Trip";
      sa[3970] = "Revolving Debt";
      sa[3971] = "Revolving Debt Consolidation, high income, stable industry";
      sa[3972] = "Richard's loan";
      sa[3973] = "Ricks Rate Reduction";
      sa[3974] = "Rid the budget of 'Prosper'";
      sa[3975] = "Ride";
      sa[3976] = "Rigging Up";
      sa[3977] = "Ring";
      sa[3978] = "Rising Meadow Home Improvement";
      sa[3979] = "Road to Wellness and Freedom";
      sa[3980] = "Road to debt freedom";
      sa[3981] = "Road to fiscal responsibility";
      sa[3982] = "Road to freedom loan";
      sa[3983] = "Rob";
      sa[3984] = "Rob's cashflow helper";
      sa[3985] = "Robbie";
      sa[3986] = "Robby";
      sa[3987] = "Robert's Car";
      sa[3988] = "Robert's Loan Request";
      sa[3989] = "Rock Climbing and Mental Health Therapy";
      sa[3990] = "Roland debt consolodation";
      sa[3991] = "Rolex";
      sa[3992] = "RomyPJ Funds";
      sa[3993] = "Roof";
      sa[3994] = "Roof Repair";
      sa[3995] = "Roof Replacement";
      sa[3996] = "Roof Replacement/C.C. repay";
      sa[3997] = "Roof repair, ";
      sa[3998] = "Roofing Loan";
      sa[3999] = "Roofing Project";
      sa[4000] = "Rooster Time";
      sa[4001] = "Rosa & Alberto Wedding 2010";
      sa[4002] = "Rosemary Katherine Elizabeth";
      sa[4003] = "RossLendingClubLoan";
      sa[4004] = "Roy";
      sa[4005] = "Ruben's Loan";
      sa[4006] = "Rudy-loan";
      sa[4007] = "Russ' debt reduction";
      sa[4008] = "Rx7 build";
      sa[4009] = "Ryan";
      sa[4010] = "Ryan's Consolidation Loan";
      sa[4011] = "S-Debt Loan";
      sa[4012] = "S2000";
      sa[4013] = "SARA";
      sa[4014] = "SB Loan for start-up expenses";
      sa[4015] = "SBA down payment";
      sa[4016] = "SCHOOL";
      sa[4017] = "SCOOTER";
      sa[4018] = "SECOND LOAN";
      sa[4019] = "SELEN";
      sa[4020] = "SELL INVESTMENT HOME";
      sa[4021] = "SF GIANTS";
      sa[4022] = "SHEILA'S POOL";
      sa[4023] = "SKB Personal Loan";
      sa[4024] = "SPA LOAN";
      sa[4025] = "SPLASH";
      sa[4026] = "SPORTS STUFF";
      sa[4027] = "SQL 2010 R2";
      sa[4028] = "SRAMV";
      sa[4029] = "STOPIT";
      sa[4030] = "STUDENT";
      sa[4031] = "SUCCESS IN OK";
      sa[4032] = "SURVIVE";
      sa[4033] = "SWIMMING POOL";
      sa[4034] = "Safe, Smart Investment";
      sa[4035] = "Salgood with a plan";
      sa[4036] = "Sallie Mae Refinance";
      sa[4037] = "Salon Loan";
      sa[4038] = "Salon Supplies";
      sa[4039] = "Sam's Consolidation Loan";
      sa[4040] = "Sam's Loan";
      sa[4041] = "Sams Credit Card Payoff Loan";
      sa[4042] = "Sarah's Debt Consolidation";
      sa[4043] = "Sarah's Loan";
      sa[4044] = "Satin Black R6";
      sa[4045] = "Save money loan";
      sa[4046] = "Save my Son";
      sa[4047] = "Save my house";
      sa[4048] = "Saving money on interest";
      sa[4049] = "Saving on Interest";
      sa[4050] = "Sawmill upgrade";
      sa[4051] = "School";
      sa[4052] = "School Loan";
      sa[4053] = "School Payment";
      sa[4054] = "School expenses";
      sa[4055] = "School fees, tuition, and other expenses";
      sa[4056] = "School is Over";
      sa[4057] = "School/ Work Supplies";
      sa[4058] = "Scooter";
      sa[4059] = "Scooter loan";
      sa[4060] = "Scooter, Save the Gas";
      sa[4061] = "Scott";
      sa[4062] = "Scott Loan";
      sa[4063] = "Scott's Consolidation";
      sa[4064] = "Scott's Loan";
      sa[4065] = "Scottish Wedding";
      sa[4066] = "Scotts Loan";
      sa[4067] = "Scout";
      sa[4068] = "Scriabin";
      sa[4069] = "Seans Loan";
      sa[4070] = "Search Technology";
      sa[4071] = "Seawood";
      sa[4072] = "Second Chance";
      sa[4073] = "Second LC Loan and Debt Consolidation";
      sa[4074] = "Second Mortgage and Moving Expenses";
      sa[4075] = "Second home";
      sa[4076] = "Secondary car";
      sa[4077] = "Secure Basement Loan";
      sa[4078] = "Secure Home Owner Cleaning Up Debt";
      sa[4079] = "Secure Property I";
      sa[4080] = "Security Deposit";
      sa[4081] = "Security Deposit Holdover";
      sa[4082] = "Seeking Down Payment and Working Capital";
      sa[4083] = "Seeking a loan for Wedding Expenses";
      sa[4084] = "Seeking better rate on my credit card";
      sa[4085] = "Sell this house loan";
      sa[4086] = "Semper Fi";
      sa[4087] = "Sensible Woman Seeks Alternative";
      sa[4088] = "Serendipity";
      sa[4089] = "Seths Loan";
      sa[4090] = "Shannon's Loan";
      sa[4091] = "Shannon's loan";
      sa[4092] = "Shannon's personal loan";
      sa[4093] = "Shawn's Loan";
      sa[4094] = "She got it all.";
      sa[4095] = "Shell's Goal";
      sa[4096] = "Shop";
      sa[4097] = "Shop/Toy Garage";
      sa[4098] = "Short Road To Debt Free";
      sa[4099] = "Short Term";
      sa[4100] = "Short Term Auto Loan";
      sa[4101] = "Short Term Cash Need";
      sa[4102] = "Short Term Loan Needed for Student";
      sa[4103] = "Short Term Loan needed ";
      sa[4104] = "Short Term Secured Loan";
      sa[4105] = "Short Term Wedding Loan";
      sa[4106] = "Short term loan";
      sa[4107] = "Short-Term Cash Issues";
      sa[4108] = "Short-Term Wedding Loan";
      sa[4109] = "Short-term loan for inheritance";
      sa[4110] = "Showvan Loan";
      sa[4111] = "Shreding the cards for good";
      sa[4112] = "Siding/Deck";
      sa[4113] = "Signature Loan";
      sa[4114] = "Silkysmooth";
      sa[4115] = "Silverleaf";
      sa[4116] = "Silverwing";
      sa[4117] = "Simple Debt Consolidation Loan";
      sa[4118] = "Simple Loan";
      sa[4119] = "Simplifying My Finances";
      sa[4120] = "Simplifying life to focus more on school";
      sa[4121] = "Singapore";
      sa[4122] = "Single Loan";
      sa[4123] = "Single, Grt Credit, 4 yrs at job, Need to Save 400 Month Interest on Tax Debt!";
      sa[4124] = "Sir Isaac";
      sa[4125] = "Sliced Up Credit Cards";
      sa[4126] = "Small Business";
      sa[4127] = "Small Business Expanding";
      sa[4128] = "Small Business Investment";
      sa[4129] = "Small Business Loan";
      sa[4130] = "Small Business Loan - The Brees Way";
      sa[4131] = "Small Business Loan / Full Time Employed ($80k) year";
      sa[4132] = "Small Business Owner Seeks Funds";
      sa[4133] = "Small Business equipment";
      sa[4134] = "Small Business loan";
      sa[4135] = "Small Debt Consolidation Loan";
      sa[4136] = "Small business ";
      sa[4137] = "Small business Loan";
      sa[4138] = "Small business loan";
      sa[4139] = "Small business working capital";
      sa[4140] = "Small investment loan";
      sa[4141] = "Small kitchen remodel";
      sa[4142] = "Small_Business";
      sa[4143] = "Small_Business Loan";
      sa[4144] = "Smart";
      sa[4145] = "Smart Brabus Cabriolet";
      sa[4146] = "Smart Loan";
      sa[4147] = "Smart Move";
      sa[4148] = "Smiles";
      sa[4149] = "Smith Loan";
      sa[4150] = "Snapper";
      sa[4151] = "Snowmobile";
      sa[4152] = "Social Entrepreneur";
      sa[4153] = "Social Justice Return for Support ";
      sa[4154] = "Software Purchase for Business";
      sa[4155] = "Solar Energy Loan";
      sa[4156] = "Solar Panels";
      sa[4157] = "Solar Panels for my House in SF";
      sa[4158] = "Solid Income - Resident Doctor wants Engagement Ring";
      sa[4159] = "Solid Investment";
      sa[4160] = "Sookie's";
      sa[4161] = "Soon to be Grad Student Needs Lower APR!";
      sa[4162] = "SophieLoan";
      sa[4163] = "Sound Investment";
      sa[4164] = "Spa Purchase";
      sa[4165] = "Spain/France Loan";
      sa[4166] = "Spanish Trace Remodel";
      sa[4167] = "Special Assessment - Condo";
      sa[4168] = "Special Ed teacher looking to get out of debt";
      sa[4169] = "Special Offer to Reinvest in Lending Club Loans";
      sa[4170] = "Speed bump on my journey to success";
      sa[4171] = "Spenser's refinancing loan";
      sa[4172] = "Sport Bike";
      sa[4173] = "Spread costs over time";
      sa[4174] = "Spring Wedding Expenses";
      sa[4175] = "Sprinkler System";
      sa[4176] = "Stabilization Plan";
      sa[4177] = "Stain Remover";
      sa[4178] = "Stanford MedStudent SeekingInvestment$$";
      sa[4179] = "Star Street Renovation";
      sa[4180] = "Start";
      sa[4181] = "Start Federal Contracting Firm";
      sa[4182] = "Start My Life";
      sa[4183] = "Start Up Funds";
      sa[4184] = "Start Up Opportunity";
      sa[4185] = "Start to 2010";
      sa[4186] = "Start up Business loan";
      sa[4187] = "Starting Over";
      sa[4188] = "Starting Over after Divorce";
      sa[4189] = "Starting business after military";
      sa[4190] = "Starting over ";
      sa[4191] = "Startup Money for Small Business";
      sa[4192] = "Startup Vacation Rental Buis";
      sa[4193] = "Startup and Equipment";
      sa[4194] = "Startup business in Miami, Fl";
      sa[4195] = "Station";
      sa[4196] = "Station Park Honda";
      sa[4197] = "Statusfilms";
      sa[4198] = "Steady Employee Consolodating Debt";
      sa[4199] = "Steiner Loan";
      sa[4200] = "Step in the right direction";
      sa[4201] = "Steve personal ";
      sa[4202] = "Steve's Debt";
      sa[4203] = "Steve's Loan";
      sa[4204] = "Steven";
      sa[4205] = "Stinky Money";
      sa[4206] = "Stinky's";
      sa[4207] = "Stock Loan";
      sa[4208] = "Stop paying interest to Chase";
      sa[4209] = "Stop sinking!";
      sa[4210] = "Strategic Debt Control";
      sa[4211] = "Strategy Stock Trading Algorithm";
      sa[4212] = "Stressed";
      sa[4213] = "Strong Financial Wife";
      sa[4214] = "Structured";
      sa[4215] = "Stuck with High Interest Credit Cards";
      sa[4216] = "Student Credit Debt";
      sa[4217] = "Student Debt Consolidation";
      sa[4218] = "Student Loan";
      sa[4219] = "Student Loan ";
      sa[4220] = "Student Loan - need help";
      sa[4221] = "Student Loan Consolidation";
      sa[4222] = "Student Loan for Living Expenses";
      sa[4223] = "Student debt elimination";
      sa[4224] = "Student loan";
      sa[4225] = "Student loans and car payment";
      sa[4226] = "Study Abroad ";
      sa[4227] = "Successful Professional seeking loan for lowering APRs and preparing for wedding";
      sa[4228] = "Sugar Daddy";
      sa[4229] = "Suitable Select";
      sa[4230] = "Sum up Bills";
      sa[4231] = "Summer 2010";
      sa[4232] = "Summer 2010 Repairs";
      sa[4233] = "Summer 2011 Loan ";
      sa[4234] = "Summer Financial Emergency Recovery";
      sa[4235] = "Summer stuff";
      sa[4236] = "Summer time blues";
      sa[4237] = "Sundin";
      sa[4238] = "Sunny Day";
      sa[4239] = "Sunroom Loan";
      sa[4240] = "Super Model";
      sa[4241] = "Supplemental Income";
      sa[4242] = "Surgery";
      sa[4243] = "Surgery Loan";
      sa[4244] = "Surgery Procedure";
      sa[4245] = "Surgery for my Dad & Dental for Me";
      sa[4246] = "Surprise Engagement";
      sa[4247] = "Survival";
      sa[4248] = "Susan";
      sa[4249] = "Susan's Home Necessities";
      sa[4250] = "Suzuki Bike";
      sa[4251] = "Svoboda";
      sa[4252] = "Swimming Pool";
      sa[4253] = "Swimming Pool 2011";
      sa[4254] = "Swimming Pool Loan";
      sa[4255] = "Swimming pool";
      sa[4256] = "Sydney";
      sa[4257] = "T Loan";
      sa[4258] = "T2 Loan";
      sa[4259] = "T4";
      sa[4260] = "TAX DEBT";
      sa[4261] = "TAXES";
      sa[4262] = "TGM VACATION";
      sa[4263] = "THIS ONE";
      sa[4264] = "TIRED OF MAKING BANKS RICH!";
      sa[4265] = "TL1000";
      sa[4266] = "TM's Credit Card Consolidation Loan";
      sa[4267] = "TNT Moving";
      sa[4268] = "TS Debt Consolidation";
      sa[4269] = "TSP Payment";
      sa[4270] = "TULES(pronounced Too-Lees) FROZEN YOGURT";
      sa[4271] = "Tabya's Debt Consolidation";
      sa[4272] = "Tacoma";
      sa[4273] = "Tacoma Loan";
      sa[4274] = "Take Care of High Interest Credit Cards";
      sa[4275] = "Take the Banker's Profits";
      sa[4276] = "Taking Control";
      sa[4277] = "Taking back my life.";
      sa[4278] = "Taking charge";
      sa[4279] = "Taking over established business ";
      sa[4280] = "Taking the First Step by Consolidating";
      sa[4281] = "TammyDebt";
      sa[4282] = "Tansmission Replacement";
      sa[4283] = "Target";
      sa[4284] = "Target Visa goodbye!";
      sa[4285] = "Tax Payment Loan";
      sa[4286] = "Tax Payoff";
      sa[4287] = "Tax and Debt Consolidation";
      sa[4288] = "Tax loan/debt repayment";
      sa[4289] = "Tax payment";
      sa[4290] = "Taxes";
      sa[4291] = "Taxes and debt consollidation";
      sa[4292] = "Taylor LeAnn";
      sa[4293] = "Teacher says goodbye credit cards!";
      sa[4294] = "Techie Debt Consolidation Loan";
      sa[4295] = "Ted's Loan";
      sa[4296] = "Temporary";
      sa[4297] = "Temporary small business loan";
      sa[4298] = "Testing Lending Club";
      sa[4299] = "Texas";
      sa[4300] = "Texas loan";
      sa[4301] = "Thank you! Credit Card Consolidation";
      sa[4302] = "Thank you! Thank you! Thank you!";
      sa[4303] = "Thanks for the Help!";
      sa[4304] = "The Austin Photography Group";
      sa[4305] = "The Beginning of the Rest of My Life";
      sa[4306] = "The Blessing Loan";
      sa[4307] = "The Destroyer Financial Freedom Loan";
      sa[4308] = "The Final Countdown";
      sa[4309] = "The Freedom Loan";
      sa[4310] = "The Future!";
      sa[4311] = "The Golden Bubbles are recording a record";
      sa[4312] = "The Last Stand";
      sa[4313] = "The Light At The End of the Tunnel";
      sa[4314] = "The Loan";
      sa[4315] = "The Meadows";
      sa[4316] = "The New Loan";
      sa[4317] = "The Payment Plan";
      sa[4318] = "The Renew You loan";
      sa[4319] = "The Right Way";
      sa[4320] = "The Trees";
      sa[4321] = "The Wine Barrel upstart";
      sa[4322] = "The end of insanity";
      sa[4323] = "The first loan";
      sa[4324] = "The light";
      sa[4325] = "The one";
      sa[4326] = "Therapy Swim Spa";
      sa[4327] = "Three Years to Free";
      sa[4328] = "Three lovely acres with nice house";
      sa[4329] = "Tickets Advertising";
      sa[4330] = "Tightening It Up in 2010";
      sa[4331] = "Tim";
      sa[4332] = "Tim's Credit Card refinance";
      sa[4333] = "Time Share";
      sa[4334] = "Time for Upgrades ";
      sa[4335] = "Time for an upgrade :)";
      sa[4336] = "Time to Eliminate Credit Cards";
      sa[4337] = "Time to consolidate and leave ridiculous creditors in the dust";
      sa[4338] = "Time to get out of debt for Jonathan";
      sa[4339] = "Timeshare";
      sa[4340] = "Timeshare Payoff";
      sa[4341] = "Timeshare loan";
      sa[4342] = "Timmy Consolidation Loan";
      sa[4343] = "Tire Business Expansion";
      sa[4344] = "Tired of Paying Credit Card Corporations";
      sa[4345] = "Tired of crazy credit car interest rates";
      sa[4346] = "Tired of credit crunch!";
      sa[4347] = "Tires";
      sa[4348] = "Title-HI";
      sa[4349] = "To Be Free";
      sa[4350] = "To Hell With Dept";
      sa[4351] = "To Invest In Lending Club Notes";
      sa[4352] = "To Promote Global Business Pages";
      sa[4353] = "To become a partner for a NightClub Thanks";
      sa[4354] = "To better my life: debt consolidation";
      sa[4355] = "To buy a Quad";
      sa[4356] = "To buy a foreclosed home, fix it and flip it";
      sa[4357] = "To buy the perfect franchise for us.";
      sa[4358] = "To get out from under ...";
      sa[4359] = "To heck with Credit Cards - you get my interest!";
      sa[4360] = "To help my brother ";
      sa[4361] = "To import beauty supplies from CHINA";
      sa[4362] = "To lower my Intrest Rate";
      sa[4363] = "To pay down debt and assist recent move ";
      sa[4364] = "To pay off credit card";
      sa[4365] = "To pay off my debt finally";
      sa[4366] = "To pay off the credit card loan";
      sa[4367] = "To rent out basement & getting my CPA";
      sa[4368] = "To rid of my credit debt :( 11K";
      sa[4369] = "To start a bead business";
      sa[4370] = "Toby's Truck";
      sa[4371] = "Todd pay it down";
      sa[4372] = "Todds-zero-chase-plan";
      sa[4373] = "Tony";
      sa[4374] = "Toolbox";
      sa[4375] = "Totally Debt Free";
      sa[4376] = "Toxic credit card loan";
      sa[4377] = "Track bike";
      sa[4378] = "Tractor";
      sa[4379] = "Tracy";
      sa[4380] = "Trading business";
      sa[4381] = "Trailer Loan";
      sa[4382] = "Trailmanor";
      sa[4383] = "Trails";
      sa[4384] = "Transfer Ownership of My Boat";
      sa[4385] = "Transferring from credit card due to significant APR increase";
      sa[4386] = "Transition Resource";
      sa[4387] = "Transportation Needs";
      sa[4388] = "Transportation Transition to New Job";
      sa[4389] = "Travel Expenses";
      sa[4390] = "Travel Loan to Visit Grandfather";
      sa[4391] = "Travel Resorts of America";
      sa[4392] = "Travel Resorts of America TNC23";
      sa[4393] = "Travel Trailer";
      sa[4394] = "Travel Trailer - Seeing the Sites";
      sa[4395] = "Triathlete";
      sa[4396] = "Tridiva";
      sa[4397] = "Trim down the credit cards.";
      sa[4398] = "Trip for family travel to India";
      sa[4399] = "TripleFreedom";
      sa[4400] = "Triumph";
      sa[4401] = "Triumph Bobber";
      sa[4402] = "Triumph Bonneville";
      sa[4403] = "Trouble";
      sa[4404] = "Truck";
      sa[4405] = "Truck Loan";
      sa[4406] = "Trucking";
      sa[4407] = "Trucking investment, 60-day profit";
      sa[4408] = "Trying My Best";
      sa[4409] = "Trying to Afford the Dream";
      sa[4410] = "Trying to become debt free";
      sa[4411] = "Trying to consolidate debt";
      sa[4412] = "Trying to get back on track....";
      sa[4413] = "Trying to get things in order";
      sa[4414] = "Trying to pay off high interest cards";
      sa[4415] = "Trying to save money.";
      sa[4416] = "Tucson load";
      sa[4417] = "Tuition";
      sa[4418] = "Tuition for Grad School";
      sa[4419] = "Tuition for Harvard Extension School";
      sa[4420] = "Tuition for Roosevelt University";
      sa[4421] = "Twenty Eleven Debt Consolidation";
      sa[4422] = "Twinkie";
      sa[4423] = "Two Jobs/Solid Work History";
      sa[4424] = "Two credit cards consolidation";
      sa[4425] = "Two loans into one! Lower Interest Rate!";
      sa[4426] = "Tying the knot (but don't need alot)!";
      sa[4427] = "TylersTractor";
      sa[4428] = "UIC loan ";
      sa[4429] = "UK to US Relo";
      sa[4430] = "UPromise & CitiFinancial Debt";
      sa[4431] = "US CBP";
      sa[4432] = "USRNsuccess";
      sa[4433] = "UTV";
      sa[4434] = "Uncle Sam";
      sa[4435] = "Unexpected Debt!";
      sa[4436] = "Unexpected Expense";
      sa[4437] = "Unexpected Expenses";
      sa[4438] = "Unexpected Expenses/Repairs";
      sa[4439] = "Unexpected Home Repairs";
      sa[4440] = "Unexpected bills";
      sa[4441] = "Unexpected legal expense";
      sa[4442] = "Unique business opportunity that I can<0x92A2CE97CEC8>t pass on<0x92A2CE97CE>_";
      sa[4443] = "Universal";
      sa[4444] = "University essentials";
      sa[4445] = "University of Buffalo Tuition payment";
      sa[4446] = "Unsecured Loan";
      sa[4447] = "Unsecured Loan to High Quality Borrowers";
      sa[4448] = "Unsecured Personal Loan";
      sa[4449] = "Update Kitchen and Bathrooms";
      sa[4450] = "Update my New home";
      sa[4451] = "Updates Needed on Family owned home";
      sa[4452] = "Updating website, increasing inventory";
      sa[4453] = "Upgrade";
      sa[4454] = "Upgrade my furnace to GREEN!";
      sa[4455] = "Upgrades";
      sa[4456] = "Upset with American Express loan";
      sa[4457] = "Upside Down Loan";
      sa[4458] = "Urban Transportation";
      sa[4459] = "Used Auto Loan for son";
      sa[4460] = "Used CC for wifes school,need lower rate";
      sa[4461] = "Used Car ";
      sa[4462] = "Used Car Loan";
      sa[4463] = "Used Car Purchase";
      sa[4464] = "Used Motorcycle";
      sa[4465] = "Used Saab";
      sa[4466] = "Used motorcycle loan";
      sa[4467] = "V 36-Month Loan";
      sa[4468] = "VAC to NH";
      sa[4469] = "VACATION & PAY OFF DEBT";
      sa[4470] = "VALERY";
      sa[4471] = "VAbbate";
      sa[4472] = "VOLVO";
      sa[4473] = "VSG";
      sa[4474] = "VW Loan";
      sa[4475] = "Vacation";
      sa[4476] = "Vacation ";
      sa[4477] = "Vacation & Bday Loan";
      sa[4478] = "Vacation Air";
      sa[4479] = "Vacation Family";
      sa[4480] = "Vacation Loan";
      sa[4481] = "Vacation Loan ";
      sa[4482] = "Vacation/Cash";
      sa[4483] = "Vacation2011";
      sa[4484] = "Van Loan";
      sa[4485] = "Vega";
      sa[4486] = "Vegas Trip";
      sa[4487] = "Vehical Pay Off";
      sa[4488] = "Vehicle";
      sa[4489] = "Vehicle Financing";
      sa[4490] = "Vehicle Maintance";
      sa[4491] = "Vehicle Repair";
      sa[4492] = "Vehicle and ac repair";
      sa[4493] = "Vehicle loan/credit card payoff";
      sa[4494] = "Veronica's 2010 Loan";
      sa[4495] = "Very high income but a little behind.";
      sa[4496] = "Very secure debt consolidation loan";
      sa[4497] = "Vespa Scooter Loan";
      sa[4498] = "Veteran looking to consolidate cards";
      sa[4499] = "Veterinary Expense";
      sa[4500] = "Video Production Equipment Loan";
      sa[4501] = "Villageidiot";
      sa[4502] = "Vineyard Property in NZ - Perfect Timing";
      sa[4503] = "Vinnie";
      sa[4504] = "Virginia Move";
      sa[4505] = "Visa Pay Off";
      sa[4506] = "Visa Payoff";
      sa[4507] = "Visa payoff";
      sa[4508] = "Vivid";
      sa[4509] = "Vivo";
      sa[4510] = "Voice over business expansion.";
      sa[4511] = "Volvo ";
      sa[4512] = "Volvo S40 Refinance";
      sa[4513] = "WANNABE DONE";
      sa[4514] = "WANT TO BE DEBT FREE";
      sa[4515] = "WANTING TO FIX THINGS";
      sa[4516] = "WARREN'S LOAN";
      sa[4517] = "WEDD LOAN";
      sa[4518] = "WEDDING HOPEFUL NEEDS YOUR HELP";
      sa[4519] = "WEDDING NIGHTMARE";
      sa[4520] = "WEDDING/MOVE";
      sa[4521] = "WF CC Payoff";
      sa[4522] = "WF Personal";
      sa[4523] = "WILLYS";
      sa[4524] = "WOODBURNER";
      sa[4525] = "WYOMING";
      sa[4526] = "Wagon";
      sa[4527] = "Waiting for lump sum";
      sa[4528] = "Wake Up";
      sa[4529] = "Wamu Debt";
      sa[4530] = "Wanna be debt free";
      sa[4531] = "Want a Loan For Vacation";
      sa[4532] = "Want to be free from credit card debt";
      sa[4533] = "Want to pay off high intrest cards";
      sa[4534] = "Washington Mutual/Chase Credit Card Debt";
      sa[4535] = "Water System";
      sa[4536] = "We Need a Wedding Loan for that Special Day!";
      sa[4537] = "We are paying for our wedding";
      sa[4538] = "We need to dig ourselves out.  Can you help?";
      sa[4539] = "We would like to buy a mobile home";
      sa[4540] = "Weatherization and Renewable Energy Loan";
      sa[4541] = "Web Design Business Expansion Loan";
      sa[4542] = "Webmedrecords Inc";
      sa[4543] = "Website";
      sa[4544] = "Website Redesign";
      sa[4545] = "Wedding";
      sa[4546] = "Wedding ";
      sa[4547] = "Wedding  ";
      sa[4548] = "Wedding & Consolidation";
      sa[4549] = "Wedding + Debt";
      sa[4550] = "Wedding / Consolidation";
      sa[4551] = "Wedding 7/17/10";
      sa[4552] = "Wedding Costs";
      sa[4553] = "Wedding Costs & Building Credit";
      sa[4554] = "Wedding Debt Consolidation";
      sa[4555] = "Wedding Expense";
      sa[4556] = "Wedding Expense for Responsible Borrower";
      sa[4557] = "Wedding Expenses";
      sa[4558] = "Wedding Expenses--Tying the Knot!";
      sa[4559] = "Wedding Fund";
      sa[4560] = "Wedding Funds";
      sa[4561] = "Wedding Go or Wedding No";
      sa[4562] = "Wedding Loan";
      sa[4563] = "Wedding Loan - 3 year";
      sa[4564] = "Wedding Loan 2011";
      sa[4565] = "Wedding Money";
      sa[4566] = "Wedding Reception";
      sa[4567] = "Wedding Rings";
      sa[4568] = "Wedding Woes";
      sa[4569] = "Wedding and Honeymoon";
      sa[4570] = "Wedding and Honeymoon expenses";
      sa[4571] = "Wedding coming up";
      sa[4572] = "Wedding credit card debt";
      sa[4573] = "Wedding expense";
      sa[4574] = "Wedding expenses";
      sa[4575] = "Wedding expenses for a responsible couple";
      sa[4576] = "Wedding fund and Credit Card Consolidate";
      sa[4577] = "Wedding in August!";
      sa[4578] = "Wedding in Honduras";
      sa[4579] = "Wedding loan";
      sa[4580] = "Wedding loan ";
      sa[4581] = "Wedding payoff";
      sa[4582] = "Wedding ring";
      sa[4583] = "Wedding/Credit Debt";
      sa[4584] = "Wedding/Ring Loan";
      sa[4585] = "Wedding/Studio";
      sa[4586] = "Welding Opportunity";
      sa[4587] = "Well Established Physician";
      sa[4588] = "Well Loan";
      sa[4589] = "Wells";
      sa[4590] = "Wells & Amex Clearance";
      sa[4591] = "Wells Beautiful Home Loan";
      sa[4592] = "Wells Credit Payoff";
      sa[4593] = "Wells/Chase ReFi";
      sa[4594] = "Wendy's Debt Reward";
      sa[4595] = "What's up with Credit Card Interest Rate";
      sa[4596] = "Wheelchair purchase";
      sa[4597] = "Wholesome Purpose";
      sa[4598] = "Wife's turning 30 surprise birthday part";
      sa[4599] = "Will Pay Back";
      sa[4600] = "Willette";
      sa[4601] = "Williams Loan";
      sa[4602] = "Willow";
      sa[4603] = "Wilson";
      sa[4604] = "Win-Win";
      sa[4605] = "Wind Dancer";
      sa[4606] = "Wind Dancing";
      sa[4607] = "Window Loan";
      sa[4608] = "Windows";
      sa[4609] = "Windows keep the heat";
      sa[4610] = "Windows/Weight Loss";
      sa[4611] = "Wipe Out Debts";
      sa[4612] = "Wipe out my Debt!";
      sa[4613] = "Wiping off 6 ccards in 1 lower rate ";
      sa[4614] = "Woodys Loan";
      sa[4615] = "Work Truck";
      sa[4616] = "Working Capital";
      sa[4617] = "Working Capital For Drive Thru ";
      sa[4618] = "Working hard in life pays off. ";
      sa[4619] = "Working on Administrative Degree";
      sa[4620] = "Worthy Debt Consolidation";
      sa[4621] = "Would like to avoid refinancing my home.";
      sa[4622] = "Would like to pay off CC debt faster! ";
      sa[4623] = "Would rather have 1 monthly payment ";
      sa[4624] = "XMAS Dreams";
      sa[4625] = "Xelamed ";
      sa[4626] = "Xmas Club";
      sa[4627] = "Xmas Vacation";
      sa[4628] = "Yamaha R6";
      sa[4629] = "Yamaha TD1B";
      sa[4630] = "Yankees";
      sa[4631] = "Yay England!";
      sa[4632] = "Year 1 $250,000";
      sa[4633] = "Year End 2011";
      sa[4634] = "Year of Weddings";
      sa[4635] = "YoBrax";
      sa[4636] = "Yoga Studio Expansion";
      sa[4637] = "Young Engineer Looking For Home Help";
      sa[4638] = "Young Professional";
      sa[4639] = "Young Professional in Need of Assistance";
      sa[4640] = "Zach's Pre-Blis Loan";
      sa[4641] = "Zakos";
      sa[4642] = "a better life";
      sa[4643] = "a consolidating debt loan";
      sa[4644] = "a loan";
      sa[4645] = "a new start";
      sa[4646] = "a way out";
      sa[4647] = "a&t";
      sa[4648] = "a/c repair loan";
      sa[4649] = "ac repair";
      sa[4650] = "account consolidation and rate reduction";
      sa[4651] = "accounts paid in full";
      sa[4652] = "advancecredit";
      sa[4653] = "aim2010";
      sa[4654] = "air conditioner";
      sa[4655] = "al loan";
      sa[4656] = "aller loan";
      sa[4657] = "amanda";
      sa[4658] = "amazing";
      sa[4659] = "amccar";
      sa[4660] = "america";
      sa[4661] = "amex";
      sa[4662] = "amex and cap off";
      sa[4663] = "amex payoff - macys/costco";
      sa[4664] = "anahuac";
      sa[4665] = "anay";
      sa[4666] = "andre";
      sa[4667] = "angies debt consolidation";
      sa[4668] = "ant3300";
      sa[4669] = "apartment";
      sa[4670] = "apartment remodel";
      sa[4671] = "appliance";
      sa[4672] = "arts game";
      sa[4673] = "atv";
      sa[4674] = "auto";
      sa[4675] = "auto ";
      sa[4676] = "auto Loan";
      sa[4677] = "auto loan";
      sa[4678] = "auto maintenance";
      sa[4679] = "auto repair, citibank fail";
      sa[4680] = "auto repairs";
      sa[4681] = "auto/motorcycle";
      sa[4682] = "awilda79";
      sa[4683] = "b2b";
      sa[4684] = "baby consolidation loan";
      sa[4685] = "baby payoff loan";
      sa[4686] = "back on track";
      sa[4687] = "backontrack";
      sa[4688] = "backontrack2010";
      sa[4689] = "bahamas";
      sa[4690] = "bailout loan";
      sa[4691] = "bank loan";
      sa[4692] = "bank of america";
      sa[4693] = "bank of america pay off ";
      sa[4694] = "basement/bathroom renovation";
      sa[4695] = "basic repairs";
      sa[4696] = "bass boat";
      sa[4697] = "bathroom";
      sa[4698] = "bbantpayoff09";
      sa[4699] = "be debt free";
      sa[4700] = "beavers13";
      sa[4701] = "become debt free";
      sa[4702] = "bedlenov10";
      sa[4703] = "bee business expanding";
      sa[4704] = "best home";
      sa[4705] = "better credit card rates!";
      sa[4706] = "betterrate";
      sa[4707] = "biddygirl";
      sa[4708] = "big purchase";
      sa[4709] = "bigwoods";
      sa[4710] = "bike";
      sa[4711] = "bike payoff";
      sa[4712] = "bill consolidation";
      sa[4713] = "bill help";
      sa[4714] = "bill pay";
      sa[4715] = "bill pay off ";
      sa[4716] = "bill pay offs";
      sa[4717] = "bill payment";
      sa[4718] = "bill payment and auto";
      sa[4719] = "bills";
      sa[4720] = "bills loan";
      sa[4721] = "black chevy truck loan";
      sa[4722] = "blacktop";
      sa[4723] = "bloan";
      sa[4724] = "blue";
      sa[4725] = "blues in C minor";
      sa[4726] = "bmagproperties";
      sa[4727] = "bmw";
      sa[4728] = "boat";
      sa[4729] = "boat, credit";
      sa[4730] = "bobcat";
      sa[4731] = "bobcat and trailer";
      sa[4732] = "bobs loan";
      sa[4733] = "bombdog";
      sa[4734] = "bootsie";
      sa[4735] = "bridge loan";
      sa[4736] = "brighter future";
      sa[4737] = "brit93";
      sa[4738] = "brooklyn";
      sa[4739] = "bug loan";
      sa[4740] = "buggy loan";
      sa[4741] = "buh";
      sa[4742] = "building a home, will be rent free";
      sa[4743] = "building for the future";
      sa[4744] = "buissness";
      sa[4745] = "bury loan";
      sa[4746] = "business";
      sa[4747] = "business expenses";
      sa[4748] = "business growth loan";
      sa[4749] = "business loan";
      sa[4750] = "business loan ";
      sa[4751] = "business startup";
      sa[4752] = "business1";
      sa[4753] = "buy a used motorcycle";
      sa[4754] = "buying a new computer";
      sa[4755] = "buying engagement ring";
      sa[4756] = "buying existing business";
      sa[4757] = "bye bye credit card bills";
      sa[4758] = "byebyecreditcards";
      sa[4759] = "cabin fix up";
      sa[4760] = "capital one";
      sa[4761] = "car";
      sa[4762] = "car and home repairs";
      sa[4763] = "car expenses";
      sa[4764] = "car financing";
      sa[4765] = "car loan";
      sa[4766] = "car loan refinancing";
      sa[4767] = "car purchase from auto auction.";
      sa[4768] = "car repair";
      sa[4769] = "car repair loan";
      sa[4770] = "car repair, minor house repairs";
      sa[4771] = "car repairs";
      sa[4772] = "car work";
      sa[4773] = "car&cards";
      sa[4774] = "card pay down";
      sa[4775] = "card refinance";
      sa[4776] = "card zero";
      sa[4777] = "cards";
      sa[4778] = "cards b gone";
      sa[4779] = "cards pay off";
      sa[4780] = "carmsmoney";
      sa[4781] = "carrollton";
      sa[4782] = "cart loan";
      sa[4783] = "cash";
      sa[4784] = "cash cushion";
      sa[4785] = "cash flow";
      sa[4786] = "cash for central air";
      sa[4787] = "castle payoff";
      sa[4788] = "cat;s meow";
      sa[4789] = "catch up";
      sa[4790] = "catch up ";
      sa[4791] = "catchuploan";
      sa[4792] = "cc consolidation";
      sa[4793] = "cc debt consolidation";
      sa[4794] = "cc loan";
      sa[4795] = "cc payoff";
      sa[4796] = "cc payoff loan";
      sa[4797] = "cc refinance loan";
      sa[4798] = "ccard";
      sa[4799] = "ccf";
      sa[4800] = "ccpay";
      sa[4801] = "cell phone ";
      sa[4802] = "chads loan";
      sa[4803] = "change";
      sa[4804] = "charger";
      sa[4805] = "chas";
      sa[4806] = "chase";
      sa[4807] = "chill135";
      sa[4808] = "chopper loan";
      sa[4809] = "christian ";
      sa[4810] = "christmas";
      sa[4811] = "christys";
      sa[4812] = "citi - 5424";
      sa[4813] = "citi card";
      sa[4814] = "citi card 8310";
      sa[4815] = "citifi auto";
      sa[4816] = "citifinancial";
      sa[4817] = "classic car";
      sa[4818] = "clean up";
      sa[4819] = "clean up my debt loan";
      sa[4820] = "cleanup";
      sa[4821] = "cliffords truck";
      sa[4822] = "climbing out of my hole";
      sa[4823] = "closing cost";
      sa[4824] = "club";
      sa[4825] = "college";
      sa[4826] = "collene's loan";
      sa[4827] = "collins";
      sa[4828] = "combined";
      sa[4829] = "commitments";
      sa[4830] = "compass flower way";
      sa[4831] = "con debt";
      sa[4832] = "connie1958";
      sa[4833] = "consilidate";
      sa[4834] = "consilidation";
      sa[4835] = "consladate some bills ,house repairs";
      sa[4836] = "consodebt";
      sa[4837] = "consoildation";
      sa[4838] = "consol";
      sa[4839] = "consoldation";
      sa[4840] = "consolidate";
      sa[4841] = "consolidate and payoff credit cards";
      sa[4842] = "consolidate bills";
      sa[4843] = "consolidate car and motorcycle";
      sa[4844] = "consolidate credit cards";
      sa[4845] = "consolidate creditcard debt";
      sa[4846] = "consolidate debt";
      sa[4847] = "consolidate debt ";
      sa[4848] = "consolidate debt & pay taxes";
      sa[4849] = "consolidate debt by loan";
      sa[4850] = "consolidate from moving expenses";
      sa[4851] = "consolidate kenny debt";
      sa[4852] = "consolidate loan";
      sa[4853] = "consolidate my bills, help family membe ";
      sa[4854] = "consolidate my debt";
      sa[4855] = "consolidate my loans";
      sa[4856] = "consolidate outgoing";
      sa[4857] = "consolidate the rest of my debt";
      sa[4858] = "consolidated bills";
      sa[4859] = "consolidated credit cards balances";
      sa[4860] = "consolidated debt";
      sa[4861] = "consolidated loan";
      sa[4862] = "consolidating debt";
      sa[4863] = "consolidating/closing CC accnts.";
      sa[4864] = "consolidation";
      sa[4865] = "consolidation ";
      sa[4866] = "consolidation  loan";
      sa[4867] = "consolidation for future home purchase";
      sa[4868] = "consolidation loan";
      sa[4869] = "consolidation loan 2011";
      sa[4870] = "consolidation of bills ";
      sa[4871] = "consolidation personal finances";
      sa[4872] = "consolidation!!";
      sa[4873] = "consolidor";
      sa[4874] = "consolodate";
      sa[4875] = "consolodate credit cards";
      sa[4876] = "construction loan";
      sa[4877] = "convertible_bmw";
      sa[4878] = "cosolidate";
      sa[4879] = "cr480r";
      sa[4880] = "crazy loans paid off";
      sa[4881] = "credit";
      sa[4882] = "credit card";
      sa[4883] = "credit card ";
      sa[4884] = "credit card clean up";
      sa[4885] = "credit card consolidation";
      sa[4886] = "credit card consolodation";
      sa[4887] = "credit card debit consolidation ";
      sa[4888] = "credit card debt";
      sa[4889] = "credit card debt consol.";
      sa[4890] = "credit card debt consolidation";
      sa[4891] = "credit card debt consolidation loan";
      sa[4892] = "credit card debt elimination ";
      sa[4893] = "credit card emancipation program";
      sa[4894] = "credit card finally gone!!!";
      sa[4895] = "credit card loan";
      sa[4896] = "credit card lower interest";
      sa[4897] = "credit card pay off";
      sa[4898] = "credit card payments";
      sa[4899] = "credit card payoff";
      sa[4900] = "credit card payoff loan";
      sa[4901] = "credit card rate reduction";
      sa[4902] = "credit card redo";
      sa[4903] = "credit card refief";
      sa[4904] = "credit card refinance";
      sa[4905] = "credit card refinance ";
      sa[4906] = "credit card refinance loan";
      sa[4907] = "credit card refinancing";
      sa[4908] = "credit card relief loan";
      sa[4909] = "credit card/dental ";
      sa[4910] = "credit cards";
      sa[4911] = "credit cards debt";
      sa[4912] = "credit cards pay-off";
      sa[4913] = "credit cards refinance";
      sa[4914] = "credit consolidate";
      sa[4915] = "credit consolidation";
      sa[4916] = "credit debt";
      sa[4917] = "credit debt consolidation = freedom";
      sa[4918] = "credit fix";
      sa[4919] = "credit payment";
      sa[4920] = "credit payoff";
      sa[4921] = "credit refi";
      sa[4922] = "credit refinance";
      sa[4923] = "credit refinancing";
      sa[4924] = "credit score";
      sa[4925] = "credit_card";
      sa[4926] = "creditcard payoff";
      sa[4927] = "creditcardconsolidation";
      sa[4928] = "creditcardspayoff";
      sa[4929] = "current customer";
      sa[4930] = "dads";
      sa[4931] = "daleeM";
      sa[4932] = "dan ";
      sa[4933] = "daughter's vehicle";
      sa[4934] = "dc loan";
      sa[4935] = "deb consolidatiom";
      sa[4936] = "debbtloan";
      sa[4937] = "debit consolidation";
      sa[4938] = "debit consolidation and purchases";
      sa[4939] = "debit payoff";
      sa[4940] = "debra58";
      sa[4941] = "debt";
      sa[4942] = "debt ";
      sa[4943] = "debt  consolidation";
      sa[4944] = "debt (credit/pdloans)";
      sa[4945] = "debt Consolidation";
      sa[4946] = "debt con";
      sa[4947] = "debt cons.";
      sa[4948] = "debt consaladation";
      sa[4949] = "debt consalidation";
      sa[4950] = "debt considation";
      sa[4951] = "debt considtion loan";
      sa[4952] = "debt consilidate";
      sa[4953] = "debt consilidation";
      sa[4954] = "debt consl";
      sa[4955] = "debt conso";
      sa[4956] = "debt consol";
      sa[4957] = "debt consol loan";
      sa[4958] = "debt consoladation";
      sa[4959] = "debt console loan";
      sa[4960] = "debt consolidate";
      sa[4961] = "debt consolidating";
      sa[4962] = "debt consolidation";
      sa[4963] = "debt consolidation and home improvements";
      sa[4964] = "debt consolidation loan";
      sa[4965] = "debt consolidation loan ";
      sa[4966] = "debt consolidation, car repair";
      sa[4967] = "debt consolidation/home improvement";
      sa[4968] = "debt consolidation/large purchase";
      sa[4969] = "debt consolidation/personal";
      sa[4970] = "debt consolidation/stupid mistakes";
      sa[4971] = "debt consolidaton";
      sa[4972] = "debt consolodation";
      sa[4973] = "debt cure";
      sa[4974] = "debt debt go away";
      sa[4975] = "debt elimination";
      sa[4976] = "debt eliminator";
      sa[4977] = "debt eradication";
      sa[4978] = "debt for cards";
      sa[4979] = "debt free";
      sa[4980] = "debt free loan";
      sa[4981] = "debt free soon";
      sa[4982] = "debt free!";
      sa[4983] = "debt help";
      sa[4984] = "debt into one ";
      sa[4985] = "debt loan";
      sa[4986] = "debt loan ";
      sa[4987] = "debt management";
      sa[4988] = "debt pay off";
      sa[4989] = "debt payment";
      sa[4990] = "debt payoff";
      sa[4991] = "debt relief";
      sa[4992] = "debt-free";
      sa[4993] = "debt/medical";
      sa[4994] = "debt1";
      sa[4995] = "debt_consolidation";
      sa[4996] = "debt_consolidation loan";
      sa[4997] = "debtcon1";
      sa[4998] = "debtfree";
      sa[4999] = "debtfree2014";
      sa[5000] = "debtfreein36";
      sa[5001] = "debtloan";
      sa[5002] = "debts";
      sa[5003] = "deck loan";
      sa[5004] = "dedt consol";
      sa[5005] = "dedt consolidation";
      sa[5006] = "delete uneccessary debt";
      sa[5007] = "dental";
      sa[5008] = "dental and other repairs";
      sa[5009] = "dental work desperately needed";
      sa[5010] = "dept consolidation";
      sa[5011] = "dept cosolidation";
      sa[5012] = "desert fund";
      sa[5013] = "dg";
      sa[5014] = "diamond";
      sa[5015] = "dimples";
      sa[5016] = "discover";
      sa[5017] = "discover card ";
      sa[5018] = "ditchdigger55";
      sa[5019] = "divorcedandfree";
      sa[5020] = "djbloan";
      sa[5021] = "doing me";
      sa[5022] = "donna";
      sa[5023] = "down payment";
      sa[5024] = "down payment for home";
      sa[5025] = "downpayment ";
      sa[5026] = "dream car";
      sa[5027] = "dreampool";
      sa[5028] = "drive";
      sa[5029] = "driving 4 the future";
      sa[5030] = "dst1361";
      sa[5031] = "dump truck";
      sa[5032] = "durango";
      sa[5033] = "eBay used vehicle loan";
      sa[5034] = "eLoan";
      sa[5035] = "ebn loan";
      sa[5036] = "ec loan";
      sa[5037] = "education  exp";
      sa[5038] = "educational loan";
      sa[5039] = "ehuang79 Loan";
      sa[5040] = "electronics";
      sa[5041] = "emergency expenses";
      sa[5042] = "emergency money";
      sa[5043] = "engagement ring";
      sa[5044] = "engine replacement";
      sa[5045] = "equine purchase";
      sa[5046] = "expanding business";
      sa[5047] = "expenses";
      sa[5048] = "explorer";
      sa[5049] = "fair rate loan";
      sa[5050] = "fence";
      sa[5051] = "fenced in yard/consolodate credit cards ";
      sa[5052] = "fiat spider";
      sa[5053] = "finacial gain";
      sa[5054] = "finances";
      sa[5055] = "financialpeace";
      sa[5056] = "finish basement and credit card consolidation";
      sa[5057] = "finishing PhD & refinancing credit card";
      sa[5058] = "fire the credit card companies";
      sa[5059] = "first loan";
      sa[5060] = "firstpriority";
      sa[5061] = "fishforever";
      sa[5062] = "fisrt one";
      sa[5063] = "fix 2nd floor for an apartment";
      sa[5064] = "fix car";
      sa[5065] = "fix up my home";
      sa[5066] = "fixing my house";
      sa[5067] = "fixing our roof";
      sa[5068] = "floor loan";
      sa[5069] = "for a new apt";
      sa[5070] = "for better home";
      sa[5071] = "for car";
      sa[5072] = "for my car";
      sa[5073] = "ford truck";
      sa[5074] = "freddys loan";
      sa[5075] = "fredsfreedfromdebtloan";
      sa[5076] = "free at last";
      sa[5077] = "freedom";
      sa[5078] = "freedom 09";
      sa[5079] = "freedom loan";
      sa[5080] = "freedom plan";
      sa[5081] = "freedom1";
      sa[5082] = "freedom2011";
      sa[5083] = "freefromdebt16b";
      sa[5084] = "freestyle";
      sa[5085] = "fresh start";
      sa[5086] = "fund for finance";
      sa[5087] = "furnace";
      sa[5088] = "furnace and air";
      sa[5089] = "further debt consolidation";
      sa[5090] = "future";
      sa[5091] = "future freedom";
      sa[5092] = "gabefm";
      sa[5093] = "gap loan";
      sa[5094] = "garage time";
      sa[5095] = "garen";
      sa[5096] = "get back on track";
      sa[5097] = "get organized";
      sa[5098] = "get out  of debt please";
      sa[5099] = "get out of debt";
      sa[5100] = "get out of debt loan";
      sa[5101] = "gethelp";
      sa[5102] = "getoutoftroublefast";
      sa[5103] = "getting rid of credit cards";
      sa[5104] = "getting rid of debt and fixing my car";
      sa[5105] = "gj";
      sa[5106] = "gjme personal loan";
      sa[5107] = "go canes go";
      sa[5108] = "going to the chapel";
      sa[5109] = "gold road";
      sa[5110] = "golf";
      sa[5111] = "gomezbooks";
      sa[5112] = "good dollars";
      sa[5113] = "good work + pmt history for debt consol";
      sa[5114] = "goodbye credit cards";
      sa[5115] = "goodbye debt!";
      sa[5116] = "goodbye high interest";
      sa[5117] = "gouverneur home";
      sa[5118] = "grand kitchen";
      sa[5119] = "grass is greener";
      sa[5120] = "great";
      sa[5121] = "great investment";
      sa[5122] = "green pastures";
      sa[5123] = "gvmeaks";
      sa[5124] = "hARLEY";
      sa[5125] = "happiness";
      sa[5126] = "hard times";
      sa[5127] = "hard working mom";
      sa[5128] = "harvick";
      sa[5129] = "hdp";
      sa[5130] = "heating repair";
      sa[5131] = "help";
      sa[5132] = "help loan";
      sa[5133] = "help me to be able to buy a home";
      sa[5134] = "help pay off debt and fund my business";
      sa[5135] = "helping family";
      sa[5136] = "helping family out";
      sa[5137] = "helping hand";
      sa[5138] = "helping my son";
      sa[5139] = "hfc";
      sa[5140] = "hidey ho";
      sa[5141] = "high credit card ";
      sa[5142] = "high interest credit card payoff ";
      sa[5143] = "high interest debt crusher loan";
      sa[5144] = "high interest rate consolidation";
      sa[5145] = "high interest rate is killing me";
      sa[5146] = "hobby";
      sa[5147] = "hobby shop";
      sa[5148] = "hockey for life";
      sa[5149] = "home";
      sa[5150] = "home addition";
      sa[5151] = "home away ";
      sa[5152] = "home depot";
      sa[5153] = "home expenses";
      sa[5154] = "home improvement";
      sa[5155] = "home improvement ";
      sa[5156] = "home improvement and credit card consoli";
      sa[5157] = "home improvement loan";
      sa[5158] = "home improvement summer 2011";
      sa[5159] = "home improvement...";
      sa[5160] = "home improvementloan";
      sa[5161] = "home improvements";
      sa[5162] = "home improvements for special needs son";
      sa[5163] = "home improvment";
      sa[5164] = "home loan for christmas";
      sa[5165] = "home moving";
      sa[5166] = "home project loan";
      sa[5167] = "home remodeling loan";
      sa[5168] = "home repair";
      sa[5169] = "home repairs";
      sa[5170] = "home_improvement";
      sa[5171] = "homeciti";
      sa[5172] = "homehealth";
      sa[5173] = "honda";
      sa[5174] = "honesty";
      sa[5175] = "hope valley";
      sa[5176] = "hose loan";
      sa[5177] = "house";
      sa[5178] = "house loan";
      sa[5179] = "house renovations";
      sa[5180] = "huereca2";
      sa[5181] = "hvac";
      sa[5182] = "hyitsme780";
      sa[5183] = "i need a car";
      sa[5184] = "i will pay it up fast";
      sa[5185] = "i would like to be debt free";
      sa[5186] = "iFund Traders Professional Trading Course";
      sa[5187] = "iPhone Startup";
      sa[5188] = "improvement";
      sa[5189] = "improvements";
      sa[5190] = "improvment";
      sa[5191] = "income property";
      sa[5192] = "instant";
      sa[5193] = "insulation contractor";
      sa[5194] = "inventory";
      sa[5195] = "investing in education";
      sa[5196] = "investment";
      sa[5197] = "investment for snow removal ";
      sa[5198] = "investment properties rehab";
      sa[5199] = "itgfit";
      sa[5200] = "jacks money";
      sa[5201] = "janet credit card";
      sa[5202] = "jazz";
      sa[5203] = "jbs rehab";
      sa[5204] = "jclarke5878";
      sa[5205] = "jeep motor & tree removal";
      sa[5206] = "jeff's";
      sa[5207] = "jen";
      sa[5208] = "jennifer";
      sa[5209] = "jeremys handyman service";
      sa[5210] = "jessica's loan";
      sa[5211] = "jetski";
      sa[5212] = "jf loan";
      sa[5213] = "joekat loan";
      sa[5214] = "josh ";
      sa[5215] = "july loan";
      sa[5216] = "karlasmedfund";
      sa[5217] = "katana 600";
      sa[5218] = "kb10798";
      sa[5219] = "kb1cna";
      sa[5220] = "kekobe fix";
      sa[5221] = "kevin";
      sa[5222] = "kia spectra";
      sa[5223] = "kill chase";
      sa[5224] = "kirby";
      sa[5225] = "kitchen";
      sa[5226] = "kitchen improvement";
      sa[5227] = "kitchen remodel";
      sa[5228] = "lancer";
      sa[5229] = "land purchase";
      sa[5230] = "landscape improvement";
      sa[5231] = "landscaping and pool";
      sa[5232] = "laptop";
      sa[5233] = "last min.wedding costs for daughter";
      sa[5234] = "laura and greg loan";
      sa[5235] = "lawyer";
      sa[5236] = "leaky roof";
      sa[5237] = "legal expenses";
      sa[5238] = "legal fees";
      sa[5239] = "lending";
      sa[5240] = "lending club";
      sa[5241] = "lending club loan";
      sa[5242] = "lending club loan 1";
      sa[5243] = "lending loan";
      sa[5244] = "lendingclub loan";
      sa[5245] = "lets help others";
      sa[5246] = "life saver";
      sa[5247] = "lifesaver";
      sa[5248] = "live free";
      sa[5249] = "live in camper";
      sa[5250] = "livewire";
      sa[5251] = "living room";
      sa[5252] = "loan";
      sa[5253] = "loan 1";
      sa[5254] = "loan conslidation/medical";
      sa[5255] = "loan consolodation";
      sa[5256] = "loan for car";
      sa[5257] = "loan for maintaining cash equity";
      sa[5258] = "loan for responsible attorney ";
      sa[5259] = "loan liquidation";
      sa[5260] = "loan needed";
      sa[5261] = "loan offer";
      sa[5262] = "loan pay";
      sa[5263] = "loan payoff";
      sa[5264] = "loan request";
      sa[5265] = "loan required to finish a house purchase";
      sa[5266] = "loan to pay off my credit card";
      sa[5267] = "loan to purchase property overseas";
      sa[5268] = "loan2";
      sa[5269] = "loanish";
      sa[5270] = "looking to consolidate higher-interest balances";
      sa[5271] = "looking to remolding kitchen";
      sa[5272] = "louisiana purchase";
      sa[5273] = "love and light loan";
      sa[5274] = "love my home";
      sa[5275] = "lovely";
      sa[5276] = "low risk loan to very credit worth borrower to payoff high interest credit card";
      sa[5277] = "low risk-beachfront-final payment-land value 700,000+";
      sa[5278] = "lower debt";
      sa[5279] = "lower interest rate";
      sa[5280] = "lower interest rate debt consolidation";
      sa[5281] = "lower interest rates";
      sa[5282] = "lower payment";
      sa[5283] = "lower payments";
      sa[5284] = "lower rate";
      sa[5285] = "lower rate  to save money";
      sa[5286] = "lower! rate!";
      sa[5287] = "lowerapr";
      sa[5288] = "lowerinterest";
      sa[5289] = "lowerratemeanseasiertogetoutofdebt!";
      sa[5290] = "m109r";
      sa[5291] = "mac";
      sa[5292] = "main";
      sa[5293] = "major appliance purchase";
      sa[5294] = "major purchase";
      sa[5295] = "major_purchas";
      sa[5296] = "major_purchase";
      sa[5297] = "make my house pretty again!";
      sa[5298] = "making things better";
      sa[5299] = "marines93";
      sa[5300] = "mark";
      sa[5301] = "market business";
      sa[5302] = "matt";
      sa[5303] = "maybe";
      sa[5304] = "maynard debt";
      sa[5305] = "mc trailer";
      sa[5306] = "mcs project";
      sa[5307] = "mdel72";
      sa[5308] = "me";
      sa[5309] = "med pay";
      sa[5310] = "medical";
      sa[5311] = "medical and daughter";
      sa[5312] = "medical and other";
      sa[5313] = "medical bills";
      sa[5314] = "medical debt consolidation";
      sa[5315] = "medical expenses";
      sa[5316] = "medical loan";
      sa[5317] = "medical procedure not covered   ";
      sa[5318] = "medical sec'y";
      sa[5319] = "medical surgery";
      sa[5320] = "meds";
      sa[5321] = "megical";
      sa[5322] = "mercedes";
      sa[5323] = "metal shingle";
      sa[5324] = "metpayoff";
      sa[5325] = "mfdloan2";
      sa[5326] = "mgb1";
      sa[5327] = "mi destino";
      sa[5328] = "mick credit card loan";
      sa[5329] = "mindy's loan";
      sa[5330] = "mine";
      sa[5331] = "minimal debt assistance";
      sa[5332] = "mission: debt free";
      sa[5333] = "mmlloan";
      sa[5334] = "mobile lock";
      sa[5335] = "mom&dadpaid";
      sa[5336] = "money";
      sa[5337] = "money for credit cards";
      sa[5338] = "money in the bank";
      sa[5339] = "money maker";
      sa[5340] = "money saver";
      sa[5341] = "monthly";
      sa[5342] = "mother";
      sa[5343] = "motorcycle";
      sa[5344] = "motorcycle loan";
      sa[5345] = "motorcycle payoff";
      sa[5346] = "motorcycle purpose";
      sa[5347] = "move parents";
      sa[5348] = "moving";
      sa[5349] = "moving is always tough. Help a fellow man out";
      sa[5350] = "moving loan";
      sa[5351] = "moving on";
      sa[5352] = "moving out";
      sa[5353] = "moving/furniture";
      sa[5354] = "ms";
      sa[5355] = "mustanf";
      sa[5356] = "mustang";
      sa[5357] = "my credit loan";
      sa[5358] = "my debt consolidation";
      sa[5359] = "my future";
      sa[5360] = "my home improvement";
      sa[5361] = "my loan";
      sa[5362] = "my loan 3";
      sa[5363] = "my loan mike";
      sa[5364] = "my own buiness";
      sa[5365] = "my own business";
      sa[5366] = "my personal loan";
      sa[5367] = "my vacation";
      sa[5368] = "myfirstloan";
      sa[5369] = "myfreedom";
      sa[5370] = "myhelp";
      sa[5371] = "myroad2freedom";
      sa[5372] = "navi loan";
      sa[5373] = "need a vacation";
      sa[5374] = "need help with moving expenses and would like to stay out of credit card debt.";
      sa[5375] = "need money for college tuition";
      sa[5376] = "need money to cosolidate";
      sa[5377] = "need startup capital for micro-winery ";
      sa[5378] = "need to consildate my bills";
      sa[5379] = "need to get debt paid off quickly";
      sa[5380] = "need to remodel my beauty store";
      sa[5381] = "need wedding money";
      sa[5382] = "nelson debt consolidation";
      sa[5383] = "nelson's  touch";
      sa[5384] = "nes";
      sa[5385] = "neverlate";
      sa[5386] = "new a/c units";
      sa[5387] = "new appearance";
      sa[5388] = "new beginnings ";
      sa[5389] = "new car";
      sa[5390] = "new equipment";
      sa[5391] = "new heat pump";
      sa[5392] = "new kitchen";
      sa[5393] = "new loan";
      sa[5394] = "new me";
      sa[5395] = "new roof";
      sa[5396] = "new start";
      sa[5397] = "new start loan";
      sa[5398] = "new wheels";
      sa[5399] = "nicole 12000";
      sa[5400] = "no more CC";
      sa[5401] = "no more cap1";
      sa[5402] = "no more cc debt";
      sa[5403] = "no more credit cards";
      sa[5404] = "no more monkey";
      sa[5405] = "nodebt";
      sa[5406] = "non-covered medical surgery";
      sa[5407] = "oh Box Gutters!  ok - credit debt too";
      sa[5408] = "ohio";
      sa[5409] = "omar's loan";
      sa[5410] = "one loan easy pay";
      sa[5411] = "one payment";
      sa[5412] = "operating capitol";
      sa[5413] = "operation";
      sa[5414] = "organize";
      sa[5415] = "other";
      sa[5416] = "otis";
      sa[5417] = "out of debt";
      sa[5418] = "pacifica";
      sa[5419] = "patio addition";
      sa[5420] = "paul's debt loan";
      sa[5421] = "pay";
      sa[5422] = "pay back school loan";
      sa[5423] = "pay bills";
      sa[5424] = "pay bills,credit cards and loans";
      sa[5425] = "pay cards";
      sa[5426] = "pay crdit card at lower interest rate";
      sa[5427] = "pay credit cards";
      sa[5428] = "pay credit cards/get bus financing";
      sa[5429] = "pay dept";
      sa[5430] = "pay down debt rh";
      sa[5431] = "pay it all off";
      sa[5432] = "pay it off dave 2011";
      sa[5433] = "pay my bills";
      sa[5434] = "pay my debt";
      sa[5435] = "pay of credit card";
      sa[5436] = "pay off";
      sa[5437] = "pay off ";
      sa[5438] = "pay off all credit";
      sa[5439] = "pay off bills";
      sa[5440] = "pay off cards";
      sa[5441] = "pay off commercebank";
      sa[5442] = "pay off credit card";
      sa[5443] = "pay off credit card debt";
      sa[5444] = "pay off credit cards";
      sa[5445] = "pay off cridit card";
      sa[5446] = "pay off debt";
      sa[5447] = "pay off debt loan";
      sa[5448] = "pay off debts";
      sa[5449] = "pay off high interest debt";
      sa[5450] = "pay off high intrest cards";
      sa[5451] = "pay off my cards";
      sa[5452] = "pay off my credits and loan";
      sa[5453] = "pay off my debt";
      sa[5454] = "pay off old loan and dental work";
      sa[5455] = "pay off small debts & make home improve.";
      sa[5456] = "pay taxes";
      sa[5457] = "pay taxes and credit";
      sa[5458] = "payabillfastr";
      sa[5459] = "payback high interest credit card";
      sa[5460] = "paydown loan";
      sa[5461] = "paydown of debt";
      sa[5462] = "paying bills off";
      sa[5463] = "paying down credit card balance";
      sa[5464] = "paying off credit cards";
      sa[5465] = "paying off higher interest card";
      sa[5466] = "paying off most credit cards";
      sa[5467] = "payinsomebills";
      sa[5468] = "payment";
      sa[5469] = "payment freedom";
      sa[5470] = "payoff";
      sa[5471] = "payoff ";
      sa[5472] = "payoff credit card debt & home improveme";
      sa[5473] = "payoff credit cards";
      sa[5474] = "payoff high interest credit cards";
      sa[5475] = "payoff higher loans";
      sa[5476] = "payoff loan";
      sa[5477] = "payoff munny";
      sa[5478] = "payoff my auto loan";
      sa[5479] = "payoff this debt";
      sa[5480] = "payoff_";
      sa[5481] = "payoffcreditcards";
      sa[5482] = "payoffdiscover";
      sa[5483] = "paythebillsoff";
      sa[5484] = "peace of mind loan";
      sa[5485] = "percival sweetwater ";
      sa[5486] = "perfect loan";
      sa[5487] = "person loan ";
      sa[5488] = "persona help loan";
      sa[5489] = "personal";
      sa[5490] = "personal ";
      sa[5491] = "personal  loan";
      sa[5492] = "personal conslidation loan";
      sa[5493] = "personal consolidation loan";
      sa[5494] = "personal expense";
      sa[5495] = "personal expenses";
      sa[5496] = "personal finances loan";
      sa[5497] = "personal home loan";
      sa[5498] = "personal investment";
      sa[5499] = "personal loan";
      sa[5500] = "personal loan ";
      sa[5501] = "personal loan for machinery";
      sa[5502] = "personal loan to pay medical bills";
      sa[5503] = "personal purchase";
      sa[5504] = "personal utilities";
      sa[5505] = "personal/business";
      sa[5506] = "personal1";
      sa[5507] = "personnal loan";
      sa[5508] = "personnel";
      sa[5509] = "personnel loan";
      sa[5510] = "pesonal";
      sa[5511] = "peterspencervalimont";
      sa[5512] = "please help fix up our home";
      sa[5513] = "pooh";
      sa[5514] = "pool";
      sa[5515] = "pool liner";
      sa[5516] = "pool repair";
      sa[5517] = "possible boat purchase";
      sa[5518] = "prestamo";
      sa[5519] = "property taxes and debt consolidation";
      sa[5520] = "prosperity loan";
      sa[5521] = "prosperitynow!";
      sa[5522] = "puggs loan";
      sa[5523] = "purchase";
      sa[5524] = "purchase loan";
      sa[5525] = "purchase my new home";
      sa[5526] = "purchase work pickup truck";
      sa[5527] = "putittogether";
      sa[5528] = "putting in new kitchen";
      sa[5529] = "quading america";
      sa[5530] = "quick investment";
      sa[5531] = "quick money";
      sa[5532] = "quick pay debt";
      sa[5533] = "rags to riches ";
      sa[5534] = "randy's loan";
      sa[5535] = "re-model bathroom";
      sa[5536] = "real investment";
      sa[5537] = "reconstructive";
      sa[5538] = "recover";
      sa[5539] = "reds on";
      sa[5540] = "reduce";
      sa[5541] = "reduce debt";
      sa[5542] = "refi";
      sa[5543] = "refi credit cards ";
      sa[5544] = "refi my credit cards";
      sa[5545] = "refinance";
      sa[5546] = "refinance credit card";
      sa[5547] = "refinancing LC";
      sa[5548] = "refinancing credit card";
      sa[5549] = "refinancing credit cards";
      sa[5550] = "refurbished";
      sa[5551] = "rehab loan";
      sa[5552] = "reinvest";
      sa[5553] = "relief";
      sa[5554] = "relieve stress";
      sa[5555] = "remaining loan";
      sa[5556] = "remodel";
      sa[5557] = "remodel bathroom";
      sa[5558] = "renovations";
      sa[5559] = "rent helper";
      sa[5560] = "rent money";
      sa[5561] = "rental property";
      sa[5562] = "repair, improvement";
      sa[5563] = "responsible person looking to consolidate debt";
      sa[5564] = "restore classic car";
      sa[5565] = "retired vet";
      sa[5566] = "retirement";
      sa[5567] = "retirement help";
      sa[5568] = "rid of cc debt";
      sa[5569] = "ring";
      sa[5570] = "robert martinez loan";
      sa[5571] = "rocthis";
      sa[5572] = "rolo";
      sa[5573] = "roof";
      sa[5574] = "roof replacement loan";
      sa[5575] = "rose";
      sa[5576] = "roses loan";
      sa[5577] = "rsemerald506";
      sa[5578] = "rv loan";
      sa[5579] = "s2k";
      sa[5580] = "sam personal";
      sa[5581] = "samantha";
      sa[5582] = "sammyc&bluet";
      sa[5583] = "save me";
      sa[5584] = "saving Rico";
      sa[5585] = "savings";
      sa[5586] = "savings account loan";
      sa[5587] = "school";
      sa[5588] = "scoobydoo";
      sa[5589] = "sdk";
      sa[5590] = "second loan";
      sa[5591] = "second try";
      sa[5592] = "secret 7";
      sa[5593] = "secure ride";
      sa[5594] = "ses78";
      sa[5595] = "shawns loan";
      sa[5596] = "short term loan";
      sa[5597] = "siding";
      sa[5598] = "sigs money";
      sa[5599] = "singlemom";
      sa[5600] = "sister's wedding expence ";
      sa[5601] = "skidoo etec";
      sa[5602] = "skipp's redemption";
      sa[5603] = "skiteam7";
      sa[5604] = "small bill";
      sa[5605] = "small business";
      sa[5606] = "small loan";
      sa[5607] = "small_business";
      sa[5608] = "small_business Loan";
      sa[5609] = "snowy mountains";
      sa[5610] = "solar loan";
      sa[5611] = "solid";
      sa[5612] = "spa";
      sa[5613] = "sprinkler";
      sa[5614] = "sproark";
      sa[5615] = "srm";
      sa[5616] = "st loan";
      sa[5617] = "start new";
      sa[5618] = "starting over";
      sa[5619] = "startup";
      sa[5620] = "startup business";
      sa[5621] = "steady helm";
      sa[5622] = "steel building";
      sa[5623] = "steph wedding ring";
      sa[5624] = "steve loan";
      sa[5625] = "stimulus loan";
      sa[5626] = "stockers excavating";
      sa[5627] = "student expenses";
      sa[5628] = "student loan";
      sa[5629] = "student loan debt consolidation";
      sa[5630] = "students";
      sa[5631] = "stupid decisions";
      sa[5632] = "suite";
      sa[5633] = "summer 11";
      sa[5634] = "surgery loan";
      sa[5635] = "surprise expenses";
      sa[5636] = "sv";
      sa[5637] = "sv650";
      sa[5638] = "swimming pool";
      sa[5639] = "syclone";
      sa[5640] = "tagaytay";
      sa[5641] = "take that 29%interest";
      sa[5642] = "tax and loan refi";
      sa[5643] = "taxes";
      sa[5644] = "taxes for house";
      sa[5645] = "taxes/debt consolidation ";
      sa[5646] = "taxloan";
      sa[5647] = "teacher";
      sa[5648] = "teachergrad";
      sa[5649] = "tee_cee";
      sa[5650] = "temporary debt relief";
      sa[5651] = "thankyoucq";
      sa[5652] = "the GREEN Mile";
      sa[5653] = "the green";
      sa[5654] = "the loan";
      sa[5655] = "theroot42";
      sa[5656] = "tillman";
      sa[5657] = "time to get rid of all debt";
      sa[5658] = "tk1";
      sa[5659] = "to better my life";
      sa[5660] = "to buy house";
      sa[5661] = "to buy property";
      sa[5662] = "to consolidate";
      sa[5663] = "to help get things back on track";
      sa[5664] = "to invest in Education";
      sa[5665] = "to pay off debt";
      sa[5666] = "to repay taxes";
      sa[5667] = "todays loan";
      sa[5668] = "together";
      sa[5669] = "tom's fun";
      sa[5670] = "toms boat";
      sa[5671] = "top up";
      sa[5672] = "toyota";
      sa[5673] = "toyotaRV";
      sa[5674] = "tractor";
      sa[5675] = "training-moving expenses";
      sa[5676] = "transfer balance";
      sa[5677] = "trike";
      sa[5678] = "trizz";
      sa[5679] = "truck";
      sa[5680] = "truck loan";
      sa[5681] = "trying to get a lower interest rate";
      sa[5682] = "trying to get back on my feet";
      sa[5683] = "tuit";
      sa[5684] = "tuition";
      sa[5685] = "ultimate";
      sa[5686] = "unsecure";
      sa[5687] = "unsecured personal loan";
      sa[5688] = "update kitchen";
      sa[5689] = "upgrade bathroom ";
      sa[5690] = "upgrading ";
      sa[5691] = "used harley";
      sa[5692] = "vac/remodel";
      sa[5693] = "vacation";
      sa[5694] = "vacation fishing";
      sa[5695] = "vacation load";
      sa[5696] = "vacation loan";
      sa[5697] = "vacation/funeral expense";
      sa[5698] = "vehicle";
      sa[5699] = "vehicle loan";
      sa[5700] = "venture";
      sa[5701] = "verda";
      sa[5702] = "vet expenses and some consolidation";
      sa[5703] = "victor";
      sa[5704] = "victor's loan";
      sa[5705] = "vintage auto purchase";
      sa[5706] = "viola purchase";
      sa[5707] = "visa card";
      sa[5708] = "vlcloan";
      sa[5709] = "vocation";
      sa[5710] = "vw bus";
      sa[5711] = "want my car back loan";
      sa[5712] = "want to have one bill instead of 12";
      sa[5713] = "want to say goodbye to credit cards";
      sa[5714] = "webcap1";
      sa[5715] = "weddedbliss";
      sa[5716] = "wedding";
      sa[5717] = "wedding and honeymoon";
      sa[5718] = "wedding and travel";
      sa[5719] = "wedding budget";
      sa[5720] = "wedding expense";
      sa[5721] = "wedding expense consolidation";
      sa[5722] = "wedding expenses";
      sa[5723] = "wedding fund";
      sa[5724] = "wedding loan";
      sa[5725] = "wedding payoff";
      sa[5726] = "wedding plans";
      sa[5727] = "weddingloot";
      sa[5728] = "welding equipment";
      sa[5729] = "well";
      sa[5730] = "well repair";
      sa[5731] = "west gets payed";
      sa[5732] = "wheels for work";
      sa[5733] = "why pay the banks?";
      sa[5734] = "windows";
      sa[5735] = "winwin";
      sa[5736] = "wisdom teeth";
      sa[5737] = "work";
      sa[5738] = "work shop";
      sa[5739] = "wyatt1981";
      sa[5740] = "x1";
      sa[5741] = "xmas";
      sa[5742] = "xr1200 ";
      sa[5743] = "xxxx";
      sa[5744] = "yc";
      sa[5745] = "you won't let you down! I need help for my credit card debt.";
    }
  }
}
// The class representing column zip_code
class GBM_model_python_1589382591366_1_ColInfo_15 implements java.io.Serializable {
  public static final String[] VALUES = new String[720];
  static {
    GBM_model_python_1589382591366_1_ColInfo_15_0.fill(VALUES);
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_15_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "007xx";
      sa[1] = "010xx";
      sa[2] = "011xx";
      sa[3] = "012xx";
      sa[4] = "013xx";
      sa[5] = "014xx";
      sa[6] = "015xx";
      sa[7] = "016xx";
      sa[8] = "017xx";
      sa[9] = "018xx";
      sa[10] = "019xx";
      sa[11] = "020xx";
      sa[12] = "021xx";
      sa[13] = "023xx";
      sa[14] = "024xx";
      sa[15] = "025xx";
      sa[16] = "026xx";
      sa[17] = "027xx";
      sa[18] = "028xx";
      sa[19] = "029xx";
      sa[20] = "030xx";
      sa[21] = "031xx";
      sa[22] = "032xx";
      sa[23] = "034xx";
      sa[24] = "035xx";
      sa[25] = "037xx";
      sa[26] = "038xx";
      sa[27] = "041xx";
      sa[28] = "050xx";
      sa[29] = "051xx";
      sa[30] = "053xx";
      sa[31] = "054xx";
      sa[32] = "056xx";
      sa[33] = "057xx";
      sa[34] = "060xx";
      sa[35] = "061xx";
      sa[36] = "062xx";
      sa[37] = "063xx";
      sa[38] = "064xx";
      sa[39] = "065xx";
      sa[40] = "066xx";
      sa[41] = "067xx";
      sa[42] = "068xx";
      sa[43] = "069xx";
      sa[44] = "070xx";
      sa[45] = "071xx";
      sa[46] = "072xx";
      sa[47] = "073xx";
      sa[48] = "074xx";
      sa[49] = "075xx";
      sa[50] = "076xx";
      sa[51] = "077xx";
      sa[52] = "078xx";
      sa[53] = "079xx";
      sa[54] = "080xx";
      sa[55] = "081xx";
      sa[56] = "082xx";
      sa[57] = "083xx";
      sa[58] = "084xx";
      sa[59] = "085xx";
      sa[60] = "086xx";
      sa[61] = "087xx";
      sa[62] = "088xx";
      sa[63] = "089xx";
      sa[64] = "100xx";
      sa[65] = "101xx";
      sa[66] = "102xx";
      sa[67] = "103xx";
      sa[68] = "104xx";
      sa[69] = "105xx";
      sa[70] = "106xx";
      sa[71] = "107xx";
      sa[72] = "108xx";
      sa[73] = "109xx";
      sa[74] = "110xx";
      sa[75] = "111xx";
      sa[76] = "112xx";
      sa[77] = "113xx";
      sa[78] = "114xx";
      sa[79] = "115xx";
      sa[80] = "116xx";
      sa[81] = "117xx";
      sa[82] = "118xx";
      sa[83] = "119xx";
      sa[84] = "120xx";
      sa[85] = "121xx";
      sa[86] = "122xx";
      sa[87] = "123xx";
      sa[88] = "124xx";
      sa[89] = "125xx";
      sa[90] = "126xx";
      sa[91] = "127xx";
      sa[92] = "128xx";
      sa[93] = "129xx";
      sa[94] = "130xx";
      sa[95] = "131xx";
      sa[96] = "132xx";
      sa[97] = "133xx";
      sa[98] = "134xx";
      sa[99] = "135xx";
      sa[100] = "136xx";
      sa[101] = "137xx";
      sa[102] = "138xx";
      sa[103] = "139xx";
      sa[104] = "140xx";
      sa[105] = "141xx";
      sa[106] = "142xx";
      sa[107] = "144xx";
      sa[108] = "145xx";
      sa[109] = "146xx";
      sa[110] = "147xx";
      sa[111] = "148xx";
      sa[112] = "149xx";
      sa[113] = "150xx";
      sa[114] = "151xx";
      sa[115] = "152xx";
      sa[116] = "153xx";
      sa[117] = "154xx";
      sa[118] = "156xx";
      sa[119] = "157xx";
      sa[120] = "158xx";
      sa[121] = "159xx";
      sa[122] = "160xx";
      sa[123] = "161xx";
      sa[124] = "163xx";
      sa[125] = "164xx";
      sa[126] = "165xx";
      sa[127] = "166xx";
      sa[128] = "167xx";
      sa[129] = "168xx";
      sa[130] = "170xx";
      sa[131] = "171xx";
      sa[132] = "173xx";
      sa[133] = "174xx";
      sa[134] = "175xx";
      sa[135] = "176xx";
      sa[136] = "177xx";
      sa[137] = "178xx";
      sa[138] = "179xx";
      sa[139] = "180xx";
      sa[140] = "181xx";
      sa[141] = "182xx";
      sa[142] = "183xx";
      sa[143] = "184xx";
      sa[144] = "185xx";
      sa[145] = "186xx";
      sa[146] = "187xx";
      sa[147] = "188xx";
      sa[148] = "189xx";
      sa[149] = "190xx";
      sa[150] = "191xx";
      sa[151] = "193xx";
      sa[152] = "194xx";
      sa[153] = "195xx";
      sa[154] = "196xx";
      sa[155] = "197xx";
      sa[156] = "198xx";
      sa[157] = "199xx";
      sa[158] = "200xx";
      sa[159] = "201xx";
      sa[160] = "206xx";
      sa[161] = "207xx";
      sa[162] = "208xx";
      sa[163] = "209xx";
      sa[164] = "210xx";
      sa[165] = "211xx";
      sa[166] = "212xx";
      sa[167] = "214xx";
      sa[168] = "215xx";
      sa[169] = "216xx";
      sa[170] = "217xx";
      sa[171] = "218xx";
      sa[172] = "219xx";
      sa[173] = "220xx";
      sa[174] = "221xx";
      sa[175] = "222xx";
      sa[176] = "223xx";
      sa[177] = "224xx";
      sa[178] = "225xx";
      sa[179] = "226xx";
      sa[180] = "227xx";
      sa[181] = "228xx";
      sa[182] = "229xx";
      sa[183] = "230xx";
      sa[184] = "231xx";
      sa[185] = "232xx";
      sa[186] = "233xx";
      sa[187] = "234xx";
      sa[188] = "235xx";
      sa[189] = "236xx";
      sa[190] = "237xx";
      sa[191] = "238xx";
      sa[192] = "240xx";
      sa[193] = "241xx";
      sa[194] = "242xx";
      sa[195] = "243xx";
      sa[196] = "244xx";
      sa[197] = "245xx";
      sa[198] = "246xx";
      sa[199] = "247xx";
      sa[200] = "251xx";
      sa[201] = "252xx";
      sa[202] = "253xx";
      sa[203] = "254xx";
      sa[204] = "255xx";
      sa[205] = "256xx";
      sa[206] = "257xx";
      sa[207] = "258xx";
      sa[208] = "259xx";
      sa[209] = "260xx";
      sa[210] = "261xx";
      sa[211] = "262xx";
      sa[212] = "264xx";
      sa[213] = "265xx";
      sa[214] = "266xx";
      sa[215] = "267xx";
      sa[216] = "268xx";
      sa[217] = "270xx";
      sa[218] = "271xx";
      sa[219] = "272xx";
      sa[220] = "273xx";
      sa[221] = "274xx";
      sa[222] = "275xx";
      sa[223] = "276xx";
      sa[224] = "277xx";
      sa[225] = "278xx";
      sa[226] = "279xx";
      sa[227] = "280xx";
      sa[228] = "281xx";
      sa[229] = "282xx";
      sa[230] = "283xx";
      sa[231] = "284xx";
      sa[232] = "285xx";
      sa[233] = "286xx";
      sa[234] = "287xx";
      sa[235] = "288xx";
      sa[236] = "290xx";
      sa[237] = "291xx";
      sa[238] = "292xx";
      sa[239] = "293xx";
      sa[240] = "294xx";
      sa[241] = "295xx";
      sa[242] = "296xx";
      sa[243] = "297xx";
      sa[244] = "298xx";
      sa[245] = "299xx";
      sa[246] = "300xx";
      sa[247] = "301xx";
      sa[248] = "302xx";
      sa[249] = "303xx";
      sa[250] = "304xx";
      sa[251] = "305xx";
      sa[252] = "306xx";
      sa[253] = "307xx";
      sa[254] = "308xx";
      sa[255] = "309xx";
      sa[256] = "310xx";
      sa[257] = "312xx";
      sa[258] = "313xx";
      sa[259] = "314xx";
      sa[260] = "315xx";
      sa[261] = "316xx";
      sa[262] = "317xx";
      sa[263] = "318xx";
      sa[264] = "319xx";
      sa[265] = "320xx";
      sa[266] = "321xx";
      sa[267] = "322xx";
      sa[268] = "323xx";
      sa[269] = "324xx";
      sa[270] = "325xx";
      sa[271] = "326xx";
      sa[272] = "327xx";
      sa[273] = "328xx";
      sa[274] = "329xx";
      sa[275] = "330xx";
      sa[276] = "331xx";
      sa[277] = "333xx";
      sa[278] = "334xx";
      sa[279] = "335xx";
      sa[280] = "336xx";
      sa[281] = "337xx";
      sa[282] = "338xx";
      sa[283] = "339xx";
      sa[284] = "341xx";
      sa[285] = "342xx";
      sa[286] = "344xx";
      sa[287] = "346xx";
      sa[288] = "347xx";
      sa[289] = "349xx";
      sa[290] = "350xx";
      sa[291] = "351xx";
      sa[292] = "352xx";
      sa[293] = "354xx";
      sa[294] = "355xx";
      sa[295] = "356xx";
      sa[296] = "357xx";
      sa[297] = "358xx";
      sa[298] = "359xx";
      sa[299] = "360xx";
      sa[300] = "361xx";
      sa[301] = "362xx";
      sa[302] = "363xx";
      sa[303] = "364xx";
      sa[304] = "365xx";
      sa[305] = "366xx";
      sa[306] = "368xx";
      sa[307] = "370xx";
      sa[308] = "371xx";
      sa[309] = "376xx";
      sa[310] = "379xx";
      sa[311] = "381xx";
      sa[312] = "385xx";
      sa[313] = "388xx";
      sa[314] = "390xx";
      sa[315] = "391xx";
      sa[316] = "392xx";
      sa[317] = "394xx";
      sa[318] = "395xx";
      sa[319] = "397xx";
      sa[320] = "398xx";
      sa[321] = "400xx";
      sa[322] = "401xx";
      sa[323] = "402xx";
      sa[324] = "403xx";
      sa[325] = "404xx";
      sa[326] = "405xx";
      sa[327] = "406xx";
      sa[328] = "407xx";
      sa[329] = "409xx";
      sa[330] = "410xx";
      sa[331] = "411xx";
      sa[332] = "412xx";
      sa[333] = "415xx";
      sa[334] = "420xx";
      sa[335] = "421xx";
      sa[336] = "423xx";
      sa[337] = "424xx";
      sa[338] = "425xx";
      sa[339] = "427xx";
      sa[340] = "430xx";
      sa[341] = "431xx";
      sa[342] = "432xx";
      sa[343] = "433xx";
      sa[344] = "434xx";
      sa[345] = "435xx";
      sa[346] = "436xx";
      sa[347] = "437xx";
      sa[348] = "439xx";
      sa[349] = "440xx";
      sa[350] = "441xx";
      sa[351] = "442xx";
      sa[352] = "443xx";
      sa[353] = "444xx";
      sa[354] = "445xx";
      sa[355] = "446xx";
      sa[356] = "447xx";
      sa[357] = "448xx";
      sa[358] = "450xx";
      sa[359] = "451xx";
      sa[360] = "452xx";
      sa[361] = "453xx";
      sa[362] = "454xx";
      sa[363] = "455xx";
      sa[364] = "456xx";
      sa[365] = "457xx";
      sa[366] = "458xx";
      sa[367] = "462xx";
      sa[368] = "468xx";
      sa[369] = "469xx";
      sa[370] = "471xx";
      sa[371] = "479xx";
      sa[372] = "480xx";
      sa[373] = "481xx";
      sa[374] = "482xx";
      sa[375] = "483xx";
      sa[376] = "484xx";
      sa[377] = "486xx";
      sa[378] = "488xx";
      sa[379] = "489xx";
      sa[380] = "490xx";
      sa[381] = "491xx";
      sa[382] = "492xx";
      sa[383] = "493xx";
      sa[384] = "494xx";
      sa[385] = "495xx";
      sa[386] = "496xx";
      sa[387] = "497xx";
      sa[388] = "498xx";
      sa[389] = "499xx";
      sa[390] = "500xx";
      sa[391] = "527xx";
      sa[392] = "530xx";
      sa[393] = "531xx";
      sa[394] = "532xx";
      sa[395] = "534xx";
      sa[396] = "535xx";
      sa[397] = "537xx";
      sa[398] = "538xx";
      sa[399] = "539xx";
      sa[400] = "540xx";
      sa[401] = "541xx";
      sa[402] = "542xx";
      sa[403] = "543xx";
      sa[404] = "544xx";
      sa[405] = "545xx";
      sa[406] = "546xx";
      sa[407] = "547xx";
      sa[408] = "548xx";
      sa[409] = "549xx";
      sa[410] = "550xx";
      sa[411] = "551xx";
      sa[412] = "553xx";
      sa[413] = "554xx";
      sa[414] = "557xx";
      sa[415] = "558xx";
      sa[416] = "559xx";
      sa[417] = "560xx";
      sa[418] = "562xx";
      sa[419] = "563xx";
      sa[420] = "564xx";
      sa[421] = "565xx";
      sa[422] = "566xx";
      sa[423] = "570xx";
      sa[424] = "571xx";
      sa[425] = "572xx";
      sa[426] = "576xx";
      sa[427] = "577xx";
      sa[428] = "591xx";
      sa[429] = "592xx";
      sa[430] = "593xx";
      sa[431] = "594xx";
      sa[432] = "596xx";
      sa[433] = "597xx";
      sa[434] = "598xx";
      sa[435] = "599xx";
      sa[436] = "600xx";
      sa[437] = "601xx";
      sa[438] = "602xx";
      sa[439] = "603xx";
      sa[440] = "604xx";
      sa[441] = "605xx";
      sa[442] = "606xx";
      sa[443] = "607xx";
      sa[444] = "608xx";
      sa[445] = "609xx";
      sa[446] = "610xx";
      sa[447] = "611xx";
      sa[448] = "612xx";
      sa[449] = "613xx";
      sa[450] = "614xx";
      sa[451] = "616xx";
      sa[452] = "617xx";
      sa[453] = "618xx";
      sa[454] = "619xx";
      sa[455] = "620xx";
      sa[456] = "622xx";
      sa[457] = "624xx";
      sa[458] = "625xx";
      sa[459] = "626xx";
      sa[460] = "627xx";
      sa[461] = "628xx";
      sa[462] = "629xx";
      sa[463] = "630xx";
      sa[464] = "631xx";
      sa[465] = "633xx";
      sa[466] = "634xx";
      sa[467] = "635xx";
      sa[468] = "636xx";
      sa[469] = "637xx";
      sa[470] = "638xx";
      sa[471] = "639xx";
      sa[472] = "640xx";
      sa[473] = "641xx";
      sa[474] = "645xx";
      sa[475] = "646xx";
      sa[476] = "647xx";
      sa[477] = "648xx";
      sa[478] = "650xx";
      sa[479] = "651xx";
      sa[480] = "652xx";
      sa[481] = "653xx";
      sa[482] = "654xx";
      sa[483] = "655xx";
      sa[484] = "656xx";
      sa[485] = "657xx";
      sa[486] = "658xx";
      sa[487] = "660xx";
      sa[488] = "661xx";
      sa[489] = "662xx";
      sa[490] = "663xx";
      sa[491] = "664xx";
      sa[492] = "665xx";
      sa[493] = "666xx";
      sa[494] = "667xx";
      sa[495] = "668xx";
      sa[496] = "669xx";
      sa[497] = "670xx";
      sa[498] = "672xx";
      sa[499] = "673xx";
      sa[500] = "674xx";
      sa[501] = "676xx";
      sa[502] = "678xx";
      sa[503] = "681xx";
      sa[504] = "685xx";
      sa[505] = "700xx";
      sa[506] = "701xx";
      sa[507] = "703xx";
      sa[508] = "704xx";
      sa[509] = "705xx";
      sa[510] = "706xx";
      sa[511] = "707xx";
      sa[512] = "708xx";
      sa[513] = "710xx";
      sa[514] = "711xx";
      sa[515] = "712xx";
      sa[516] = "713xx";
      sa[517] = "714xx";
      sa[518] = "716xx";
      sa[519] = "717xx";
      sa[520] = "719xx";
      sa[521] = "720xx";
      sa[522] = "721xx";
      sa[523] = "722xx";
      sa[524] = "723xx";
      sa[525] = "724xx";
      sa[526] = "726xx";
      sa[527] = "727xx";
      sa[528] = "728xx";
      sa[529] = "729xx";
      sa[530] = "730xx";
      sa[531] = "731xx";
      sa[532] = "735xx";
      sa[533] = "737xx";
      sa[534] = "739xx";
      sa[535] = "740xx";
      sa[536] = "741xx";
      sa[537] = "743xx";
      sa[538] = "744xx";
      sa[539] = "745xx";
      sa[540] = "748xx";
      sa[541] = "749xx";
      sa[542] = "750xx";
      sa[543] = "751xx";
      sa[544] = "752xx";
      sa[545] = "754xx";
      sa[546] = "756xx";
      sa[547] = "757xx";
      sa[548] = "759xx";
      sa[549] = "760xx";
      sa[550] = "761xx";
      sa[551] = "762xx";
      sa[552] = "763xx";
      sa[553] = "764xx";
      sa[554] = "765xx";
      sa[555] = "766xx";
      sa[556] = "767xx";
      sa[557] = "768xx";
      sa[558] = "770xx";
      sa[559] = "773xx";
      sa[560] = "774xx";
      sa[561] = "775xx";
      sa[562] = "777xx";
      sa[563] = "778xx";
      sa[564] = "780xx";
      sa[565] = "781xx";
      sa[566] = "782xx";
      sa[567] = "783xx";
      sa[568] = "784xx";
      sa[569] = "785xx";
      sa[570] = "786xx";
      sa[571] = "787xx";
      sa[572] = "788xx";
      sa[573] = "790xx";
      sa[574] = "791xx";
      sa[575] = "793xx";
      sa[576] = "794xx";
      sa[577] = "795xx";
      sa[578] = "796xx";
      sa[579] = "797xx";
      sa[580] = "798xx";
      sa[581] = "799xx";
      sa[582] = "800xx";
      sa[583] = "801xx";
      sa[584] = "802xx";
      sa[585] = "803xx";
      sa[586] = "804xx";
      sa[587] = "805xx";
      sa[588] = "806xx";
      sa[589] = "808xx";
      sa[590] = "809xx";
      sa[591] = "810xx";
      sa[592] = "811xx";
      sa[593] = "813xx";
      sa[594] = "815xx";
      sa[595] = "816xx";
      sa[596] = "820xx";
      sa[597] = "824xx";
      sa[598] = "825xx";
      sa[599] = "826xx";
      sa[600] = "827xx";
      sa[601] = "828xx";
      sa[602] = "829xx";
      sa[603] = "830xx";
      sa[604] = "831xx";
      sa[605] = "836xx";
      sa[606] = "837xx";
      sa[607] = "840xx";
      sa[608] = "841xx";
      sa[609] = "843xx";
      sa[610] = "846xx";
      sa[611] = "847xx";
      sa[612] = "850xx";
      sa[613] = "851xx";
      sa[614] = "852xx";
      sa[615] = "853xx";
      sa[616] = "856xx";
      sa[617] = "857xx";
      sa[618] = "860xx";
      sa[619] = "863xx";
      sa[620] = "864xx";
      sa[621] = "871xx";
      sa[622] = "874xx";
      sa[623] = "875xx";
      sa[624] = "877xx";
      sa[625] = "880xx";
      sa[626] = "882xx";
      sa[627] = "883xx";
      sa[628] = "884xx";
      sa[629] = "890xx";
      sa[630] = "891xx";
      sa[631] = "893xx";
      sa[632] = "894xx";
      sa[633] = "895xx";
      sa[634] = "897xx";
      sa[635] = "900xx";
      sa[636] = "902xx";
      sa[637] = "903xx";
      sa[638] = "904xx";
      sa[639] = "905xx";
      sa[640] = "906xx";
      sa[641] = "907xx";
      sa[642] = "908xx";
      sa[643] = "910xx";
      sa[644] = "911xx";
      sa[645] = "912xx";
      sa[646] = "913xx";
      sa[647] = "914xx";
      sa[648] = "915xx";
      sa[649] = "916xx";
      sa[650] = "917xx";
      sa[651] = "918xx";
      sa[652] = "919xx";
      sa[653] = "920xx";
      sa[654] = "921xx";
      sa[655] = "922xx";
      sa[656] = "923xx";
      sa[657] = "925xx";
      sa[658] = "926xx";
      sa[659] = "927xx";
      sa[660] = "928xx";
      sa[661] = "930xx";
      sa[662] = "931xx";
      sa[663] = "932xx";
      sa[664] = "933xx";
      sa[665] = "934xx";
      sa[666] = "935xx";
      sa[667] = "936xx";
      sa[668] = "937xx";
      sa[669] = "939xx";
      sa[670] = "940xx";
      sa[671] = "941xx";
      sa[672] = "943xx";
      sa[673] = "944xx";
      sa[674] = "945xx";
      sa[675] = "946xx";
      sa[676] = "947xx";
      sa[677] = "948xx";
      sa[678] = "949xx";
      sa[679] = "950xx";
      sa[680] = "951xx";
      sa[681] = "952xx";
      sa[682] = "953xx";
      sa[683] = "954xx";
      sa[684] = "955xx";
      sa[685] = "956xx";
      sa[686] = "957xx";
      sa[687] = "958xx";
      sa[688] = "959xx";
      sa[689] = "960xx";
      sa[690] = "961xx";
      sa[691] = "967xx";
      sa[692] = "968xx";
      sa[693] = "969xx";
      sa[694] = "970xx";
      sa[695] = "971xx";
      sa[696] = "972xx";
      sa[697] = "973xx";
      sa[698] = "974xx";
      sa[699] = "975xx";
      sa[700] = "976xx";
      sa[701] = "977xx";
      sa[702] = "978xx";
      sa[703] = "980xx";
      sa[704] = "981xx";
      sa[705] = "982xx";
      sa[706] = "983xx";
      sa[707] = "984xx";
      sa[708] = "985xx";
      sa[709] = "986xx";
      sa[710] = "988xx";
      sa[711] = "989xx";
      sa[712] = "990xx";
      sa[713] = "991xx";
      sa[714] = "992xx";
      sa[715] = "993xx";
      sa[716] = "995xx";
      sa[717] = "996xx";
      sa[718] = "997xx";
      sa[719] = "998xx";
    }
  }
}
// The class representing column addr_state
class GBM_model_python_1589382591366_1_ColInfo_16 implements java.io.Serializable {
  public static final String[] VALUES = new String[50];
  static {
    GBM_model_python_1589382591366_1_ColInfo_16_0.fill(VALUES);
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_16_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "AK";
      sa[1] = "AL";
      sa[2] = "AR";
      sa[3] = "AZ";
      sa[4] = "CA";
      sa[5] = "CO";
      sa[6] = "CT";
      sa[7] = "DC";
      sa[8] = "DE";
      sa[9] = "FL";
      sa[10] = "GA";
      sa[11] = "HI";
      sa[12] = "IA";
      sa[13] = "ID";
      sa[14] = "IL";
      sa[15] = "IN";
      sa[16] = "KS";
      sa[17] = "KY";
      sa[18] = "LA";
      sa[19] = "MA";
      sa[20] = "MD";
      sa[21] = "ME";
      sa[22] = "MI";
      sa[23] = "MN";
      sa[24] = "MO";
      sa[25] = "MS";
      sa[26] = "MT";
      sa[27] = "NC";
      sa[28] = "NE";
      sa[29] = "NH";
      sa[30] = "NJ";
      sa[31] = "NM";
      sa[32] = "NV";
      sa[33] = "NY";
      sa[34] = "OH";
      sa[35] = "OK";
      sa[36] = "OR";
      sa[37] = "PA";
      sa[38] = "RI";
      sa[39] = "SC";
      sa[40] = "SD";
      sa[41] = "TN";
      sa[42] = "TX";
      sa[43] = "UT";
      sa[44] = "VA";
      sa[45] = "VT";
      sa[46] = "WA";
      sa[47] = "WI";
      sa[48] = "WV";
      sa[49] = "WY";
    }
  }
}
// The class representing column is_bad
class GBM_model_python_1589382591366_1_ColInfo_28 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    GBM_model_python_1589382591366_1_ColInfo_28_0.fill(VALUES);
  }
  static final class GBM_model_python_1589382591366_1_ColInfo_28_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}

class GBM_model_python_1589382591366_1_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_0_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (Double.isNaN(data[26]) || data[26 /* revol_util */] <96.05f ? 
                    -0.11487651f : 
                    -0.084287636f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.07366502f : 
                    0.22630708f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.07727853f : 
                    -0.008812918f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.00743013f : 
                    0.11003849f))) : 
         (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.08786947f : 
                    0.009665783f) : 
                 (Double.isNaN(data[2 /* term */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[2])) ? 
                    0.10856866f : 
                    0.33687586f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    0.013547552f : 
                    0.1599306f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.36278054f : 
                    0.77220094f))));
    return pred;
  } // constant pool size = 995B, number of visited nodes = 15, static init size = 5598B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {84, -86, -29, 80, -32, 97, -59, 55, 64, 32, -101, 20, 1, -56, 18, 104, 112, 0, 0, 0, 9, 0, 43, -103, 50, 20, 4, -123, 125, -119, -95, -128, 123, 64, -19, -36, -7, 110, 41, 17, -94, 1, 32, -111, -100, 4, 0, 9, 3, -87, -48, 72, 0, 16, 50, -104, 78, 0, -114, 37, 33, 36, 1, -127, 71, 33, 32, -123, -110, -111, 3, -121, -63, -96, 5, 0, 104, -18, 104, -92, -21, 20, 47, 53, 4, 58, 13, 5, 44, 80};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 85, 20, 4, 20, 22, 58, 0, -71, -48, 32, 64, 16, 4, 8, 0, 0, 8, -16, -88, 102, 64, 68, 34, 1, 0, 0, 112, 0, 84, 78, 91, 4, -66, 18, 35, 6, 16, 2, 0, 24, 0, 80, 32, 2, 0, 48, 20, 0, 4, 0, 2, 0, 1, 4, 69, 0, -128, 1, 2, 64, 0, 0, 32, 0, 2, -104, 64, 32, 68, 64, 0, 0, 89, 8, -128, 1, 1, 0, 90, 0, -23, -48, 64, -126, -59, -112, -126, 17, 36};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 72, 0, 10, 0, 0, 0, 17, 0, 0, 0, 0, 0, 64, 16, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 64, 64, 1, -128, 0, 0, 0, 0, 48, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 64, 0, 0, 0, 0, 0, 0, 0, -112, 0, 0, 0, 0, 2, 0, -118, 8, 0, 0, 0, 2, 0};
  // {00000000 00000000 00000000 00100101 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, -92, 0};
  // {00000000 10001011 11111111 11101111 100}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -47, -1, -9, 1};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {34, 68, 20, 4, 16, 20, 56, 0, 24, 64, 32, 64, 0, 4, 0, 0, 0, 0, 80, 0, 96, 0, 0, 0, 1, 0, 0, 112, 0, 0, 2, 11, 0, 44, 2, 3, 4, 0, 2, 0, 0, 0, 16, 32, 0, 0, 16, 0, 0, 0, 0, 2, 0, 1, 0, 65, 0, -128, 0, 0, 0, 0, 0, 32, 0, 0, -112, 0, 0, 64, 0, 0, 0, 8, 0, 0, 0, 0, 0, 88, 0, -95, 80, 0, -128, 4, 16, -128, 1, 36};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 1, 0, 0, 4, 2, 8, 0, -120, 0, 0, 0, 0, 0, 8, 0, 0, 0, -96, 40, 70, 64, 68, 34, 1, 0, 0, 64, 0, 84, 10, 90, 4, 22, 16, 0, 2, 16, 0, 0, 16, 0, 64, 0, 2, 0, 32, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 2, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 80, 8, -128, 1, 1, 0, 10, 0, 72, -128, 64, 2, 64, -128, 0, 16, 0};
  // {00000000 00101111 11011111 11111111 101}
  public static final byte[] GRPSPLIT7 = new byte[] {0, -12, -5, -1, 5};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {16, -128, 33, 0, 0, 64, -128, 48, 0, 0, 0, 20, 0, -120, 0, 32, 96, 0, 0, 0, 1, 0, 42, 0, 2, 16, 0, 0, 16, 1, 32, 0, 112, 64, 0, -64, 72, 2, 9, 1, -128, 1, 32, 16, 4, 0, 0, 9, 0, 0, 64, 8, 0, 0, 2, -128, 2, 0, 6, 0, 33, 32, 1, 1, 2, 32, 32, 0, 16, 16, 0, -128, 1, -128, 0, 0, 40, -86, 8, -124, 40, 4, 10, 20, 0, 0, 5, 0, 36, 0};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {64, 42, 0, 0, -64, 1, 65, 1, 64, 32, 18, 0, 1, 64, 2, 0, 0, 0, 0, 0, 8, 0, 0, -112, 32, 0, 0, -128, 96, 0, -127, 0, 9, 0, -24, 24, 1, 64, 0, 0, 2, 0, 0, -128, 8, 4, 0, 0, 0, 1, 0, 0, 0, 0, 48, 0, 0, 0, 0, 32, 0, 0, 0, 0, 1, 0, 0, -127, -126, -128, 1, 6, 64, 0, 0, 0, 0, 0, 96, 0, -62, 16, 37, 33, 4, 42, 0, 4, 8, 16};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, -61, 80, 32, 32, 0, 4, 0, 0, -119, 0, 0, 64, 16, 72, 16, 0, 0, 0, 0, 0, 0, 9, 16, 4, 4, -123, 69, -120, 0, -128, 50, 0, 0, 4, 48, 104, 32, 16, 32, 0, 0, 0, -104, 4, 0, 1, 0, 40, -128, 0, 0, 0, 0, 24, 74, 0, -120, 5, 0, 4, 0, 0, 68, 33, 0, 5, 2, 1, 0, 2, 0, 32, 5, 0, 8, 64, 32, 36, 40, 0, 0, 1, 0, 26, 0, 0, 0, 80};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {-81, 119, -33, -1, -65, -2, 122, -49, -1, -1, -17, -5, -2, 119, -3, -1, -97, -1, -1, -1, -1, -1, -43, -17, -3, -17, -1, -1, -17, -2, -1, -1, -65, -65, -33, 47, -65, -3, -2, -1, -1, -1, -33, -17, -5, -1, -1, -1, -1, -1, -65, -9, -1, -1, -51, 127, -5, -1, -1, -1, -33, -1, -1, -2, -2, -1, -33, -1, -17, -17, -1, 127, -2, 127, -1, -1, -1, 117, -1, 127, -1, -5, -10, -21, -1, -1, -6, -1, -13, -1};
  // {00000000 00000000 00000011 00001010 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00100000 00000000 10100000 00000000 00010000 00000000 00000000 01000100 00000000 00000000 00000000 00000000 00010000 00000000 00001000 00000000 00000000 00000000 00000000 00001001 00000000 00000000 00000000 00000000 00010100 00000001 00000000 00000000 00000000 00000000 00010000 00010010 00000000 00010000 00100000 00000000 00100000 00000000 00000000 00100010 10000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 10100000 00000000 00010000 00000010 00000000 00100000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, -64, 80, 0, 0, 0, 4, 0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 16, 4, 0, 5, 0, 8, 0, 0, 34, 0, 0, 0, 0, 8, 0, 16, 0, 0, 0, 0, -112, 0, 0, 0, 0, 40, -128, 0, 0, 0, 0, 8, 72, 0, 8, 4, 0, 4, 0, 0, 68, 1, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 8, 64, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_1_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (data[19 /* earliest_cr_line */] <1.70310599E11f ? 
                    -0.04929883f : 
                    -0.11191093f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.06874495f : 
                    0.25870374f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.088144936f : 
                    -0.026456404f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.006759117f : 
                    0.0900161f))) : 
         (Double.isNaN(data[2 /* term */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.045518957f : 
                    0.02981145f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    0.03455803f : 
                    0.24505182f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.074422315f : 
                    0.12224044f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.27936953f : 
                    0.49728194f))));
    return pred;
  } // constant pool size = 995B, number of visited nodes = 15, static init size = 5598B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {84, -86, -13, 80, -32, 97, -27, 55, 64, 32, -101, 20, 1, -52, 18, 104, 112, 0, -128, 0, 13, 0, 43, -103, 50, 20, 4, -123, 125, -119, -95, -128, 127, 64, -19, -36, -7, 110, 41, 17, -94, 1, 32, -111, -98, 4, 0, 9, 3, -87, -48, 72, 0, 16, 50, -104, 78, 0, -114, 37, 33, 36, 1, -127, 71, 33, 32, -123, -110, -111, 3, -121, -63, -96, 13, 0, 104, -18, 104, -68, -21, 53, 47, 53, 4, 58, 29, 5, 44, 112};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 85, 4, 4, 20, 22, 26, 0, -71, -46, 32, 64, 16, 0, 8, 0, 0, 8, 112, -88, 98, 64, 68, 34, 1, 0, 0, 112, 0, 84, 78, 91, 0, -82, 18, 33, 2, 16, 2, 0, 24, 0, 80, 32, 0, 0, 48, 20, 0, 4, 0, 2, 0, 1, 4, 69, 0, -128, 1, 2, 64, 0, 0, 32, 0, 2, -100, 64, 32, 68, 64, 0, 0, 89, 0, -128, 1, 1, 0, 66, 0, -56, -112, 72, -126, -59, -128, -126, 17, 4};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 72, 0, 8, 0, 0, 0, 17, 0, 0, 0, 0, 0, 64, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 2, 4, 0, 0, 0, 0, 4, 0, 64, 64, 1, -128, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, -112, 0, 0, 0, 0, 2, 64, -126, 8, 0, 0, 0, 2, 0};
  // {00000000 00000000 00000000 00100101 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, -92, 0};
  // {00000000 10001011 11101111 11111111 100}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -47, -9, -1, 1};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -18, -1, -1, -5, -3, -3, -1, 95, -1, -33, -1, -17, -1, -9, -1, -1, -9, -33, -41, -1, -65, -69, -35, -1, -1, -1, -1, -1, -85, -13, -81, -1, -3, -3, -33, -3, -17, -1, -1, -17, -1, -1, -1, -1, -1, -1, -21, -1, -1, -1, -1, -1, -1, -5, -5, -1, -1, -2, -3, -65, -1, -1, -1, -1, -3, -1, -65, -1, -5, -65, -1, -1, -82, -1, 127, -2, -2, -1, -3, -1, -9, 127, -73, -3, 63, 127, -3, -17, -1};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 1, 4, 0, 4, 18, 24, 0, -120, 0, 0, 64, 0, 0, 8, 0, 0, 0, 32, 40, 34, 64, 68, 34, 1, 0, 0, 64, 0, 84, 10, 88, 0, 6, 16, 0, 2, 16, 0, 0, 16, 0, 16, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 2, 64, 0, 0, 0, 0, 0, 0, 64, 0, 0, 64, 0, 0, 80, 0, -128, 1, 1, 0, 2, 0, 72, -128, 64, 2, 64, -128, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {20, 8, 33, 80, 0, 32, 1, 6, 0, 0, 16, 20, 0, -128, 0, 104, 64, 0, 0, 0, 0, 0, 42, 8, 32, 20, 0, 1, 65, 0, 32, 0, 48, 0, 0, -104, 40, 8, 41, 17, 0, 0, 0, -112, -124, 0, 0, 1, 3, 0, 0, 72, 0, 0, 0, 8, 0, 0, 14, 4, 32, 32, 0, -127, 2, 32, 0, -123, -110, 17, 0, -126, 1, -96, 0, 0, 32, 96, 8, -124, 41, 0, 0, 0, 0, 48, 0, 4, 0, 112};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {64, -94, 18, 0, -128, 65, -64, 32, 64, 32, 10, 0, 1, 64, 2, 0, 32, 0, -128, 0, 9, 0, 0, -128, 2, 0, 0, 0, 24, 1, -127, -128, 13, 0, -88, 64, 0, 4, 0, 0, 0, 0, 32, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 18, -128, 0, 0, 0, 32, 0, 0, 0, 0, 4, 0, 32, 0, 0, -128, 0, 0, 64, 0, 0, 0, 0, 14, 96, 32, -62, 37, 15, 20, 4, 10, 29, 1, 8, 0};
  // {00000101 01101111 01111110 00010000 000}
  public static final byte[] GRPSPLIT10 = new byte[] {-96, -10, 126, 8, 0};
  // {00000000 00000001 11000011 00000000 00000111 00000010 00000000 10001000 00000010 00000000 00010001 00001000 00000000 00010010 01001000 00010000 00001000 00000000 00000000 00000000 10110000 00000000 10000000 10001001 00001000 00000000 00100000 00100001 00100100 00010000 00000000 00000001 01001110 00000010 10100010 00000000 10001010 01010110 00000000 00000000 01000101 10000000 00000000 10000000 00010000 00100000 00000000 10010000 00000000 00010100 00000001 00000000 00000000 00001000 00000000 00001000 01110010 00000000 01000001 00000000 10000000 00100100 10000000 00000000 00000010 10000100 00000000 10100000 00000000 00000000 01000000 10000000 00000000 00000000 10010000 00000000 00010000 00010001 00000100 00100000 00000101 00000000 00010100 10100100 00000000 00000000 00000000 10000000 00100100 00001000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, -128, -61, 0, -32, 64, 0, 17, 64, 0, -120, 16, 0, 72, 18, 8, 16, 0, 0, 0, 13, 0, 1, -111, 16, 0, 4, -124, 36, 8, 0, -128, 114, 64, 69, 0, 81, 106, 0, 0, -94, 1, 0, 1, 8, 4, 0, 9, 0, 40, -128, 0, 0, 16, 0, 16, 78, 0, -126, 0, 1, 36, 1, 0, 64, 33, 0, 5, 0, 0, 2, 1, 0, 0, 9, 0, 8, -120, 32, 4, -96, 0, 40, 37, 0, 0, 0, 1, 36, 16};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {64, 34, 0, 0, 0, 1, -28, 32, 0, 32, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, -127, -127, 0, 1, 0, 40, 68, -128, 0, 0, 0, 0, 0, 32, -128, 18, 0, 0, 0, 0, -127, 80, 0, 0, 0, 48, 0, 0, 0, 0, 33, 0, 0, 0, 0, 1, 0, 0, -128, 2, 0, 1, 6, -128, 0, 4, 0, 64, 34, 64, 24, 75, 20, 7, 0, 4, 2, 1, 4, 8, 0};
  // {00000000 00000001 10000011 00000000 00000001 00000000 00000000 00001000 00000000 00000000 00000001 00000000 00000000 00010010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100001 00100000 00010000 00000000 00000000 01000000 00000000 00000000 00000000 00000010 00010100 00000000 00000000 01000101 10000000 00000000 00000000 00010000 00000000 00000000 00010000 00000000 00000100 00000001 00000000 00000000 00001000 00000000 00001000 00000000 00000000 00000001 00000000 00000000 00100000 10000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 10010000 00000000 00000000 00010000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00001000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, -128, -63, 0, -128, 0, 0, 16, 0, 0, -128, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, 4, 8, 0, 0, 2, 0, 0, 0, 64, 40, 0, 0, -94, 1, 0, 0, 8, 0, 0, 8, 0, 32, -128, 0, 0, 16, 0, 16, 0, 0, -128, 0, 0, 4, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 16};
}


class GBM_model_python_1589382591366_1_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_2_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (data[19 /* earliest_cr_line */] <1.70310599E11f ? 
                    -0.1126241f : 
                    -0.11186591f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.08015741f : 
                    0.034317274f)) : 
             (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.1675957f ? 
                 (Double.isNaN(data[7]) || (data[7] >= 8215) || data[7 /* emp_title */] <7692.5f ? 
                    -0.040298607f : 
                    0.07180241f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(714, 1, data[15]) || (GenModel.bitSetIsInRange(714, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 714, 1, data[15])) ? 
                    -0.03883205f : 
                    0.21086682f))) : 
         (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.10427898f : 
                    -0.017969063f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    0.08864148f : 
                    0.33647466f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    0.0018628701f : 
                    0.09485195f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    0.1969721f : 
                    0.34720856f))));
    return pred;
  } // constant pool size = 984B, number of visited nodes = 15, static init size = 5532B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {84, -86, -13, 80, -32, 101, -27, 55, 64, 32, -101, 20, 1, -52, 18, 104, 112, 0, -64, 0, 13, 0, 43, -103, 50, 20, 4, -123, 125, -119, -95, -46, 127, 68, -19, -36, -7, 110, 41, 17, -94, 1, 32, -111, -98, 4, 0, 9, 3, -87, -48, 72, 0, 16, 50, -104, 78, 0, -114, 37, 33, 36, 1, -127, 71, 33, 32, -123, -110, -111, 3, -121, -63, -96, 13, 0, 104, -18, 104, -68, -21, 53, -81, 53, 6, 58, 29, 5, 45, 112};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 85, 4, 4, 20, 18, 26, 64, -71, -46, 32, 64, 16, 0, 8, 0, 0, 8, 48, -88, 98, 64, 68, 34, 1, 0, 0, 112, 0, 84, 78, 9, 0, -70, 18, 35, 6, 16, 2, 0, 24, 0, 80, 96, 0, 0, 48, 20, 0, 4, 0, 34, 0, 1, 4, 69, 0, -128, 1, 2, 64, 0, 0, 32, 0, 2, -100, 64, 32, 68, 64, 0, 0, 89, 0, -128, 1, 1, 0, 66, 0, -54, 80, 74, -128, -59, -128, -126, 16, 4};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00010000 00000000 00000000 00000000 10001000 00000000 00000000 00000000 00000000 00000000 00000010 00001000 00000101 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000010 10000000 00000001 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 10000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001001 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00010000 00000000 00000000 00000000 01000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 17, 0, 0, 0, 0, 0, 64, 16, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 64, 1, -128, 0, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, -112, 0, 0, 0, 0, 0, 0, -128, 8, 0, 0, 0, 2, 0};
  // {00000000 00001001 00010101 00100101 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -112, -88, -92, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 0, 0, 0, 2, 1, 12, 32, 92, 32, 0, 0, 0, 0, 4, 0, 0, 0, 16, 80, 17, 32, 34, -128, 0, 0, 0, 0, 0, 40, 2, 4, 0, 4, 8, 0, 1, 0, 0, 0, 12, 0, 32, 32, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 4, 32, 16, 34, 32, 0, 0, 40, 0, -64, 0, 0, 0, 1, 0, 0, 8, 0, 0, 96, 64, 64, 0, 0};
  // {00000000 01111111 11111111 11111111 100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, -2, -1, -1, 1};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {16, -128, 49, 0, -128, 1, -63, 49, 64, 0, 16, 20, 1, -52, 2, 32, 96, 0, -128, 0, 1, 0, 34, 0, 32, 16, 0, 0, 80, 1, 1, 0, 66, 4, 8, -40, 8, 0, 9, 0, -128, 1, 0, 16, 4, 4, 0, 1, 0, 1, 0, 8, 0, 0, 2, 0, 0, 0, 2, 32, 0, 32, 1, 1, 3, 32, 0, -127, 16, 16, 0, -128, 0, -128, 0, 0, 40, -88, 0, -124, 8, 20, -118, 4, 2, 8, 0, 0, 44, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 42, 2, 0, 0, 0, 4, 0, 0, 32, 2, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 8, 0, 0, 0, 0, 0, 32, 0, -128, 16, 1, 64, -31, 0, 1, 0, 0, 0, 0, 0, 0, -128, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, 0, 6, 64, 0, 0, 0, 0, 2, 0, 24, 67, 32, 37, 16, 4, 32, 1, 1, 1, 16};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 1, 0, -128, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 32, 0, 0, 16, 16, 0, -128, 0, -128, 0, 0, 0, -128, 0, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, -63, 80, 32, 96, 0, 4, 0, 0, -128, 16, 0, 0, 16, 72, 16, 0, 0, 0, 9, 0, 0, -112, 0, 4, 4, -123, 69, -120, 32, -128, 48, 0, 0, 4, 48, 72, 32, 17, 34, 0, 0, 0, -112, 0, 0, 8, 0, 40, -128, 0, 0, 0, 0, 24, 74, 0, -116, 5, 33, 36, 0, 0, 68, 33, 0, 4, 2, 0, 2, 2, 1, 32, 13, 0, 8, 72, 40, 36, 32, 0, 0, 33, 0, 18, 0, 0, 0, 16};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 119, -49, -1, -1, -2, 62, -50, -1, -1, -17, -5, -2, 123, -3, -33, -97, -1, 63, -1, -1, -1, -35, -1, -1, -17, -1, -1, -25, -2, -1, -17, -69, -69, 127, 47, -1, -1, -2, -1, -1, -1, -1, -17, -7, -1, -1, -1, -3, -2, -1, -9, -1, -1, -51, -1, -5, -1, -1, -33, -1, -1, -1, -2, -4, -1, -1, -1, -17, -18, -1, 127, -65, 127, -1, -1, -1, 95, -1, 111, -9, -17, 119, -21, -3, -9, -1, -1, -14, -1};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, -64, 80, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 8, 0, 0, 16, 0, 0, 0, 0, 8, 0, 17, 0, 0, 0, 0, -128, 0, 0, 0, 0, 8, -128, 0, 0, 0, 0, 8, 64, 0, 12, 4, 1, 36, 0, 0, 68, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 64, 8, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 16};
}


class GBM_model_python_1589382591366_1_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_3_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (data[19 /* earliest_cr_line */] <1.70310599E11f ? 
                    -0.111279465f : 
                    -0.110610075f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.086202286f : 
                    0.19392468f)) : 
             (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.1675957f ? 
                 (data[10 /* annual_inc */] <46190.625f ? 
                    -0.002265503f : 
                    -0.055181313f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(714, 1, data[15]) || (GenModel.bitSetIsInRange(714, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 714, 1, data[15])) ? 
                    0.024956703f : 
                    0.3089217f))) : 
         (Double.isNaN(data[2 /* term */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                    -0.05323958f : 
                    0.017239548f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                    0.025560522f : 
                    0.16186613f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.0809998f : 
                    0.08263635f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                    0.13795988f : 
                    0.27678376f))));
    return pred;
  } // constant pool size = 728B, number of visited nodes = 15, static init size = 3996B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {84, -86, -13, 80, -32, 101, -19, 55, 80, 32, -101, 20, 1, -52, 18, 104, 112, 0, -64, 8, 109, 0, 43, -103, 50, 20, 4, -27, 125, -103, -95, -38, 127, 100, -3, -35, -7, 126, 41, 17, -94, 1, 48, -111, -98, 4, 0, 9, 3, -87, -48, 72, 0, 16, 54, -104, 78, 0, -114, 37, 33, 36, 1, -95, 71, 33, 32, -123, -110, -111, 3, -121, -63, -96, 13, 0, 104, -18, 104, -68, -21, 53, -81, 53, 4, 62, 29, 5, 45, 112};
  // {01000100 10101010 00100000 00100000 00101000 01001000 01001000 00000010 10010101 01011011 00000100 00000010 00001000 10001000 00010000 00000000 00000000 00010000 00001100 00000111 01000000 00000110 00100010 01000100 10000000 00000000 00000000 00001000 00000000 00100010 01110010 10000000 00000000 01011001 01000000 01000100 01100000 00000000 01000000 00000000 00011000 00100000 00000010 00000110 00000010 00000000 00001101 00101000 00000000 00100000 00000000 01001100 00000000 10000000 00000000 10100010 00000000 00000001 10000000 01000000 00000010 01000000 00000000 00000000 00000000 01000000 00111001 00000010 00000100 00100010 00000010 00000000 00000000 10011010 00000000 00000001 10001000 10000000 00000000 01000010 00000000 01010011 00001010 01010011 01000001 10000011 00000001 01000001 00001000 00100000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 85, 4, 4, 20, 18, 18, 64, -87, -38, 32, 64, 16, 17, 8, 0, 0, 8, 48, -32, 2, 96, 68, 34, 1, 0, 0, 16, 0, 68, 78, 1, 0, -102, 2, 34, 6, 0, 2, 0, 24, 4, 64, 96, 64, 0, -80, 20, 0, 4, 0, 50, 0, 1, 0, 69, 0, -128, 1, 2, 64, 2, 0, 0, 0, 2, -100, 64, 32, 68, 64, 0, 0, 89, 0, -128, 17, 1, 0, 66, 0, -54, 80, -54, -126, -63, -128, -126, 16, 4};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 2, 0};
  // {00000000 00001001 00000000 00000001 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -112, 0, -128, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 0, 0, 0, 2, 1, 8, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 16, 16, 0, 32, 0, -128, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 16, 0, 32, 0, 0, 40, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {20, 8, 33, 80, 0, 32, 1, 6, 0, 32, 16, 20, 0, -128, 0, 104, 64, 0, 0, 0, 0, 0, 42, 8, 32, 20, 0, 1, 81, 0, 32, 64, 60, 0, 0, -39, 40, 8, 41, 17, 0, 0, 0, -112, -124, 0, 0, 1, 3, 0, 0, 72, 0, 0, 0, 8, 0, 0, 14, 4, 32, 32, 0, -127, 2, 32, 0, -123, -110, 17, 0, -126, 1, -96, 0, 0, 32, 102, 8, -124, 41, 0, -128, 0, 0, 58, 0, 4, 0, 112};
  // {00001111 01111111 01101100 10101001 010}
  public static final byte[] GRPSPLIT7 = new byte[] {-16, -2, 54, -107, 2};
  // {00000001 01101111 01011110 10010000 000}
  public static final byte[] GRPSPLIT8 = new byte[] {-128, -10, 122, 9, 0};
  // {00000000 01000001 11000011 00000000 00000111 00000010 00000000 10001000 00000010 00000000 00010001 00001000 00000000 00010010 01001000 00010000 00001000 00000000 00000010 00000000 10110000 00000000 10000000 10001001 00001000 00000000 00100000 00100101 00100100 00010000 00000000 00000001 01001110 00100010 10100010 00000000 10001010 01010110 00000000 00000000 01000101 10000000 00001000 10000000 00010000 00100000 00000000 10010000 00000000 00010100 00000001 00000000 00000000 00001000 00000000 00001000 01110010 00000000 01000001 00000000 10000000 00100100 10000000 00000000 00000010 10000100 00000000 10100000 01000000 00000000 01000000 10000000 00000001 00000000 10010000 00000000 00010000 00010001 00000100 00100000 01010111 00000000 00010100 10100100 00000000 00000000 00000000 10000000 00100100 00001000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, -126, -61, 0, -32, 64, 0, 17, 64, 0, -120, 16, 0, 72, 18, 8, 16, 0, 64, 0, 13, 0, 1, -111, 16, 0, 4, -92, 36, 8, 0, -128, 114, 68, 69, 0, 81, 106, 0, 0, -94, 1, 16, 1, 8, 4, 0, 9, 0, 40, -128, 0, 0, 16, 0, 16, 78, 0, -126, 0, 1, 36, 1, 0, 64, 33, 0, 5, 2, 0, 2, 1, -128, 0, 9, 0, 8, -120, 32, 4, -22, 0, 40, 37, 0, 0, 0, 1, 36, 16};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-21, -9, -49, -1, -1, -33, -2, -3, -1, -1, -17, -5, -1, -1, -1, -33, -97, -1, 127, -9, -1, -1, -43, -9, -35, -17, -1, -65, -17, -1, -33, -89, -13, -1, 127, 102, -33, -21, -34, -1, -1, -1, -1, -17, -1, -1, -1, -1, -4, -1, -1, -73, -1, -1, -5, -1, -1, -1, -5, -5, -33, -1, -1, 127, -5, -1, -33, -1, -1, -2, -1, 127, -65, 127, -1, -1, -33, -5, -1, 127, -1, -34, 127, -17, -1, -57, -29, -1, -1, -97};
  // {00000000 00100110 11010010 11011111 101}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 100, 75, -5, 5};
}


class GBM_model_python_1589382591366_1_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_4_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.109763205f : 
                    -0.07176983f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.101940215f : 
                    0.17987305f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[13])) ? 
                    -0.07329604f : 
                    -0.020870848f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.054867636f : 
                    0.18036905f))) : 
         (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.10779656f : 
                    -0.025504846f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    0.057777524f : 
                    0.19431788f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                 (data[20 /* inq_last_6mths */] <3.5f ? 
                    0.051965654f : 
                    -0.08891967f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.12891698f : 
                    0.24303363f))));
    return pred;
  } // constant pool size = 995B, number of visited nodes = 15, static init size = 5598B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, -86, -9, 80, -32, 101, -19, 55, 80, 32, -101, 20, 1, -52, 18, 104, 112, 0, -64, 8, 109, 0, 43, -101, 51, 20, 4, -11, 125, -103, -95, -38, 127, 102, -3, -35, -5, 126, 43, 17, -94, 1, 48, -111, -98, 4, 32, 9, 3, -87, -48, 72, 0, 17, 54, -39, 78, 0, -114, 37, 33, 36, 1, -95, 71, 33, 32, -123, -110, -111, 3, -121, -63, -88, 13, -128, 105, -18, 104, -68, -21, 117, -81, 53, 6, 62, 29, 5, 45, 112};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 85, 0, 4, 20, 18, 18, 72, -87, -38, 32, 64, 16, 17, 8, 0, 0, 8, 48, -32, 2, 96, 68, 32, 0, 0, 0, 0, 0, 68, 78, 1, 0, -104, 2, 34, 4, 0, 0, 0, 24, 0, 64, 96, 64, 0, -112, 20, 0, 4, 0, 50, 0, 0, 0, 4, 0, -128, 1, 2, 64, 2, 0, 0, 0, 2, -100, 64, 32, 68, 64, 0, 0, 81, 0, 0, 16, 1, 0, 66, 0, -118, 80, -54, -128, -127, -128, -126, 16, 4};
  // {00000000 00001001 00011001 00000001 000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -112, -104, -128, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0};
  // {00000000 00000000 00100101 11100100 100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, -92, 39, 1};
  // {00110011 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-52, 10, 0, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0, 4, 18, 0, 0, -128, 64, 0, 0, 0, 0, 8, 0, 0, 0, 32, -128, 2, 96, 68, 32, 0, 0, 0, 0, 0, 64, 4, 0, 0, 8, 0, 32, 0, 0, 0, 0, 16, 0, 0, 64, 0, 0, -128, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 2, 0, 0, 0, 0, 0, 0, 8, 0, 0, 68, 64, 0, 0, 65, 0, 0, 16, 0, 0, 2, 0, 0, 0, -128, -128, 0, -128, -128, 0, 0};
  // {00000000 01111111 11111111 11111111 100}
  public static final byte[] GRPSPLIT8 = new byte[] {0, -2, -1, -1, 1};
  // {00001000 00010001 10001100 00000000 00000001 10000000 10000011 10001100 00000010 00000000 00001000 00101000 10000000 00110011 01000000 00000100 00000110 00000000 00000001 00010000 10000000 00000000 01000100 00000000 10000100 00001000 00000000 00001000 00001010 10000000 10000000 00001000 01000010 01100110 00010000 10011011 00010000 00000000 10010000 00000000 00000001 10000000 00000000 00001000 00110000 00100000 00000000 10000000 00000000 10000000 00000000 00010000 00000000 10000000 01000000 00000000 00000000 00000000 01000000 00000100 00000000 00000100 10000000 10000100 11000000 00000100 00000000 10000001 00001001 00001000 00000000 00000001 00000010 00000001 00000000 00000000 00010100 00010101 00000000 00100001 00010000 00101000 01010001 00100000 01000000 00010000 00000000 00000000 10110100 00001000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, -120, 49, 0, -128, 1, -63, 49, 64, 0, 16, 20, 1, -52, 2, 32, 96, 0, -128, 8, 1, 0, 34, 0, 33, 16, 0, 16, 80, 1, 1, 16, 66, 102, 8, -39, 8, 0, 9, 0, -128, 1, 0, 16, 12, 4, 0, 1, 0, 1, 0, 8, 0, 1, 2, 0, 0, 0, 2, 32, 0, 32, 1, 33, 3, 32, 0, -127, -112, 16, 0, -128, 64, -128, 0, 0, 40, -88, 0, -124, 8, 20, -118, 4, 2, 8, 0, 0, 45, 16};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 34, 6, 0, 64, 0, 12, 0, 16, 32, 2, 0, 0, 0, 0, 0, 0, 0, 64, 0, 68, 0, 8, 2, 0, 0, 0, 64, 32, 0, -128, 8, 1, 0, -15, 0, 1, 0, 0, 0, 0, 0, 0, -128, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 48, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 6, 0, 8, 0, 0, 0, 2, 32, 24, 67, 96, 37, 16, 4, 36, 1, 1, 0, 0};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 1, 0, 0, 0, -128, 32, 0, 0, 0, 4, 0, 64, 0, 32, 64, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 1, 0, -128, 1, 0, 16, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 32, 0, 0, 16, 16, 0, -128, 0, -128, 0, 0, 0, -96, 0, 4, 8, 0, -128, 0, 2, 0, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, -63, 80, 32, 96, 0, 4, 0, 0, -120, 16, 0, 0, 16, 72, 16, 0, 0, 0, 9, 0, 0, -104, 0, 4, 4, -91, 69, -120, -96, -128, 48, 0, 0, 4, 48, 92, 34, 17, 34, 0, 0, 0, -112, 0, 0, 9, 0, 40, -128, 0, 0, 0, 0, -104, 74, 0, -116, 5, 33, 36, 0, 0, 68, 33, 0, 4, 2, 0, 2, 2, 1, 32, 13, 0, 72, 76, 104, 36, -96, 0, 0, 33, 0, 18, 0, 0, 0, 16};
  // {00000000 00000000 00000011 00001010 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00100000 10100000 00000000 00010000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00010000 01000000 10001000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00010000 00000001 00000000 00000000 00000000 00000000 00010000 00000010 00000000 00110000 00100000 10000000 00100100 00000000 00000000 00100010 10000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 10000000 00000000 00010000 00000010 00010000 00100000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00001000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, -64, 80, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 0, 8, 0, 0, 16, 0, 0, 0, 0, 8, 2, 17, 0, 0, 0, 0, -128, 0, 0, 0, 0, 8, -128, 0, 0, 0, 0, 8, 64, 0, 12, 4, 1, 36, 0, 0, 68, 1, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 8, 64, 8, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 16};
}


class GBM_model_python_1589382591366_1_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_5_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.108585946f : 
                    -0.08108876f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                    -0.056837995f : 
                    0.115565866f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.10364611f : 
                    -0.020773066f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.01973329f : 
                    0.058203217f))) : 
         (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                 (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[13])) ? 
                    -0.01637229f : 
                    0.10586676f) : 
                 (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[13])) ? 
                    0.0674201f : 
                    0.23501009f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    -0.09541074f : 
                    0.06325492f) : 
                 (Double.isNaN(data[20]) || data[20 /* inq_last_6mths */] <3.5f ? 
                    0.16693081f : 
                    -0.011735579f))));
    return pred;
  } // constant pool size = 824B, number of visited nodes = 15, static init size = 4572B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {84, -86, -29, 80, -32, 97, -60, 39, 64, 32, -101, 20, 1, -56, 18, 104, 48, 0, -128, 0, 9, 0, 43, -103, 50, 20, 4, -59, 109, -120, -95, -126, 123, 64, -19, -36, -7, 110, 41, 17, -94, 1, 32, -111, -116, 4, 0, 9, 3, -87, -48, 72, 0, 16, 54, -104, 78, 0, -114, 37, 33, 36, 1, -127, 70, 33, 32, -123, -110, -112, 1, -121, -63, -96, 5, 0, 104, 110, 104, -76, -21, 52, 47, 53, 4, 58, 29, 5, 44, 80};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 85, 20, 0, 20, 22, 59, 16, 57, -48, 32, 64, 16, 4, 8, 0, 64, 0, 112, 40, 102, 64, 4, 34, 1, 0, 0, 48, 16, 21, 78, 89, 4, -82, 18, 33, 2, 16, 2, 0, 8, 0, 80, 0, 18, 0, 48, 20, 0, 4, 0, 2, 0, 1, 0, 69, 0, -128, 1, 2, 64, 0, 0, 32, 1, 2, -120, 64, 32, 69, 66, 0, 0, 72, 8, -128, 1, -127, 0, 10, 0, -55, -112, 64, -126, -123, -128, -126, 17, 32};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 4, 0, 0, 0, 72, -128, 10, 0, 0, 0, 17, 0, 0, 0, 8, 0, -64, 16, -96, 64, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 16, 0, 2, 4, 0, 0, 0, 16, 4, 0, 96, 64, 1, -128, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 20, 0, 65, 0, 0, 0, 0, 17, 0, 0, -112, 0, 0, 64, 0, 2, 64, -118, 8, 64, 0, 0, 2, 4};
  // {00000000 00001000 00000000 00000000 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 16, 0, 0, 0};
  // {00000000 00000000 00000001 00100101 000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, -128, -92, 0};
  // {00000000 10111011 11111101 11101111 110}
  public static final byte[] GRPSPLIT5 = new byte[] {0, -35, -65, -9, 3};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-33, -2, -1, -1, -5, -3, -35, -17, -1, -1, -1, -65, -17, -1, -9, -1, -1, -1, -97, -41, -37, -1, -5, -35, -1, -1, -1, -33, -1, -5, -9, -81, -5, 127, -1, -33, -3, -17, -1, -1, -9, -1, -65, -1, -19, -1, -1, -21, -1, -1, -1, -1, -1, -1, -1, -65, -1, 127, -1, -3, -65, -1, -1, -1, -2, -3, -1, -65, -1, -5, -65, -1, -1, -65, -9, -1, -2, -2, -1, -3, -1, -74, 127, -65, -3, -1, 127, -3, -17, -33};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -85, -21, -1, -17, -5, -18, -1, -34, 63, -33, -1, -17, -5, -1, -1, -65, -1, -17, -1, -3, -1, -1, -1, -2, -1, -1, -17, -1, -2, -7, -10, -1, -45, -3, -34, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -17, -17, -1, -5, -1, -3, -1, -2, -1, -6, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, 119, -1, -1, -66, -1, -1, -1, -9, -1, -1, -1, 127, -1, -1, -1, -1, -17, -1, 127, 122, -1, 125, -2, -1};
  // {00000000 00100111 10011111 11111011 100}
  public static final byte[] GRPSPLIT8 = new byte[] {0, -28, -7, -33, 1};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {16, -128, 33, 64, 0, 65, -128, 1, 0, 0, 0, 20, 0, -128, 0, 32, 32, 0, -128, 0, 1, 0, 42, 16, 34, 16, 0, 1, 0, 0, 32, 0, 114, 0, 0, -64, 73, 14, 8, 17, -96, 1, 32, 0, 4, 4, 0, 8, 0, 0, 64, 0, 0, 0, 2, -128, 10, 0, 6, 0, 1, 32, 1, 1, 2, 32, 32, 0, 16, 16, 0, -128, 1, -96, 1, 0, 32, 40, 40, 4, 40, 0, 8, 20, 0, 16, 16, 0, 4, 16};
  // {00000001 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-128, 8, 0, 0};
  // {00000100 10011000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {32, 25, 0, 0};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 32, -125, 16, 32, 64, 0, 6, 64, 32, -119, 0, 0, 64, 16, 72, 16, 0, 0, 0, 9, 0, 1, -119, 16, 4, 4, -124, 69, -120, 0, -126, 33, 0, 0, 4, 48, 104, 32, 0, 2, 0, 0, 1, -120, 0, 0, 1, 0, -88, -128, 64, 0, 0, 0, 24, 64, 0, -120, 5, 0, 4, 0, 0, 68, 33, 0, 5, -126, -128, 0, 2, 0, 0, 4, 0, 8, 64, 96, -92, -87, 0, 0, 33, 0, 10, 0, 0, 0, 16};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, 127, -33, -1, -1, -2, 127, -34, -1, -1, -1, -5, -2, 119, -1, -1, -33, -1, 127, -1, -1, -1, -3, -17, -3, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -65, -7, -2, -1, -33, -1, -33, -17, -5, -1, -1, -1, -1, -1, -65, -1, -1, -1, -3, 127, -3, -1, -3, -1, -1, -1, -1, -2, -1, -1, -33, -1, -17, -17, -1, 127, -2, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -17, -21, -2, -1, -1};
}


class GBM_model_python_1589382591366_1_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_6_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
         (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.1858329f ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.09790231f : 
                    -0.03759502f) : 
                 (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                    -0.06295172f : 
                    -0.00414382f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.10696539f : 
                    0.069529064f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    0.20466796f : 
                    0.4409074f))) : 
         (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.09328493f : 
                    -0.005197871f) : 
                 (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                    0.025537932f : 
                    0.15945673f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                 (data[20 /* inq_last_6mths */] <3.5f ? 
                    0.05118735f : 
                    -0.077777535f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 35, 0, data[6])) ? 
                    0.06940442f : 
                    0.18566626f))));
    return pred;
  } // constant pool size = 818B, number of visited nodes = 15, static init size = 4536B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, -86, -13, 80, -32, 101, -60, 55, 64, 32, -101, 20, 1, -52, 18, 104, 48, 0, -64, 8, 9, 0, 43, -101, 50, 20, 4, -27, 125, -103, -93, -102, 127, 64, -19, -40, -7, 126, 43, 17, -94, 1, 32, -111, -98, 4, 0, 9, 3, -87, -48, 72, 0, 16, 54, -39, 78, 0, -114, 37, 33, 36, 1, -127, 71, 33, 32, -123, -110, -111, 1, -121, -63, -88, 13, 0, 104, 110, 104, -68, -21, 117, 47, 53, 4, 62, 29, 5, 45, 112};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 85, 4, 4, 20, 16, 51, 8, 57, -38, 32, 64, 16, 17, 8, 0, 64, 8, 48, -32, 70, -64, 4, 0, 1, 0, 0, 16, 0, 4, 72, 65, 0, -66, 18, 39, 4, 0, 0, 0, 24, 0, 80, 96, 64, 0, 48, 20, 0, 4, 0, 50, 0, 1, 0, 4, 0, 0, 1, 2, 64, 2, 0, 32, 0, 2, -100, 64, 32, 64, 2, 0, 0, 81, 0, -128, 17, -127, 0, 64, 0, -118, -48, 74, -126, -127, 0, -126, 18, 4};
  // {00000000 00011000 00000000 00000000 000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 24, 0, 0, 0};
  // {10100011 01110000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-59, 14, 0, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 4, 0, 4, 2, 24, 64, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 38, 64, 64, 32, 0, 0, 0, 0, 0, 64, 4, 0, 0, 8, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 32, 4, 64, 0, 0, 0, 0, -128, -128, 0, 0, 2, 0, 0, 0, 0, -128, 64, -128, -128, 0, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 16, 0, 0, 0, 16, 0, 0, 1, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 64, 32, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 1, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -3, -25, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -7, -1, -65, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -65, -1, -1, -1, -1, 127, 127, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, 127, -1, -1};
  // {00000000 01111111 11111111 11111111 100}
  public static final byte[] GRPSPLIT7 = new byte[] {0, -2, -1, -1, 1};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {16, -128, 49, 0, -128, 0, -128, 49, 64, 0, 16, 20, 1, -60, 2, 32, 32, 0, -128, 0, 1, 0, 34, 0, 32, 16, 0, 0, 0, 0, 0, 0, 66, 0, 8, -64, 8, 0, 9, 0, -128, 1, 0, 16, 4, 4, 0, 1, 0, 1, 0, 8, 0, 0, 2, 0, 0, 0, 2, 32, 0, 32, 1, 1, 3, 32, 0, 1, 16, 16, 0, -128, 0, -128, 0, 0, 32, 32, 0, -124, 8, 16, 8, 4, 0, 8, 0, 0, 44, 0};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 42, 2, 0, 0, 1, 68, 0, 0, 32, 2, 0, 0, 8, 0, 0, 0, 0, 64, 8, 0, 0, 8, 2, 0, 0, 0, 64, 112, 1, 3, 24, 1, 64, -31, 24, 1, 0, 0, 0, 0, 0, 0, -128, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, -128, 0, 6, 64, 8, 0, 0, 8, 10, 0, 16, 67, 100, 39, 16, 4, 4, 1, 1, 1, 16};
  // {10100100 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {37, 12, 0, 0};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, -64, 80, 0, 96, 0, 4, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 4, 37, 1, -120, 32, -128, 48, 0, 0, 0, 48, 8, 34, 17, 34, 0, 0, 0, -112, 0, 0, 8, 0, 8, -128, 0, 0, 0, 0, 24, 64, 0, 12, 5, 33, 36, 0, 0, 68, 1, 0, 4, 2, 0, 0, 2, 1, 0, 13, 0, 8, 72, 40, 36, 32, 0, 0, 33, 0, 16, 0, 0, 0, 16};
  // {11111111 11100101 01011111 11101101 111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -89, -6, -73, 7};
}


class GBM_model_python_1589382591366_1_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_7_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
         (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.16741514f ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.106100544f : 
                    -0.09046831f) : 
                 (Double.isNaN(data[7]) || (data[7] >= 8215) || data[7 /* emp_title */] <8165.5f ? 
                    -0.031246847f : 
                    0.37831822f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.110168844f : 
                    0.011782283f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                    0.05739654f : 
                    0.19801061f))) : 
         (Double.isNaN(data[2 /* term */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                    -0.082597554f : 
                    -0.009942356f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    0.016821112f : 
                    0.092089504f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    -0.108284324f : 
                    0.03178709f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    0.10056462f : 
                    0.19564031f))));
    return pred;
  } // constant pool size = 904B, number of visited nodes = 15, static init size = 5052B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, -86, -9, 80, -16, 117, -1, 55, 88, 32, -101, 84, 17, -52, 18, 104, 48, 0, -64, 8, 109, 0, 43, -101, 51, 20, 4, -11, 125, -103, -29, -38, 127, 110, -3, -35, -5, 126, 43, 17, -86, 1, 48, -111, -98, 4, 48, 13, 3, -83, -48, 72, 0, 17, 52, -39, 78, -128, -114, 37, 97, 36, 1, -95, 71, 33, 32, -123, -110, -111, 3, -121, -63, -88, 13, -128, 105, 110, 104, -68, -21, -11, 47, 53, 4, 62, -99, 5, 45, 112};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 84, 0, 4, 4, 0, 0, 8, 33, -38, 32, 0, 0, 17, 0, 0, 64, 8, 16, 64, 2, -128, 0, 0, 0, 0, 0, 0, 0, 4, 8, 1, 0, -112, 2, 34, 4, 0, 0, 0, 0, 4, 64, 32, 0, 1, 0, 16, 0, 0, 0, 50, 0, 0, 2, 6, 0, 0, 1, 2, 0, 2, 0, 0, 0, 2, -108, 64, 32, 64, 64, 0, 0, 65, 0, 0, 0, -127, 0, 64, 0, 10, -48, -54, -118, -128, 0, -126, 18, 4};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -2, -1, -1, -1, -3, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -33, -1, -33, -69, -33, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -65, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 1, 0, 0, 4, 2, 0, 64, -96, 64, 0, 0, 0, 0, 8, 0, 0, 0, 32, -96, 2, 96, 68, 32, 0, 0, 0, 0, 0, 64, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 0, 64, 64, 64, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 32, 68, 64, 0, 0, 80, 0, 0, -128, 0, 0, 2, 0, 0, 16, -128, 0, -63, 0, -128, 0, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 16, 0, 0, 0, 0, 0, 0, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0};
  // {00000000 00000000 10000101 00100101 100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, -95, -92, 1};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {20, 40, 51, 80, 0, 97, 67, 6, 0, 32, 18, 20, 17, -64, 0, 104, 32, 0, 0, 8, 8, 0, 42, -120, 34, 20, 0, 81, 81, 0, -96, 88, 61, 0, -120, -39, 42, 28, 41, 17, 0, 0, 0, -112, -124, 0, 48, 1, 3, 1, 0, 72, 0, 0, 4, -55, 0, 0, 14, 4, 32, 32, 0, -127, 6, 32, 32, -123, -110, -111, 0, -126, 65, -96, 0, 0, 33, 102, 72, -92, 11, 33, 6, 16, 0, 58, 28, 4, 8, 112};
  // {00011111 11111111 01001010 10101000 010}
  public static final byte[] GRPSPLIT8 = new byte[] {-8, -1, 82, 21, 2};
  // {00000000 00101111 01101110 10011001 000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, -12, 118, -103, 0};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-21, -9, -53, -1, -1, -54, 48, -35, -1, -33, -20, -69, -17, -1, -1, -33, -33, -1, 127, -9, -97, -1, -43, -9, -35, -17, -1, -81, -89, -2, 29, -89, -30, -9, 79, 34, -35, -21, -34, -1, -9, -1, -1, 111, -17, -1, -49, -5, -4, -2, -1, -73, -1, -1, -21, -66, -1, 127, -5, -6, -33, -1, -1, 95, -6, -1, -33, 127, 127, 126, -1, 121, -65, 127, -1, 127, -98, -7, -1, 111, -2, 30, -5, -17, -5, -63, 98, -5, -2, -97};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 4, 0, 0, 21, -52, 32, 0, 32, 3, 64, 0, 0, 0, 0, 0, 0, -128, 0, 96, 0, 0, 0, 0, 0, 0, 64, 72, 1, -62, 0, 17, 8, 48, 92, 0, 0, 0, 0, 8, 0, 0, -128, 16, 0, 0, 4, 0, 1, 0, 0, 0, 0, 16, 0, 0, -128, 0, 1, 0, 0, 0, 32, 1, 0, 0, -128, -128, -128, 0, 6, 0, 0, 0, -128, 64, 2, 0, 16, 1, -32, 4, 0, 4, 6, -119, 4, 1, 0};
  // {00000000 00000001 10000011 00000000 00000001 00000000 00000000 00001000 00000000 00000000 00000001 00001000 00000000 00010010 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 10000000 10000001 10000000 00000000 00100000 00100101 00100000 00010000 00000000 00000000 01000000 00100000 00100000 00000000 00001010 00010100 00000000 00000000 01000101 10000000 00000000 00000000 00010000 00000000 00000000 00010000 00000000 00000100 00000001 00000000 00000000 00001000 00000000 00001000 00000000 00000000 00000001 00000000 10000010 00100000 10000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 10010000 00000000 00010000 00010000 00000000 00100000 00000100 00000000 00000100 00000100 00000000 00000000 00000000 00000000 00100100 00001000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, -128, -63, 0, -128, 0, 0, 16, 0, 0, -128, 16, 0, 72, 0, 0, 0, 0, 0, 0, 1, 0, 1, -127, 1, 0, 4, -92, 4, 8, 0, 0, 2, 4, 4, 0, 80, 40, 0, 0, -94, 1, 0, 0, 8, 0, 0, 8, 0, 32, -128, 0, 0, 16, 0, 16, 0, 0, -128, 0, 65, 4, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 9, 0, 8, 8, 0, 4, 32, 0, 32, 32, 0, 0, 0, 0, 36, 16};
}


class GBM_model_python_1589382591366_1_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_8_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
         (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.11032527f : 
                    -0.08398464f) : 
                 (Double.isNaN(data[14]) || (data[14] >= 5746) || data[14 /* title */] <3075.5f ? 
                    -0.047228556f : 
                    0.0057485774f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                 (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.20443125f ? 
                    -0.0960966f : 
                    0.08863395f) : 
                 (Double.isNaN(data[14]) || (data[14] >= 5746) || data[14 /* title */] <5179.0f ? 
                    0.052757036f : 
                    0.28431106f))) : 
         (Double.isNaN(data[2 /* term */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[2])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                    -0.0671464f : 
                    -0.0033578326f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                    0.009068229f : 
                    0.07749879f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.106313616f : 
                    0.03101914f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    0.09525605f : 
                    0.19269449f))));
    return pred;
  } // constant pool size = 813B, number of visited nodes = 15, static init size = 4506B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, -86, -9, 80, -16, 117, -1, 55, 88, 32, -101, 84, 17, -52, 18, 104, 112, 0, -64, 40, 109, 64, 43, -101, 51, 20, 4, -11, 125, -103, -29, -38, 127, 110, -3, -35, -5, 126, 43, 17, -86, 1, 48, -111, -98, 4, 48, 13, 3, -83, -48, 72, 0, 17, 54, -39, 78, -128, -114, 39, 97, 36, 1, -95, 71, 33, -88, -123, -78, -111, 3, -121, -63, -88, 13, -128, 105, -18, 104, -68, -21, -3, -81, 53, -124, 62, -99, 5, 61, 112};
  // {00000000 00000010 11111111 11100101 100}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 64, -1, -89, 1};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {32, 68, 0, 4, 0, 0, 0, 72, 32, 90, 32, 0, 0, 17, 0, 0, 0, 8, 16, -64, 16, -128, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 0, -112, 2, 2, 4, 0, 0, 0, 0, 4, 0, 32, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 20, 64, 65, 4, 64, 0, 0, 0, 0, 0, -128, 1, 0, 64, 0, 2, 80, 0, 2, -127, 0, -126, 2, 4};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -2, -1, -1, -1, -3, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -33, -69, -33, -1, -1, -1, -1, -1, -69, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -17, -1, -65, -65, -65, -2, 127, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -81, -1, -1, -1, -1, -1, -3, -1, -1, -1, -75, -9, -65, -1, -1, -1, -1};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 17, 0, 0, 4, 2, 0, 0, -127, -112, 0, 0, 0, 0, 8, 0, 0, 0, 32, -128, 2, 32, 68, 32, 0, 0, 0, 0, 0, 68, 4, 0, 0, 0, 0, 32, 0, 0, 0, 0, 16, 0, 64, 64, 64, 1, -128, 16, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 64, 64, 0, 0, 81, 0, 0, 0, 0, 0, 2, 0, 0, 16, -54, 8, 65, 0, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {20, 8, 51, 80, 0, 32, 3, 6, 0, 32, 18, 20, 16, -64, 0, 104, 96, 0, 0, 8, 0, 0, 42, 8, 34, 20, 0, 17, 81, 0, -96, 88, 61, 0, -128, -39, 42, 28, 41, 17, 0, 0, 0, -112, -128, 0, 48, 1, 3, 1, 0, 72, 0, 0, 4, -55, 0, 0, 14, 4, 32, 32, 0, -127, 6, 32, -96, -123, -110, -127, 0, -126, 65, -96, 0, 0, 33, 110, 72, -92, 11, 33, -124, 16, 0, 58, 28, 4, 24, 112};
  // {00001111 11111111 01101010 00101000 010}
  public static final byte[] GRPSPLIT7 = new byte[] {-16, -1, 86, 20, 2};
  // {00000001 01101111 01101110 10010001 000}
  public static final byte[] GRPSPLIT8 = new byte[] {-128, -10, 118, -119, 0};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {66, -126, -61, 0, -16, 64, 48, 17, 88, 0, -120, 16, 0, 76, 18, 8, 16, 0, 64, 32, 13, 64, 1, -109, 17, 0, 4, -92, 36, -104, 1, -126, 98, 70, 77, 0, 81, 106, 2, 0, -94, 1, 48, 1, 10, 4, 0, 9, 0, -84, -48, 0, 0, 17, 32, 16, 78, 0, -126, 32, 65, 36, 1, 0, 64, 33, 0, 5, 2, 0, 3, 1, -128, 8, 9, 0, 8, -88, 32, 12, -30, 4, 41, 36, 0, 0, 0, 1, 44, 16};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 32, 4, 0, 0, 21, -52, 32, 0, 32, 3, 64, 0, 0, 0, 0, 0, 0, -128, 0, 96, 0, 0, 0, 0, 0, 0, 64, 72, 1, -62, 0, 17, 8, 48, 92, -128, 0, 0, 0, 8, 0, 0, -128, 16, 0, 0, 4, 0, 1, 0, 0, 0, 0, 16, 0, 0, -128, 0, 3, 0, 0, 0, 32, 1, 0, 0, -128, -96, -128, 0, 6, 0, 0, 4, -128, 64, 2, 64, 16, 9, -16, 6, 1, -124, 6, -119, 4, 1, 0};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {0, -128, -63, 0, -128, 0, 0, 16, 0, 0, -128, 0, 0, 72, 0, 0, 0, 0, 0, 32, 1, 0, 1, 0, 0, 0, 0, 36, 4, 8, 0, 0, 2, 0, 4, 0, 80, 40, 0, 0, -94, 1, 0, 0, 8, 0, 0, 8, 0, 32, -128, 0, 0, 16, 0, 16, 0, 0, -128, 0, 64, 4, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 0, 4, 0, 0, 0, 32, 0, 0, 0, 0, 4, 16};
}


class GBM_model_python_1589382591366_1_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_9_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
         (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.10781296f : 
                    -0.07942585f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                    -0.058232956f : 
                    2.3029966E-4f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 35, 0, data[6])) ? 
                    -0.0752713f : 
                    0.1265312f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    0.0790878f : 
                    0.21572095f))) : 
         (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[13])) ? 
             (data[10 /* annual_inc */] <40585.938f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 718, 1, data[15])) ? 
                    -0.031904098f : 
                    0.12774503f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 718, 1, data[15])) ? 
                    -0.032449488f : 
                    0.039379593f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.11840916f : 
                    0.087556146f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.22887361f : 
                    0.38433427f))));
    return pred;
  } // constant pool size = 995B, number of visited nodes = 15, static init size = 5598B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {86, -82, -9, 80, -16, 117, -49, 55, 88, 32, -69, 84, 17, -52, 18, 104, 16, 0, -64, 8, 105, 64, 43, -101, 35, 20, 4, -11, 125, -103, -29, -102, 127, 110, -3, -35, 121, 126, 43, 17, -86, 1, 48, -111, -98, 4, 48, 13, 3, -83, -48, 8, 0, 16, 54, -39, 74, -128, -114, 39, 33, 36, 1, -95, 71, 33, -88, -123, -110, -111, 3, -121, -63, -88, 13, -128, 105, 110, 104, -68, -21, -4, 47, 53, -122, 62, -99, 5, 61, 112};
  // {00000000 00000000 10011111 11100101 110}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, -7, -89, 3};
  // {00000100 00000010 00000000 00100000 00100000 00000000 00001100 00010010 00000100 01011011 00000000 00000000 00000000 10001000 00010000 00000000 00000110 00010000 00001000 00000110 00000000 00000001 00100000 00000000 00001000 00000000 00000000 00000000 00000000 00100000 00010000 10000010 00000000 00001001 01000000 01000100 00100001 00000000 00000000 00000000 00000000 00100000 00000000 00000100 00000000 00000000 00000000 00001000 00000000 00000000 00000000 01001100 00000000 10000000 00000000 00100000 00000000 00000000 10000000 00000000 00000000 01000000 00000000 00000000 00000000 01000000 00101000 00000010 00000110 00100010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000001 00000000 00000010 00000000 11000000 00001011 00010001 00000000 00000001 00000000 01000001 01000000 00100000}
  public static final byte[] GRPSPLIT2 = new byte[] {32, 64, 0, 4, 4, 0, 48, 72, 32, -38, 0, 0, 0, 17, 8, 0, 96, 8, 16, 96, 0, -128, 4, 0, 16, 0, 0, 0, 0, 4, 8, 65, 0, -112, 2, 34, -124, 0, 0, 0, 0, 4, 0, 32, 0, 0, 0, 16, 0, 0, 0, 50, 0, 1, 0, 4, 0, 0, 1, 0, 0, 2, 0, 0, 0, 2, 20, 64, 96, 68, 0, 0, 0, 0, 0, 0, 0, -127, 0, 64, 0, 3, -48, -120, 0, -128, 0, -126, 2, 4};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -2, -1, -1, -1, -3, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -5, -33, -65, -33, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -65, -1, 127, -1, -1, -1, -1, -65, -1, -1, -1, -1, -5, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -81, -1, -1, -1, -1, -1, -3, -1, -1, -1, -3, -1, -65, -1, -1, -1, -1};
  // {00101111 00111110 11111111 11111111 110}
  public static final byte[] GRPSPLIT4 = new byte[] {-12, 124, -1, -1, 3};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 17, 0, 0, 0, 2, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 6, 32, 64, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 32, 2, 0, 0, 0, 16, 0, 64, 64, 64, 1, -128, 0, 0, 0, 0, 64, 0, 0, 0, 0, 4, 0, 1, 0, 64, 0, 0, 0, 0, 0, 0, 0, 32, 64, 64, 0, 0, 81, 0, 0, 16, 0, 0, 2, 0, 0, 16, 66, 8, -63, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000101 100}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, -96, 1};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 80, 0, 0, 0, 0, 0, 2, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 8, 0, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT9 = new byte[] {-36, -19, -26, -1, -41, -11, 124, -2, -37, -17, -17, -1, -1, -67, -2, -5, -9, -1, -97, 123, -53, 95, 110, 126, -1, -1, -3, 47, -17, -73, -2, 119, -15, -8, 17, -33, -57, 92, -1, -1, -1, -1, 127, -9, -77, -1, -9, -7, -1, -7, -9, -1, -1, -1, 125, -9, -1, -1, 127, -19, -17, -17, 127, 127, -3, -1, -85, -65, 127, -65, -1, 127, -97, 127, -7, -65, -33, -8, -17, -85, -65, 25, -20, -17, -4, 118, 55, 127, -1, 55};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT10 = new byte[] {3, -62, 120, 32, 104, 2, -125, 3, 32, -112, 17, 10, 0, 66, 1, 36, 8, 0, 0, -128, 20, -128, 16, -63, 0, 0, -126, -62, 48, 76, 64, -120, 11, 1, 38, 32, 56, -89, 4, 0, 17, 0, -128, 0, 12, 0, 0, 0, 0, 0, 40, 0, 0, 0, 2, 8, 32, 0, -59, 18, 0, 18, -128, 64, -94, 0, 16, 66, -127, 0, -128, -128, 64, -128, 6, 0, 52, 5, 20, -46, 96, 64, 19, 16, 3, -120, -56, -128, 16, 40};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {64, 34, 2, 0, 0, 68, 0, 0, 0, 32, 8, 0, 0, 8, 16, 8, 16, 0, -128, 8, 64, 0, 34, 9, 0, 0, 0, 32, 4, 0, 3, 0, 32, 76, -103, 0, 0, 8, 0, 0, 0, 0, 0, 16, 8, 4, 0, 8, 0, 44, 0, 0, 0, 0, 32, 8, 2, 0, 0, 2, 32, 0, 0, 0, 1, 0, -128, 1, -128, -128, 0, -128, 64, 0, 0, -128, 0, 36, 32, 8, 34, 76, 1, 0, 0, 2, 0, 0, 12, 0};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 2, 0, 0, 64, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 64, 16, 64, -128, 4, 0, 0, 0, 8, 0, 1, 0};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -65, -1, -1, -1, -1, -1, -1, -1, -5, -1, -2, -1, -1, -13, -26, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -41, -1, -1, -1, -1, -33, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, 127, -1, -1, -1, -65, -1, -1, 127, -1, -1, -1, -9, -1, -77, -1, -1, -1, -1, -1, -1, -9, -1};
}


class GBM_model_python_1589382591366_1_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_10_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* term */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.11650872f : 
                    -0.09208488f) : 
                 (Double.isNaN(data[17]) || data[17 /* dti */] <23.429688f ? 
                    -0.04289924f : 
                    -0.11214518f)) : 
             (data[10 /* annual_inc */] <44093.75f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(717, 2, data[15]) || (GenModel.bitSetIsInRange(717, 2, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 717, 2, data[15])) ? 
                    0.0031010685f : 
                    0.14747062f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(717, 2, data[15]) || (GenModel.bitSetIsInRange(717, 2, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 717, 2, data[15])) ? 
                    -0.038640663f : 
                    0.05560779f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.11247135f : 
                    -0.08368573f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.03589382f : 
                    0.08000332f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                 (Double.isNaN(data[10]) || data[10 /* annual_inc */] <79171.875f ? 
                    0.08697667f : 
                    0.003609999f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                    0.09724483f : 
                    0.19199932f))));
    return pred;
  } // constant pool size = 898B, number of visited nodes = 15, static init size = 5016B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00101110 01110101 11101100 00101010 00000000 10101110 11010011 01100100 00000010 01001111 01011100 00101010 10001000 10000011 01000000 00010110 00000110 00010000 00001001 00010000 00010010 00000000 01010100 00010001 01000100 00101000 00000000 10001010 10011010 10100000 00010111 10011010 10111100 00001100 00010101 11011111 01110100 00111000 10010100 10001000 01010000 00000000 00000100 00001001 00100011 00100000 00001100 10100000 11000000 10000000 00000000 01010010 00000000 00000000 01101000 10010011 00000000 00000000 11110000 00100100 00000100 00000100 00000000 10000101 01100000 01000100 00111101 10100011 01001001 10001001 00000000 01100001 10000010 00000101 00000000 00000000 10000110 01110110 00010110 00111101 11010111 10110110 11110011 10011010 01100001 11111101 10111001 11100000 10011000 00101110}
  public static final byte[] GRPSPLIT1 = new byte[] {116, -82, 55, 84, 0, 117, -53, 38, 64, -14, 58, 84, 17, -63, 2, 104, 96, 8, -112, 8, 72, 0, 42, -120, 34, 20, 0, 81, 89, 5, -24, 89, 61, 48, -88, -5, 46, 28, 41, 17, 10, 0, 32, -112, -60, 4, 48, 5, 3, 1, 0, 74, 0, 0, 22, -55, 0, 0, 15, 36, 32, 32, 0, -95, 6, 34, -68, -59, -110, -111, 0, -122, 65, -96, 0, 0, 97, 110, 104, -68, -21, 109, -49, 89, -122, -65, -99, 7, 25, 116};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -18, -65, -1, -17, -3, -49, -9, 119, -1, 126, -1, -1, -9, -17, -1, -17, -1, -1, -33, -1, 95, -70, -50, -17, -1, -5, -37, -5, 55, -1, -1, -65, -65, -1, -1, 63, -99, -3, -1, 79, -5, -1, -10, -27, -2, 127, -25, -1, 87, -81, -17, -1, -18, -1, -19, -71, -1, 127, -1, -66, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -2, -1, -17, -14, -1, -9, 126, -1, -3, -1, -1, -1, 125, -9, -65, -1, 127, -33, -1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -17, -1, -49, -1, -1, -1, 126, -1, -1, -9, -1, -1, -17, -1, -1, -1, -1, -1, -1, -18, -17, -1, -5, -33, -5, -1, -1, -1, -65, -1, -1, -1, 63, -99, -3, -1, 95, -1, -1, -2, -11, -1, -1, -9, -1, 95, -81, -1, -1, -18, -1, -17, -5, -1, 127, -1, -66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -5, -1, -9, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
  // {...2 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 66, 1, 4, 0, 88, -94, 8, -128, -128, 4, 85, 4, 16, 0, 8, 16, 2, 0, 0, 0, 0, 2, -126, 8, 5, 0, 20, 22, 0, 40, 2, 5, 4, 0, -90, 2, 4, 74, 0, 2, 0, 8, 0, 16, 1, 68, -64, 64, 0, 0, 0, 0, -128, 0, 48, 0, -128, 3, 0, 8, 8, 0, -128, 0, 8, 65, 32, 36, 4, -128, 1, 16, 40, 0, 0, 8, 16, 0, -127, 10, 72, 82, 0, 32, 67, 3, 1, 6, 0};
  // {...2 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {9, -93, 12, 16, 64, -127, -128, 1, 16, 40, 10, 0, 64, -96, 0, 18, 0, 0, 32, 2, 0, -128, 8, 32, 0, 0, 64, 64, 80, 0, 66, 84, 14, 0, 66, 56, 8, 67, 0, -128, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, -128, 18, 0, 0, 65, 2, 0, -64, 0, 9, 0, 0, 64, 40, -127, 0, 40, -127, 64, 32, -128, 96, 0, 0, 0, 64, -112, 10, 10, 40, 96, -128, 33, -106, 0, 4, 36, 0, 0, 21};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {66, -13, -61, 0, -12, 66, -72, 25, -8, 0, -125, 16, 0, 76, 26, 8, 16, 0, 64, 32, 45, -32, 5, -109, 17, 0, 4, -92, 36, -40, 3, -126, 82, 78, 127, 64, -47, 106, 2, 0, -78, 5, 48, 65, 10, 5, -128, 25, 0, -83, -48, 32, 0, 17, 32, 20, 78, 0, -126, 35, 65, 36, 1, 0, 64, 33, 0, 5, 3, 64, 67, 5, -128, 88, 13, -128, 72, -87, 96, 30, -21, -44, 59, -91, 12, 4, 1, -127, 44, 16};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 4, 0, 0, 21, 68, 96, 1, 80, 8, 64, 0, 0, 0, 0, 0, 0, -96, 0, 66, 0, 64, 40, 0, 0, 0, 64, 72, 1, -60, 0, 33, -128, 0, 28, 0, 0, 0, 0, 8, 0, 64, -128, 16, 0, 0, 4, 0, 0, 0, 16, 0, 0, 16, 2, 0, -128, 0, 0, 0, 0, 0, 32, 1, 0, 0, -128, -96, -124, 0, 2, 0, 1, 0, 0, -112, 2, 0, 0, 0, 32, 4, 2, -128, 66, -120, 4, 1, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-53, -13, -49, -5, -1, -33, -4, -3, -1, 117, -49, -5, -17, -18, -1, -33, -97, -9, -17, -73, -1, -1, -43, -1, -35, -17, -1, -17, -17, -5, -41, -90, -13, -17, 127, 92, -7, -1, -34, -1, -1, -1, -1, -17, -65, -1, -17, -1, -4, -1, -1, -75, -1, -1, -5, -66, -1, -1, -6, -1, -33, -3, -1, 127, -1, -3, 67, -1, -1, -2, -1, 127, -65, 127, -1, -1, -34, -5, -1, 63, -1, -4, 63, -89, -3, 71, -21, -3, -17, -101};
  // {00100000 10000000 10110101 10101001 101}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 1, -83, -107, 5};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {2, -128, -61, 0, -16, 0, 16, 17, 72, 0, -128, 16, 0, 72, 10, 0, 16, 0, 0, 32, 1, 64, 5, -111, 1, 0, 4, -92, 36, 8, 0, -128, 2, 4, 5, 0, 80, 42, 0, 0, -78, 5, 0, 1, 8, 0, 0, 8, 0, 32, -128, 0, 0, 16, 0, 16, 4, 0, -126, 0, 65, 4, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 16, 9, 0, 8, -120, 0, 6, -96, 0, 32, -92, 0, 0, 0, -128, 36, 16};
  // {00000000 00100000 11010001 11110111 111}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 4, -117, -17, 7};
}


class GBM_model_python_1589382591366_1_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_11_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.08277116f : 
                    -0.015672555f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.07446601f : 
                    0.09291395f)) : 
             (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.18781914f ? 
                 (data[10 /* annual_inc */] <46076.25f ? 
                    0.04253874f : 
                    -0.010724941f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 718, 1, data[15])) ? 
                    -0.06574895f : 
                    0.19083756f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.12661648f : 
                    -0.099343345f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.10093896f : 
                    0.21304607f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                    0.11365586f : 
                    0.28212672f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    0.23897389f : 
                    0.41758138f))));
    return pred;
  } // constant pool size = 904B, number of visited nodes = 15, static init size = 5052B
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {22, -17, -11, 80, -16, 49, -1, 55, 120, 96, -77, 84, 1, -60, 2, 96, 64, 0, 80, 0, 111, 64, 9, -110, 35, 20, 4, -107, 121, -39, -31, -101, 91, 34, 109, -35, -5, 126, 43, 17, -86, 1, 112, -127, -106, 4, 48, 5, 3, -127, -48, 8, 0, 17, 54, -47, 72, -128, -113, 36, 65, 36, 1, -95, 70, 35, 56, -124, -78, 81, 3, 7, -127, -24, 13, 0, 105, 107, 104, -76, -23, 53, 63, 53, -122, 60, -99, 5, 60, 112};
  // {00000000 00000011 10111101 00100101 100}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -64, -67, -92, 1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {32, 16, 2, 4, 0, 4, 0, 72, 0, -102, 0, 0, 0, 16, 0, 8, 0, 0, -128, -120, 0, -128, 32, 0, 0, 0, 0, 64, 0, 4, 12, 0, 32, -36, 2, 34, 4, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 6, 6, 0, 0, 1, 0, 2, 0, 0, 1, 0, 4, 1, 1, -124, 0, 0, 0, 16, 0, 0, -128, -128, 0, 66, 0, -62, 64, 0, 0, -127, 0, -126, 2, 4};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 2, 0, 0, 6, 0, 0, -127, 0, 8, 0, 16, 8, 8, 0, 16, 8, 32, 64, 16, 32, 68, 41, 0, 0, 0, 0, 0, 0, 0, 64, 4, 0, -112, 0, 0, 0, 0, 0, 16, 0, 0, 64, 72, 1, -128, 16, 0, 4, 0, 64, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 4, 64, 0, 64, 1, 0, 0, 16, 0, 0, 8, 2, 64, 0, 74, 0, 66, 0, 0, 1, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -8, -9, -1, -65, -9, -1, -2, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -33, -1, -5, -1, -5, -65, -1, -1, -1, -73, 87, 127, 31, -14, -1, 126, 121, -75, -1, -1, -1, -1, -5, -1, -17, -1, -1, -1, 103, -1, -1, -1, -1, -5, -1, -1, 111, -1, -1, 127, -1, -1, -1, -1, -1, -81, -1, -2, -1, -1, -1, -1, -1, -2, -1, -5, -1, 127, -17, -2, -33, -1, -1, -17, -9, -1, -3, -19, -13, -1, -13, 63};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 34, 2, 0, 4, 68, 0, 0, 1, 48, 8, 0, 0, 9, 16, 8, 48, 0, -128, 40, 64, 0, 34, 9, 16, 0, 0, 32, 4, 0, 3, 0, 32, 76, -103, 32, 0, 8, 0, 0, 0, 4, 0, 16, 8, 4, 0, 8, 0, 44, 0, 0, 0, 0, 32, 8, 2, 0, 0, 3, 32, 0, 0, 0, 1, 0, -128, 65, -64, -128, 64, -128, 64, 0, 0, -128, 16, 36, 32, 8, 34, 76, -127, -128, 8, -125, 0, 0, 13, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 2, 0, 0, 64, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 64, 16, 64, -128, 4, 0, 0, 0, 8, -128, 0, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -17, -1, -65, -17, -81, -33, -1, -1, -17, -1, -1, 127, -1, -1, -1, -1, -1, -1, -4, -1, -9, -3, -1, -1, -1, -1, -73, -65, -1, -17, -1, -1, -33, -1, -1, -97, -33, -1, -1, -1, -97, 127, -5, -1, -1, -2, -2, -2, -1, -9, -1, -1, -7, 127, -1, -1, -1, -1, -1, -1, -1, 95, -1, -1, -1, -1, -1, -17, -2, -5, -1, -1, -1, -1, -1, -1, -1, -1, -2, -18, -43, -1, -5, -9, -1, -5, -1, -17};
  // {01111001 01001110 00001011 00010001 000}
  public static final byte[] GRPSPLIT9 = new byte[] {-98, 114, -48, -120, 0};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 34, 2, 0, 4, 68, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 32, 0, -128, 0, 0, 0, 34, 8, 0, 0, 0, 32, 0, 0, 2, 0, 0, 64, -128, 32, 0, 0, 0, 0, 0, 0, 0, 16, 8, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 32, 0, 0, 0, 1, 0, 0, 1, 0, -128, 0, -128, 0, 0, 0, 0, 0, 36, 32, 0, 2, 0, -127, 0, 0, -126, 0, 0, 4, 0};
  // {00000000 00111101 01101010 10100010 010}
  public static final byte[] GRPSPLIT11 = new byte[] {0, -68, 86, 69, 2};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -3, -1, -1, -1, -65, -1, -1, -1, -1, -9, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -33, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -37, -33, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1};
}


class GBM_model_python_1589382591366_1_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_12_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* int_rate */] <0.0789376f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.12404791f : 
                    -0.11085587f) : 
                 (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                    -0.08986255f : 
                    -0.022828374f)) : 
             (data[10 /* annual_inc */] <37078.125f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(706, 11, data[15]) || (GenModel.bitSetIsInRange(706, 11, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 706, 11, data[15])) ? 
                    0.10029377f : 
                    0.54055f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(706, 11, data[15]) || (GenModel.bitSetIsInRange(706, 11, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 706, 11, data[15])) ? 
                    0.016923124f : 
                    0.2766359f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.18654671f ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.07146021f : 
                    -0.0027151497f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.05613295f : 
                    0.16480711f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                 (Double.isNaN(data[20]) || data[20 /* inq_last_6mths */] <3.5f ? 
                    0.03438692f : 
                    -0.06755057f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    0.07033137f : 
                    0.2168568f))));
    return pred;
  } // constant pool size = 890B, number of visited nodes = 15, static init size = 4968B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 40, 35, 0, -128, 0, 8, 0, 0, 32, 2, 16, 0, 81, 2, 0, 0, 8, 0, -128, 2, 0, 0, 0, 0, 16, 0, 64, 64, 1, 1, 0, 64, 96, -128, 91, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 32, 0, 0, -112, -128, 0, 0, 0, 0, 64, 0, 0, 0, -128, 32, 32, 64, 8, 0, 11, 0, -128, -116, 0, 1, 4, 20};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-118, 17, 8, -127, 12, -118, 96, 0, -125, 5, 4, 10, 102, 34, -84, 4, -100, -125, 33, 35, 20, -67, -60, 97, 76, 32, 106, 40, -122, -64, -64, 4, -128, 1, 89, -128, 0, 33, 4, 32, 80, -116, -120, 70, 1, 91, -32, 114, 56, 50, 59, -92, -57, 8, -112, 3, -47, 5, 0, -120, -120, 24, 70, 14, 24, -124, 0, 48, 77, -120, -36, 73, 34, 83, -24, 2, 22, 16, 2, 18, 20, 4, 48, -62, 88, 0, 66, 96, -120, 1};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -17, -1, -1, -66, -2, -33, -65, -1, -17, -1, -1, 127, -1, -1, -65, -1, -1, -1, -2, -1, -43, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -9, -1, -10, -1, 127, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -9, -1, -1, -3, -1, -1, -1, -1, -33, -1, -33, -1, -1, -1, -2, -1, -2, -17, -1, -1, 125, -1, 127, -1, -1, -33, -11, -1, 123, -1, -17, -1, -21, -1, -1, -1, -1, -1, -1};
  // {10111000 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {29, 10, 0, 0};
  // {...11 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {32, 0, 0, 0, 0, 1, 0, 0, 4, 0, 2, 0, 10, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 32, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0, -112, 0, 0, 0, 0, 0};
  // {...11 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 32, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, -128, -128, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {118, -93, -61, 80, 80, 112, 64, 55, 72, 16, -101, 84, 1, -120, 0, 104, 80, 0, -112, 0, 73, 64, 43, -102, 34, 4, 4, -107, 117, 24, -94, -101, 59, 10, 108, -124, 121, 126, 43, 17, -86, 1, 32, -128, -104, 4, 48, 13, 1, 41, -48, 8, 0, 0, 38, -40, 74, 0, -113, 37, 97, 36, 1, -127, 71, 35, 40, 5, -78, -127, 2, -121, 1, -88, 5, -128, 105, 79, 104, -84, -29, -11, 36, 53, 4, 50, -103, 4, 41, 112};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 84, 20, 4, -124, 7, -93, 8, 49, -22, 32, 0, 16, 4, 8, 0, 32, 0, 96, 104, 20, -128, 4, 0, 17, 0, 0, 96, 0, 4, 73, 64, 4, -108, -109, 49, -122, 0, 0, 0, 16, 4, 80, 81, 70, 1, 0, 16, 2, -124, 0, 82, 0, 16, 16, 7, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 4, 64, 65, 80, 65, 0, -64, 81, 0, 0, 16, -96, 0, 16, 8, 10, -37, -54, 10, 5, 4, -125, 18, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 4, 0, 36, 0, 28, 64, -80, 32, 0, 0, 0, 0, 16, 0, 0, 0, 32, 0, 38, 0, 0, 33, 0, 0, 0, 0, 8, -64, 4, 0, 0, 64, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 4, 0, 0, 0, 0, 16, 4, 4, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 68, 65, 0, -128, 0, 8, 0, -128, 0, 0, 2, 0, 0, 3, 0, -128, 64, 0, -127, 0, 0};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, -128, 80, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 8, 0, 0, 18, 0, 0, 0, 0, 0, 40, 1, -128, 1, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 8, 0, 0, 12, 0, 0, 36, 1, 1, 2, 1, 0, 0, 16, 0, 0, -128, 0, 0, 1, 0, 0, 72, 8, 4, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0};
  // {00010010 11011001 01100001 00000000 000}
  public static final byte[] GRPSPLIT10 = new byte[] {72, -101, -122, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_13_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.15161557f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.09569508f : 
                    -0.0725295f) : 
                 (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                    -0.021107089f : 
                    0.09656039f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.046525f : 
                    0.062824465f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    0.022249755f : 
                    0.13420981f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.11764434f : 
                    -0.075688146f) : 
                 (Double.isNaN(data[20]) || data[20 /* inq_last_6mths */] <3.5f ? 
                    0.032858245f : 
                    -0.104029045f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                 (Double.isNaN(data[20]) || data[20 /* inq_last_6mths */] <3.5f ? 
                    0.09282581f : 
                    -0.05736744f) : 
                 (!Double.isNaN(data[8 /* emp_length */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                    0.09025949f : 
                    0.23247932f))));
    return pred;
  } // constant pool size = 897B, number of visited nodes = 15, static init size = 5010B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {18, -26, 50, 80, 16, 117, -93, 55, 80, 0, 8, 84, 17, -60, 0, 96, 96, 0, 16, 8, 0, 0, 42, 2, 32, 20, 0, -15, 17, 5, -86, 0, 92, -60, 41, -39, -63, 28, 43, 17, -94, 1, 48, -111, 6, 4, 0, 13, 3, 1, 0, 10, 0, 0, 34, -63, 66, 0, 14, 0, 97, 32, 1, 33, 3, 34, -96, 5, 18, 0, 1, -126, 65, -88, 4, 0, 32, 47, 32, -76, 104, -123, -127, 16, -126, 40, 21, 2, 29, 52};
  // {00000110 00011000 10100000 00100000 00100101 00000000 00111010 00010010 10010100 01011110 01001000 00000000 00000000 10001000 01000000 00000000 00001000 00010000 00000011 00000011 01001110 00000001 00000000 00010000 01001000 00000000 00000000 00000000 00000000 00000000 00100010 11010011 10000100 01011100 01001011 01100000 01100000 01000000 00000000 00000000 00010000 00100000 00000000 00000110 00010000 00000000 00001100 00000000 00000000 00100000 00000000 00001100 00000000 10000000 00001000 01100000 00000000 00000001 00000000 10000100 00000000 01000000 00000000 00000001 00000000 00000000 00111000 00000001 10000111 00101001 00000000 00000000 00000001 10000010 00000000 00000000 10011011 00000001 00000000 00010010 01000000 01001110 01111110 01110111 00100000 11100001 00000001 00000001 01000100 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {96, 24, 5, 4, -92, 0, 92, 72, 41, 122, 18, 0, 0, 17, 2, 0, 16, 8, -64, -64, 114, -128, 0, 8, 18, 0, 0, 0, 0, 0, 68, -53, 33, 58, -46, 6, 6, 2, 0, 0, 8, 4, 0, 96, 8, 0, 48, 0, 0, 4, 0, 48, 0, 1, 16, 6, 0, -128, 0, 33, 0, 2, 0, -128, 0, 0, 28, -128, -31, -108, 0, 0, -128, 65, 0, 0, -39, -128, 0, 72, 2, 114, 126, -18, 4, -121, -128, -128, 34, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-5, -1, -65, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, -9, -17, -9, -1, -1, -1, -33, -13, -1, -2, -18, -1, -1, -5, -5, -1, 127, -1, -1, -1, -1, -1, -33, -33, -97, -1, -1, -1, -1, -65, -1, 111, -1, -1, -17, -1, 87, -17, -65, -1, -17, -5, -25, -13, -1, -1, -7, -1, -1, -1, -1, -69, -2, -1, -1, -1, -2, -1, -5, -1, -1, -9, 127, -1, -1, -1, -1, 127, -9, -1, -1, -1, -17, -9, -6, -1, -65};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0};
  // {00000000 11111111 10000000 00000000 000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -1, 1, 0, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, -128, 48, 0, 16, 1, -128, 33, 64, 0, 0, 20, 1, -64, 0, 32, 96, 0, 16, 0, 0, 0, 34, 0, 32, 16, 0, 16, 0, 5, 0, 0, 64, 4, 8, -103, 0, 16, 0, 0, -128, 1, 0, -112, 4, 4, 0, 1, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, -128, 1, 16, 0, 0, 0, 64, -120, 0, 0, 32, 32, 0, -124, 8, 4, 0, 0, 0, 8, 1, 0, 13, 4};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {18, 0, 0, 80, 0, 68, 34, 22, 0, 0, 0, 80, 16, 4, 0, 64, 0, 0, 0, 0, 0, 0, 32, 0, 0, 4, 0, 33, 1, 0, 34, 0, 24, 0, 1, 0, -127, 12, 42, 17, 34, 0, 32, 0, 0, 0, 0, 13, 3, 1, 0, 0, 0, 0, 2, 0, 64, 0, 6, 0, 97, 32, 1, 33, 3, 34, 0, 0, 0, 0, 0, -126, 0, 32, 4, 0, 0, 12, 32, 36, 96, 1, -128, 16, 2, 32, 4, 2, 16, 48};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 1, -63, 0, -32, 34, 0, 0, 0, -96, -93, 0, 0, 8, 26, 8, 0, 0, 64, 32, 13, 64, 13, -103, 1, 0, 4, 4, 104, -104, -127, -102, 35, 64, -44, 36, 56, 96, 0, 0, 18, 0, 64, 0, -40, 5, 0, 0, 0, -88, -112, 64, 0, 16, 4, 24, 12, 0, -127, 39, 0, 4, 0, -128, 68, 33, 8, -124, -94, 65, 66, 6, -128, 80, 9, -128, 105, 64, 72, 10, -93, 88, 40, 37, 8, 22, 8, 5, 32, 80};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {64, 58, 6, 0, 4, 16, 92, 65, -119, 80, 16, 0, 0, 0, 0, 0, 16, 0, -96, -128, 98, 32, 64, 32, 0, 0, 0, -64, 4, 64, 68, 1, 0, 10, 34, -128, 1, 0, 0, 0, 8, 0, 0, -64, 0, 0, -80, 16, 0, 4, 64, 0, 0, 0, 48, 5, 2, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, -124, 0, 1, 0, 1, 0, 0, -112, 2, 32, -128, 64, 36, 22, -64, 4, -63, -128, -128, 8, 0};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-19, -1, -33, -1, -17, -70, 92, -19, -65, -1, -1, -65, -18, -5, -1, -33, -65, -1, -1, -9, -1, -1, -33, -3, -1, -1, -1, -49, -18, -6, -3, -1, -73, -5, -9, -81, 127, -17, -33, -1, -33, -1, -49, -2, -3, -1, -1, -5, -4, -2, -1, -9, -1, -1, -3, -1, -1, -1, -3, -1, -65, -1, -1, -33, -2, -1, -33, -1, -17, -1, -1, -1, -65, -41, -1, -1, -1, -45, -1, -33, -1, 126, 127, -19, -3, -9, -21, -1, -5, -33};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 1, 0, -128, 32, 0, 0, 0, 0, -96, 0, 0, 8, 16, 0, 0, 0, 0, 32, 1, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 8, 32, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, 16, 4, 16, 8, 0, 1, 4, 0, 0, 0, 0, 4, 0, 0, -128, 0, 1, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, -96, 0, 0, 1, 0, 0, 0, 1, 0, 64};
  // {01111111 11010000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-2, 11, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_14_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* annual_inc */] <64263.67f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.11253633f : 
                    -0.05629464f) : 
                 (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.20154218f ? 
                    0.0034745317f : 
                    0.14507623f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.013767514f : 
                    0.11839006f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    0.058729578f : 
                    0.1594646f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.123274185f : 
                    -0.09855401f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.05017278f : 
                    0.030290665f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    -0.082796134f : 
                    0.17110555f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    0.06871407f : 
                    0.19392706f))));
    return pred;
  } // constant pool size = 990B, number of visited nodes = 15, static init size = 5568B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {112, -6, -127, 80, 32, 119, -101, 38, 64, 80, 3, 20, 0, -60, 0, 96, 64, 0, 32, 32, 75, 0, 77, -128, 48, 20, 4, 85, 125, 9, -32, -45, 93, -32, 48, -55, -21, 92, 40, 17, -112, 5, 48, -96, -122, 4, 32, 1, 3, -128, -128, 24, 0, 17, 20, -55, 10, -128, 14, 35, 33, 32, 1, -128, 71, 34, 36, -123, -112, 16, 2, -121, 65, -32, 4, -128, 40, 99, 40, 30, -21, -78, 25, 37, -122, 54, 24, 5, 28, 80};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 4, 4, 4, -60, 0, 0, 81, 49, -86, -112, 0, 17, 24, 0, 0, 32, 8, 80, 0, 48, 32, 0, 24, 2, 0, 0, -96, 0, -44, 7, 8, 0, 28, -51, 52, 4, 32, 2, 0, 8, 0, 0, 64, 64, 1, -112, 28, 0, 4, 0, 32, 0, 0, 2, 4, 4, 0, 1, 0, 64, 2, 0, 32, 0, 0, -112, 64, 2, -64, 1, 0, -128, 9, 0, 0, -111, -116, 64, 0, 0, 12, 68, -62, 0, -127, 5, -126, 0, 32};
  // {11011111 11111111 11110011 11111111 11110111 11111111 11111011 11111111 11111110 11111111 11101011 11111111 11111111 11111111 11110111 11111111 11110111 11111111 11111111 11101111 11111111 11111101 10111111 11111011 01111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11110111 10111111 01111111 11111111 11111011 11111111 11111111 01111111 11110111 11111111 11111111 11111111 11111111 11101011 11110101 10111101 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 01111111 11111111 11111111 11111111 01011111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111000 11111111 01111111 11111010 11101111 11111111 11111101 11111110 11111111 11111111 11011111}
  public static final byte[] GRPSPLIT2 = new byte[] {-5, -1, -49, -1, -17, -1, -33, -1, 127, -1, -41, -1, -1, -1, -17, -1, -17, -1, -1, -9, -1, -65, -3, -33, -2, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -17, -3, -2, -1, -33, -1, -1, -2, -17, -1, -1, -1, -1, -41, -81, -67, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -2, -1, -2, -1, -1, -1, -6, -1, -1, -1, -1, -9, -1, -1, -1, -1, 31, -1, -2, 95, -9, -1, -65, 127, -1, -1, -5};
  // {00000000 01111111 10101011 10110011 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -2, -43, -51, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {16, -128, 1, 0, 0, 1, -127, 32, 0, 64, 0, 20, 0, -64, 0, 32, 64, 0, 0, 32, 1, 0, 8, 0, 32, 16, 0, 16, 16, 1, 0, 0, 1, 32, 0, -128, 8, 64, 8, 0, 0, 1, 0, -96, 4, 0, 0, 0, 0, 0, 0, 8, 0, 1, 0, 0, 8, 0, 10, 32, 0, 0, 1, 0, 2, 34, 0, -124, -112, 16, 0, -123, 0, -128, 0, 0, 40, 32, 0, 4, 8, 16, 24, 4, 2, 4, 0, 1, 20, 64};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {96, 0, -128, 80, 32, 67, 16, 6, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 0, 0, 9, 0, 0, 0, 0, 4, 0, 69, 4, 8, -96, -64, 28, 0, 0, -128, 40, 20, 32, 17, 0, 4, 32, 0, -128, 0, 0, 0, 0, -128, 0, 0, 0, 0, 4, -120, 2, 0, 4, 3, 1, 32, 0, 0, 64, 0, 4, 1, 0, 0, 2, 0, 1, 96, 4, -128, 32, 65, 40, 20, 99, 0, 0, 1, -128, 0, 16, 0, 0, 16};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {6, 0, 114, 0, -48, 32, 100, 0, -120, 0, 56, 64, 0, 1, 26, 8, 16, 0, -128, 8, 36, 64, 34, 43, 1, 0, 0, -128, 64, 16, 11, 0, 34, 2, -114, 2, 16, 10, 1, 0, 34, 0, 64, 17, 24, 0, 0, 4, 0, 41, 80, 66, 0, 0, 32, 16, 64, 0, -128, 4, 0, 4, 0, 33, 0, 33, -120, 0, 34, -123, 0, 0, 0, 24, 9, 0, 65, 8, 64, -32, -32, 65, -90, 56, 8, 72, -127, 0, 35, 20};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-49, -27, -2, -21, -33, -4, 116, -19, -1, -75, -2, -5, -18, 43, -1, -1, -65, -1, -1, -33, -74, -1, -77, -17, -51, -1, -1, -17, -29, 58, -37, 44, -78, 11, -1, 79, 81, -21, -43, -1, -17, -1, -33, -33, -71, -1, -1, -17, -4, 127, -1, -57, -1, -18, -5, 63, -11, 127, -4, -35, -98, -3, -1, -1, -6, -3, -53, -2, 111, -17, -1, 126, -1, 62, -5, -1, 95, -38, -1, -17, -9, 101, -89, -7, -3, -35, -21, -3, -25, -97};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-17, -3, -2, -1, -1, -2, 126, -3, -1, -1, -2, -1, -1, 59, -1, -1, -65, -1, -1, -1, -2, -1, -9, -1, -17, -1, -1, -1, -21, -2, -33, -65, -74, -65, -1, 127, 87, -21, -41, -1, -1, -1, -33, -1, -1, -1, -1, -1, -2, 127, -1, -1, -1, -1, -1, 127, -11, -1, -3, -33, -2, -1, -1, -1, -1, -1, -33, -1, -17, -17, -1, -1, -1, -1, -5, -1, -33, -33, -1, -1, -9, -17, -1, -1, -1, -3, -17, -1, -9, -1};
  // {00000000 00000110 01000100 11000111 100}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 96, 34, -29, 1};
  // {00101100 10111111 01111111 11011111 110}
  public static final byte[] GRPSPLIT10 = new byte[] {52, -3, -2, -5, 3};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 48, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 9, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 2, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, -64, 0, 0, 0, 16, 0, 0, 0, 0, 34, 0};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 0, 2, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 16, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 16, 2, 1, 0, 32, 0, 0, 17, 8, 0, 0, 0, 0, 9, 80, 64, 0, 0, 0, 0, 64, 0, 0, 4, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 16, 8, 0, 0, 0, 0, 32, 0, 1, 32, 8, 0, 0, -128, 0, 0, 4};
}


class GBM_model_python_1589382591366_1_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_15_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.076624215f : 
                    -0.010917004f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.038856868f : 
                    0.1047443f)) : 
             (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.15170586f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 718, 1, data[15])) ? 
                    -0.023496917f : 
                    0.026175134f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 718, 1, data[15])) ? 
                    -0.007014628f : 
                    0.1008453f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.12680174f : 
                    -0.098497346f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.04268559f : 
                    0.2055956f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[8 /* emp_length */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                    0.028183986f : 
                    0.21123391f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.22438075f : 
                    0.3407887f))));
    return pred;
  } // constant pool size = 994B, number of visited nodes = 15, static init size = 5592B
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {22, -49, -11, 84, -48, 49, -33, 55, 112, 32, 51, 84, 17, -60, 10, 96, 64, 0, 80, -128, 47, 64, 8, -126, 35, 20, 4, -107, 121, -103, -32, -101, 27, -94, 109, -35, -37, 108, 41, 17, -86, 1, 112, -127, -124, 0, 48, 21, 3, -127, -48, 10, 0, 17, 54, -47, 72, -128, -113, 36, 1, 36, 1, -95, 70, 33, 56, -124, -78, 81, 3, 7, -127, 104, 5, 0, 105, -53, 104, -76, -23, 49, 63, 53, -124, 60, 21, 5, 48, 116};
  // {00000000 00000111 10101101 00100100 100}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -32, -75, 36, 1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {32, 16, 0, 0, 32, 4, 32, 72, 1, -54, 0, 0, 0, 16, 0, 8, 16, 0, -128, 72, 64, -128, 32, 0, 0, 0, 0, 64, 0, 68, 12, 0, 32, 88, 2, 34, 4, 2, 0, 0, 0, 0, 0, 32, 64, 1, 0, 0, 0, 0, 0, 48, 0, 0, 0, 6, 6, 0, 0, 0, 0, 2, 0, 0, 1, 2, 4, 1, 1, 4, 64, 0, 0, -112, 0, 0, -128, 32, 0, 74, 0, -58, 64, 0, 2, -127, -128, -126, 6, 0};
  // {00000010 00000100 01000000 00000000 00000100 01000000 00000000 00000000 00010001 00001000 00010000 00000000 00000000 00010000 00000000 00000000 00000000 00010000 00000100 00000010 00001000 00000000 10100010 10011100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00100000 00000000 00001001 00000000 00000100 00001000 01000000 00000000 00001000 00000000 00000000 00000010 01011000 00100000 00000001 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 10000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01010010 00000000 01000010 00010000 00000000 10010000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 32, 2, 0, 32, 2, 0, 0, -120, 16, 8, 0, 0, 8, 0, 0, 0, 8, 32, 64, 16, 0, 69, 57, 0, 0, 0, 0, 0, 0, 0, 64, 4, 0, -112, 0, 32, 16, 2, 0, 16, 0, 0, 64, 26, 4, -128, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 66, 8, 0, 9, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {125, 123, -35, -3, -97, -17, -47, -1, -17, 111, -17, -1, -1, -1, -6, -1, -1, -1, -33, 63, -24, -33, -1, 63, -17, -1, -3, -3, -53, -77, 95, 50, -1, 110, -35, -3, -13, -51, -1, -1, -5, -1, -33, -1, -65, -1, -25, -9, -1, -65, -9, -1, 127, -9, 109, -9, -5, 63, -1, -19, -1, -1, -1, -65, 93, -1, -5, -65, 47, -33, 126, -3, -65, 95, -1, 127, -37, -65, -33, 127, -81, -9, 117, -19, -3, -11, 127, -3, -17, 31};
  // {...1 0-bits... 01000001 00000001 00000110 00000000 00000110 00001000 00000000 00000000 00000000 00001001 00001000 00000000 00000000 00000000 10100000 00000000 00000000 00000000 00000100 00000001 01100000 00000100 00100000 00000011 00000000 00000000 01000000 01000000 00101100 00110010 00000010 10110011 10000000 00000000 01001000 01000000 00110000 00001100 00000000 00000000 10100000 00000000 00000100 00000000 00000010 00000000 00000000 00000000 00000000 00000010 00010010 00000000 00000000 00010000 01000000 00010000 00100000 00000001 00000000 01001000 00000000 01000000 00000000 00000010 01000101 00000000 00100000 01000010 10001011 00000100 10000000 11000000 00000000 00000101 00000000 00000001 00100100 00000100 00100100 00000001 00000010 00010000 01101001 00001000 00000000 01010000 00000001 01000000 00000000 000101}
  public static final byte[] GRPSPLIT6 = new byte[] {-126, -128, 96, 0, 96, 16, 0, 0, 0, -112, 16, 0, 0, 0, 5, 0, 0, 0, 32, -128, 6, 32, 4, -64, 0, 0, 2, 2, 52, 76, 64, -51, 1, 0, 18, 2, 12, 48, 0, 0, 5, 0, 32, 0, 64, 0, 0, 0, 0, 64, 72, 0, 0, 8, 2, 8, 4, -128, 0, 18, 0, 2, 0, 64, -94, 0, 4, 66, -47, 32, 1, 3, 0, -96, 0, -128, 36, 32, 36, -128, 64, 8, -106, 16, 0, 10, -128, 2, 0, 40};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 34, 2, 0, 4, 68, 0, 0, 1, 16, 8, 0, 0, 9, 16, 8, 48, 0, -128, 40, 64, 0, 34, 9, 16, 0, 0, 32, 4, 0, 3, 0, 32, 76, -103, 32, 0, 8, 0, 0, 0, 4, 0, 16, 8, 4, 0, 8, 0, 44, 0, 0, 0, 0, 32, 8, 2, 0, 0, 2, 32, 0, 0, 0, 1, 0, -128, 65, 64, -128, 64, -128, 64, 0, 0, -128, 16, 36, 32, 24, 34, 76, -127, -128, 8, -125, 8, 0, 13, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 2, 0, 0, 64, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, -64, 0, 64, 0, 64, -128, 4, 0, 0, 0, 0, -128, 0, 0};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -17, -1, -65, -1, -81, -33, -1, -1, -17, -1, -1, 127, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -65, -65, -1, -1, -1, -1, -33, -1, -1, -97, -33, -1, -1, -1, -97, 127, -5, -1, -1, -2, -2, -2, -1, -9, -1, -1, -3, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -2, -5, -1, -1, -1, -1, -1, -1, -1, 127, -2, -18, -43, -1, -5, -9, -1, -5, -1, -17};
  // {01110001 00001100 00001011 00010000 000}
  public static final byte[] GRPSPLIT10 = new byte[] {-114, 48, -48, 8, 0};
  // {00000010 01000100 01000000 00000000 00100000 00100000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000001 00000000 00000000 00000000 01000100 00010000 00000000 00000000 00000000 00000100 00000000 00000000 01000000 00000000 00000000 00000010 00000001 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00010000 00100000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 10000000 00000000 00000001 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00100100 00000100 00000000 01000000 00000000 10000001 00000000 00000000 01000001 00000000 00000000 00100000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {64, 34, 2, 0, 4, 4, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 32, 0, -128, 0, 0, 0, 34, 8, 0, 0, 0, 32, 0, 0, 2, 0, 0, 64, -128, 32, 0, 0, 0, 0, 0, 0, 0, 16, 8, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 1, 0, -128, 0, -128, 0, 0, 0, 0, 0, 36, 32, 0, 2, 0, -127, 0, 0, -126, 0, 0, 4, 0};
  // {11101000 10110000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {23, 13, 0, 0};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {64, 32, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, -128, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, -128, 0, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_16_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* annual_inc */] <42339.844f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.11873043f : 
                    -0.057725325f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.105398856f : 
                    -0.010288893f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                    -0.026534176f : 
                    0.076273374f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 35, 0, data[6])) ? 
                    0.05573152f : 
                    0.21737893f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.11845229f : 
                    -0.07579755f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.038775783f : 
                    0.020625139f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.03925241f : 
                    0.054163072f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    -0.004481581f : 
                    0.1300784f))));
    return pred;
  } // constant pool size = 741B, number of visited nodes = 15, static init size = 4074B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 90, 5, 20, -32, 115, -55, 16, 24, 18, -110, 80, 17, 88, 0, 0, 0, 8, -16, -128, 10, 0, 12, 24, 50, 20, 0, 112, 88, 5, -25, -118, 68, -16, -96, -100, -113, 56, 42, 1, -102, 1, 16, -112, -62, 4, 48, 21, 3, -123, -128, 24, 0, 17, 50, -64, 12, -128, 6, 3, 33, 2, 1, 32, 2, 32, 20, 1, -110, 80, 3, 6, 64, -24, 0, 0, 49, 73, 64, 30, 107, 124, 89, 23, -124, 46, 13, -122, 56, 32};
  // {11011001 11011111 11110011 11111101 11110111 11011111 10010111 00101111 11111000 11101110 11111011 11111111 11111111 01011110 10111111 11101111 11110111 11111111 11111111 11101001 01011001 11111101 10111101 10111011 01111111 11111111 11111111 11111110 01111011 11110110 11101111 11110111 01110111 10011111 11101111 11111101 11111101 10011101 01111111 11111111 11111111 11111111 11111111 01111011 11100111 01111111 11111111 11111111 11111111 11101111 11111111 10111001 11111111 11111111 11011111 11110111 11111111 11111111 01111111 11011011 11111111 11111011 11111111 01111111 11011111 10111111 11111010 11111110 11111011 01011111 11111111 11111111 01111110 11110111 11011111 11111110 11111111 11111110 11111111 11111000 11111111 00111110 10111110 11101101 10111111 11110111 11110110 01111111 10111111 11010111}
  public static final byte[] GRPSPLIT1 = new byte[] {-101, -5, -49, -65, -17, -5, -23, -12, 31, 119, -33, -1, -1, 122, -3, -9, -17, -1, -1, -105, -102, -65, -67, -35, -2, -1, -1, 127, -34, 111, -9, -17, -18, -7, -9, -65, -65, -71, -2, -1, -1, -1, -1, -34, -25, -2, -1, -1, -1, -9, -1, -99, -1, -1, -5, -17, -1, -1, -2, -37, -1, -33, -1, -2, -5, -3, 95, 127, -33, -6, -1, -1, 126, -17, -5, 127, -1, 127, -1, 31, -1, 124, 125, -73, -3, -17, 111, -2, -3, -21};
  // {11011000 01000000 01000001 00010000 000}
  public static final byte[] GRPSPLIT2 = new byte[] {27, 2, -126, 8, 0};
  // {01011111 11111101 11101011 10000010 110}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, -65, -41, 65, 3};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 64, 1, 16, 0, 96, -127, 16, 0, 2, 16, 64, 0, 8, 0, 0, 0, 0, 0, 0, 2, 0, 12, 16, 2, 16, 0, 0, 8, 0, 32, -120, 4, 0, 32, 0, -118, 40, 40, 1, 0, 1, 0, 0, 0, 4, 0, 1, 0, 1, 0, 0, 0, 1, 0, -64, 8, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, -126, 16, 3, 4, 0, 32, 0, 0, 0, 65, 0, 2, 42, 0, 72, 5, 0, 0, 0, 0, 0, 0};
  // {00011111 11111111 11101111 11100010 011}
  public static final byte[] GRPSPLIT5 = new byte[] {-8, -1, -9, 71, 6};
  // {01000011 11101110 10010011 11101101 111}
  public static final byte[] GRPSPLIT6 = new byte[] {-62, 119, -55, -73, 7};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {102, -90, -13, 64, -108, 4, 86, 7, 96, -96, 41, 20, 0, -124, 10, 72, 16, 0, 0, 40, 105, 64, 34, -126, 1, 0, 4, -123, 101, -104, 8, 81, 51, 14, 79, 65, 112, 78, 1, 0, 34, 0, 0, 33, 24, 1, 0, 0, 0, 8, 80, 98, 0, 0, 20, 25, 66, 0, -117, 36, 0, 36, 0, -127, 68, 35, -96, -124, 32, -123, 0, -127, -127, 0, 13, -128, 104, -86, 104, -28, -128, -127, -90, 40, 2, 16, -112, 1, 37, 84};
  // {11110111 11111111 11111111 11010111 11111011 10111101 01111110 11110111 11111111 10111111 11110111 11111111 01110111 11110101 11111111 11111111 11111011 11101111 11111111 11111111 11111111 11111111 11001111 11110111 10110011 11010111 11111111 11110011 11101111 11011111 11111111 11101110 11011101 11110010 11111111 11011111 10011110 11110011 10101011 11111111 11110111 11111111 11111111 11111111 10011101 11011111 11111111 11110111 00111111 11111110 11111111 11110111 11111111 01110111 10111111 11111100 11001111 11111110 11011111 11111111 01111001 10111111 11111111 11111111 11111111 11111111 11010111 11111111 11110111 11110111 10111111 11011111 11111111 11111000 11111111 11111111 11110111 01011111 11111111 10111111 11101111 11101111 11101101 10011111 11111111 11111111 11011111 10111111 11110111 11111011}
  public static final byte[] GRPSPLIT8 = new byte[] {-17, -1, -1, -21, -33, -67, 126, -17, -1, -3, -17, -1, -18, -81, -1, -1, -33, -9, -1, -1, -1, -1, -13, -17, -51, -21, -1, -49, -9, -5, -1, 119, -69, 79, -1, -5, 121, -49, -43, -1, -17, -1, -1, -1, -71, -5, -1, -17, -4, 127, -1, -17, -1, -18, -3, 63, -13, 127, -5, -1, -98, -3, -1, -1, -1, -1, -21, -1, -17, -17, -3, -5, -1, 31, -1, -1, -17, -6, -1, -3, -9, -9, -73, -7, -1, -1, -5, -3, -17, -33};
  // {11111101 10000110 01100010 11001100 011}
  public static final byte[] GRPSPLIT9 = new byte[] {-65, 97, 70, 51, 6};
  // {00000000 00000010 10011100 01100111 100}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 64, 57, -26, 1};
  // {00000000 00011101 01001111 11011111 100}
  public static final byte[] GRPSPLIT11 = new byte[] {0, -72, -14, -5, 1};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {-101, -37, -65, -1, -1, -1, -87, -2, -33, 95, -42, -1, -1, -1, -9, -1, -1, -1, -1, -33, -33, -65, -1, 127, -2, -1, -1, -1, -34, 103, -9, -2, -1, -9, -72, -2, -49, -79, -1, -1, -33, -1, -1, -1, -1, -2, -1, -1, -1, -9, -17, -65, -1, -1, -21, -10, -67, -1, 124, -33, -1, -1, -1, 127, -65, -2, -33, -1, -1, 122, -1, -2, 127, -1, -9, 127, -105, -1, -97, -1, -1, -2, -33, -1, -1, -1, 111, -2, -6, -65};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {-65, -7, -52, -1, 107, -5, -65, -3, -97, -1, -1, -5, -1, -5, -9, -1, -17, -1, -1, -9, -106, -1, -35, 125, -1, -1, -1, -1, -101, -1, -9, -81, -1, -15, -1, -2, -1, -1, -2, -1, -3, -1, -1, -34, -9, -1, -1, -1, -1, -1, -1, -35, -1, -1, -17, -2, -3, -1, -1, -1, -1, -1, -1, -1, -1, -3, 127, -1, -33, -1, -1, -2, -1, -1, -13, -1, -1, -35, -65, 63, 127, 127, 91, -41, -3, -1, -1, -1, -34, -21};
}


class GBM_model_python_1589382591366_1_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_17_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* term */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.11566169f : 
                    -0.09277422f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                    -0.07604899f : 
                    -0.040935025f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.051803548f : 
                    0.0443567f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.01698936f : 
                    0.09599669f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.10854903f : 
                    -0.054693833f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                    -0.023962649f : 
                    0.07041524f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[8 /* emp_length */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                    0.0065820613f : 
                    0.08130594f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 35, 0, data[6])) ? 
                    0.07764008f : 
                    0.18055613f))));
    return pred;
  } // constant pool size = 830B, number of visited nodes = 15, static init size = 4608B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {52, 46, 54, 84, 0, 117, 79, 102, 1, -6, 58, 68, 17, -111, 2, 96, 96, 8, -112, -56, 106, 0, 42, 8, 34, 20, 0, 81, 89, 5, -18, 91, 61, 50, -72, -1, 46, 28, 41, 17, 8, 0, 0, -80, -60, 4, 48, 5, 3, 1, 0, 74, 0, 0, 20, -55, 0, -128, 15, 38, 32, 34, 0, -95, 7, 34, -68, -59, -78, -107, 64, -122, -63, -95, 0, -128, 33, 102, 72, -4, -53, 111, -57, 89, -122, -65, -99, 7, 25, 116};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -65, -1, -17, -3, -49, -9, -9, -1, 126, -1, -1, -9, -17, -1, -17, -1, -1, -33, -1, 127, -2, -18, -17, -1, -5, -37, -5, 63, -1, -1, -65, -1, -1, -1, 63, -99, -3, -1, 79, -5, -1, -2, -27, -1, -1, -25, -1, 95, -81, -17, -1, -18, -1, -17, -71, -1, 127, -1, -66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -17, -14, -1, -9, 126, -1, -1, -33, -1, -1, -3, -1, -1, -1, -1, -33, -1};
  // {11111111 11001011 00000111 01101011 110}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -45, -32, -42, 3};
  // {11111111 11011100 10001100 11001100 110}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 59, 49, 51, 3};
  // {00000001 00111111 01101010 10111001 000}
  public static final byte[] GRPSPLIT5 = new byte[] {-128, -4, 86, -99, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 12, 0, 4, 0, 4, 1, 34, 0, 74, 2, 4, 17, 17, 0, 32, 64, 0, -112, -120, 8, 0, 10, 0, 0, 16, 0, 16, 88, 0, 38, 24, 17, 32, -120, 107, 0, 0, 9, 0, 0, 0, 0, 32, -60, 0, 48, 1, 0, 0, 0, 72, 0, 0, 20, -127, 0, 0, 12, 0, 32, 34, 0, 33, 7, 34, -108, -127, 16, -112, 0, -126, 1, -128, 0, 0, 1, 0, 0, -60, 64, 32, -61, 65, 2, -85, 12, 2, 25, 4};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-17, -5, -1, -5, -1, -21, -9, -99, -2, -75, -3, -1, -18, -18, -3, -1, -65, -1, 111, 55, -43, -1, -11, -1, -3, -1, -1, -17, -73, -1, -103, -27, -6, -35, 119, -108, -3, -1, -10, -1, -1, -1, -1, -33, 59, -1, -17, -2, -1, -1, -1, -65, -1, -1, -21, 127, -1, -1, -1, -1, -1, -3, -1, -34, -4, -35, 107, 126, -33, 111, -65, -1, -1, 95, -1, -1, -1, -1, -1, 39, -67, -14, 56, -65, -5, 80, -13, -3, -26, -5};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {66, -14, -61, 0, -12, 66, 48, 25, 120, 0, -125, 16, 0, 76, 10, 8, 16, 0, 64, 32, 45, -32, 5, -109, 17, 0, 4, -92, 36, -40, 1, -126, 66, -50, 127, 64, -47, 106, 2, 0, -78, 5, 48, 65, 10, 5, -128, 25, 0, -91, -48, 48, 0, 17, 32, 22, 78, 0, -126, 34, 65, 36, 1, 0, 0, 32, 0, 5, 1, 64, 3, 5, -128, 88, 13, 0, 8, -119, 96, 30, -30, -108, 59, -91, 12, 4, 1, -128, 44, 16};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 1, 0, 0, 0, 20, -52, 96, -127, 80, 0, 64, 0, 0, 16, 0, 0, 0, 32, 0, 66, 0, 64, 32, 0, 0, 0, 0, 0, 1, -58, 0, 0, 0, 0, 12, 0, 0, 0, 0, 8, 0, 64, -128, 16, 0, 0, 4, 0, 8, 0, 0, 0, 0, 16, 0, 0, -128, 0, 1, 0, 0, 0, 32, 65, 1, 0, -128, 34, 4, 64, 0, 0, 1, 0, -128, -48, 34, 0, 0, 9, 96, 4, 2, -128, 64, -120, 1, 1, 0};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-53, -13, -49, -5, -1, -33, -4, -3, -1, 117, -49, -5, -17, -17, -1, -33, -97, -9, -17, -9, -1, -1, -43, -1, -35, -17, -1, -17, -17, -5, -41, -90, -61, -17, 127, 92, -7, -17, -34, -1, -1, -1, -1, -17, -1, -1, -17, -1, -4, -1, -1, -75, -1, -1, -5, -66, -1, -1, -6, -1, -33, -3, -1, 127, -1, -3, 83, -1, -1, -2, -1, 127, -65, 127, -1, -1, -34, -5, -1, 127, -1, -2, 127, -89, -3, 71, -21, -3, -17, -101};
  // {00000000 10000100 00011001 10101111 101}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 33, -104, -11, 5};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {2, -128, -63, 0, -16, 0, 16, 17, 104, 0, -128, 16, 0, 72, 10, 0, 0, 0, 64, 32, 1, 96, 5, -126, 1, 0, 4, -92, 36, 8, 0, -128, 2, 68, 5, 0, 80, 34, 0, 0, -78, 5, 0, 1, 8, 0, 0, 9, 0, 36, 0, 0, 0, 16, 0, 16, 0, 0, -128, 0, 64, 4, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 16, 9, 0, 8, -120, 0, 6, 32, 0, 32, -92, 0, 0, 0, -128, 36, 16};
  // {01000101 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-94, 12, 0, 0};
  // {00000000 00100000 11000000 00010111 110}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 4, 3, -24, 3};
}


class GBM_model_python_1589382591366_1_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_18_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* annual_inc */] <65140.625f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.11353008f : 
                    -0.057178404f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.027120419f : 
                    0.025077194f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.021227758f : 
                    0.10132004f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    0.025774518f : 
                    0.10088389f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.12157616f : 
                    -0.10100801f) : 
                 (Double.isNaN(data[26]) || data[26 /* revol_util */] <43.35f ? 
                    -0.08601882f : 
                    -0.02200184f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    -0.060881946f : 
                    0.20172654f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    0.039636236f : 
                    0.14306231f))));
    return pred;
  } // constant pool size = 990B, number of visited nodes = 15, static init size = 5568B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {112, -2, -123, 84, 36, 117, -97, 87, 65, 112, 3, 20, 0, -60, 0, 96, 64, 0, 96, 0, 75, 32, 77, -96, 18, 16, 4, 69, 60, 9, -32, -61, 93, 96, 48, -23, -18, 28, 40, 17, -112, 5, 48, -96, -122, 4, 48, 17, 3, -128, -112, 24, 0, 17, 20, -55, 10, -128, 14, 35, 1, 32, 1, -128, 71, 34, 36, -123, -112, 16, 2, -121, -63, 97, 4, -128, 56, 99, 104, 22, 106, -109, 25, 37, -122, 52, 28, 5, 28, 80};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, -64, 2, 0, 32, 56, -118, 0, 0, 17, 24, 10, 0, 0, 8, 16, 96, 48, 0, 0, 24, 32, 4, 0, -80, 65, -44, 7, 24, 0, -100, 79, 20, 1, 32, 2, 0, 8, 0, 64, 64, 64, 1, -128, 8, 0, 4, 0, 32, 0, 0, 2, 4, 4, 0, 1, 0, 96, 2, 0, 0, 0, 0, -112, 64, 66, -64, 64, 0, 0, -120, 0, 0, -127, -116, 0, 8, -127, 108, 70, -54, 0, -125, 1, -126, 2, 32};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-5, -1, -49, -1, -17, -1, -33, -1, -1, -1, -41, -1, -1, -1, -17, -1, -17, -1, -1, -9, -1, -1, -3, -1, -2, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -3, -2, -1, -33, -1, -1, -2, -17, -1, -1, -1, -1, -9, -65, -67, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -2, -1, -2, -1, -1, -1, -6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, 95, -1, -1, -1, 127, -1, -1, -1};
  // {00010011 01110011 11011010 01110110 100}
  public static final byte[] GRPSPLIT3 = new byte[] {-56, -50, 91, 110, 1};
  // {00000000 01111111 11101111 10110001 100}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -2, -9, -115, 1};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {16, -120, 1, 0, 0, 1, -119, 17, 64, 0, 0, 20, 0, -60, 0, 32, 64, 0, 0, 0, 1, 0, 8, 32, 0, 16, 0, 0, 0, 1, 0, 0, 64, 32, 0, -120, 8, 0, 8, 0, 0, 1, 0, 32, 4, 0, 16, 0, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 10, 32, 0, 0, 1, 0, 3, 34, 0, -124, -112, 16, 0, -128, 0, 0, 0, 0, 40, 32, 0, 4, 8, 16, 24, 4, 2, 4, 0, 0, 20, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-17, -27, -5, -1, -5, -1, 114, -82, -66, -65, -3, -1, -1, 59, -1, -33, -65, -1, -97, -1, -67, -33, -10, 95, -1, -1, -5, -65, -49, -2, -65, -1, -66, -97, -49, -106, 49, -1, -1, -1, -17, -1, -17, 95, -7, -5, -17, -1, -2, -1, -1, -9, -1, -18, -17, -1, -1, -1, -3, -1, -1, -1, -1, -1, -4, -3, -33, 123, -1, -17, -1, -1, 63, -33, -1, -1, -17, -35, -33, -1, -41, -19, -26, -5, -3, -5, -5, -5, -29, -1};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {6, 1, 114, 0, -48, 64, 96, 8, -24, -128, 56, 64, 0, 1, 18, 8, 16, 0, -112, -120, 36, -64, 34, 11, 1, 0, 0, -128, 64, 0, 11, 8, 34, 2, -55, 2, 17, 66, 1, 0, 42, 0, 64, 17, 24, 4, 0, 5, 0, 45, 64, 66, 0, 0, 32, 16, 64, 0, -128, 4, 0, 4, 0, -95, 0, 33, -120, 0, 35, -59, 65, 0, 0, 24, 9, 0, 65, 8, 96, -32, -29, 68, -90, 48, 8, 72, -119, -128, 37, 20};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-49, -43, -2, -1, -1, -34, 124, -20, -1, -65, -2, -5, -18, 59, -1, -1, -65, -1, -65, -33, -74, -1, -73, -33, -17, -1, -1, -17, -29, 62, -33, 46, -78, -101, -1, 79, 85, -29, -41, -1, -17, -1, -33, -1, -7, -1, -17, -17, -2, 127, -17, -9, -1, -18, -5, 63, -11, 127, -3, -35, -2, -1, -1, -1, -2, -3, -33, -2, 111, -17, -1, -2, -65, -65, -5, -1, -41, -34, -1, -1, -9, 102, -17, -1, -3, -33, -21, -1, -9, -65};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -35, -2, -1, -1, -2, 127, -4, -1, -1, -2, -1, -1, 123, -1, -1, -65, -1, -1, -1, -2, -1, -9, -1, -17, -1, -1, -1, -21, -2, -33, -65, -74, -1, -1, 127, -41, -5, -9, -1, -1, -1, -33, -1, -1, -1, -1, -1, -2, 127, -17, -1, -1, -1, -1, -1, -11, -1, -3, -33, -2, -1, -1, -1, -1, -1, -33, -1, -17, -17, -1, -1, -1, -1, -5, -1, -33, -33, -1, -1, -9, -18, -1, -1, -1, -1, -17, -1, -9, -1};
  // {00101101 10101110 01111110 11001111 100}
  public static final byte[] GRPSPLIT10 = new byte[] {-76, 117, 126, -13, 1};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 2, 0, 0, 2, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 8, 32, -64, 0, 0, 0, 0, 0, 64, 0, 0, 32, 0};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 0, 82, 0, -112, 0, 96, 0, 0, -128, 16, 0, 0, 0, 2, 8, 16, 0, -112, 8, 0, -128, 32, 0, 0, 0, 0, 0, 0, 0, 8, 0, 32, 2, 9, 0, 16, 0, 1, 0, 32, 0, 64, 17, 8, 0, 0, 5, 0, 9, 64, 66, 0, 0, 32, 0, 64, 0, 0, 4, 0, 4, 0, 1, 0, 0, 0, 0, 32, 1, 0, 0, 0, 16, 0, 0, 0, 0, 0, 32, -127, 0, -96, 32, 0, 8, -127, 0, 0, 4};
}


class GBM_model_python_1589382591366_1_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_19_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[20 /* inq_last_6mths */] <3.5f ? 
         (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 35, 0, data[6])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.09942065f : 
                    -0.038161278f) : 
                 (data[3 /* int_rate */] <0.075867966f ? 
                    -0.019552043f : 
                    0.052642003f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                    -0.018236414f : 
                    0.1328065f) : 
                 (Double.isNaN(data[10]) || data[10 /* annual_inc */] <65140.625f ? 
                    0.0598035f : 
                    0.014753182f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.13088898f : 
                    -0.11551135f) : 
                 (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[13])) ? 
                    -0.09562768f : 
                    0.088418595f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                -0.015830994f : 
                0.3903641f)));
    return pred;
  } // constant pool size = 623B, number of visited nodes = 13, static init size = 3414B
  // {00000000 01111111 11111111 11111111 101}
  public static final byte[] GRPSPLIT0 = new byte[] {0, -2, -1, -1, 5};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {16, -16, 53, 0, -112, 17, -63, 57, 80, -54, 16, 4, 0, -43, 2, 32, 96, 8, 16, -120, 1, -64, 42, 2, 33, 16, 0, 80, 112, 1, 1, 16, 65, 110, -86, -61, 12, 0, 9, 0, -128, 1, 0, 48, 4, 4, 48, 5, 0, 5, 0, 42, 0, 1, 18, 5, 0, 0, 0, 32, 0, 2, 0, 33, 1, 34, -104, -127, -112, -112, 0, -128, 64, -120, 0, 0, -96, -94, 0, -44, 8, 20, -2, 20, 2, 8, 0, 2, 31, 4};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-101, -5, -65, -85, -33, -101, -51, -7, -1, -17, -41, -65, -17, -1, -25, -9, -17, -1, -33, -1, -41, -1, -2, 102, -19, -5, -5, 91, -10, 35, -41, 62, -45, -17, -69, -37, 77, -95, -3, -17, -43, -5, -113, -65, 39, -1, -1, -17, -2, 119, -1, -81, -1, -1, -5, 39, -67, 127, -5, -8, -98, -1, -1, 127, -69, -2, -37, -1, -67, -6, -4, -1, 126, -82, -14, 127, -82, -6, -97, -33, 95, -12, -1, -108, 127, -19, 99, -5, -1, -97};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {102, 7, -127, 84, 96, 100, 90, 6, 8, 48, 42, 80, 16, 8, 24, 72, 16, 0, 32, 8, 125, 0, 5, -103, 2, 4, 4, -91, 69, -104, -24, -117, 59, 16, -79, 52, 121, 92, 34, 17, 42, 4, 112, -63, -40, 1, 32, 25, 3, -88, -48, 16, 0, 16, 4, -56, 74, -128, -113, 7, 97, 36, 0, -128, 68, 33, 36, -60, -94, 0, 3, 6, 1, 121, 13, -128, 105, 79, 104, -66, -29, -62, 1, 123, -124, 54, -99, 5, 32, 112};
  // {00000000 00000000 00000000 00000101 100}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, -96, 1};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 66, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0};
  // {10111011 10111110 01010111 11111111 11011100 01111001 10110101 00111011 11110101 10110011 10111111 11111111 11111111 11111111 10100111 11111111 11111011 11101111 11111011 11101111 00011111 11111101 11011011 11111111 11111111 11111111 11111111 11111111 01111001 11111111 10111111 00111111 01111111 10011101 10100010 11111000 01101111 11011111 11111111 11110111 10101111 11111111 11111001 01110110 10011111 11111111 11110111 01000111 01111111 01111111 11110101 11101011 11111111 11110111 11110111 01111111 10111111 11111111 01111110 11111011 11111111 11111111 11111111 11111010 11111111 11111011 11011010 11111100 10111011 11111110 10111111 11011111 11111101 11101111 11111111 11111110 11111111 10111111 11111111 11110110 01111000 11111111 01010110 11010101 11011110 11001011 01111111 01111111 11111011 11111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-35, 125, -22, -1, 59, -98, -83, -36, -81, -51, -3, -1, -1, -1, -27, -1, -33, -9, -33, -9, -8, -65, -37, -1, -1, -1, -1, -1, -98, -1, -3, -4, -2, -71, 69, 31, -10, -5, -1, -17, -11, -1, -97, 110, -7, -1, -17, -30, -2, -2, -81, -41, -1, -17, -17, -2, -3, -1, 126, -33, -1, -1, -1, 95, -1, -33, 91, 63, -35, 127, -3, -5, -65, -9, -1, 127, -1, -3, -1, 111, 30, -1, 106, -85, 123, -45, -2, -2, -33, -1};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -2, -1, -1, -33, -1, -1, -1, -33, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -66, -1, -1, -1, -2, -1, -9, 127, -9, -5, -1, -1, -3, -1, -1, -18, -1, -1, -1, -2, -1, -1, -17, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, -1, -33, -1, -1, -1, -1};
  // {00010000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {8, 9, 0, 0};
  // {00000100 10110110 00010000 00000000 000}
  public static final byte[] GRPSPLIT9 = new byte[] {32, 109, 8, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_20_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.11214269f : 
                    -0.053668126f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.080042034f : 
                    0.005952221f)) : 
             (data[7 /* emp_title */] <7621.5f ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 718, 1, data[15])) ? 
                    -0.0309142f : 
                    0.012765246f) : 
                 (Double.isNaN(data[7 /* emp_title */]) || !GenModel.bitSetIsInRange(593, 7622, data[7]) || (GenModel.bitSetIsInRange(593, 7622, data[7]) && !GenModel.bitSetContains(GRPSPLIT6, 593, 7622, data[7])) ? 
                    -0.01883609f : 
                    0.4317744f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.1259307f : 
                    -0.08781785f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.063191146f : 
                    0.17723434f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[8 /* emp_length */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                    0.066345505f : 
                    0.19311784f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 35, 0, data[6])) ? 
                    0.20411669f : 
                    0.30882418f))));
    return pred;
  } // constant pool size = 894B, number of visited nodes = 15, static init size = 4992B
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {54, -33, -41, 84, -16, 49, 127, 119, 121, -16, 51, 84, 17, -60, 10, 96, 64, 8, 112, -64, 111, 64, 13, -118, 35, 20, 4, -43, 121, -35, -19, -101, 31, -54, 127, -33, -33, 126, 43, 17, -70, 1, 112, -63, -122, 0, 48, 21, 3, 1, -48, 106, 0, 17, 54, -43, 72, -128, -113, 36, 65, 36, 1, -95, 70, 35, 56, -124, -78, 84, 3, 7, -63, -7, 13, 0, 105, -53, 104, -76, -23, -11, 63, 125, -122, 60, -99, 7, 57, 116};
  // {00011111 11100111 01011101 11101100 100}
  public static final byte[] GRPSPLIT2 = new byte[] {-8, -25, -70, 55, 1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-65, -33, -1, -1, -5, -69, 127, -1, -1, -9, -9, -1, -1, -1, -1, -9, -49, -1, 127, -41, -1, -1, -99, -33, -17, -1, -1, -1, -5, -1, -3, -65, -33, -37, 127, -33, -33, -1, -1, -1, -1, -1, -1, -33, -17, -5, -1, -9, -1, 123, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -33, -1, -1, -1, -2, -1, -5, -1, -1, 126, -65, 127, -1, -1, -1, 127, -1, -37, -1, -73, -1, -1, 63, -1, -1, -68, -1, 127, -5, -1};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 32, 0, 0, 4, 70, -128, 8, 0, 10, 8, 0, 0, 16, 0, 8, 16, 0, -128, 0, 16, -96, 96, 32, 0, 0, 0, 0, 0, 0, 0, 64, 32, 36, -128, 0, 32, 0, 0, 0, 0, 0, 0, 32, 80, 5, -128, 0, 0, -124, 0, 16, 0, 0, 0, 0, 4, 0, 0, 1, 0, 2, 0, 0, 0, 0, 4, 65, 1, -127, 64, 0, 0, 0, 0, -128, 0, 32, 0, 74, 0, 2, 64, 0, 0, 1, 0, -128, 6, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, 114, -2, -1, 39, 127, -1, -1, -5, -57, -1, -41, -1, -33, -2, -1, -1, -5, -9, -1, -18, -33, -1, -1, -2, -1, -1, -1, -5, 87, -35, -66, -5, -2, 114, 30, -6, -43, -1, -9, -2, -1, -41, -1, -2, -1, -17, 127, -1, -1, -1, -22, 127, -9, -1, -1, -5, 127, -66, -17, -1, -17, -1, -81, -2, -2, -1, -1, -17, -1, -2, -2, -1, -85, -5, -1, -1, -1, -33, -1, -81, 61, -1, -9, -65, -23, 127, 127, -5, 63};
  // {...7622 0-bits... 00001001 00000101 00000000 10010000 00000111 00000000 00001000 00000000 00010001 01000010 00111010 00001000 00000000 00000000 00000000 00001010 00000010 00000101 00000000 10000000 00010000 00000000 10000001 00000000 00000101 00010000 00000000 00000000 00000000 10001000 00000100 00000000 10000000 00000000 00000110 00000000 10000101 00000000 00000010 00000000 00110000 00000000 00101000 10000000 00001000 01011100 00000000 00001100 00000100 00000101 11000001 00000000 00001000 00001000 00000000 00000100 00000100 00000000 00000000 00000000 00000000 01100010 00000100 00100000 00001000 10000100 00001000 00000000 01000111 00000100 10001000 00010000 00000000 00000000 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-112, -96, 0, 9, -32, 0, 16, 0, -120, 66, 92, 16, 0, 0, 0, 80, 64, -96, 0, 1, 8, 0, -127, 0, -96, 8, 0, 0, 0, 17, 32, 0, 1, 0, 96, 0, -95, 0, 64, 0, 12, 0, 20, 1, 16, 58, 0, 48, 32, -96, -125, 0, 16, 16, 0, 32, 32, 0, 0, 0, 0, 70, 32, 4, 16, 33, 16, 0, -30, 32, 17, 8, 0, 0, 1};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 34, 2, 0, 4, 68, 0, 0, 1, 16, 8, 0, 0, 9, 16, 8, 48, 0, -128, 40, 64, 0, 34, 9, 16, 0, 0, 32, 4, 0, 3, 0, 32, 72, -112, 32, 0, 0, 0, 0, 0, 4, 0, 16, 8, 4, 0, 8, 0, 44, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 32, 0, 0, 0, 1, 0, -128, 65, 64, -128, 64, -128, 64, 0, 0, -128, 16, 36, 32, 8, 34, 76, -127, -128, 8, -125, 0, 0, 13, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 2, 0, 4, 73, 64, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 13, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, -64, 0, 64, 16, 64, -128, 4, 0, 0, 0, 8, -128, 0, 0};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -1, -1, -65, -1, -81, -1, -1, -1, -17, -1, -1, 127, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -65, -65, -1, -1, -1, -1, -33, -1, -1, -97, -1, -1, -1, -1, -65, 127, -5, -1, -1, -2, -2, -2, -1, -9, -1, -1, -3, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -2, -5, -1, -1, -1, -1, -1, -1, -1, 127, -2, -18, -43, -1, -5, -9, -1, -5, -1, -17};
  // {01110000 11001110 00001011 00000000 000}
  public static final byte[] GRPSPLIT10 = new byte[] {14, 115, -48, 0, 0};
  // {00000010 01000100 01000000 00000000 00100000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000001 00000000 00000000 00000000 01000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000010 00000001 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00100000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 10000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 01000000 00000000 10000001 00000000 00000000 01000001 00000000 00000000 00100000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {64, 34, 2, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, -128, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 64, -128, 32, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 1, 0, -128, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, -127, 0, 0, -126, 0, 0, 4, 0};
  // {11101000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {23, 9, 0, 0};
  // {01110110 10000000 00000101 00000000 000}
  public static final byte[] GRPSPLIT13 = new byte[] {110, 1, -96, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_21_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* annual_inc */] <42339.844f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.1267423f : 
                    -0.10026365f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.05818422f : 
                    0.008489599f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                    0.01748426f : 
                    0.088665724f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 35, 0, data[6])) ? 
                    0.07705567f : 
                    0.17153266f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.11858264f : 
                    -0.07015763f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.058879122f : 
                    -0.0093490025f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.026712973f : 
                    0.045073777f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    -0.029576795f : 
                    0.124413975f))));
    return pred;
  } // constant pool size = 826B, number of visited nodes = 15, static init size = 4584B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 90, 7, 20, 96, 115, -55, 16, 25, 18, -110, 64, 17, 88, 0, 0, 0, 8, -16, -128, 2, 0, 13, 24, 50, 20, 0, 112, 88, 5, -25, -118, 68, -16, -80, -100, -113, 56, 42, 17, -102, 1, 16, -112, 66, 4, 48, 21, 3, -123, -128, 24, 0, 17, 50, -64, 12, -128, 6, 3, 33, 2, 1, 32, 2, 32, 28, 1, -110, 80, 3, 6, 64, -23, 0, 0, 49, 65, 64, 30, 107, 60, 89, 23, -124, -114, 13, -122, 60, 32};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-101, -5, -49, -65, -17, -5, -23, -4, 31, 119, -33, -1, -1, 122, -3, -9, -17, -1, -1, -73, -102, -65, -67, -35, -2, -1, -1, 127, -34, 111, -1, -17, -18, -7, -9, -65, -65, -7, -2, -1, -1, -1, -1, -34, -17, -1, -1, -1, -1, -9, -1, -99, -1, -1, -5, -17, -1, -1, -2, -33, -1, -1, -1, -2, -5, -3, 95, 127, -33, -2, -1, -1, 126, -1, -5, 127, -1, 127, -1, 63, -1, 124, 127, -73, -3, -17, 111, -2, -1, -21};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-5, -1, -33, -1, -1, -5, -3, -4, -65, -1, -1, -1, -1, 123, -1, -9, -1, -1, -1, -1, -2, -1, -3, -1, -1, -1, -1, 127, -2, -1, -1, -17, -2, -1, -1, -65, -65, -7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -2, -1, -1, -1, 127, -1, -2, -1, -1, -2, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -17, -1, -1, -17};
  // {00010101 01100101 01001011 10010010 000}
  public static final byte[] GRPSPLIT3 = new byte[] {-88, -90, -46, 73, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 80, 1, 16, 0, 98, -127, 16, 0, 2, 16, 64, 0, 8, 0, 0, 0, 0, 0, 0, 2, 0, 12, 16, 2, 16, 0, 80, 8, 0, 32, -120, 4, 0, 32, 0, -118, 40, 40, 1, 0, 1, 0, 0, 2, 4, 48, 17, 0, 1, 0, 0, 0, 0, 0, -64, 8, -128, 4, 0, 1, 0, 1, 0, 0, 0, 4, 0, -126, 16, 3, 6, 64, -32, 0, 0, 48, 65, 0, 2, 42, 0, 72, 5, -124, 0, 4, 0, 16, 0};
  // {00011000 00111100 00100011 01100100 001}
  public static final byte[] GRPSPLIT5 = new byte[] {24, 60, -60, 38, 4};
  // {00000010 11000010 10110011 00100000 000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 67, -51, 4, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {102, -89, -13, 64, -108, 5, 118, 15, -23, -24, 33, 20, 0, -124, 10, 72, 16, 0, 0, 104, 109, 64, 34, -93, 1, 0, 4, -123, 101, -40, -56, 81, 59, 14, 95, -61, 120, 78, 1, 0, 32, 4, 32, 33, 24, 1, 0, 0, 0, 44, 80, 106, 0, 0, 52, 27, 66, 0, -117, 37, 0, 36, 0, -127, 69, 35, -88, -124, 32, -123, 64, -125, -127, 16, 13, -128, 104, -86, 104, -28, -64, -25, -89, -24, 10, 20, -112, 1, 39, 84};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-17, -1, -1, -21, -33, -35, 126, -17, -1, -3, -17, -1, -18, -81, -1, -1, -33, -9, -1, -1, -1, -1, -13, -17, -51, -21, -1, -49, -9, -5, -33, 119, -69, 79, -1, -5, 121, -49, -43, -1, -17, -1, -1, -1, -71, -5, -1, -18, -4, 127, -1, -17, -1, -18, -3, 63, -13, 127, -5, -1, -98, -3, -1, -1, -1, -1, -21, -1, -17, -17, -3, -5, -1, 31, -1, -1, -17, -2, -1, -1, -9, -9, -73, -7, -1, -1, -5, -3, -17, -33};
  // {11111101 11000110 01110010 11000100 011}
  public static final byte[] GRPSPLIT9 = new byte[] {-65, 99, 78, 35, 6};
  // {00101010 01100111 00111101 11110110 100}
  public static final byte[] GRPSPLIT10 = new byte[] {84, -26, -68, 111, 1};
  // {00000000 00001010 10011100 01001101 100}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 80, 57, -78, 1};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {-69, -36, -66, -1, 123, -2, -101, -9, 22, -97, -2, -1, -1, -1, -9, -9, -17, -1, -1, -65, -77, -1, -1, -36, -1, -1, -5, -5, -69, -89, 55, -65, -2, -1, -94, -2, -25, -77, -1, -1, -33, -5, -1, -1, -9, -2, -1, -1, -1, -45, -17, -73, -1, -1, -33, -12, -65, -1, -3, -1, -1, -1, -1, 127, -5, -1, -9, 123, -33, -1, -65, -4, -1, -1, -1, 127, -41, -1, -33, -1, 63, -103, -38, 23, -9, -1, 127, -1, -5, -1};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {68, 33, -127, 64, -124, 1, 0, 0, 40, 32, 0, 0, 0, 0, 0, 72, 16, 0, 0, 0, 77, 0, 0, 35, 1, 0, 4, -123, 64, 80, -120, 80, 1, 0, 93, 0, 0, 4, 0, 0, 0, 4, 0, 0, 8, 1, 0, 0, 0, 40, 16, 72, 0, 0, 0, 26, 0, 0, 10, 0, 0, 0, 0, -128, 4, 32, 0, -124, 32, 0, 0, 3, 0, 0, 0, -128, 40, 0, 32, -128, -64, -32, 38, 72, 8, 0, -128, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_22_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[20 /* inq_last_6mths */] <3.5f ? 
         (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.15026133f ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                    -0.0852891f : 
                    -0.028000442f) : 
                 (data[3 /* int_rate */] <0.07896581f ? 
                    -0.033697408f : 
                    0.028896548f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.08670622f : 
                    0.0028116824f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    0.058043126f : 
                    0.1517795f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.12230754f : 
                    -0.110848986f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                    -0.07688448f : 
                    0.21010311f)) : 
            0.23450343f));
    return pred;
  } // constant pool size = 784B, number of visited nodes = 12, static init size = 4404B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {50, -26, 49, 84, -112, 85, -13, 55, 120, 90, 26, 84, 17, -59, 2, 96, 96, 8, 16, 72, 64, -128, 32, 2, 2, 20, 0, -47, 17, 5, 106, 0, 92, -50, 43, -37, -49, 14, 43, 17, -88, 1, 48, -79, 6, 4, 16, 13, 3, 5, 0, 58, 0, 0, 18, 67, 66, -128, 14, 0, 97, 32, 0, 33, 1, 34, -92, 5, 18, -128, 1, -126, 65, 41, 0, 0, 40, 47, 32, -76, 98, -89, -19, 62, 6, -88, 21, -126, 29, 52};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-5, -2, -65, -1, -1, -3, -1, -1, -1, -1, 94, -1, -1, -9, -1, -9, -1, -1, 127, -33, -13, -1, -2, -18, -1, -1, -5, -5, -65, 55, -1, -1, -1, -1, -1, -33, -33, -113, -1, -1, -17, -1, -65, -1, 39, -1, -1, -17, -1, 87, -17, -65, -1, -17, -5, -9, -13, -1, -1, -7, -1, -1, -1, -1, -71, -2, -1, -1, -1, -2, -1, -5, 127, -17, -10, 127, -1, -1, -1, -3, 127, -9, -1, -1, -1, -17, -9, -6, -1, -65};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {68, 17, -127, 0, -32, 34, 72, 0, 0, -96, -93, 0, 0, 8, 26, 8, 16, 0, 96, -88, 15, 64, 13, -103, 1, 0, 4, 4, 104, -104, -59, 27, 35, 66, -76, 36, 56, 112, 0, 0, 26, 0, 64, 0, -40, 5, -96, 16, 0, -88, -112, 64, 0, 16, 20, 12, 14, 0, -127, 39, 0, 4, 0, -128, 68, 33, 8, -60, -96, 65, 66, 6, -128, 80, 9, -128, 73, 66, 72, -118, -95, 24, 44, 37, -120, 22, 8, 5, 32, 80};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-19, -71, -49, -5, -17, -6, 92, -27, -25, -11, -9, -65, -18, -22, -1, -33, -97, -9, -17, -65, -1, 127, -35, -3, -1, -17, -1, -49, -17, -6, -11, -1, -77, 123, -10, -28, 123, -1, -35, -1, -33, -5, -49, -17, -3, -1, -1, -6, -4, -2, -1, -59, -1, -1, -3, -67, -1, -1, -3, -1, -65, -3, -1, -33, -2, -3, 75, -1, -18, -1, -2, -1, -65, -33, -1, -1, -1, -46, -1, -49, -1, 124, 63, -27, -3, -9, -22, -19, -24, -37};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 1, 0, 0, 32, 0, 0, 0, 0, -96, 0, 0, 8, 24, 0, 0, 0, 0, 40, 1, 64, 1, 0, 1, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 0, 56, 0, 0, 0, 2, 0, 0, 0, -104, 0, 0, 0, 0, 0, 16, 0, 0, 16, 4, 0, 10, 0, -127, 33, 0, 0, 0, -128, 4, 32, 0, -128, 0, 1, 0, 0, 0, 16, 8, 0, 0, 0, 8, 0, -96, 0, 0, 1, 0, 0, 8, 1, 0, 64};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 8, -128, 0, -120, 1, -128, 1, 12, 0, 2, 36, 17, 65, 2, 13, 4, 4, -107, 16, -92, 0, 64, 0, 0, 32, 0, 0, 0, -64, 64, 0, 16, 1, 2, 36, 0, 0, -128, 80, -60, 8, 12, 40, 74, -120, 64, 10, 18, 0, 17, 1, 72, 0, 22, -80, -94, 2, 81, -128, 17, -124, 12, 40, -128, 66, 25, 65, 96, 104, 8, 42, 4, 32, 0, 16, 0, 64, 64, 20, 0, 0, -126, 1, -128, 2, 48, -112, 4};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, -1, -6, -1, 127, -97, -1, -3, -1, -33, -3, -1, -1, -1, -17, -1, -1, -1, -33, -1, -6, -1, -1, -1, -1, -1, -1, -1, -66, -1, -1, -1, -2, -1, -9, 127, -9, -5, -1, -1, -3, -1, -33, 110, -5, -1, -1, -18, -1, -1, -17, -9, -1, -1, -1, -1, -3, -1, -1, -33, -1, -1, -1, -1, -1, -33, -1, 127, -35, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, 111, 94, -1, -5, -17, -1, -33, -2, -2, -1, -1};
  // {00010011 10000000 00000010 00000000 000}
  public static final byte[] GRPSPLIT8 = new byte[] {-56, 1, 64, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_23_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (data[26 /* revol_util */] <85.0f ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.07579099f : 
                    -0.042461816f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.0624077f : 
                    0.14365673f)) : 
             (data[10 /* annual_inc */] <65140.625f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 718, 1, data[15])) ? 
                    -0.002433978f : 
                    0.046476785f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 718, 1, data[15])) ? 
                    -0.056868177f : 
                    0.031733945f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.13219434f : 
                    -0.10541938f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.082113646f : 
                    0.108878426f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                 (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                    0.07394521f : 
                    0.31865558f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 35, 0, data[6])) ? 
                    0.15207356f : 
                    0.2372413f))));
    return pred;
  } // constant pool size = 903B, number of visited nodes = 15, static init size = 5046B
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {38, -33, -9, 84, -16, 49, 127, 127, 121, -16, -77, 84, 17, -60, 10, 96, 64, 8, 112, -64, 111, -64, 13, -126, 35, 20, 4, -43, 121, -35, -19, -37, 31, -46, 123, -37, -1, 110, 43, 17, -70, 1, 112, -31, -58, 4, 48, 21, 3, 1, -48, 58, 0, 17, 54, -43, 72, -128, -113, 36, 65, 36, 1, -95, 70, 33, 60, -124, -78, 85, 67, 7, -63, -23, 5, 0, 105, -53, 104, -12, -55, -9, 127, 127, -122, -67, -107, 7, 53, 84};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -33, -1, -1, -1, -65, -1, -1, -1, -1, -9, -1, -1, -2, -17, -9, -33, -1, -1, -33, -1, -33, -99, -2, -17, -1, -1, -33, -5, -1, -1, -1, -1, -1, 127, -5, -1, -17, -1, -1, -1, -5, -1, -1, -1, -1, -1, -9, -1, -41, -1, -65, -1, -1, -1, -9, -1, -1, -1, -3, -33, -1, -1, -1, -1, -3, -1, -65, -65, 127, -1, 127, -1, -1, -1, 127, -17, -37, -1, -1, -35, -9, 127, -1, -1, -3, -1, -1, -3, -33};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 32, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 64, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 64, 0, -128, 0, 0, 0, 0, 0, -128, 16, 32, 0, 2, 34, 0, 0, 0, 0, 0, 8, 0, 10, 32};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {16, -51, 64, 40, -112, -104, -121, 3, 0, -96, 0, 2, 0, 98, 0, 32, 32, 0, 32, -128, 5, 0, 6, 0, 0, 8, -128, 32, -100, 4, -16, -32, 14, 0, -112, 68, 103, 22, -108, 0, -64, 0, 0, 64, 3, 0, -104, -128, 0, 0, 72, 12, -128, 8, 10, 96, 4, 64, 7, -112, 0, -112, 0, 0, 0, 16, 26, 2, 72, 0, -128, -125, 96, 32, 2, 0, -108, 32, 4, 10, -128, -56, -116, 2, 67, 18, -120, 0, 8, 40};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {-125, 0, 57, 0, 104, 0, 48, 4, 52, 64, 25, 40, 0, 0, 1, 0, 0, 0, 8, 96, 18, 96, 0, -127, 0, 0, 0, 64, 32, -128, 68, 4, 1, 1, 52, -127, 8, -95, 0, 0, 21, 0, -96, 0, 0, 2, -128, 2, -128, 0, 32, 1, 0, 0, 16, 8, 32, 0, 64, 2, 0, 2, -128, 80, -128, 0, 4, 0, -111, -94, 33, 0, 64, -124, 0, -128, 32, 4, 32, -16, 96, 2, 19, 24, -128, -60, 64, -128, 16, 10};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 34, 2, 0, 4, 68, 0, 0, 1, 16, 8, 0, 0, 9, 16, 8, 48, 0, -128, 40, 64, 0, 34, 9, 16, 0, 0, 32, 4, 0, 3, 0, 32, 76, -111, 32, 0, 0, 0, 0, 0, 4, 0, 16, 8, 4, 0, 8, 0, 44, 0, 0, 0, 0, 32, 1, 2, 0, 0, 3, 32, 0, 0, 0, 1, 0, -128, 65, -64, -128, 64, -128, 64, 0, 0, -128, -112, 36, 32, 24, 34, 76, -127, -128, 8, -125, 8, -128, 13, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 64, -128, 0, 2, 0, 0, 0, 32, 2, 2, 2, 2, 8, 0, 0, -128, 33, 0, 0, 32, -128, 0, 0, 0, 0, 64, 0, 2, 0, 2, 0, 0, 72, 68, 2, 8, 0, 0, 1, -128, 8, 0, 32, 1, -127, 0, 8, 0, 0, 4, 3, 0, -128, 12, 0, 1, 3, 0, 0, 0, 0, 4, 32, 4, 0, 0, 1, 64, -80, 8, 32, 2, 0, 0, 64, 16, 64, 0, 68, -128, 4, 0, 17, 64, 66, 96, 0, 4};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -65, -65, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -65, -1, -5, -1, -1, -2, -2, -2, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -3, -1, -1, -9, -1, -5, -1, -17};
  // {01010001 00001100 00001011 01010000 000}
  public static final byte[] GRPSPLIT9 = new byte[] {-118, 48, -48, 10, 0};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 34, 2, 0, 4, 4, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 32, 0, -128, 0, 64, 0, 34, 8, 0, 0, 0, 32, 0, 0, 2, 0, 0, 64, -128, 32, 0, 0, 0, 0, 0, 4, 0, 16, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, -128, 1, 64, -128, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 2, 0, -127, 0, 0, -125, 0, 0, 4, 0};
  // {10000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 8, 0, 0};
  // {11010110 11111100 11001011 11111111 011}
  public static final byte[] GRPSPLIT12 = new byte[] {107, 63, -45, -1, 6};
}


class GBM_model_python_1589382591366_1_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_24_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[14 /* title */] <4977.5f ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.106473915f : 
                    0.07206858f) : 
                 (Double.isNaN(data[4]) || data[4 /* installment */] <843.1622f ? 
                    -0.038522843f : 
                    0.060734443f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.04613716f : 
                    0.03411186f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.018648406f : 
                    0.0783922f))) : 
         (Double.isNaN(data[14 /* title */]) || !GenModel.bitSetIsInRange(768, 4978, data[14]) || (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 768, 4978, data[14])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.11679713f : 
                    -0.034730792f) : 
                 (!Double.isNaN(data[14 /* title */]) && (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT9, 768, 4978, data[14])) ? 
                    -0.10563785f : 
                    0.24335451f)) : 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                0.11336878f : 
                 (!Double.isNaN(data[14 /* title */]) && (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT11, 768, 4978, data[14])) ? 
                    0.2445042f : 
                    0.5435252f))));
    return pred;
  } // constant pool size = 998B, number of visited nodes = 14, static init size = 5640B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {54, -29, -13, 80, 68, 55, -21, 103, 121, -88, -93, 4, 17, 73, 24, 32, 80, 8, -80, -24, 1, 0, 41, -69, 17, 20, 4, 21, 117, -51, -18, -37, 63, -18, -3, -83, -49, 46, 41, 17, -70, 5, 96, -47, -106, 5, 48, 21, 2, 45, -64, 26, 0, 16, 38, -49, 72, -128, -114, 37, 97, 34, 0, -128, 71, 33, -76, 64, 96, -59, 67, -122, -63, -104, 13, -128, 105, 13, 104, -80, -29, -9, -1, -66, -126, -46, -108, 6, 7, 36};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -5, -17, -1, -1, -1, -1, -1, -9, -17, -1, 127, -3, -9, -1, -1, -1, -1, -33, -1, -1, -1, -35, -1, -1, -1, -9, -17, -1, -1, -1, -17, -1, -1, -17, -65, -3, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, 127, -17, -1, -1, -2, -1, -17, -3, -1, -1, -1, -1, -1, -1, -2, -1, -3, -1, -6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -5, -1, -1, -1, -1, -1, -33, -1, -1, -17, -65};
  // {00000000 00000000 01010110 00000000 000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 106, 0, 0};
  // {00001000 00011111 00111001 11111111 100}
  public static final byte[] GRPSPLIT3 = new byte[] {16, -8, -100, -1, 1};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {-37, -65, -3, -65, -69, -51, 53, -97, -18, -9, -34, -1, -1, -9, -17, -1, -17, -9, -17, -65, -2, -1, -2, 78, -1, -1, -5, -17, -118, 62, 51, -66, -54, 87, 15, 126, 124, -15, -1, -17, -41, -5, -65, 63, -19, -2, -1, -21, -3, -34, -65, -9, -1, -17, -37, -11, -65, -1, -1, -6, -1, -1, -1, 127, -5, -2, -33, -65, -97, -5, -68, -1, 127, -9, -9, 127, -65, -2, -97, -1, 61, -65, -37, 119, 127, -65, 111, -5, -6, -37};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {36, 0, 2, 80, 64, 51, -54, 0, 16, 0, 33, 0, 0, 8, 16, 0, 16, 8, 16, 64, 1, 0, 9, -96, 0, 0, 4, 17, 113, -127, -116, 73, 53, 40, -16, -128, -53, 14, 0, 17, 8, 0, 64, -48, 2, 5, 0, 20, 0, 9, -128, 0, 0, 0, 36, 8, 64, 0, -118, 5, 0, 0, 0, -128, 68, 33, 32, 64, 32, 4, 67, 4, -128, 8, 0, -128, 64, 1, 8, 0, -61, 0, 4, 40, -128, 64, -112, 0, 5, 36};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT6 = new byte[] {26, 16, 24, 64, 0, -128, 97, 36, 4, 0, 0, 0, 0, 5, -128, -64, 8, 49, 0, 8, 0, 36, 0, -128, 80, -64, 0, 33, 33, 114, 0, 0, 1, 33, 16, 64, -128, 34, 14, 32, 8, 32, 66, 0, -126, -128, 40, 48, 3, -128, 68, 48, 0, 16, 9, 68, 2, 56, -128, 0, 32, 0, -128, 0, 60, -127, -108, 0, 16, 56, 1, 18, -128, 0, 64, 0, 0, 64, -95, 64, 1, 0, 32, 64, 0, -96, 64, 64, 32, 0, 2, 0, 0, 32, 17, 4};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 20, 0, 4, 32, 64, 16, 16, 0, 0, 0, 16, 0, 4, 2, 72, 0, 0, 0, 0, 6, 0, 4, 0, 32, 0, 0, 0, 8, 0, 0, 0, 16, 0, 10, 16, 48, 64, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 1, -128, 0, 32, 0, 0, 16, 16, 2, 0, 0, 0, 0, 4, 1, 32, 0, 2, 8, 1, -126, 0, 0, 0, 0, 0, 0, 0, 16, 66, 64, 4, 8, 0, 0, 0, 0, 32, 1, -128, 32, 16};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-115, 84, -55, -1, 63, -6, -16, -40, -121, 63, -3, -65, -2, -65, -9, -1, -1, -1, 15, 87, -97, -65, -10, 85, -19, -1, -5, -17, -33, 122, 60, -90, -10, -79, 27, 21, 112, -1, -1, -1, -9, -1, -65, -17, -7, -1, -49, -6, -1, -6, -1, -3, -1, -1, -33, -6, -1, -1, -4, -3, -1, -1, -1, -1, -65, -33, -49, 63, -33, -65, -4, -7, 63, -73, -5, -1, -66, -5, -1, -57, -68, 43, 96, -109, 127, 105, 99, -4, -22, -97};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT9 = new byte[] {-124, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 4, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 36, 0, 0, 16, 0, -128, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 2, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -33, -1, -1, -1, -2, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -9, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -17, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -5, -1, -1, -2, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -65};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {-9, -1, -17, -1, -1, -1, -34, -5, -5, -1, -1, -1, -1, -1, -1, -1, -9, -33, -1, -1, -1, -33, -1, 127, -1, -1, -1, -1, -33, -33, -1, -1, -2, -2, -17, -65, -1, -3, -15, -1, -9, -33, -1, -1, -3, -1, -41, -33, -1, -1, -5, -1, -1, -1, -1, -65, -3, -1, -1, -1, -33, -1, -1, -1, -13, -1, -1, -1, -1, -33, -1, -19, 127, -1, -65, -1, -1, -1, -33, -65, -2, -1, -33, -65, -1, -33, -1, -1, -1, -1, -1, -1, -1, -33, -17, -1};
}


class GBM_model_python_1589382591366_1_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_25_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[20 /* inq_last_6mths */] <3.5f ? 
         (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.16741514f ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                    -0.06319617f : 
                    -0.01806073f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -4.2174474E-4f : 
                    0.041297227f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.121142514f : 
                    -0.0132139f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    0.06716317f : 
                    0.17723322f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.12237663f : 
                    -0.11233914f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.09370582f : 
                    0.11168072f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                -0.017620962f : 
                0.29792985f)));
    return pred;
  } // constant pool size = 715B, number of visited nodes = 13, static init size = 3966B
  // {01101100 01111111 10101000 00101010 00100001 10101110 01000100 11101000 10010010 01011001 01011100 00101010 10001000 00100010 00000000 00000110 00001100 00010000 00000010 00010010 00000010 00000001 01010100 01010001 00000000 00101000 00000000 10001010 10001110 10100000 11010110 11001000 00111100 01111101 00011101 11111111 10010011 00110000 11010100 10001000 00010101 10000000 00001110 10001101 01100001 00100000 00001100 00111000 11000000 10100000 00000010 01010100 00000000 00001000 00100000 11000001 01000010 00000000 11110000 00100000 10000110 00000100 00000000 10000101 10000000 00000100 00100101 10000000 01000000 00000000 01000000 11100001 10000010 10010100 10000000 00000000 00000100 11010111 00000100 00111101 00010111 11010101 10100101 01111010 01100001 00110100 00111000 01000000 10111000 00101110}
  public static final byte[] GRPSPLIT0 = new byte[] {54, -2, 21, 84, -124, 117, 34, 23, 73, -102, 58, 84, 17, 68, 0, 96, 48, 8, 64, 72, 64, -128, 42, -118, 0, 20, 0, 81, 113, 5, 107, 19, 60, -66, -72, -1, -55, 12, 43, 17, -88, 1, 112, -79, -122, 4, 48, 28, 3, 5, 64, 42, 0, 16, 4, -125, 66, 0, 15, 4, 97, 32, 0, -95, 1, 32, -92, 1, 2, 0, 2, -121, 65, 41, 1, 0, 32, -21, 32, -68, -24, -85, -91, 94, -122, 44, 28, 2, 29, 116};
  // {01111111 01111100 11101000 00000111 111}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, 62, 23, -32, 7};
  // {00000000 01100111 10101000 00010000 000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -26, 21, 8, 0};
  // {00000010 10000000 11000001 00000000 00000111 01000000 00111010 00000110 00011100 00000100 10000000 00000000 00000000 00010000 01011000 00010000 00000000 00000000 00000110 00000101 10110100 00000010 10100000 10001000 10000000 00000000 00100000 00100000 00010000 00011011 00100011 01010000 11000000 00010010 11101010 00000000 01001100 00000110 00000000 00000000 01011000 00000000 00000000 00000011 00001010 00000000 00000001 10000000 00000000 00010101 00001001 00000010 00000000 00000000 00001100 10110000 00110000 00000001 00000001 00000100 00000000 00100000 00000000 00000000 00100010 10000100 00010000 00100011 00000101 00100011 00000010 01100000 00000001 00001000 00010000 00000001 10011010 01000000 00010110 01010000 11000100 00101010 11011100 10000101 00000000 11001011 10000001 10100000 00000100 00001000}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 1, -125, 0, -32, 2, 92, 96, 56, 32, 1, 0, 0, 8, 26, 8, 0, 0, 96, -96, 45, 64, 5, 17, 1, 0, 4, 4, 8, -40, -60, 10, 3, 72, 87, 0, 50, 96, 0, 0, 26, 0, 0, -64, 80, 0, -128, 1, 0, -88, -112, 64, 0, 0, 48, 13, 12, -128, -128, 32, 0, 4, 0, 0, 68, 33, 8, -60, -96, -60, 64, 6, -128, 16, 8, -128, 89, 2, 104, 10, 35, 84, 59, -95, 0, -45, -127, 5, 32, 16};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {-17, -67, -1, -1, -1, -6, -33, -4, -1, 127, -17, -65, -1, -5, -1, -33, -1, -1, 127, -9, -1, -1, -41, 119, -1, -1, -1, -17, -65, -2, -4, -17, -9, -7, -33, 75, 127, -1, -1, -1, -33, -1, -49, -1, -1, -6, -49, -21, -2, -2, -65, -9, -1, -1, -1, -1, -1, -1, -4, -1, -1, -1, -1, 127, -2, -1, -1, -1, -3, -1, -3, -2, -65, -2, -1, -1, -33, -41, -1, -17, -1, 86, -1, -85, -11, -37, -21, -1, -14, -1};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 2, 0, 32, 0, 0, 0, 16, 0, 0, 0, 0, 0, 2, 8, 0, 0, 32, 32, 33, 64, 1, 16, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 2, 0, 32, 0, 0, 0, 18, 0, 0, -128, 16, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 4, 0, 0, 32, 0, 0, 0, 0, 4, 32, 8, -128, -128, -128, 0, 0, 0, 0, 8, 0, 0, 0, 8, 2, 0, 16, 8, 33, 0, 0, 1, 0, 32, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 66, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-35, 125, -22, -1, 59, -98, -83, -3, -81, -51, -3, -1, -1, -1, -25, -1, -33, -1, -33, -41, -8, -65, -37, -1, -1, -1, -1, -1, -98, -1, -1, -4, -2, -71, 71, 63, -10, -5, -1, -17, -11, -1, -97, 110, -7, -1, -1, -22, -2, -2, -81, -9, -1, -17, -17, -2, -3, -1, 126, -33, -1, -1, -1, 95, -1, -33, -37, 63, -35, 123, -3, -1, -65, -9, -1, 127, -1, -3, -1, 111, 30, -1, 107, -85, 123, -45, -2, -2, -1, -1};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, -1, -2, -1, -1, -33, -1, -1, -1, -33, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -66, -1, -1, -1, -2, -1, -9, 127, -9, -5, -1, -1, -3, -1, -1, -18, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -33, -1, -1, -1, -1, -1, -33, -1, -1, -3, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -17, 94, -1, -1, -1, -1, -33, -1, -1, -1, -1};
  // {00010011 00000000 00000000 00000000 000}
  public static final byte[] GRPSPLIT9 = new byte[] {-56, 0, 0, 0, 0};
  // {00000100 10110010 10010000 00000000 000}
  public static final byte[] GRPSPLIT10 = new byte[] {32, 77, 9, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_26_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (data[10 /* annual_inc */] <42339.844f ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.10288014f : 
                    -0.01891395f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    0.0419777f : 
                    0.10109942f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.09085159f : 
                    -0.037614483f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 35, 0, data[6])) ? 
                    0.0034719554f : 
                    0.050583757f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.10768369f : 
                    0.09260874f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    0.021453101f : 
                    0.2145743f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    0.07566534f : 
                    0.18070704f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.13991974f : 
                    0.2717331f))));
    return pred;
  } // constant pool size = 910B, number of visited nodes = 15, static init size = 5088B
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {16, 88, 7, 20, 96, 51, -55, 112, 25, 18, -110, 64, 17, 88, 0, 0, 0, 8, 112, -128, 10, 0, 13, 24, 34, 20, 0, 80, 88, 5, -25, -118, 68, -16, 32, 60, -113, 56, 42, 17, -102, 1, 16, -112, 70, 4, 48, 21, 3, -123, -128, 16, 0, 17, 50, -63, 12, -128, 6, 2, 1, 2, 1, 32, 0, 32, 28, 1, -110, 80, 3, 6, 64, -23, 0, 0, 49, 73, 64, 30, 107, 32, 88, 23, -124, -114, 13, -122, 52, 32};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-101, -5, -49, -65, -21, -5, -23, -12, 31, 119, -33, -1, -1, 122, -3, -9, -49, -1, -1, -73, -102, -65, -99, -35, -2, -1, -1, 127, -34, 111, -1, -17, -26, -7, -9, -65, -65, -7, -2, -1, -1, -1, -1, -34, -17, -2, -1, -9, -1, -9, -1, -99, -1, -1, -5, -17, -1, -1, -2, -34, -33, -33, -1, -2, -6, -3, 95, 127, -33, -2, -1, -1, 126, -1, -5, 127, -1, 123, -1, 31, -1, 116, 127, -73, -3, -17, 111, -2, -3, -21};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 80, 0, 16, 0, 32, -127, 16, 0, 2, 16, 64, 0, 8, 0, 0, 0, 0, 0, 0, 2, 0, 12, 16, 2, 16, 0, 80, 8, 0, 32, -120, 4, 0, 32, 0, -114, 32, 40, 1, 0, 1, 0, 0, 6, 4, 48, 17, 0, 1, 0, 0, 0, 1, 0, -128, 8, -128, 2, 0, 0, 0, 0, 0, 0, 32, 20, 0, -126, 16, 3, 6, 0, 32, 0, 0, 0, 65, 0, 0, 40, 0, 72, 5, -124, 0, 4, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {38, -121, -15, 64, -44, 21, 118, 111, -23, -24, 33, 20, 0, -124, 10, 72, 80, 0, 0, -64, 125, -64, 96, -94, 1, 0, 4, -123, 97, -40, -56, 81, 27, 14, 111, -61, 120, 78, 1, 0, 34, 0, 96, -95, 24, 1, -128, 0, 0, 1, 80, 106, 0, 0, 20, 22, 64, 0, -119, 37, 0, 36, 0, -95, 69, 3, -88, -124, 33, 69, 0, 1, -127, 24, 13, 0, 104, -86, 104, -28, -64, -13, 38, -24, -126, 53, -111, 5, 43, 84};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-17, -1, -1, -5, -1, -3, 127, -1, -1, -3, -1, -1, -18, -73, -17, -1, -33, -1, -1, -1, -1, -1, -3, -17, -51, -21, -1, -17, -13, -5, -36, -1, -69, 95, -1, -37, 121, -49, -11, -1, -1, -1, -1, -17, -3, -5, -1, -17, -4, 127, -1, -1, -1, -18, -3, 63, -9, 127, -5, -1, -2, -1, -1, -1, -1, -1, -17, -2, 111, -17, -1, 123, -65, 31, -1, -1, -1, -2, -1, -1, -43, -1, 55, -1, -1, -3, -5, -3, -1, -1};
  // {00000000 00000000 10010001 11011111 110}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, -119, -5, 3};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 34, 2, 0, 4, 68, 0, 0, 1, 16, 8, 0, 0, 9, 16, 8, 48, 0, -128, 8, 64, 0, 34, 9, 16, 0, 0, 32, 4, 0, 2, 0, 32, 64, -128, 32, 0, 0, 0, 0, 0, 4, 0, 16, 8, 4, 0, 8, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 32, 0, 0, 0, 1, 0, -128, 1, 64, -128, 0, -128, 64, 0, 0, -128, 16, 36, 32, 8, 34, 12, -127, -128, 8, -125, 0, 0, 4, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 1, 2, 0, 12, 25, 64, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 32, 13, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 64, -128, 0, 64, 0, 0, 0, 0, 0, -64, 0, 64, 16, 64, -64, 4, 0, 0, 0, 8, -128, 9, 0};
  // {00000000 00000000 00001000 01010000 000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 16, 10, 0};
  // {00000000 00100101 00100010 00000010 000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, -92, 68, 64, 0};
  // {01010110 10111100 10001001 10000000 000}
  public static final byte[] GRPSPLIT11 = new byte[] {106, 61, -111, 1, 0};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {64, 34, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 32, 0, -128, 0, 64, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 32, 0, 0, 0, 0, 0, 0, 0, 16, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 4, 0};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 2, 0, 4, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 64, -128, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 0, 4, 0, 0, 8, -128, 0, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_27_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* term */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.10232272f : 
                    -0.034264985f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                    -0.06669806f : 
                    -0.033889297f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.0750622f : 
                    0.15423486f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    0.012345373f : 
                    0.082369015f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.09974316f : 
                    -0.019231174f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                    -4.982529E-4f : 
                    0.065044805f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.030916635f : 
                    0.12394641f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT14, 720, 0, data[15])) ? 
                    -0.045234293f : 
                    0.22079751f))));
    return pred;
  } // constant pool size = 831B, number of visited nodes = 15, static init size = 4614B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {52, 46, 54, 84, 0, 53, 79, 102, 1, -6, 58, 68, 17, -111, 2, 96, 96, 8, -112, -56, 74, 0, 42, -120, 34, 20, 0, 81, 89, 21, -18, 91, 61, 58, -72, -5, 46, 28, 41, 17, 8, 0, 64, -80, -60, 0, 48, 5, 3, 1, 0, 74, 0, 0, 22, -51, 0, -128, 15, 37, 32, 34, 0, -95, 7, 34, -68, -60, -14, -107, 64, -122, -63, -31, 0, -128, -31, 70, 72, -4, -61, 111, -57, 89, -122, -65, -99, 7, 27, 116};
  // {11111111 11111110 11111111 11111111 11110111 10111111 11110011 11101111 11101111 11111111 01111110 11110111 11111111 11101111 11111111 11111111 11110111 11111111 11111111 11111011 11111111 11111110 01111111 01110111 11110111 11111111 11011111 11011011 11011111 11111100 11111111 11111111 11111101 11111101 11111111 11111111 11111100 10111001 10111111 11111111 11110010 11111111 11111111 01111111 10100111 11111111 11111111 11100111 11111111 11111110 11111101 11110111 11111111 01110111 11111111 11110111 11011111 11111111 11111110 11111111 01111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11110111 01001111 11111111 11101111 01111110 11111111 11111111 11101011 11111111 11111111 10011111 11111111 11111111 11111111 11111111 11011011 11111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 127, -1, -1, -17, -3, -49, -9, -9, -1, 126, -17, -1, -9, -1, -1, -17, -1, -1, -33, -1, 127, -2, -18, -17, -1, -5, -37, -5, 63, -1, -1, -65, -65, -1, -1, 63, -99, -3, -1, 79, -1, -1, -2, -27, -1, -1, -25, -1, 127, -65, -17, -1, -18, -1, -17, -5, -1, 127, -1, -66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -17, -14, -1, -9, 126, -1, -1, -41, -1, -1, -7, -1, -1, -1, -1, -37, -1};
  // {11101100 10000001 10000000 00000010 010}
  public static final byte[] GRPSPLIT3 = new byte[] {55, -127, 1, 64, 2};
  // {11111111 01110100 00001100 01000100 110}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 46, 48, 34, 3};
  // {00011111 11111111 01101010 10111001 000}
  public static final byte[] GRPSPLIT5 = new byte[] {-8, -1, 86, -99, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 8, 32, 0, 0, 0, 0, 2, 0, 0, 0, 0, 16, 1, 2, 0, 0, 0, 0, 0, 10, 0, 8, 0, 0, 16, 0, 0, 72, 0, 0, 0, 0, 0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 0, 0, 0, 0, 64, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, -112, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, -128, 0, 0, 0, 64, 0, 10, 8, 1, 8, 16};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 0, 0, 64, 0, 1, 0, 4, 0, 0, 16, 4, 0, -128, 0, 96, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 17, 0, 1, 32, 8, 48, 0, 0, 17, 8, 0, 41, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 8, 0, 0, 0, 72, 0, 0, 6, 0, 32, 32, 0, -127, 0, 0, 32, 0, 16, 0, 0, -126, 1, -128, 0, 0, 32, 64, 8, 36, 0, 0, 0, 0, 2, 16, 16, 0, 16, 4};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {66, -48, -61, 0, -12, 66, 48, 25, 120, 0, -128, 16, 0, 76, 10, 8, 16, 0, 64, 32, 5, -32, 5, -109, 17, 0, 4, -92, 36, 72, 1, -126, 2, 70, 7, 64, 81, 106, 2, 0, -78, 5, 48, -63, 10, 5, -128, 9, 0, 37, -64, 48, 0, 17, 32, 18, 4, 0, -128, 34, 65, 36, 1, 0, 0, 32, 0, 5, 1, 64, 3, 5, 0, 88, 9, 0, 8, -119, 32, 14, 32, 0, 56, -92, 8, 0, 0, -128, 36, 16};
  // {00000000 11000100 00100000 00000000 00000000 00101000 00110001 00000110 10000001 00001010 11000000 00000010 00000000 00000000 00001000 00000000 00000000 00000000 00000100 00000000 01010110 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 10001001 01100011 00000000 00000010 00010001 00011110 00110000 00000001 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00101000 00000000 00010001 00001000 00000000 00000000 00000000 00000000 00100000 01010010 00000001 01000000 10000000 00000000 00000000 00000000 00000000 10000010 10000000 00000000 00000000 01000100 00000001 00000010 00000000 00000001 10000000 00100000 00000001 00001011 01000100 00000010 00001000 01010011 00101011 11100000 11000000 00100000 00100010 10010001 10000000 10010000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 35, 4, 0, 0, 20, -116, 96, -127, 80, 3, 64, 0, 0, 16, 0, 0, 0, 32, 0, 106, 0, 0, 0, 0, 0, 0, 64, 0, -111, -58, 0, 64, -120, 120, 12, -128, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 20, 0, -120, 16, 0, 0, 0, 0, 4, 74, -128, 2, 1, 0, 0, 0, 0, 65, 1, 0, 0, 34, -128, 64, 0, -128, 1, 4, -128, -48, 34, 64, 16, -54, -44, 7, 3, 4, 68, -119, 1, 9, 0};
  // {00000110 10000010 10001111 10011001 111}
  public static final byte[] GRPSPLIT10 = new byte[] {96, 65, -15, -103, 7};
  // {00100000 01000000 10000001 00100111 100}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 2, -127, -28, 1};
  // {00000100 00100000 00000000 01000111 100}
  public static final byte[] GRPSPLIT12 = new byte[] {32, 4, 0, -30, 1};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 16, 65, 0, -80, 0, 16, 24, 40, 0, -128, 0, 0, 8, 10, 0, 0, 0, 0, 0, 0, 64, 1, 2, 0, 0, 4, 0, 4, 0, 0, 0, 0, 4, 4, 0, 64, 32, 0, 0, -78, 5, 16, 0, 10, 0, 0, 8, 0, 0, 0, 0, 0, 16, 0, 16, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 16, 8, 0, 8, -120, 0, 2, 0, 0, 8, -128, 0, 0, 0, 0, 4, 16};
  // {}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -17, -1, -1, -33, -1, -17, -9, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -2, -1, -1, -1, -1, -1, -1, -2, -1, -1, -5, -5, -1, -1, -9, -1, -1, -1, -5, -1, 127, -3, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -3, -5, -1, -1, -1, -1, -1, -2, -1, -13, -1, -1, -9, 127, -1, -1, -1, -1, -1, -1};
}


class GBM_model_python_1589382591366_1_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_28_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[14 /* title */] <2598.5f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.09701844f : 
                    -0.04244746f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.044834252f : 
                    0.009611786f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                    0.023435833f : 
                    0.08866547f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 35, 0, data[6])) ? 
                    0.04651394f : 
                    0.20790555f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.10212609f : 
                    -0.03454473f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.043326065f : 
                    0.011650037f)) : 
             (data[10 /* annual_inc */] <61632.812f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(706, 1, data[15]) || (GenModel.bitSetIsInRange(706, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 706, 1, data[15])) ? 
                    0.052942824f : 
                    0.13949655f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(706, 1, data[15]) || (GenModel.bitSetIsInRange(706, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 706, 1, data[15])) ? 
                    -0.053535156f : 
                    0.08357614f))));
    return pred;
  } // constant pool size = 733B, number of visited nodes = 15, static init size = 4026B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {36, 1, 17, 80, -128, 5, 67, 67, -8, -32, 32, 4, 17, 64, 8, 0, 64, 8, -80, 40, 9, 32, 10, 0, 17, 16, 4, -123, 49, 76, 39, -117, 121, 76, 100, 122, 79, 16, 33, 1, -96, 1, 16, 65, 24, 1, -112, 0, 2, 1, -128, 90, 0, 0, 0, 67, 0, -128, -124, 5, 1, 32, 0, -96, 68, 32, 12, 64, 32, -112, 1, 2, 65, -56, 1, 0, 96, 12, 64, -58, -117, 78, 108, 10, -128, 80, -128, 2, 40, 52};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-81, 81, -5, -5, -81, -97, 79, -49, -1, -1, 116, -17, -1, 119, -19, -41, -33, -1, -65, -1, -33, -1, -5, 102, -35, -5, -1, -17, -5, 110, 119, -1, -5, -51, 125, -1, 127, -7, -3, -1, -1, -1, -65, -33, 121, -5, -1, -18, -2, 91, -81, -1, -1, -18, -7, 111, -67, -1, -4, -3, -33, -3, -1, -1, -2, -4, 79, -6, -19, -2, -1, 127, 127, -2, -5, -1, -10, 126, -33, -33, -65, -18, 111, -37, -3, -41, -29, 123, -1, -1};
  // {11010100 00000010 00000000 01000101 010}
  public static final byte[] GRPSPLIT2 = new byte[] {43, 64, 0, -94, 2};
  // {00001000 00000011 10011101 00010011 110}
  public static final byte[] GRPSPLIT3 = new byte[] {16, -64, -71, -56, 3};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 64, 0, 1, 2, 1, 64, 0, 32, 4, 0, 64, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 16, 4, 1, 16, 4, 32, -128, 24, 0, 0, 0, 3, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 64, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 64, 32, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 4, 9, 0, 0, 0, 0, 16, 0, 0, 0, 0};
  // {00000000 00000101 00011001 01001001 001}
  public static final byte[] GRPSPLIT5 = new byte[] {0, -96, -104, -110, 4};
  // {10001010 10010110 01000011 00010000 000}
  public static final byte[] GRPSPLIT6 = new byte[] {81, 105, -62, 8, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {82, -66, -58, 4, 116, 112, -80, 52, 1, 0, -101, 80, 0, -120, 18, 104, 32, 0, 64, 0, 98, -64, 1, -103, 34, 4, 0, 80, 68, -111, -56, 0, 54, -126, -117, -127, -80, 110, 10, 0, 2, 4, 64, -80, -60, 4, 32, 21, 1, -124, 64, 32, 0, 17, 22, -104, 66, 0, 11, 34, 32, 6, 1, 1, 1, 3, -80, -123, -46, 69, 0, -124, -128, 17, 4, -128, 25, -29, 40, 56, 96, -79, -112, -11, 6, -81, 25, -123, 4, 0};
  // {11011011 01111111 11110111 11111101 11111111 01011111 10111101 01111111 11110100 11111111 11111011 11111111 01110111 11111101 11111111 11111111 11111101 11111111 11110110 11111011 01111111 11111111 10111111 11111111 01110111 11110111 11111111 11111111 11110011 11011101 11011011 11111110 11101101 11111111 11011011 11101001 00001111 11110111 01111111 11111111 11111011 11111111 11111111 01111101 11110111 11111111 11111111 11111111 10111111 01111111 11111111 10110101 11111111 11111111 11111111 11111101 11011111 11111110 11011111 01111111 01111111 11111111 11111111 11111111 11111101 11111011 11011111 11111111 11111111 11110110 01111111 11111111 01111111 11111110 11111111 11111111 11111111 11001111 11111111 11111100 01101110 10101111 11001101 10101111 11111111 11110111 11111111 10111111 11101111 11011011}
  public static final byte[] GRPSPLIT8 = new byte[] {-37, -2, -17, -65, -1, -6, -67, -2, 47, -1, -33, -1, -18, -65, -1, -1, -65, -1, 111, -33, -2, -1, -3, -1, -18, -17, -1, -1, -49, -69, -37, 127, -73, -1, -37, -105, -16, -17, -2, -1, -33, -1, -1, -66, -17, -1, -1, -1, -3, -2, -1, -83, -1, -1, -1, -65, -5, 127, -5, -2, -2, -1, -1, -1, -65, -33, -5, -1, -1, 111, -2, -1, -2, 127, -1, -1, -1, -13, -1, 63, 118, -11, -77, -11, -1, -17, -1, -3, -9, -37};
  // {01101010 00111001 00000010 01000010 001}
  public static final byte[] GRPSPLIT9 = new byte[] {86, -100, 64, 66, 4};
  // {00011001 00101010 10001100 10101101 100}
  public static final byte[] GRPSPLIT10 = new byte[] {-104, 84, 49, -75, 1};
  // {...1 0-bits... 00010100 01101000 00000000 00000000 00000000 00000000 00000010 00010000 00000000 00000001 00000000 00010000 00000000 00000000 00000000 00001100 00001000 00000000 00000000 00000000 00001000 00000000 00000000 00010010 00000000 01000000 00000000 00000000 00000001 00010000 00000010 00000000 01000000 00000000 00000000 00000000 00000000 00000000 10100000 00000000 00000000 01000000 00000000 00000000 01000010 00000000 00000001 00010000 00000000 00000010 00000000 00000000 00000001 00000000 11000000 00000010 10000000 00000000 10100000 00000000 00001000 00000000 00000000 00000001 00000000 10000000 00001001 01000000 10000010 00000000 00000000 01000010 00000000 00000000 00000000 00000000 00110001 00001000 00101000 00000000 00000100 00010000 00010001 01000000 10000000 01001000 00000001 01000000 01}
  public static final byte[] GRPSPLIT11 = new byte[] {40, 22, 0, 0, 0, 0, 64, 8, 0, -128, 0, 8, 0, 0, 0, 48, 16, 0, 0, 0, 16, 0, 0, 72, 0, 2, 0, 0, -128, 8, 64, 0, 2, 0, 0, 0, 0, 0, 5, 0, 0, 2, 0, 0, 66, 0, -128, 8, 0, 64, 0, 0, -128, 0, 3, 64, 1, 0, 5, 0, 16, 0, 0, -128, 0, 1, -112, 2, 65, 0, 0, 66, 0, 0, 0, 0, -116, 16, 20, 0, 32, 8, -120, 2, 1, 18, -128, 2, 2};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT12 = new byte[] {33, 66, 33, 0, 40, 48, 24, -112, 0, 0, 5, 0, 0, 64, 9, 4, 0, 0, 0, 0, 16, 96, -128, 4, 0, 0, 0, 32, 0, 0, 68, 0, 17, -127, -59, 0, 8, 5, 0, 0, 0, 0, 32, 64, 0, 2, -112, 2, 0, 2, 32, 0, 0, 0, 0, 8, 32, 0, 0, 0, 0, 2, -128, 0, -128, 0, 64, 0, -96, 2, 0, 0, 64, 8, 0, -64, 4, 0, 0, 20, -80, 16, 64, 26, 0, -60, 4, 64, 0};
}


class GBM_model_python_1589382591366_1_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_29_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.13570032f : 
                    -0.115049124f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.08139948f : 
                    -0.0116778305f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[8 /* emp_length */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                    -0.010184988f : 
                    0.12550314f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                    0.12654534f : 
                    0.2473905f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
             (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.21309844f ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.07117256f : 
                    -0.0235055f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.12092621f : 
                    0.16742708f)) : 
             (data[10 /* annual_inc */] <89695.31f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 718, 1, data[15])) ? 
                    0.010760216f : 
                    0.053133782f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 718, 1, data[15])) ? 
                    -0.08122274f : 
                    0.067585364f))));
    return pred;
  } // constant pool size = 988B, number of visited nodes = 15, static init size = 5556B
  // {00101011 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 31, 0, 0};
  // {00000010 00010101 10000010 00100000 00001000 01100000 00010010 00000000 00010000 00000000 01000100 00000000 00000000 00100010 00000000 00000000 00000010 00010000 00000000 00000000 00000100 00000000 00000010 00000100 00000000 00000000 00100000 10000001 00001000 10000000 00100000 10000001 00000010 00000000 00000000 00100001 00000110 00010000 11000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00100000 00000010 01000000 00000000 00000000 00001000 00000000 00000010 00000000 00010000 01000000 00000000 00000000 00000000 00000000 01000000 01000000 00000000 00000000 11000000 00001000 11000000 01100000 00000000 10010000 10000000 00000000 10000010 00000000 00000010 00010101 10010001 00000000 01000100 00100010 00000000 10010000 00000000 00100000 10000100 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {64, -88, 65, 4, 16, 6, 72, 0, 8, 0, 34, 0, 0, 68, 0, 0, 64, 8, 0, 0, 32, 0, 64, 32, 0, 0, 4, -127, 16, 1, 4, -127, 64, 0, 0, -124, 96, 8, 35, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 4, 64, 2, 0, 0, 16, 0, 64, 0, 8, 2, 0, 0, 0, 0, 2, 2, 0, 0, 3, 16, 3, 6, 0, 9, 1, 0, 65, 0, 64, -88, -119, 0, 34, 68, 0, 9, 0, 4, 33, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-7, -8, -39, -1, 127, -50, 125, -20, -1, -65, -2, -17, -17, -1, -11, -1, -1, -1, 47, -9, -2, -1, -13, -9, -36, -5, -1, -65, -109, -1, -4, -89, -14, -107, 27, -89, -4, -3, -1, -17, 119, -1, -17, 111, -3, -5, -17, -1, -3, 126, -1, -73, -1, -1, -3, 127, -3, 127, -1, -33, -1, -1, -1, 95, -2, -2, 111, -2, 127, -1, -1, 127, -65, -1, -1, -1, -41, -33, -1, -85, -33, 127, -10, -17, -3, -35, -26, -1, -13, -65};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -3, -1, -1, -2, 127, -2, -1, -1, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -33, -1, -1, -1, -65, -1, -2, -1, -9, -1, -1, -73, -2, -3, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, 126, -1, -9, -1, -1, -1, -1, -3, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -9, -33, -1, -5, -33, -1, -1, -1, -1, -1, -1, -1, -9, -1};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {-49, -65, -1, -1, -37, -1, -18, -105, 94, 117, -1, -65, -1, -26, -1, -1, -1, -1, -33, 31, -83, 31, -4, -18, -17, -1, -1, -33, -1, 107, 119, -3, -1, 123, -4, -35, -17, -53, -1, -1, -17, -1, -65, -97, 39, -2, 127, -13, -2, -9, -17, -17, -1, -2, -5, -75, -5, -1, -2, -2, -97, -3, -1, -1, -5, -1, -13, 63, -113, 122, -65, -1, 127, -81, -9, -1, 111, -4, -1, -3, -71, -19, 47, 85, -9, 47, 127, -35, -3, -37};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, -128, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 64, 0, 0, 0, 0, 0, 64, 0, 0, 0, 4, 0, 0, 1, 0, -128, 0, 0, 0, -124, 64, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 16, 0, 2, 0, 0, 0, 0, 0, 0, 0, -96, -120, 0, 0, 0, 0, 0, 0, 4, 32, 0};
  // {01011101 11010000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-70, 11, 0, 0};
  // {10010111 01001011 11110111 11111110 111}
  public static final byte[] GRPSPLIT7 = new byte[] {-23, -46, -17, 127, 7};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {38, 87, -89, 80, -28, 113, -77, 119, 113, -6, 17, 84, 16, 24, 10, 104, 0, 0, -16, -56, 67, 64, 45, -117, 49, 20, 0, 100, 109, 28, -61, 90, 59, -18, -9, 123, 27, 126, 8, 17, -86, 1, 112, -16, -98, 4, 16, 13, 2, -119, -128, 88, 0, 0, 54, -35, 14, -128, -121, 37, 97, 38, 1, -95, 69, 33, -88, -59, -80, -59, 64, -127, -63, 64, 4, 0, 56, 107, 40, 84, 98, -41, -103, -80, 6, -74, -103, -125, 14, 116};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-65, 127, -1, -5, -17, -1, -1, -1, 127, -1, -33, -1, -1, -69, -1, -1, -65, -1, -1, -1, -33, -1, -1, -33, -1, -1, -5, -1, -1, -2, -1, -1, -65, -1, -1, -5, -97, -1, -36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -65, -3, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -3, -3, -1, -1, -1, -17, -1, -3, -1, -1, -1, -1, -1, -1, -1, 95, 119, -1, -1, -1, -1, -1, -1, -5, -33, -1};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 0, 0, 0, 0, 68, 0, -128, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 32, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 35, 82, 32, -48, -88, -47, 19, 0, -96, 0, 10, 0, 0, 5, 32, 0, 0, 40, -28, 32, -128, 16, 1, 16, 10, 0, 32, 50, -120, 96, 41, 12, 32, -80, 32, 1, 0, -124, 8, -59, 0, 32, 0, 1, 2, -120, 0, 1, 0, 64, 12, 0, 0, -125, 108, 1, 64, 1, 16, 0, -112, -128, -64, -128, 16, -60, 0, 64, 0, -128, -64, 32, 32, 0, 0, -108, 53, 4, 10, -112, -56, 12, 24, 1, 16, 12, 0, 5, 8};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT12 = new byte[] {-128, 0, 1, 0, 32, 0, 0, -128, 48, 16, 8, 0, 0, 4, 0, 4, 0, 0, 64, 0, 1, 32, -128, 68, 0, 0, 0, 0, 0, 0, 0, 4, 17, -127, 88, -124, 8, 1, 0, 0, 0, 0, 8, 72, 0, 0, 0, 2, -128, 4, 0, 32, 0, 0, 0, 0, 0, 0, 64, 0, 0, 2, 0, 16, 0, 0, 0, 0, -112, 96, 32, 0, 64, 0, 0, 0, 0, 0, 16, 32, 33, 32, 68, 64, 2, 64, 64, 64, 2, 0};
}


class GBM_model_python_1589382591366_1_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_30_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[26]) || data[26 /* revol_util */] <28.6875f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.13988383f : 
                    -0.10795756f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.07307733f : 
                    -0.027477577f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                    -0.007988736f : 
                    0.09474091f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 35, 0, data[6])) ? 
                    0.0824497f : 
                    0.2131092f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.108947165f : 
                    0.022885256f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.027396554f : 
                    0.05501283f)) : 
             (data[7 /* emp_title */] <7340.5f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 718, 1, data[15])) ? 
                    -0.009897766f : 
                    0.038116835f) : 
                 (Double.isNaN(data[7 /* emp_title */]) || !GenModel.bitSetIsInRange(874, 7341, data[7]) || (GenModel.bitSetIsInRange(874, 7341, data[7]) && !GenModel.bitSetContains(GRPSPLIT12, 874, 7341, data[7])) ? 
                    -0.011705685f : 
                    0.30598843f))));
    return pred;
  } // constant pool size = 925B, number of visited nodes = 15, static init size = 5178B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 9, 7, 16, -112, 2, -96, 59, -112, 40, 16, 64, 1, 64, 8, 0, 16, 0, -32, -128, 35, 64, 2, -125, 2, 16, 0, -64, 64, 0, 6, 10, 64, -64, -128, -103, 8, 8, 0, 0, 8, 0, 0, 17, 68, 4, 0, 0, 0, 5, 0, 8, 0, 16, 32, -63, 0, 0, 5, 0, 0, 0, 0, 33, 3, 0, 20, -127, -16, 4, 0, 0, -64, -80, 4, 0, 56, 40, 32, 64, 64, 12, -110, 16, 2, 10, -128, 0, 37, 16};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-81, 127, -17, -1, -65, -2, -17, -5, -65, -65, -12, -17, -1, 123, -1, -41, -97, -1, -1, -9, -9, -1, -41, -9, -33, -1, -5, -1, -25, 126, -33, -17, -10, -43, -37, -1, -33, -7, -10, -1, -3, -1, -49, -1, -3, -1, -33, -1, -3, 127, -1, -65, -1, -1, -1, -1, -69, -1, -3, -33, -2, -33, -1, 127, -65, -2, -33, -1, -1, 127, -3, -5, -2, -9, -1, -1, -1, -4, -1, 123, 85, 95, -9, -1, -1, -1, -5, -8, -9, -1};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-17, 127, -17, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, 127, -1, -41, -65, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -2, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -3, -1, -1, -33, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -41, -1, -1, -1, -1, -1, -1, -5, -9, -1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-35, -69, -1, -69, -37, -101, -71, -1, -33, 125, -33, -1, -17, -26, -19, -1, -1, -9, -1, -97, -5, 127, -2, -33, -2, -1, -1, -17, -1, -93, 118, -66, -1, -17, -65, -39, 106, -49, -3, -1, -33, -5, -65, -97, -17, -1, 127, -30, -1, -9, -17, -51, -1, -2, -21, -5, -1, 127, -1, -4, -97, -3, -1, -1, -5, -3, -9, -65, -1, -65, -66, 127, -1, -66, -1, 127, 126, 123, -65, -49, -1, -67, -69, 17, -13, 10, -25, -1, -19, -5};
  // {00000000 00010000 10000000 00000000 00000000 00000000 00000001 00010000 00000000 00000000 00000000 00000000 10000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 01000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 10011001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000100 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 01000000 00000000 00000000 10000000 00000001 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00001000 01000000 00000000 00000000 00000000 00100100 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 1, 0, 0, 0, -128, 8, 0, 0, 0, 0, 1, 64, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 2, 16, 0, 0, 0, 0, 0, 0, 64, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 32, -128, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, -128, 0, 0, 0, 0, 32, 0, 0, 0, 8, 0, 0, 0, 0, 0, 16, 2, 0, 0, 0, 36, 0};
  // {00011100 11110100 10010111 10100000 000}
  public static final byte[] GRPSPLIT5 = new byte[] {56, 47, -23, 5, 0};
  // {00001011 10001011 00010000 00000001 000}
  public static final byte[] GRPSPLIT6 = new byte[] {-48, -47, 8, -128, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {114, -26, -112, 68, 100, 101, 94, 4, 105, -46, 43, 20, 16, -100, 18, 104, 96, 8, 0, 104, 93, -128, 45, -120, 33, 0, 4, 21, 61, -35, -23, -111, 59, 62, 127, 102, 117, 118, 43, 17, -86, 5, 112, -32, -102, 0, 48, 29, 2, -88, -128, 114, 0, 1, 20, 20, 78, -128, -118, 39, 97, 38, 1, -128, 68, 35, -88, 68, 2, -64, 67, -121, 1, 73, 9, -128, 65, -57, 72, -66, -86, -9, 77, -17, -124, -75, 29, -121, 24, 68};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -10, -2, -1, -17, -1, 95, -17, 127, -1, -1, -1, -2, -65, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -3, -1, -1, -1, -65, -1, -1, -1, -65, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -2, -5, -1, -1, -1, -1, -2, -1, -1, -1, -17, -1, 63, -1, -1, -5, -1, -1, -1, -1, -34, -3, -1, -21, -1, -17, -1, -1, -1, -1, 79, -5, -1, -33, -9, -1, -65, -1, -9, 127, -17, -3, -1, -1, -1, -1, -1};
  // {11000010 00000000 10010000 10000000 000}
  public static final byte[] GRPSPLIT9 = new byte[] {67, 0, 9, 1, 0};
  // {00000000 00000000 00000010 00011111 100}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 64, -8, 1};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -17, -1, -1, 109, -33, -3, 127, -5, -42, -5, -9, -1, -13, -10, -1, -17, -5, -1, -1, -43, -65, -3, -1, -1, -1, -1, 127, 107, -41, -97, -65, -1, -17, -14, 94, -17, -42, -2, -9, -6, -3, -33, -17, -2, -1, -17, -1, -1, -65, -1, -18, 127, -1, -3, -1, -6, -1, 62, -1, -33, -1, -1, -65, -1, -2, -5, -33, -2, -97, 126, -2, -1, -37, -5, -1, -33, -65, -33, -6, 63, 61, -1, -5, 61, -83, 123, -65, -5, 63};
  // {...7341 0-bits}
  public static final byte[] GRPSPLIT12 = new byte[] {-120, -128, 8, 0, -112, 0, 66, -112, 0, 0, 0, 4, 2, 2, 0, 1, 0, 0, 4, 4, 0, 0, -118, 0, 0, 0, 4, 0, 0, 21, 0, 16, 0, 0, 32, 0, 64, 0, 2, 64, 1, 0, 16, 0, 1, -72, 36, 0, 0, 0, 32, -128, 0, 5, 2, 16, 0, 2, 1, 64, -128, 8, 0, 0, 3, 0, 0, -128, 0, 0, 0, 2, 1, -120, 0, 24, 0, 32, 2, 0, 96, 0, 64, 0, 64, 2, 1, 0, 64, 0, 64, 0, 0, 0, 0, 0, 12, 0, 0, 0, 4, 32, 4, -60, 5, 33, 16, 0, 0, 2};
}


class GBM_model_python_1589382591366_1_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_31_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[20 /* inq_last_6mths */] <3.5f ? 
         (data[3 /* int_rate */] <0.075867966f ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                    -0.10924268f : 
                    -0.08188229f) : 
                 (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                    0.08038392f : 
                    0.30644733f)) : 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                    -0.030360984f : 
                    0.044048265f) : 
                 (data[14 /* title */] <1481.5f ? 
                    -0.0042445567f : 
                    0.02673913f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.11859517f : 
                    -0.10939833f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                    -0.09391301f : 
                    0.1199617f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                -0.041265268f : 
                0.23779769f)));
    return pred;
  } // constant pool size = 623B, number of visited nodes = 13, static init size = 3414B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 40, 35, 0, 0, 0, 8, 0, 0, 32, 2, 16, 0, 65, 0, 0, 0, 8, 0, -128, 2, 0, 0, 0, 0, 16, 0, 64, 0, 0, 1, 0, 0, 64, 81, 81, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 16, 1, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, -112, -128, 0, -128, 0, 0, 64, 0, 0, 0, 0, 32, 32, 80, 0, 0, 43, 0, -128, -120, 0, 1, 4, 16};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -7, -21, -69, 111, -114, -66, -23, -121, -65, -17, -1, -18, 123, -1, -1, -65, -1, 111, -9, -74, -1, -43, 119, -2, -5, -1, -17, -113, -2, -1, -26, -42, 85, -33, -3, -6, -7, -9, -1, 125, -1, -33, 127, -65, -1, -49, -6, -2, -1, -1, -11, -1, -2, -3, -69, -1, -1, -7, -33, -1, -33, -1, 127, -2, -2, -1, -2, -17, -65, -1, 121, -1, 119, -5, -1, -34, -11, -65, -5, -76, 79, 123, -22, -5, -37, -26, 127, -2, -37};
  // {00010000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 2, 0, 0};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {102, -41, -124, 84, -12, 117, 118, 119, 121, -6, -79, 68, 17, -100, 24, 96, 80, 0, 112, 72, 93, 64, 46, -118, 1, 4, 4, -107, 117, 25, -50, 91, 59, -66, -82, -82, 93, 62, 40, 17, -70, 1, 96, -47, -114, 4, 48, 29, 3, 37, -48, 26, 0, 16, 54, 79, 74, 0, -113, 39, 97, 38, 0, -127, 69, 35, 44, 69, -78, -64, 67, -121, 1, -39, 5, -128, 105, 79, 104, -68, -21, -9, -43, -11, 4, 37, -103, -122, 49, 100};
  // {00000000 00000001 00000011 00111111 100}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -128, -64, -4, 1};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0};
  // {10111011 10111110 01010111 11111111 11011100 01110001 10110101 10111011 11110101 10110000 10111011 11111101 11111111 11101111 11100111 11111111 11111011 11101111 11111001 11101001 00011101 11111101 11011011 10111111 11111111 11111111 11111111 11111111 01111001 11111111 11111111 00111111 01111111 10001101 10100010 01111000 01101101 11011111 11111111 11110111 10101111 11111111 11111001 01110110 10011111 11111111 11110111 01010111 01111111 01011111 11110101 10101011 11111111 11110111 11110111 01111111 10111111 11111111 01111110 11111011 11111011 11111111 11111111 11111010 11111111 11111011 11001011 11111100 10111011 11011110 10111111 11111111 11111101 11100111 11111111 11111110 11111101 10111111 11111111 11110110 01111000 11111111 11010110 11010101 11011110 11001010 01100111 00111111 11111011 11111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-35, 125, -22, -1, 59, -114, -83, -35, -81, 13, -35, -65, -1, -9, -25, -1, -33, -9, -97, -105, -72, -65, -37, -3, -1, -1, -1, -1, -98, -1, -1, -4, -2, -79, 69, 30, -74, -5, -1, -17, -11, -1, -97, 110, -7, -1, -17, -22, -2, -6, -81, -43, -1, -17, -17, -2, -3, -1, 126, -33, -33, -1, -1, 95, -1, -33, -45, 63, -35, 123, -3, -1, -65, -25, -1, 127, -65, -3, -1, 111, 30, -1, 107, -85, 123, 83, -26, -4, -33, -1};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, -1, -6, -1, -1, -33, -1, -1, -1, -33, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -66, -1, -1, -1, -2, -1, -9, 127, -9, -5, -1, -1, -3, -1, -1, 110, -5, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -3, -1, 127, -33, -1, -1, -1, -1, -1, -33, -1, 127, -35, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -17, 94, -1, -1, -17, -1, -33, -2, -1, -1, -1};
  // {00010011 10000000 00000010 00000000 000}
  public static final byte[] GRPSPLIT8 = new byte[] {-56, 1, 64, 0, 0};
  // {00000100 10110111 10000000 00000000 000}
  public static final byte[] GRPSPLIT9 = new byte[] {32, -19, 1, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_32_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (Double.isNaN(data[26]) || data[26 /* revol_util */] <89.25f ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.069018185f : 
                    -0.032941103f) : 
                 (data[14 /* title */] <4977.5f ? 
                    0.0014337999f : 
                    0.04503564f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.12018798f : 
                    -0.01999856f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    0.101377025f : 
                    0.22617434f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.13686958f : 
                    -0.09361272f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.058156736f : 
                    0.13897896f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                 (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                    0.023341311f : 
                    0.14878263f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 35, 0, data[6])) ? 
                    0.086010724f : 
                    0.1828496f))));
    return pred;
  } // constant pool size = 903B, number of visited nodes = 15, static init size = 5046B
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {50, -1, 117, 84, -16, 51, -7, 127, 89, -6, -79, 80, 17, 84, 10, 96, 80, 0, -16, -56, 26, -32, 4, -102, 3, 20, 4, -43, 121, -103, 108, -38, 86, 46, 123, -45, -4, 110, 11, 17, -96, 1, 32, 97, -58, 5, 48, 21, 1, -127, -48, 58, 0, 17, 50, -43, 76, -128, -113, 5, 65, 38, 1, -95, 64, 33, 60, 5, -78, 16, 1, 3, -63, -7, 5, 0, 104, -53, 104, -4, 72, -13, 122, 59, 6, -75, -116, 1, 23, 80};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-5, -1, -3, -1, -1, -1, -3, -1, -1, -1, -9, -5, -1, 126, -17, -9, -33, -1, -1, -33, -33, -1, -68, -1, -49, -1, -1, -1, -5, -5, -2, -1, -9, -17, 127, -5, -2, -17, -1, -1, -25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -5, -1, -1, -1, -1, -33, -33, -1, -1, -1, -5, -3, -1, -1, -1, -2, -1, 127, -1, -1, -1, 127, -1, -37, -1, -1, 93, -9, 127, -1, -1, -3, -17, -7, -1, -37};
  // {00100000 00000000 01000000 00000000 00000000 00100000 01100000 00000000 00001100 00000000 01010000 00100000 00000000 00000001 00000000 00000000 00000000 00010000 00000000 00000001 10100100 00000000 10010010 00000000 00000100 00000000 00000000 00000000 00000110 00100010 10000001 10000000 10010000 00001011 00000001 00110000 11000000 00001000 00000100 00000000 01011000 00000000 00001010 00000001 00000000 00000000 00000101 00000000 00000000 00100000 00000000 00000010 00000000 00000000 00101000 01000000 00000000 00000000 10000000 00000100 00000000 00000000 00000000 00000000 00100000 01000000 00000000 00000001 10000000 10000011 00000010 00100000 00000000 00000000 00010000 00000001 10000000 00000100 00000000 01000000 11000101 00000000 11110000 00100011 00000001 00010000 10001000 11100000 00010100 00101100}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 2, 0, 0, 4, 6, 0, 48, 0, 10, 4, 0, -128, 0, 0, 0, 8, 0, -128, 37, 0, 73, 0, 32, 0, 0, 0, 96, 68, -127, 1, 9, -48, -128, 12, 3, 16, 32, 0, 26, 0, 80, -128, 0, 0, -96, 0, 0, 4, 0, 64, 0, 0, 20, 2, 0, 0, 1, 32, 0, 0, 0, 0, 4, 2, 0, -128, 1, -63, 64, 4, 0, 0, 8, -128, 1, 32, 0, 2, -93, 0, 15, -60, -128, 8, 17, 7, 40, 52};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {-51, -47, -33, -1, -1, -4, -66, -2, -9, 95, -33, -1, -1, -5, -9, -1, -81, -1, 63, -9, -11, -97, -5, 117, -1, -1, -1, 63, -17, -17, -1, 103, -1, -9, -106, -2, -49, -1, -1, -1, -1, -1, -33, -1, -1, -2, -1, -18, -1, 127, -65, -9, -1, -1, -3, -2, -1, -1, 125, -1, -65, -1, -1, -33, -1, -1, -49, -2, 95, -1, -2, -1, -65, -58, -5, -1, -1, -9, -33, 127, -65, 110, -33, -1, -1, -38, -9, -1, -5, -1};
  // {00100000 00000000 01000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00010000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000100 00000000 00000010 00000000 00000100 00000000 00000000 00000000 00000000 00100000 00000001 00000000 10010000 00001001 00000000 00100000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000001 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 01000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000001 00000000 10000000 00000000 00100000 00000000 00000000 00000000 00000001 00000000 00000100 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00010000 10000000 00000000 00010100 00000100}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 2, 0, 0, 0, 2, 0, 0, 0, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 64, 0, 32, 0, 0, 0, 0, 4, -128, 0, 9, -112, 0, 4, 0, 0, 0, 0, 8, 0, 0, -128, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 32, 0, 0, 0, 0, 0, 2, 0, -128, 0, 1, 0, 4, 0, 0, 0, -128, 0, 32, 0, 0, 0, 0, 8, 0, 0, 8, 1, 0, 40, 32};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 34, 2, 0, 4, 68, 0, 0, 1, 16, 8, 0, 0, 9, 16, 8, 48, 0, -128, 40, 64, 0, 34, 9, 16, 0, 0, 32, 4, 0, 3, 0, 32, 76, -111, 32, 0, 0, 0, 0, 0, 4, 0, 16, 8, 4, 0, 8, 0, 36, 0, 0, 0, 0, 0, 1, 2, 0, 0, 2, 32, 0, 0, 0, 1, 0, -128, 65, 64, -128, 0, -128, 64, 0, 0, -128, -112, 36, 32, 24, 98, 76, -127, -128, 8, -125, 8, 0, 12, 0};
  // {11011001 01001101 00001011 01010000 000}
  public static final byte[] GRPSPLIT7 = new byte[] {-101, -78, -48, 10, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -65, -1, -1, -1, -1, -1, -105, -65, -1, -65, -1, -1, -1, -1, -1, -1, -5, -1, -1, -2, -1, -2, -1, -1, -1, -1, -33, 127, -1, -1, -3, -2, -1, -1, -1, -1, -1, -33, -1, -1, 127, -1, -65, -1, -1, -1, -1, -1, -65, -1, -1, -1, -2, -1, -5, -1, -1, -1, -1, -1, -2, -17};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 64, 0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0, 4, 0, 0, 0, 0, -128, 1, 0};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 34, 2, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 32, 0, -128, 0, 64, 0, 34, 8, 0, 0, 0, 0, 0, 0, 2, 0, 0, 64, -128, 32, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 1, 64, -128, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 2, 0, -127, 0, 0, -125, 0, 0, 4, 0};
  // {11001000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {19, 9, 0, 0};
  // {11011111 11111101 11001011 11111111 011}
  public static final byte[] GRPSPLIT12 = new byte[] {-5, -65, -45, -1, 6};
}


class GBM_model_python_1589382591366_1_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_33_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.1296049f : 
                    -0.112879515f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.08211713f : 
                    -0.014242211f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.022232829f : 
                    0.15915622f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    0.08207048f : 
                    0.22987875f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
             (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.22104336f ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.068662204f : 
                    -0.027992906f) : 
                0.12477507f) : 
             (data[10 /* annual_inc */] <65140.625f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 718, 1, data[15])) ? 
                    0.0064383186f : 
                    0.05583232f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 718, 1, data[15])) ? 
                    -0.03335616f : 
                    0.06243115f))));
    return pred;
  } // constant pool size = 979B, number of visited nodes = 14, static init size = 5526B
  // {00101011 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 31, 0, 0};
  // {00000010 00010101 10000010 00100000 00001000 01100000 00110010 00000000 00011000 00000100 01000100 00000000 00000000 00100010 00000000 00000000 00000010 00010000 00000000 00000000 00000100 00000000 00000010 00000100 00000000 00000000 00100000 10000001 00001000 10000000 00100000 10000001 00000010 00000000 00000000 00100001 00000110 00000000 11000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00100000 00000010 01000000 00000000 00000000 00001000 00000000 00000010 00000000 00010000 01000000 00000000 00000000 00000000 00000000 01000000 01000000 00000000 00000000 11000000 00001000 11000000 01100000 00000000 10010000 10000000 00000000 10000010 00000000 00000010 00010101 10010001 00000000 01000100 00100010 00000000 10110000 00000000 00100000 10000100 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {64, -88, 65, 4, 16, 6, 76, 0, 24, 32, 34, 0, 0, 68, 0, 0, 64, 8, 0, 0, 32, 0, 64, 32, 0, 0, 4, -127, 16, 1, 4, -127, 64, 0, 0, -124, 96, 0, 35, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 4, 64, 2, 0, 0, 16, 0, 64, 0, 8, 2, 0, 0, 0, 0, 2, 2, 0, 0, 3, 16, 3, 6, 0, 9, 1, 0, 65, 0, 64, -88, -119, 0, 34, 68, 0, 13, 0, 4, 33, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-7, -8, -39, -1, 127, -50, 125, -20, -1, -65, -2, -17, -1, -1, -11, -1, -1, -1, 47, -9, -2, -1, -9, -9, -34, -5, -1, -65, -109, -1, -4, -89, -14, -107, 27, -89, -20, -3, -1, -17, 119, -1, -17, 111, 125, -5, -17, -5, -3, 126, -1, -73, -1, -1, -3, 127, -3, 127, -1, -33, -1, -1, -1, 95, -2, -1, 111, -2, 111, -1, -1, -1, -65, -1, -1, -1, -41, -33, -1, -85, -33, 127, -10, -17, -3, -35, -26, -1, -13, -65};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -3, -1, 127, -2, 127, -2, -1, -1, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -33, -1, -1, -1, -65, -1, -2, -1, -9, -1, -1, -73, -2, -3, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, 126, -1, -9, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -9, -33, -1, -5, -33, -1, -1, -1, -1, -1, -1, -1, -9, -1};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {-49, -65, -1, -1, -101, -1, -17, -105, 94, 117, -1, -65, -17, -25, -1, -1, -1, -1, -33, 31, -83, 31, -8, -18, -19, -1, -1, -33, -1, 107, 119, -3, -1, 123, -4, -35, -1, -53, -1, -1, -17, -1, -65, -97, -89, -2, 127, -9, -2, -9, -1, -17, -1, -2, -5, -75, -5, -1, -2, -2, -97, -3, -1, -1, -5, -2, -13, 63, -97, -6, -65, 127, 127, -81, -1, -1, 111, -2, -1, -3, -71, -19, 63, 85, -1, 111, 127, -35, -3, -37};
  // {00000010 01010101 11101101 10111100 000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, -86, -73, 61, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, -128, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 64, 0, 0, -124, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 16, 2, 2, 0, 0, 0, 0, 0, 0, 0, -96, -119, 0, 32, 0, 0, 8, 0, 4, 0, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 32, 0, 4, 0, 4, 12, 0, 16, 0, 32, 0, 0, 0, 0, 0, 64, 0, 0, 0, 32, 0, 64, 32, 0, 0, 0, -128, 0, 0, 0, 1, 0, 0, 0, -128, 96, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, -128, -128, 0, 0, 64, 0, 0, 0, 4, 32, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {54, 87, -89, 80, -28, 113, -77, 127, 113, -6, 19, 84, 16, 25, 10, 104, 16, 0, -16, -56, 83, -64, 45, -101, 51, 20, 0, 116, 109, -100, -21, 90, 63, -2, -1, 123, 31, 126, 8, 17, -70, 1, 112, -48, -34, 5, 48, 29, 3, -87, -128, 120, 0, 0, 54, -35, 14, -128, -121, 37, 97, 38, 1, -95, 69, 33, -68, -59, -16, -59, 64, -127, -63, -16, 4, 0, -72, -21, 40, 84, 98, -9, -39, -65, 6, -74, -99, -125, 14, 116};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-65, 127, -1, -5, -17, -1, -1, -1, -1, -1, -33, -1, -1, -69, -1, -1, -65, -1, -1, -1, -1, -1, -1, -33, -1, -1, -5, -1, -1, -2, -1, -1, -65, -1, -1, -5, -97, -1, -36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -65, -3, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -3, -3, -1, -1, -1, -17, -1, -3, -1, -1, -1, -1, -1, -1, -1, 95, 119, -1, -1, -1, -1, -1, -1, -1, -33, -1};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT10 = new byte[] {16, -117, 64, 40, -128, -120, -55, -69, 0, -92, 0, 10, 0, 0, 5, 32, 0, 0, 32, -128, 32, -128, 22, 0, 24, 10, 0, 32, 52, -128, 48, -87, 12, 52, 16, -116, 5, 6, -124, 8, -56, 0, 0, 0, 1, 2, 24, 0, 1, 64, 64, 12, 0, 0, -125, 100, 5, 64, 1, -112, 0, -112, 0, -128, 0, 0, -110, 0, 64, 0, -128, -64, 96, 32, 0, 0, -100, 48, 20, 10, -79, -55, -116, 2, 1, 18, -116, 0, 5, 32};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {3, 0, 17, 0, 96, 0, 16, 4, 0, 16, 8, 32, -128, 0, 0, 4, 8, 0, 72, 68, 0, 96, -128, -123, 0, 0, 0, 0, 32, -128, 5, 4, 17, 1, 116, 1, 8, 33, 0, 0, 21, 0, 32, 0, 12, 0, 0, 2, -128, 20, 0, 32, 0, 0, 16, 8, 0, 0, 64, 2, 0, 2, -128, 80, -128, 16, 68, 0, -112, 98, 32, 0, 0, 8, 0, 0, 4, 4, 0, 32, 16, 2, 64, 8, 0, -128, 64, 0, 2, 10};
}


class GBM_model_python_1589382591366_1_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_34_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[20 /* inq_last_6mths */] <3.5f ? 
         (Double.isNaN(data[26]) || data[26 /* revol_util */] <28.6875f ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                    -0.107672185f : 
                    -0.034583557f) : 
                 (data[10 /* annual_inc */] <46076.25f ? 
                    0.11280222f : 
                    0.032365374f)) : 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.032965723f : 
                    0.025824009f) : 
                 (data[7 /* emp_title */] <7340.5f ? 
                    0.017122634f : 
                    0.05764512f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.115764506f : 
                    -0.10793947f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                    -0.08366853f : 
                    0.13645284f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                -0.093450435f : 
                0.23000209f)));
    return pred;
  } // constant pool size = 618B, number of visited nodes = 13, static init size = 3384B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 9, 5, 16, 16, 2, -96, 59, -112, 40, 16, 64, 1, 64, 8, 0, 16, 0, -32, -128, 35, 64, 2, 3, 2, 16, 0, -64, 64, 0, 6, 10, 64, -64, -128, -103, 8, 8, 0, 0, 8, 0, 0, 17, 68, 4, 0, 0, 1, 5, 0, 0, 0, 16, 32, -63, 0, 0, 5, 0, 0, 0, 0, 33, 1, 0, 20, -127, -46, 4, 0, 0, 64, -80, 4, 0, 24, 40, 32, 64, 65, 8, -110, 16, 2, 10, -128, 0, 36, 16};
  // {11110101 11011100 10110111 11111111 11111101 01011111 01010111 11011111 11111001 11111101 00101111 11110111 11110111 11011110 11111111 11101011 11111001 11111111 11111111 11101111 11101111 11111111 01101011 11101111 11111011 11111111 11011111 11110111 11100111 01111110 11111011 01110110 01101111 10101011 11011001 10011111 11010011 10110111 00101111 11111111 10111111 11111111 11110111 11111011 10111111 11111111 11111011 11011111 10111111 11111110 11111111 11111101 11111111 01111111 11011111 11011111 11011101 11111110 11111111 11111011 01111111 10111011 11111111 11111110 11111101 01111111 11101011 11111111 11111111 11111100 10111111 11011111 01111110 11101101 11111111 11111111 11111111 00111111 11111101 11011110 10101011 11111000 11101101 11111101 11111111 11111110 11010111 00011111 11100111 11011111}
  public static final byte[] GRPSPLIT1 = new byte[] {-81, 59, -19, -1, -65, -6, -22, -5, -97, -65, -12, -17, -17, 123, -1, -41, -97, -1, -1, -9, -9, -1, -42, -9, -33, -1, -5, -17, -25, 126, -33, 110, -10, -43, -101, -7, -53, -19, -12, -1, -3, -1, -17, -33, -3, -1, -33, -5, -3, 127, -1, -65, -1, -2, -5, -5, -69, 127, -1, -33, -2, -35, -1, 127, -65, -2, -41, -1, -1, 63, -3, -5, 126, -73, -1, -1, -1, -4, -65, 123, -43, 31, -73, -65, -1, 127, -21, -8, -25, -5};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {114, -26, -80, 68, 100, 101, 95, 4, 105, -110, 43, 20, 16, -100, 18, 104, 96, 8, 0, 104, 93, -128, 37, 24, 33, 0, 4, 21, 61, -35, -23, -45, 59, 62, 127, 102, -3, 118, 43, 17, -86, 5, 112, -16, 26, 1, 48, 29, 2, -88, -48, 122, 0, 1, 22, 6, 78, -128, -118, 39, 97, 38, 0, -128, 68, 35, -88, -59, 1, -64, 67, -122, 1, 73, 9, -128, 65, -57, 72, -98, -86, -29, 77, -17, -124, -75, 29, -121, 25, 4};
  // {00100000 00000000 10000011 10011111 100}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, -63, -7, 1};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 68, 8, -128, 0, -116, 9, -64, 1, 12, 0, 2, 36, 17, 67, 2, 77, 4, 4, -107, 16, -92, 0, 64, 0, 0, 32, 0, 0, 0, 64, 64, 8, 48, 1, 2, 36, 0, 0, -128, 80, -60, 8, 44, 104, 74, -120, 72, 8, 18, 0, 17, 1, 72, 4, 22, -76, -94, 2, 81, -128, 17, -123, 12, 40, -128, -62, 25, 65, 96, 104, 8, 42, 5, 32, 0, 16, 0, 64, 64, 20, 0, 1, -126, 1, 0, 2, 48, -112, 4};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, 127, -6, -1, 63, -97, -1, -1, -1, -33, -3, -1, -1, -1, -17, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -66, -1, -1, -1, -1, -1, -9, 127, -9, -5, -1, -1, -3, -1, -1, 110, -5, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -3, -1, 127, -33, -1, -1, -1, -1, -1, -33, -1, 127, -35, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -17, 30, -1, -5, -17, -1, -33, -2, -1, -1, -1};
  // {00010011 10000000 00000010 00000000 000}
  public static final byte[] GRPSPLIT7 = new byte[] {-56, 1, 64, 0, 0};
  // {00000100 10110110 10001000 00000000 000}
  public static final byte[] GRPSPLIT8 = new byte[] {32, 109, 17, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_35_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.12005377f : 
                    -0.10659388f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.05754552f : 
                    0.013918511f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    0.052509956f : 
                    0.18049851f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    0.10837817f : 
                    0.25230783f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
             (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.21309844f ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.0447534f : 
                    -0.02047471f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.12209499f : 
                    0.13435908f)) : 
             (data[10 /* annual_inc */] <65140.625f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(717, 2, data[15]) || (GenModel.bitSetIsInRange(717, 2, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 717, 2, data[15])) ? 
                    0.02006731f : 
                    0.07343372f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(717, 2, data[15]) || (GenModel.bitSetIsInRange(717, 2, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 717, 2, data[15])) ? 
                    -0.0319291f : 
                    0.05127536f))));
    return pred;
  } // constant pool size = 1074B, number of visited nodes = 15, static init size = 6072B
  // {00101011 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 10, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {66, -96, 1, 4, 16, 0, -56, 16, 0, -128, 50, 4, 0, -60, 0, 32, 64, 8, -128, 0, 32, 0, 64, 32, 0, 0, 4, -127, 0, 1, 4, 0, 0, 0, 0, -124, 96, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 2, 0, 0, 0, 0, 64, 0, 10, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 16, 2, 2, 0, 8, 1, 0, 65, 0, 96, -96, -119, 1, 34, 68, 0, 0, 24, 4, 33, 16};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-53, -70, -55, -1, 127, -50, -35, -4, -97, -65, -2, -81, -17, -9, -11, -1, -1, -1, -81, 119, -2, -65, -15, -10, -35, -5, -1, -65, -109, -1, -3, 37, -14, -105, 25, -89, -20, -35, -1, -17, -9, -1, -81, 111, 125, -5, -17, -21, -3, 126, -1, -73, -1, -1, -7, 127, -3, 127, -1, -33, -33, -3, -1, 95, -2, -1, 99, -66, 79, -2, -1, 127, -65, -65, -1, -1, -41, -33, -1, -85, -1, 127, -9, -25, -3, 93, 126, -1, -13, -97};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -51, -1, 127, -2, -33, -4, -65, -1, -2, -17, -1, -1, -1, -1, -1, -1, -65, -1, -2, -1, -9, -1, -33, -1, -1, -65, -97, -1, -1, 127, -9, -1, 27, -89, -4, -3, -1, -1, -1, -1, -17, 127, -1, -1, -1, -1, -1, 126, -1, -9, -1, -1, -3, -1, -3, -1, -1, -33, -1, -1, -1, 127, -2, -1, -1, -2, 127, -1, -1, -1, -65, -1, -1, -1, -9, -33, -1, -21, -1, -1, -9, -17, -3, -35, -2, -1, -13, -1};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 64, 0, 0, 6, 4, 32, 8, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 32, 0, 1, 0, 0, 0, 16, 0, 0, 1, 64, 2, 0, 1, 0, 8, 0, 0, -128, 0, 0, 0, 0, 0, 32, 1, 0, 4, 0, 32, 0, 0, 48, 0, 0, 0, 0, 2, 0, 32, 0, 0, 0, 0, 0, 0, 1, 64, 1, 4, 0, 1, 0, -128, 0, 0, 0, 8, 96, 36, 20, 1, -124, 13, 0, -128, 0, 0};
  // {00000000 00010000 01000101 10101100 000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 8, -94, 53, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, -128, 0, 4, 0, 0, 0, 0, 0, -128, 16, 4, 0, -64, 0, 32, 64, 0, -128, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, -128, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, -128, 0, 1, 2, 0, 0, 0, 24, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {52, 87, -73, 80, -60, 113, 51, 71, 113, 114, 1, 80, 16, 8, 26, 72, 0, 0, 112, -56, 75, -64, 47, -102, 50, 20, 0, 116, 109, -100, -61, -38, 63, -18, -1, 123, 31, 58, 8, 17, 58, 1, 112, -48, -98, 4, 48, 28, 2, -119, -128, 120, 0, 0, 22, -35, 14, -128, -123, 37, 97, 38, 1, -95, 69, 33, -72, -59, -32, -59, 64, -128, -63, 64, 0, 0, -72, 111, 8, 84, 98, -10, -51, -69, 6, -74, -127, -125, 14, 100};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-67, 127, -65, -5, -17, -1, 59, -17, 127, 127, -35, -5, -1, 59, -1, -33, -65, -1, 127, -1, -33, -1, -65, -34, -1, -1, -5, 127, -1, -2, -1, -1, -65, -1, -1, 123, -97, -1, -36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -65, -3, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -3, -3, -1, -1, -2, -17, -1, -3, -1, -1, -2, -1, -2, -1, -1, 95, 119, -2, -1, -69, -1, -1, -17, -5, -33, -17};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -33, -1, -9, -1, -1, -1, -1, 127, -1, -1, -9, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -13, -17, -1};
  // {...2 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {-120, 0, 32, 4, 64, -64, -64, 0, 16, 80, 0, 4, 0, 0, 0, 16, 0, 0, 0, 64, 16, 0, 0, 0, 4, 4, 0, 16, 18, 0, -128, 112, 2, 0, 8, -126, 0, 2, 66, 4, 64, 0, 0, -128, 0, 0, 4, 0, 0, 0, 0, 4, 0, -128, 1, -96, 2, 32, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 32, 0, 0, 32, 16, 16, 0, 0, 74, 24, 2, 5, 0, 4, 2, 4, 0, 0, 0, 0, 2, 16};
  // {...2 0-bits}
  public static final byte[] GRPSPLIT12 = new byte[] {65, -128, 12, 0, 48, 0, 8, 0, 0, 8, 0, 20, 0, -128, 4, 2, 0, 0, 4, 50, 0, -16, -128, 34, 0, 0, 0, 0, 16, -64, 0, -94, 8, 64, -70, 64, -124, 0, 0, -128, 10, 0, 16, 36, 6, 1, 0, 1, 64, 2, 0, 16, 0, 0, 4, 4, 0, 0, 96, 1, 0, 1, 64, 40, 64, 8, 34, 0, 72, 49, 16, 0, 0, 0, 0, 0, 2, 2, 0, 16, 8, 1, 32, 4, 0, 96, 32, 0, 1, 1};
}


class GBM_model_python_1589382591366_1_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_36_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* term */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.11054029f : 
                    -0.012625948f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.058833167f : 
                    0.019505294f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.067682974f : 
                    0.13654791f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    7.7672594E-5f : 
                    0.039587792f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.11715877f : 
                    -0.06313598f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                    -0.02057448f : 
                    0.044303738f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    -0.09680143f : 
                    0.12489639f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT14, 720, 0, data[15])) ? 
                    0.042124446f : 
                    0.13318689f))));
    return pred;
  } // constant pool size = 916B, number of visited nodes = 15, static init size = 5124B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {52, 46, 54, 84, 0, 53, 79, 102, 65, -6, 58, 4, 17, -111, 0, 96, 96, 8, -112, -56, 90, 0, 42, 10, 34, 20, 0, 81, 89, 20, -18, -39, 61, 58, -72, -69, 46, 20, 41, 17, 8, 0, 0, 16, -60, 0, 48, 4, 3, 1, 0, 74, 0, 0, 22, -51, 0, -128, 15, 6, 32, 34, 0, -95, 5, 34, -68, -63, -30, -123, 64, -126, 65, -31, 0, -128, -95, 102, 72, -124, -119, 103, -57, 89, -122, -65, -100, 7, 27, 116};
  // {11111111 01011100 00011000 11101100 110}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 58, 24, 55, 3};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-65, 47, -1, -1, 31, -67, 79, -2, -49, -1, 127, -1, -1, -1, -3, -1, -17, -1, -1, -33, -37, -65, -6, -2, -2, -1, -5, 95, -37, 126, -1, -1, -1, 59, -4, -65, -18, -1, -1, -1, -19, -1, -33, 63, -3, -1, -1, -17, -1, -5, -65, -17, -1, -17, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -81, -4, -1, -1, -25, -1, -1, -65, -1, -33, -81, -97, 111, -49, -35, -1, -1, -2, 127, -5, -1};
  // {00000000 00000010 00000000 00000000 00000110 00000010 00000001 10000000 00001000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00100100 00000000 10000000 00000001 10000000 00000000 00000000 00000001 00000100 10000000 00000000 00000000 00000000 00100001 11000000 00000010 00001000 00000000 00000000 00000000 01000000 00000000 00000110 00000101 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001010 01000000 00000000 00000000 00010000 00000000 00000000 00000010 00000000 00000100 00011010 00000110 00001001 00000100 00000100 00000000 00000000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 64, 0, 0, 96, 64, -128, 1, 16, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 36, 0, 1, -128, 1, 0, 0, -128, 32, 1, 0, 0, 0, -124, 3, 64, 16, 0, 0, 0, 2, 0, 96, -96, 0, 0, 0, 1, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 2, 0, 0, 8, 0, 0, 64, 0, 32, 88, 96, -112, 32, 32, 0, 0, 0, 0, 0, 0};
  // {00011111 10111111 11101110 10011001 000}
  public static final byte[] GRPSPLIT5 = new byte[] {-8, -3, 119, -103, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 4, 32, 4, 0, 4, 0, 0, 0, 64, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 16, 0, 0, 64, 0, 32, 0, 24, 0, 0, 9, 2, 0, 0, 0, 0, 0, 0, 0, 64, 0, 16, 0, 0, 0, 0, 0, 0, 0, 4, -127, 0, 0, 8, 0, 0, 32, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 1, 8, 16};
  // {11010111 10011011 10111011 11011111 11111111 11011011 11111111 11111101 01111111 11100101 10101111 11111111 01110111 01110110 11111111 11111111 11111001 11111111 11111111 11111100 10110101 11111111 11101111 10111111 10111111 11011111 11111111 11111111 01101101 11110111 10011011 11111110 11001111 10101011 11100011 11101011 10101011 11110111 11111111 11110111 11111111 11111111 11111111 11111111 11011100 11111111 11110111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 01011110 11111111 11111110 11111111 10111111 11111011 10111111 11111111 11111111 01011111 11111011 11010110 01111100 11111001 01111111 11111101 11111111 01111111 01111001 11111111 11111110 11111110 11011011 11111111 11111111 11111111 00011111 00111110 01101101 11011110 00011010 11001111 01111111 10101111 11110111}
  public static final byte[] GRPSPLIT7 = new byte[] {-21, -39, -35, -5, -1, -37, -1, -65, -2, -89, -11, -1, -18, 110, -1, -1, -97, -1, -1, 63, -83, -1, -9, -3, -3, -5, -1, -1, -74, -17, -39, 127, -13, -43, -57, -41, -43, -17, -1, -17, -1, -1, -1, -1, 59, -1, -17, -5, -1, -1, -1, -1, -1, -1, -5, 122, -1, 127, -1, -3, -33, -3, -1, -1, -6, -33, 107, 62, -97, -2, -65, -1, -2, -98, -1, 127, 127, -37, -1, -1, -1, -8, 124, -74, 123, 88, -13, -2, -11, -17};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {66, -13, -61, 0, -12, 66, -80, 25, -7, 0, -125, 16, 0, 76, 10, 8, 16, 0, 64, 32, 5, -32, 5, -109, 17, 0, 4, -92, 36, 73, 65, -126, 2, -50, 23, 68, -47, 106, 2, 0, -78, 5, 48, -63, 10, 5, -128, 25, 0, -92, -128, 48, 0, 17, 32, 22, 4, 0, -128, 35, 65, 36, 1, 0, 0, 32, 0, 5, 1, 64, 3, 5, -128, 88, 13, 0, 24, -119, 32, 30, 96, -124, 56, -89, 12, 4, 1, -128, 36, 16};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-49, -13, -49, -1, -1, -33, -4, -3, -1, 85, -49, -5, -17, -18, -1, -33, -97, -9, -17, -73, -1, -1, -107, -9, -35, -17, -1, -17, -81, -5, -41, -90, -61, -17, 127, 92, -7, -17, -33, -1, -1, -1, -1, -17, -65, -1, -17, -1, -4, -1, -1, -75, -1, -1, -5, -66, -1, -1, -6, -1, -33, -3, -1, 127, -1, -7, 83, -1, 127, -2, -1, 125, -65, -1, -1, -1, -34, -5, -1, 127, -1, -4, 127, -89, -3, 69, -21, -3, -17, -69};
  // {11111110 01010111 11010101 11011000 011}
  public static final byte[] GRPSPLIT10 = new byte[] {127, -22, -85, 27, 6};
  // {00100000 00000000 00001010 10011101 101}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 80, -71, 5};
  // {10001101 01111111 11110101 01110111 100}
  public static final byte[] GRPSPLIT12 = new byte[] {-79, -2, -81, -18, 1};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 48, 1, 0, 32, 0, -128, 16, 33, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 5, 64, 1, 3, 0, 0, 4, 0, 0, 8, 65, 0, 2, -124, 2, 4, 0, 32, 0, 0, 2, 0, 0, 0, 8, 0, 0, 1, 0, -124, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 5, 0, 64, 0, 0, 0, 16, 0, 0, 8, -120, 0, 2, 0, 4, 40, 1, 8, 0, 0, 0, 4, 16};
  // {00000010 00000001 00000000 00000000 00001000 00000000 00000000 00000000 00011000 00000000 01000001 00000000 00000000 00110000 01010000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00100000 00000001 00000000 00000000 00100000 00000101 00000000 00000000 00000000 00000000 00000000 00000010 10000000 00000000 00000011 00000000 00000000 00000000 00000101 00000000 00000000 10000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00001000 00000000 00000000 00000000 10000000 00000010 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00001000 00100101 00000000 00000000 00000000 00000001 00100000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {64, -128, 0, 0, 16, 0, 0, 0, 24, 0, -126, 0, 0, 12, 10, 0, 16, 0, 0, 0, 0, 0, 4, -128, 0, 0, 4, -96, 0, 0, 0, 0, 0, 64, 1, 0, -64, 0, 0, 0, -96, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 16, 0, 0, 0, 1, 64, 32, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 32, 0, 16, -92, 0, 0, 0, -128, 4, 0};
}


class GBM_model_python_1589382591366_1_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_37_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (data[20 /* inq_last_6mths */] <3.5f ? 
             (Double.isNaN(data[20]) || data[20 /* inq_last_6mths */] <1.5f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                    -0.039416023f : 
                    0.018364836f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.045701694f : 
                    0.099080205f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.112993404f : 
                    -0.080667295f) : 
                0.13031195f)) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.13538596f : 
                    -0.067493886f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.04271229f : 
                    0.16667558f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.07422513f : 
                    0.11342899f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    0.09457851f : 
                    0.20187482f))));
    return pred;
  } // constant pool size = 894B, number of visited nodes = 14, static init size = 5016B
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {34, -122, -111, 68, -48, 96, 62, 62, -7, -128, -95, 68, 17, 68, 8, 32, 80, 8, 16, -120, 111, -64, 36, -110, 1, 0, 4, -43, 57, -115, 107, -39, 27, -68, -13, -21, -1, 98, 40, 1, -88, 1, 112, 49, -124, 0, 48, 5, 0, 1, 0, 58, 0, 1, 38, 68, 10, 0, 7, 32, 64, 38, 0, -96, 4, 35, 8, -60, 49, 4, 67, 2, 65, 40, 0, 0, 33, 104, 64, 94, 41, 49, 91, 34, -124, 108, 25, 0, 51, 68};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {20, 83, 39, 16, 100, 21, 64, 3, 0, 50, 18, 16, 0, -104, 2, 64, 0, 0, 96, 64, 21, 0, 73, 33, 2, 20, 0, 0, 64, 64, -124, 2, 100, 2, 12, 28, 8, 12, 2, 16, 18, 0, 0, -64, 64, 5, -128, 16, 1, -123, -48, 0, 0, 16, 16, -125, 4, -128, -120, 1, 1, 0, 0, 1, 65, 0, -76, 1, -126, 17, 0, 5, -128, 89, 5, -128, 88, 3, 40, -128, -64, -30, 36, -35, -126, -124, -124, -121, 12, 48};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {-35, 125, -6, -1, 63, -97, -65, -3, -17, -33, -3, -1, -1, -1, -17, -1, -1, -1, -33, -9, -6, -1, -5, -1, -1, -1, -1, -1, -98, -1, -1, -3, -2, -67, 70, 127, -10, -5, -1, -1, -3, -1, -33, 110, -7, -1, -1, -22, -1, -2, -81, -9, -1, -1, -1, -6, -3, -1, 126, -34, -1, -1, -1, -33, -1, -1, -33, 126, -35, -1, -1, -1, -1, -1, -1, 127, -1, -1, -65, 111, 30, -1, -5, -81, -5, -37, -2, -2, -1, -1};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 34, 2, 0, 4, 68, 0, 0, 1, 16, 8, 0, 0, 9, 16, 8, 48, 0, -128, 40, 64, 0, 34, 9, 16, 0, 0, 32, 4, 0, 2, 0, 32, 72, -111, 32, 0, 0, 0, 0, 0, 4, 0, 16, 8, 4, 0, 8, 0, 36, 0, 0, 0, 0, 0, 1, 2, 0, 0, 2, 32, 0, 0, 0, 1, 0, -128, 65, 64, -128, 0, -128, 64, 0, 0, -128, -48, 36, 32, 24, 34, 76, -127, -128, 8, -125, 0, 0, 12, 0};
  // {11001000 10001111 00001011 01010000 000}
  public static final byte[] GRPSPLIT6 = new byte[] {19, -15, -48, 10, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -65, -1, -1, -1, -1, -1, -73, -1, -1, -65, -1, -1, -1, -1, -1, -1, -5, -1, -1, -2, -2, -2, -1, -1, -1, -1, -33, -1, -1, -1, -3, -2, -1, -1, -1, -1, -1, -33, -1, -1, 127, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, 127, -7, -1, -1, -1, -1, -1, -2, -17};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 32, 0, 0, -128, 0, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, -128, 4, 0, 0, 0, 8, 0, 1, 0};
  // {00110110 00101101 00101011 00000011 000}
  public static final byte[] GRPSPLIT9 = new byte[] {108, -76, -44, -64, 0};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -65, -1, -1, -1, -1, -65, -1, -1, -1, 63, -1, -1, -1, -1, -65, -1, -1, -9, -1, -1, -1, -1, -1};
  // {00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000001 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00001001 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000001 00000011 00000000 00000000 00010000 00000000 00100010 10000000 00000000 00010000 00000001 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -128, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, -112, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 64, 0, 0, -128, -64, 0, 0, 8, 0, 68, 1, 0, 8, -128, 0, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_38_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* annual_inc */] <42339.844f ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.12128231f : 
                    -0.09316809f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.050675612f : 
                    0.011961032f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                 (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[13])) ? 
                    0.018425304f : 
                    0.083600774f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 35, 0, data[6])) ? 
                    0.048226133f : 
                    0.1294464f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.097921446f : 
                    -0.03437774f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.051329497f : 
                    -0.006997797f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.028526666f : 
                    0.031613875f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    -0.054954626f : 
                    0.10188601f))));
    return pred;
  } // constant pool size = 825B, number of visited nodes = 15, static init size = 4578B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 88, 7, 20, -32, 115, -119, 80, 25, 82, -110, 64, 17, 88, 0, 0, 0, 8, -16, -128, 10, 0, 13, 24, 50, 20, 0, 112, 88, 5, -25, -118, 4, -16, -79, 60, -113, 56, 40, 17, 26, 1, 16, -48, 70, 4, 48, 21, 3, -123, -128, 16, 0, 1, 34, -64, 8, -128, 6, 3, 33, 2, 1, 32, 0, 32, 20, 65, -110, 80, 3, 6, 64, -23, 0, 0, -111, 65, 0, 30, 107, 108, 93, 23, -124, -113, 13, -122, 60, 32};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-37, -5, -49, -65, -17, -5, -23, -4, -97, 119, -1, -17, -1, 123, -3, -9, -17, -1, -1, -73, -70, 63, -67, -3, -2, -1, -1, 127, -34, 111, -1, -17, -18, -7, -9, -65, -65, -7, -1, -1, -1, -1, -1, -34, -17, -1, -1, -1, -1, -1, -1, -97, -1, -1, -5, -1, -1, -1, -2, -33, -1, -33, -1, -2, -1, -3, 95, 127, -33, -2, -1, -1, 126, -1, -5, 127, -1, 127, -1, 127, 127, 124, -1, -65, -3, -1, 111, -2, -1, -21};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -33, -1, -1, -1, -3, -3, -1, -1, -1, -1, -1, 127, -1, -9, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, 127, -2, -1, -1, -17, -17, -1, -1, -65, -65, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, 127, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -17, -1, -1, -17};
  // {00010101 00010101 01100000 10110010 101}
  public static final byte[] GRPSPLIT3 = new byte[] {-88, -88, 6, 77, 5};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 80, 0, 16, 0, 98, -119, 16, 0, 2, 16, 64, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 16, 2, 16, 0, 80, 8, 1, 32, -120, 4, 64, 32, 0, -114, 40, 40, 1, 8, 1, 0, 0, 0, 4, 16, 17, 0, 1, 0, 0, 0, 0, 2, 0, 8, -128, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, -128, 0, 3, 6, 0, -96, 0, 0, 16, 65, 0, 0, 40, 0, 72, 5, -128, 0, 4, 0, 0, 0};
  // {00011011 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-40, 12, 0, 0};
  // {00000010 11011100 10010011 00100000 000}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 59, -55, 4, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {102, -90, -11, 64, -108, 21, 22, 79, -31, -88, 33, 20, 0, -123, 26, 72, 16, 0, 0, -24, 125, 0, 34, -126, 1, 0, 4, -123, 37, -40, -56, 81, 59, 14, -33, -53, 112, 78, 1, 0, 32, 4, 32, -95, 24, 1, -128, 0, 0, 40, 16, 106, 0, 0, 20, 31, 66, 0, -117, 37, 0, 36, 0, -127, 69, 35, -88, -60, 99, -59, 64, -127, -127, 24, 13, -128, 104, -86, 104, -28, -62, -45, -89, -24, 10, 53, -112, 5, 7, 20};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-17, -1, -1, -21, -33, -35, 127, -17, -1, -3, -17, -1, -18, -65, -1, -1, -33, -9, -1, -1, -1, -1, -1, -17, -51, -21, -1, -17, -9, -5, -33, 119, -69, 95, -1, -5, 121, -49, -41, -1, -17, -1, -1, -1, -3, -5, -1, -18, -4, 126, -1, -17, -1, -2, -3, 63, -9, 127, -5, -1, -2, -3, -1, -1, -1, -1, -21, -1, -17, -17, -1, -5, -1, 31, -1, -1, -1, -2, -1, -1, -9, -9, -73, -7, -1, -1, -5, -3, -9, -1};
  // {01100100 10000100 01100010 10010100 010}
  public static final byte[] GRPSPLIT9 = new byte[] {38, 33, 70, 41, 2};
  // {00101110 00100110 11110101 11111011 100}
  public static final byte[] GRPSPLIT10 = new byte[] {116, 100, -81, -33, 1};
  // {00000000 00001011 00011000 01011101 110}
  public static final byte[] GRPSPLIT11 = new byte[] {0, -48, 24, -70, 3};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {-5, -1, -70, -1, 123, -18, -23, -1, 94, -1, -33, -1, -1, -1, -17, -9, -17, -1, -1, -97, -93, -1, -3, 127, -2, -1, -5, -1, -2, -73, -9, -66, -1, -1, 44, -2, -1, -77, -1, -1, -33, -5, -1, -1, -1, -2, 127, -1, -1, -41, -17, -9, -1, -1, -17, -16, -1, -1, -3, -2, -1, -1, -1, 127, -69, -33, -1, 59, -100, -65, -1, -2, 127, -1, -1, 127, -33, -1, -33, -1, -67, -81, 91, -105, -9, -34, 127, -5, -2, -1};
  // {00100000 00000000 10000000 00000010 00100000 10101000 01101000 00000000 10000101 00000000 00000100 00000000 00000000 00000000 00001000 00010010 00001000 00000000 00000000 00000010 00111010 00000000 00000000 01000000 10000000 00000000 00100000 10000001 10000000 00001010 00010000 10000010 00000000 00000000 11011011 10000000 00000000 00110010 00000000 00000000 00000100 00100000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00010100 00000000 00010000 00000000 00000000 00000000 11010000 00000000 00000000 01010000 00000000 00000000 00000000 00000000 00000001 00100000 00000100 00000000 00100011 01000110 00000000 00000000 00000000 00000001 00000000 00000000 00000001 00000100 00000000 00000100 00000000 01000011 00001011 00100100 00010110 00010000 00000100 00000001 00100000 10000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 1, 64, 4, 21, 22, 0, -95, 0, 32, 0, 0, 0, 16, 72, 16, 0, 0, 64, 92, 0, 0, 2, 1, 0, 4, -127, 1, 80, 8, 65, 0, 0, -37, 1, 0, 76, 0, 0, 32, 4, 0, 0, 0, 1, 0, 0, 0, 40, 0, 8, 0, 0, 0, 11, 0, 0, 10, 0, 0, 0, 0, -128, 4, 32, 0, -60, 98, 0, 0, 0, -128, 0, 0, -128, 32, 0, 32, 0, -62, -48, 36, 104, 8, 32, -128, 4, 1, 0};
}


class GBM_model_python_1589382591366_1_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_39_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[26]) || data[26 /* revol_util */] <28.6875f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.12163247f : 
                    -0.083272085f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.060080115f : 
                    0.028431205f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.07191674f : 
                    0.09500575f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    0.026990281f : 
                    0.18577524f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (data[19 /* earliest_cr_line */] <5.39214971E11f ? 
                    0.04365317f : 
                    -0.10736557f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.03295518f : 
                    0.020227078f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                    -5.506996E-5f : 
                    0.03225176f) : 
                 (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[8])) ? 
                    0.03385389f : 
                    0.18954453f))));
    return pred;
  } // constant pool size = 819B, number of visited nodes = 15, static init size = 4542B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 9, 7, 16, -112, 2, -96, 27, -112, 40, 16, 64, 1, 64, 8, 0, 16, 0, -32, -128, 33, 64, 2, -125, 2, 16, 0, -64, 64, 0, 6, 10, 64, -64, -128, -103, 8, 8, 0, 0, 0, 0, 0, 17, 68, 4, 0, 0, 0, 5, 0, 8, 0, 16, 32, -55, 0, 0, 5, 0, 0, 0, 0, 33, 3, 0, 20, -127, -30, 4, 0, 0, -64, -80, 4, 0, 24, 40, 32, 64, 0, 0, -110, 16, 2, 10, -128, 0, 37, 16};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-113, 59, -17, -69, -69, -102, -87, -5, -97, 61, -44, -17, -17, 98, -1, -41, -97, -9, -1, -73, -13, -1, -42, -9, -34, -1, -5, -17, -25, 46, -33, -18, -10, -59, -101, -7, -53, -55, -12, -1, -35, -1, -113, -97, -3, -1, -33, -14, -3, 127, -1, -99, -1, -2, -21, -1, -69, 127, -3, -34, -2, -35, -1, 127, -65, -4, -41, -1, -1, 127, -67, 123, -2, -74, -1, 127, -2, 124, -65, 107, 85, 31, -77, -105, -1, 42, -29, -8, -27, -5};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-17, 127, -17, -1, -1, -2, -1, -1, -65, -1, -2, -17, -1, 127, -1, -41, -65, -1, -1, -1, -1, -1, -33, -1, -33, -1, -5, -1, -25, -2, -33, -1, -10, -1, -33, -1, -33, -1, -9, -1, -3, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -3, -1, -2, -33, -1, 127, -65, -1, -33, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -3, -1, 123, -41, -1, -9, -1, -1, -1, -5, -5, -9, -1};
  // {00001011 00111100 00010101 00100010 000}
  public static final byte[] GRPSPLIT3 = new byte[] {-48, 60, -88, 68, 0};
  // {00010100 11100011 10000011 00100001 000}
  public static final byte[] GRPSPLIT4 = new byte[] {40, -57, -63, -124, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -7, -1, -1, -3, -33, -17, -17, -41, -1, -65, -1, -1, -9, -1, -1, -1, 31, 127, -1, -65, -1, -3, -1, -1, -1, 127, -1, -1, -7, -9, -1, 127, 127, -26, -1, -1, -1, -1, -1, -1, -1, -2, -5, -1, -1, -1, -1, -5, -1, -9, -1, -17, -1, -74, -1, -1, -5, -1, -1, -1, -1, -1, -2, -1, -5, 127, -1, -1, -1, -1, -65, 111, -5, -1, -1, -33, -33, -65, -1, -1, 127, -1, -1, -11, -1, -1, -2, -17};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 8, 2, 0, 0, 0, 32, 16, 16, 32, 0, 64, 0, 0, 8, 0, 0, 0, -64, 0, 32, 64, 0, 0, 0, 0, 0, -128, 0, 0, 6, 8, 0, -128, -128, 25, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 65, 0, 0, 4, 0, 0, 0, 0, 1, 1, 0, 4, 0, 0, 0, 0, 0, 64, -128, 4, 0, 16, 40, 32, 0, 0, 0, -128, 0, 2, 8, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {114, -10, -48, 68, 100, 117, 95, 4, 105, -46, 59, 20, 16, -100, 18, 104, 96, 8, 0, 104, 95, -128, 45, 8, 49, 4, 4, 21, 61, -35, -23, -111, 59, 58, 127, 100, 119, 54, 41, 17, -86, 1, 112, -32, -102, 1, 48, 29, 2, -88, -112, 114, 0, 1, 22, 20, 78, -128, -118, 39, 97, 38, 1, -128, 68, 35, -88, 68, 3, -64, 67, -121, 1, 73, 9, -128, -63, -57, 72, -98, -22, -9, 109, -17, -124, -75, 13, -121, 26, 4};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -10, -2, -1, -17, -1, 95, -17, 127, -1, -1, -1, -2, -65, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -3, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -2, -5, -1, -1, -1, -1, -2, -1, -1, -1, -17, -1, 63, -1, -1, -5, -1, -1, -1, -1, -34, -3, -1, -21, -1, -17, -1, -1, -1, -1, 95, -5, -1, -33, -1, -1, -65, -1, -1, -1, -17, -3, -1, -1, -1, -1, -1};
  // {00000000 00000100 10000111 10011111 100}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 32, -31, -7, 1};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {16, -64, -128, 64, 0, 65, 0, 4, 64, 0, 3, 20, 0, -128, 0, 104, 0, 0, 0, 8, 0, 0, 32, 8, 32, 0, 4, 17, 0, -120, 32, -128, 59, 42, 32, 4, 36, 32, 40, 1, 2, 1, 16, 0, 8, 0, 32, 9, 0, 0, -128, 64, 0, 0, 0, 0, 68, 0, 8, 32, 1, 36, 1, -128, 68, 33, 32, 0, 0, 0, 2, -128, 1, 9, 0, 0, 0, 66, 72, -124, 40, 32, 8, 0, 0, 4, 0, 0, 24, 4};
  // {00000010 00011011 01101000 01101001 100}
  public static final byte[] GRPSPLIT11 = new byte[] {64, -40, 22, -106, 1};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 8, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_40_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[7 /* emp_title */] <7573.5f ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.082432136f : 
                    -0.016598279f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.049112435f : 
                    -0.0032016134f)) : 
             (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.04665531f : 
                    0.10201355f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    4.6433942E-4f : 
                    0.03899091f))) : 
         (Double.isNaN(data[7 /* emp_title */]) || !GenModel.bitSetIsInRange(641, 7574, data[7]) || (GenModel.bitSetIsInRange(641, 7574, data[7]) && !GenModel.bitSetContains(GRPSPLIT7, 641, 7574, data[7])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[7 /* emp_title */]) && (GenModel.bitSetIsInRange(641, 7574, data[7]) && !GenModel.bitSetContains(GRPSPLIT9, 641, 7574, data[7])) ? 
                    -0.12237446f : 
                    -0.054292783f) : 
                 (!Double.isNaN(data[7 /* emp_title */]) && (GenModel.bitSetIsInRange(641, 7574, data[7]) && !GenModel.bitSetContains(GRPSPLIT10, 641, 7574, data[7])) ? 
                    -0.10856141f : 
                    0.16941984f)) : 
             (!Double.isNaN(data[7 /* emp_title */]) && (GenModel.bitSetIsInRange(641, 7574, data[7]) && !GenModel.bitSetContains(GRPSPLIT11, 641, 7574, data[7])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    0.12860052f : 
                    0.18084419f) : 
                 (Double.isNaN(data[7 /* emp_title */]) || !GenModel.bitSetIsInRange(641, 7574, data[7]) || (GenModel.bitSetIsInRange(641, 7574, data[7]) && !GenModel.bitSetContains(GRPSPLIT13, 641, 7574, data[7])) ? 
                    0.24824488f : 
                    0.38648713f))));
    return pred;
  } // constant pool size = 1035B, number of visited nodes = 15, static init size = 5838B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -27, -12, 84, 0, 52, -1, 127, 113, -104, -69, 4, 17, -123, 24, 104, 80, 0, -32, -24, 93, 0, 45, -118, 49, 20, 4, -43, 101, -115, -86, 89, 55, -36, -11, 124, -44, 40, 40, 1, -88, 1, 48, -47, -104, 5, -112, 29, 2, 45, -48, 80, 0, 0, 54, 95, 70, -128, 5, 6, 97, 6, 1, 1, 69, 32, -68, -59, -125, -63, 65, 5, -63, 65, 5, -128, -31, -49, 40, -12, 107, 115, -2, -17, 0, -125, -107, 7, 54, 116};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -4, -1, -49, -4, -1, -1, 127, -1, -1, -81, -1, -17, -3, -1, -33, -1, -1, -1, -33, -1, -1, -49, -3, -1, -1, -1, -9, -65, -1, -1, -65, -33, -1, -2, -41, -17, -3, -17, -19, -1, -1, -33, -7, -1, -33, -1, -2, 127, -1, -3, -1, -18, -1, -1, -9, -1, 125, -33, -1, -33, -1, 95, -3, -3, -1, -1, -1, -1, -1, 125, -1, 95, -9, -1, -1, -1, -65, -1, 127, -9, -1, -17, 127, -13, -1, -1, -9, -1};
  // {10111000 00000100 11001111 10100000 001}
  public static final byte[] GRPSPLIT2 = new byte[] {29, 32, -13, 5, 4};
  // {00010101 01100010 10110011 10111100 000}
  public static final byte[] GRPSPLIT3 = new byte[] {-88, 70, -51, 61, 0};
  // {00111001 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-100, 31, 0, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {64, -96, 0, 4, 0, 0, 72, 0, 16, 0, 48, 0, 0, 4, 0, 64, 64, 0, 0, 0, 0, 0, 40, 0, 0, 0, 4, 1, 0, 1, 0, 1, 4, -128, 0, 124, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 3, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, -96, 1, 0, 32, 67, 0, 0, 0, 4, 32, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {34, -59, -92, 64, 0, 0, -111, 37, 96, 0, 3, 4, 17, -128, 8, 32, 0, 0, 0, -64, 5, 0, 5, 2, 49, 20, 0, 80, 100, -124, 34, 88, 51, 12, -27, 0, 16, 8, 40, 1, -120, 1, 0, -48, -120, 4, 16, 0, 0, 9, -128, 80, 0, 0, 34, 92, 6, -128, 0, 2, 0, 6, 1, 1, 4, 32, 40, 1, 0, 1, 65, 4, 65, 0, 4, 0, 32, 74, 40, 20, 104, 2, -118, 40, 0, -128, -112, 2, 4, 112};
  // {...7574 0-bits}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 9, 8, 0, 16, 16, -112, 32, 0, 1, -32, 0, 48, 8, -128, 66, 92, 16, 0, 0, 0, 80, -64, 32, 2, 1, 8, 0, -119, 0, -96, 72, 4, 0, -127, 17, 0, 0, 65, 0, 32, 0, -95, 0, 68, 0, 12, 0, 20, 1, 16, 50, 0, 48, 32, -96, -125, 0, 16, 48, 0, 32, 32, 0, 0, 0, 0, 70, 32, 4, 16, 33, 16, 2, 98, -96, 1, 8, 0, 0, 1};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 10, 3, 0, 36, 65, 0, 0, -120, 0, 0, 64, 0, 72, 2, 0, 0, 0, -112, 0, 0, 0, 0, 17, 2, 0, 0, 32, 8, 80, -60, -126, 64, 32, 0, -128, 40, 0, 0, 16, 0, 0, 0, 0, 6, 0, 32, 0, 0, -128, 0, 34, 0, 16, 0, 1, 8, 0, -118, 1, 0, 32, 0, -128, 2, 0, 0, 0, 32, 64, 2, -126, 0, -88, 8, 0, 8, 32, 0, 8, -128, 32, 0, 16, -124, 12, 8, 1, 9, 0};
  // {...7574 0-bits}
  public static final byte[] GRPSPLIT9 = new byte[] {-33, -1, -2, 63, -33, -2, -9, -1, -18, 127, -2, 95, 115, 127, -2, -17, -3, -70, 123, -97, -1, -11, -51, -10, -5, -21, -2, -1, -1, -19, -83, 111, 13, -5, -1, 55, -1, -82, -5, -95, -10, 126, -17, -10, -27, 79, -82, 123, -1, -49, 123, -5, 62, -1, -67, -67, -121, 79, -68, -2, 103, -3, -1, -51, -22, -114, 63, 118, -12, -19, -35, -7, -11, 87, -9, -1, -67, -40, -9, -8, 1};
  // {...7574 0-bits}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 6, 0, 40, 0, 2, 16, 0, 0, 0, 0};
  // {...7574 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {-3, -1, -9, -1, -17, -17, -17, -33, -1, -2, 95, -1, -49, -9, 127, -67, -65, -1, -1, -1, -1, -1, 127, -33, -3, -2, -1, -1, -10, -1, -1, -65, -1, -1, -2, -2, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -9, -1, -1, -2, -1, -3, -1, -49, -33, -33, -3, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -3, -33, -1, -1, -1, -17, -3, -3, -33, -1, -1, -1, -1, 1};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -17, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, 127, -1, -9, -1, -33, -1, -1, -17, -3, -1, -17, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, 127, -1, -1, -1, -1};
  // {...7574 0-bits}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 8, 0, -128, 0, 32, 8, 0, 0, 0, 16, 0, 0, 65, 0, 0, 0, 33, 0, 68, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, -128, -127, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0, 4, 0, 0, 0, 0, 64, 0, 1, 0, 0, 0, 1};
}


class GBM_model_python_1589382591366_1_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_41_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[14 /* title */] <2598.5f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.10885608f : 
                    -0.066515505f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.044249482f : 
                    0.0029737935f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                    0.001256935f : 
                    0.05430104f) : 
                 (data[7 /* emp_title */] <8042.5f ? 
                    0.05765823f : 
                    0.16293108f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                 (data[27 /* total_acc */] <10.0f ? 
                    0.009139968f : 
                    -0.09245378f) : 
                 (data[14 /* title */] <2620.5f ? 
                    0.4021177f : 
                    -0.02238979f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.0816698f : 
                    0.111689724f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    0.030665046f : 
                    0.08165311f))));
    return pred;
  } // constant pool size = 723B, number of visited nodes = 15, static init size = 3966B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {36, 65, 49, 80, -128, 5, 75, 67, 120, -22, 32, 68, 17, 68, 8, 0, 80, 8, -80, -88, 9, 32, 34, 2, 17, 16, 4, -123, 49, 76, 39, -117, 121, 76, 100, 126, 79, 16, 33, 1, -80, 1, 16, 65, 24, 1, -112, 0, 2, 1, -128, 90, 0, 0, 0, 7, 4, -128, -124, 37, 1, 32, 0, -96, 68, 32, 12, 64, 32, -112, 3, 2, 65, -56, 1, 0, 96, 12, 64, -58, -117, 78, 110, 10, -128, 80, -128, 2, 41, 52};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-81, 113, -5, -1, -81, -97, 79, -49, -1, -1, 118, -17, -1, 127, -19, -41, -33, -1, -65, -1, -33, -1, -1, 102, -35, -5, -1, -17, -5, -18, 119, -1, -5, -19, 125, -1, 111, -3, -3, -1, -1, -1, -65, -1, 123, -5, -1, -18, -2, 91, -81, -1, -1, -2, -7, 111, -67, -1, -4, -3, -1, -3, -1, -1, -2, -2, 79, -6, 125, -2, -1, -1, 127, -2, -5, -1, -10, 126, -33, -1, -65, 110, -17, -37, -3, -41, -29, 123, -1, -1};
  // {11111100 11011110 10010000 11011111 110}
  public static final byte[] GRPSPLIT2 = new byte[] {63, 123, 9, -5, 3};
  // {01010000 00000011 10011101 00000011 010}
  public static final byte[] GRPSPLIT3 = new byte[] {10, -64, -71, -64, 2};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 1, 64, -128, 5, 2, 1, 80, 32, 32, 4, 0, 64, 0, 0, 0, 0, -80, 0, 1, 0, 0, 0, 0, 16, 4, 1, 48, 12, 34, -128, 24, 4, 36, 42, 7, 0, 0, 1, 0, 1, 16, 64, 0, 0, 0, 0, 0, 1, 0, 64, 0, 0, 0, 0, 0, 0, 4, 1, 0, 32, 0, 32, 64, 32, 0, 0, 0, -128, 0, 2, 1, 0, 0, 0, 0, 12, 0, 68, -119, 6, 8, 10, 0, 16, 0, 2, 0, 48};
  // {00000000 00010111 10011000 11011101 001}
  public static final byte[] GRPSPLIT5 = new byte[] {0, -24, 25, -69, 4};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {82, -66, -58, 4, 116, 112, -80, 60, 1, 16, -101, 16, 0, -119, 18, 104, 32, 0, 64, 64, 98, -64, 5, -103, 34, 4, 0, 80, 68, -111, -56, 16, 38, -78, -117, -127, -80, 110, 10, 0, 2, 4, 96, -80, -60, 4, 32, 21, 1, -92, 80, 32, 0, 17, 22, -104, 66, 0, 11, 34, 32, 6, 1, 1, 1, 3, -80, -123, -46, 69, 0, -124, -128, 25, 4, -128, -103, -29, 40, 60, 96, -79, -112, -11, 14, -81, 25, -123, 23, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-33, -2, -17, -65, -1, -6, -67, -2, -17, -1, -33, -1, -18, -65, -1, -1, -65, -1, 111, -1, -2, -1, -1, -1, -18, -1, -1, -1, -49, -69, -39, 127, -73, -1, -37, -105, -16, -1, -1, -1, -33, -1, -1, -66, -1, -1, -1, -1, -3, -2, -1, -67, -1, -1, -1, -65, -5, 127, -5, -1, -2, -1, -1, -1, -65, -33, -5, -1, -1, 111, -2, -1, -2, 127, -1, -1, -33, -13, -1, 63, 118, -3, -73, -11, -1, -17, -1, -3, -9, -33};
  // {00101111 11111101 11101011 11110010 100}
  public static final byte[] GRPSPLIT8 = new byte[] {-12, -65, -41, 79, 1};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {64, 8, 0, 0, 68, 32, 0, 0, 0, 0, 0, 0, 0, 8, 16, 72, 0, 0, 0, 64, 64, 0, 0, 9, 0, 0, 0, 0, 0, -128, 0, 0, 6, 0, -127, 1, 16, 64, 0, 0, 0, 0, 64, 32, 64, 0, 0, 0, 1, 0, 16, 0, 0, 16, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, -127, -128, 0, 0, 0, 0, 0, 0, 0, 25, 34, 32, 0, 64, -112, 0, 96, 0, -117, 0, 0, 2, 0};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {18, -82, 64, 4, 0, 80, -80, 52, 0, 0, -101, 16, 0, -128, 0, 32, 32, 0, 64, 0, 34, 0, 0, -112, 32, 4, 0, 80, 64, 17, -120, 16, 32, 2, 10, -128, 0, 32, 2, 0, 2, 0, 0, 16, -128, 4, 0, 21, 0, 0, 64, 0, 0, 0, 6, -128, 64, 0, 3, 32, 0, 2, 0, 0, 1, 3, -112, 5, -128, 1, 0, 4, -128, 1, 0, 0, 8, -63, 40, 0, 64, 49, 16, 52, 2, 36, 9, -123, 16, 0};
}


class GBM_model_python_1589382591366_1_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_42_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[26]) || data[26 /* revol_util */] <89.35625f ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.099829786f : 
                    -0.017114468f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.07943993f : 
                    -6.8145804E-4f)) : 
             (data[10 /* annual_inc */] <65140.625f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 718, 1, data[15])) ? 
                    -0.0039023445f : 
                    0.036029335f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 718, 1, data[15])) ? 
                    -0.051830254f : 
                    0.028187485f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.13123111f : 
                    -0.10866137f) : 
                 (data[26 /* revol_util */] <89.50815f ? 
                    0.18021293f : 
                    -0.03879005f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    0.035459448f : 
                    0.13417873f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                    0.11443006f : 
                    0.2292719f))));
    return pred;
  } // constant pool size = 899B, number of visited nodes = 15, static init size = 5022B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {114, -2, 101, 80, -92, 115, -39, 127, 89, -6, -79, 80, 16, 77, 10, 96, 112, 0, -16, 64, 74, -96, 36, -118, 17, 20, 4, -59, 53, 25, 108, -102, 50, 110, 123, -47, 124, 106, 9, 17, -96, 1, 32, 81, -116, 5, 16, 29, 0, -87, -64, 58, 0, 16, 34, 29, 78, -128, -114, 5, 97, 38, 1, -95, 65, 33, -72, 69, -78, -112, 1, -125, 65, 121, 5, 0, -72, 79, 104, -100, 72, -9, 114, 57, 4, -75, -120, -128, 23, 64};
  // {00111111 01011011 01110000 10011111 000}
  public static final byte[] GRPSPLIT1 = new byte[] {-4, -38, 14, -7, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -5, -65, -5, -3, -1, 95, -1, -1, -5, -2, 127, -1, -9, -1, -9, -1, -1, -2, -65, -12, -33, -35, -1, -1, -1, -65, -69, -2, -1, -13, -17, 127, -33, -2, -1, -1, -1, -11, -1, -65, 95, -3, -1, -1, -1, -2, -1, -1, -65, -1, -1, -21, -1, -1, -1, -2, -3, -1, -1, -1, -1, -1, -1, -1, 127, -1, -6, -67, -5, 127, -1, -1, 127, -66, -33, -1, -65, 127, -9, -5, -1, 127, -11, -18, -4, -33, -17};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-5, -2, -3, -1, -1, -1, -35, -1, -1, -1, -9, -1, -1, 127, -1, -1, -1, -5, -1, -9, -33, -1, -65, -2, -1, -1, -1, -33, -9, 123, -3, -1, -2, 111, -5, -5, -1, -17, -35, -1, -17, -1, -17, -1, -17, -1, -1, -1, -3, -1, -17, -65, -1, -1, -5, -67, -1, -1, -1, -33, -1, -1, -1, -1, -7, -3, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -35, -36, -1, 127, -67, -3, -65, -17, -7, -9, -5};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {24, -33, 0, 40, -128, -71, -52, -93, 0, -76, 0, 0, 0, 2, 0, 32, 32, 0, 48, 0, 37, 16, 2, 0, 0, 8, -128, 32, -118, 8, 48, 73, 8, 36, -120, 96, 6, 4, -124, 0, -128, 0, 16, 0, 0, 0, -120, 8, 0, 64, 64, 28, 0, 0, -127, 4, 5, 64, 5, -128, 32, -111, 0, -128, 0, 0, -112, 0, 72, 0, -128, 65, -96, 48, 0, 0, -100, 36, 52, 10, -124, 89, -88, 0, 2, 18, 0, 0, 8, 32};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 32, 50, 0, 64, 32, 32, -124, 44, 88, 24, 40, -128, 4, 5, 0, 8, 0, 72, 32, 1, 64, 16, -59, 0, 0, 0, 96, 0, 0, 4, 68, 17, -127, 52, 0, 8, -95, 0, 0, 16, 0, -128, 8, 4, 2, -128, 2, -128, 20, 32, 1, 0, 0, 16, 8, 32, 0, -64, 2, 0, 2, -128, 80, -128, 16, 68, 0, 17, -64, 0, 0, 0, -116, 0, 0, 0, 5, 16, 64, 32, 34, 16, 8, -128, 64, 68, -64, 2, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, -126, 0, 64, 4, 6, 0, 32, 0, 10, 4, 0, -128, 0, 0, 0, 8, 32, -120, 101, 0, 73, 1, 32, 0, 0, 0, 96, 4, -127, 1, 9, -48, -128, 44, 1, 16, 32, 0, 26, 0, 80, -128, 0, 0, -96, 0, 0, 4, 0, 64, 0, 0, 20, 2, 0, 0, 1, 34, 0, 0, 0, 0, 4, 2, 0, -128, 1, -63, 66, 4, 0, 0, 8, -128, 65, 32, 0, 2, -93, 0, 31, -60, -128, 10, 17, 7, 40, 20};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-51, -35, -33, -1, -1, -4, -66, -1, -9, -33, -1, -1, -1, -5, -9, -1, -81, -1, 47, -1, -11, -33, -5, 117, -1, -1, -1, 63, -17, -17, -1, 103, -1, -9, -106, -17, -49, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -18, -1, 127, -65, -9, -1, -1, -3, -1, -1, -1, -3, -1, -65, -1, -1, -1, -1, -1, 79, -1, 127, -1, -2, -1, -1, -42, -1, -1, -1, -9, -33, 127, -65, 126, -33, -1, -1, -34, -9, -1, -5, -1};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -3, -33, -1, -1, -4, -65, -1, -9, -33, -1, -1, -1, -1, -9, -1, -17, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -65, -1, -1, -1, 127, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -33, -1, -1, -2, -1, -1, -1, -33, -9, -1, -1, -1};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 64, 0, 32, 0, 0, 0, 0, 4, -128, 0, 9, -112, 0, 44, 0, 0, 0, 0, 8, 0, 0, -128, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 32, 0, 0, 0, 0, 0, 2, 0, -128, 0, 1, 0, 4, 0, 0, 0, -128, 1, 32, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 40, 0};
  // {00011010 11000110 00000100 11011101 110}
  public static final byte[] GRPSPLIT10 = new byte[] {88, 99, 32, -69, 3};
  // {00000000 00011111 11001100 00000000 000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, -8, 51, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_43_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.069255896f : 
                    -0.030188387f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.0493719f : 
                    0.07545163f)) : 
             (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.2224879f ? 
                 (data[20 /* inq_last_6mths */] <3.5f ? 
                    0.005554609f : 
                    -0.07179983f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(716, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 716, 1, data[15])) ? 
                    -0.07793364f : 
                    0.18204312f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.12183644f : 
                    -0.07674845f) : 
                 (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <19098.5f ? 
                    -0.002423776f : 
                    0.12666206f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.072179936f : 
                    0.14483993f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    0.14118034f : 
                    0.26106966f))));
    return pred;
  } // constant pool size = 898B, number of visited nodes = 15, static init size = 5016B
  // {00000001 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {38, -33, -11, 84, -32, 17, -1, 111, 121, -6, -77, 84, 17, -60, 10, 96, 0, 8, 112, -64, 95, -96, 9, -126, 33, 20, 4, -59, 105, -99, 109, -39, 19, -6, 127, -34, -33, 122, 41, 17, -94, 1, 112, -63, -106, 5, 48, 21, 3, 1, -48, 122, 0, 16, 54, 87, 76, -128, -113, 37, 65, 38, 1, -95, 68, 33, 56, 68, -93, 84, 65, 7, -127, 57, 5, 0, 73, 107, 104, -44, -23, 71, 126, -33, -122, 61, -127, -125, 51, 20};
  // {00010000 11000010 00010101 10101000 100}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 67, -88, 21, 1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-81, -1, -1, -1, -5, -37, -1, -17, -1, -1, -1, -1, -1, -1, -17, -9, -33, -1, 127, -9, -1, -1, -67, -1, -1, -1, -1, -1, -1, -1, -3, -3, -13, -1, 127, -2, -1, -5, -1, -1, -25, -1, -1, -49, -1, -1, -1, -1, -1, 123, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -33, -1, -1, -1, -4, -3, -5, 126, -17, 127, -3, 127, -65, 127, -1, -1, -1, -1, -1, -9, -3, 95, 126, -33, -1, -3, -5, -5, -5, -65};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 0, 0, 0, 36, 0, 16, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, -128, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, -126, 2, 12, 0, -128, 0, 0, 0, 0, 0, 24, 0, 0, 32, 0, 0, 0, 0, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, -128, 2, 0, 64, -128, 8, 0, 16, 0, 0, 10, 2, -128, 1, 0, 0, 0, 4, 4, 4, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -17, -9, -1, -1, -1, -1, -1, -1, -1, -5, -1, 127, -3, -1, -5, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, 15};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 32, 2, 0, 4, 84, 0, 0, 0, 0, 8, 0, 0, 9, 0, 8, 48, 0, -128, 8, 96, 0, 34, 8, 16, 0, 0, 32, 0, 0, -126, 2, 0, 64, -128, 33, 0, 4, 0, 0, 8, 4, 0, 16, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 32, 0, 0, 0, 1, 0, -124, -127, 80, -128, 2, 0, 64, 64, 0, -128, 0, 32, 0, 8, 2, 48, -127, 32, 8, -125, 0, 4, 4, 64};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 2, 0, 0, 0, 0, 0, 0, 1, 48, 0, 0, 0, 0, 16, 0, 0, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 64, 4, 0, 65, 0, 32, 12, 24, 64, 0, 8, 0, 0, 0, 0, 0, 0, 8, 4, 0, 8, 0, 40, 0, 0, 0, 0, 0, -115, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 64, 64, -128, 0, 0, 0, 0, -48, 4, 96, 16, 96, -52, 4, -128, 0, 0, 8, -127, 9, 0};
  // {11111111 11101111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 10111110 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11100111 11111111 10111111 11011011 11100111 11111111 11111101 11111111 11111111 11111111 11111111 11111101 11111111 11011111 11111111 11111111 01111111 01111111 01111111 11111111 11111111 11111111 11111111 10110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 01101111 11111111 10101111 11111111 11011111 11101111 11111111 11111111 11111111 11110111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -9, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -2, -1, -1, 125, -1, -1, -1, -1, -1, -65, -1, -25, -1, -3, -37, -25, -1, -65, -1, -1, -1, -1, -65, -1, -5, -1, -1, -2, -2, -2, -1, -1, -1, -1, -19, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -9, -1, -1, -10, -1, -11, -1, -5, -9, -1, -1, -1, -17};
  // {00010010 00010100 11001000 00100000 000}
  public static final byte[] GRPSPLIT9 = new byte[] {72, 40, 19, 4, 0};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -9, -1, -17, -1, -1, -9, -1, -1, -1, -1, -1};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 0, 48, 1, 0, 8, 0, 0, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_44_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[26]) || data[26 /* revol_util */] <28.6875f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.12466523f : 
                    -0.10889814f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.06068609f : 
                    0.017346818f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.09419478f : 
                    0.09147691f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    0.04341326f : 
                    0.15669484f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.11207135f : 
                    0.011020853f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.046206042f : 
                    -0.0017318929f)) : 
             (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    0.006233255f : 
                    0.03171572f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    -0.06394175f : 
                    0.28032073f))));
    return pred;
  } // constant pool size = 825B, number of visited nodes = 15, static init size = 4578B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 9, 7, 16, -112, 18, -88, 91, -112, 40, 0, 64, 1, 64, 8, 0, 16, 0, -32, -128, 33, 64, 2, -125, 2, 16, 0, -64, 64, 0, 6, 10, 64, -60, -128, -103, 8, 8, 0, 0, 8, 0, 0, 17, 68, 4, 0, 0, 1, 5, 0, 8, 0, 16, 32, -55, 0, 0, 5, 0, 0, 0, 0, 33, 3, 0, 20, -127, -16, 4, 0, 0, -64, -80, 4, 0, 24, 40, 32, 64, 1, 12, -110, 16, 2, 10, -128, 0, 37, 16};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-81, 127, -17, -1, -65, -2, -1, -5, -65, -65, -10, -17, -1, 123, -1, -41, -97, -1, -1, -9, -9, -1, -41, -9, -33, -1, -5, -1, -25, 126, -33, -17, -10, -43, -33, -1, -33, -3, -9, -1, -3, -1, -17, -1, -3, -1, -33, -1, -1, 127, -1, -1, -1, -1, -1, -1, -5, -1, -3, -33, -2, -33, -1, 127, -65, -1, -33, -1, -1, 127, -3, -5, -2, -9, -1, -1, -1, -4, -1, 123, -41, 95, -9, -1, -1, -1, -5, -6, -9, -1};
  // {11111111 11010001 11110011 11111111 111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -117, -49, -1, 7};
  // {00001000 00100100 00011001 00100010 000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 36, -104, 68, 0};
  // {00011101 11111010 00000111 00100001 000}
  public static final byte[] GRPSPLIT4 = new byte[] {-72, 95, -32, -124, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 8, 1, 0, -128, 0, 0, 0, -128, 0, 0, 64, 1, 64, 0, 0, 16, 0, 96, 0, 1, 0, 0, -127, 0, 16, 0, -64, 0, 0, 0, 2, 0, 64, 0, -120, 0, 8, 0, 0, 8, 0, 0, 0, 64, 0, 0, 0, 0, 1, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 16, 1, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 18, 0, 0, 0, 0, 0, 0, 16};
  // {00000000 00010000 01000000 00000000 00000000 00000000 00000101 10010000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 01000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000010 00000000 00000001 10011001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 10000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00001001 00000000 00000000 00000000 00000010 00000001 00000000 00000000 00001000 00010000 00000000 00000000 10000000 00000000 00000000 00001000 00000000 00010000 00000000 00000000 00100000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 8, 2, 0, 0, 0, -96, 9, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 8, 64, 0, -128, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 65, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -112, 0, 0, 0, 64, -128, 0, 0, 16, 8, 0, 0, 1, 0, 0, 16, 0, 8, 0, 0, 4, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {114, -10, -46, 68, 100, 117, 95, 100, 105, -46, 59, 20, 16, -100, 18, 104, 64, 8, 16, 104, 93, -128, 45, -104, 49, 4, 4, 21, 61, -35, -23, -111, 59, 62, 127, 102, -9, 54, 43, 17, -86, 1, 112, -32, -102, 5, -80, 29, 2, -88, -112, 114, 0, 1, 22, 22, 78, -128, -118, 39, 97, 38, 1, -128, 68, 35, -88, -60, 3, -64, 67, -121, 1, 73, 9, -128, -63, -57, 72, -66, -21, -9, 77, -17, -116, -11, 29, -121, 27, 20};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -10, -2, -1, -17, -1, 95, -25, 127, -1, -1, -1, -2, -65, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -3, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -2, -5, -1, -1, -1, -1, -2, -1, -1, -1, -17, -1, 63, -1, -1, -5, -1, -1, -1, -1, -34, -3, -1, -21, -1, -1, -1, -1, -1, -1, 95, -5, -1, -33, -9, -1, -65, -1, -1, -1, -17, -3, -1, -1, -1, -1, -1};
  // {01000010 00000000 10001000 10000000 000}
  public static final byte[] GRPSPLIT9 = new byte[] {66, 0, 17, 1, 0};
  // {00111001 00100110 10010111 10011111 100}
  public static final byte[] GRPSPLIT10 = new byte[] {-100, 100, -23, -7, 1};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {50, -64, -128, 64, 68, 4, 16, 4, 96, 0, 1, 20, 0, -128, 0, 96, 0, 0, 0, 8, 8, 0, 32, 8, 32, 0, 4, 17, 8, -116, -96, -112, 59, 42, 32, 68, 4, 48, 40, 1, 2, 1, 16, 0, 8, 0, 16, 9, 0, 0, -128, 64, 0, 0, 2, 16, 68, 0, 10, 37, 1, 38, 1, -128, 68, 33, 32, 0, 0, 0, 2, -124, 1, 1, 0, 0, 0, 66, 72, -124, 42, 48, 72, 0, 4, 5, 1, 4, 16, 4};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 2, 0, 0, 65, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 2, 0, 32, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 8, 0, 0, 0, 0, 0, 16, 0, 64, 0, 4, -128, 32, 0, 0, 9, 0};
}


class GBM_model_python_1589382591366_1_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_45_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.12307736f : 
                    -0.10559325f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.06970536f : 
                    -0.009666872f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.07893774f : 
                    0.09365804f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    0.015396115f : 
                    0.15376489f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.075316966f : 
                    -0.0120908255f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    -0.04529301f : 
                    0.07635909f)) : 
             (data[10 /* annual_inc */] <89695.31f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(717, 2, data[15]) || (GenModel.bitSetIsInRange(717, 2, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 717, 2, data[15])) ? 
                    0.01019389f : 
                    0.043230817f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(717, 2, data[15]) || (GenModel.bitSetIsInRange(717, 2, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 717, 2, data[15])) ? 
                    -0.07411958f : 
                    0.058321394f))));
    return pred;
  } // constant pool size = 1080B, number of visited nodes = 15, static init size = 6108B
  // {00101011 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 10, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {66, -88, 65, 4, 16, 6, -52, 48, 8, -96, 50, 4, 0, -60, 0, 32, 64, 8, -128, 0, 32, 0, 64, 32, 0, 0, 4, -127, 16, 1, 4, 0, 0, 0, 0, -124, 96, 8, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 2, 0, 0, 0, 0, 64, 0, 10, 2, 0, 0, 0, 0, 2, 2, 0, 0, 3, 16, 3, 6, 0, 8, 1, -128, 65, 0, 96, -88, -119, 33, 34, 68, 0, 9, 24, 4, 33, 16};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -5, -55, -1, 127, -50, -35, -4, -65, -65, -2, -17, -1, -1, -11, -1, -1, -1, -81, -9, -2, -1, -9, -9, -33, -5, -1, -65, -97, -1, -4, 37, -14, -105, 27, -89, -20, -3, -1, -17, -9, -1, -17, 127, -1, -5, -17, -21, -1, 126, -1, -73, -1, -1, -7, -1, -3, 127, -1, -33, -1, -3, -1, 95, -2, -1, 103, -2, 127, -1, -1, -1, -65, -1, -1, -1, -41, -33, -1, -21, -1, 127, -9, -17, -3, -35, 126, -1, -13, -1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -19, -1, 127, -1, -33, -2, -1, -1, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -33, -1, -1, -65, -65, -1, -1, -1, -1, -1, -1, -73, -4, -3, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, 127, -1, -9, -1, -1, -3, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -9, -33, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {-53, -84, -1, -1, -101, -1, -17, -73, 94, -19, -1, -65, -17, -26, -1, -1, -17, -1, -33, 31, -83, 31, -8, -20, -19, -17, -1, -1, -13, 43, 119, -1, -1, 123, -4, -35, -1, -53, -1, -1, -1, -1, -65, -113, 37, -2, 127, -1, -4, -9, -17, -17, -1, -1, -1, 61, -5, -1, -2, -2, -97, -33, -1, -1, -5, -2, -5, 63, -113, -6, -65, 127, 127, -81, -9, -1, 111, -6, -1, -67, -7, -91, 62, 85, -1, 111, -1, -3, -3, -101};
  // {00000010 11011100 11000101 10111100 000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 59, -93, 61, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-65, -41, -65, -5, -1, -5, -9, -17, -9, 95, -33, -1, -1, -5, -1, -1, -1, -1, -1, -1, -33, -1, -1, -33, -1, -1, -1, 127, -17, -1, -1, -1, -1, -1, -1, -1, -33, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -4, -1, -1, -1, -1, 127, -66, -1, -65, -9, -2, -33, -35, -65, -1, -1, -9, -1, -1, -1};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, -9, -65, -1, -17, -7, 59, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -5, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -3, -1, -1, -1, -1, -65, -1, -1, -3, -1, -1, -1, -1, -3, -1, -1, -1, -2, -1, -4, -5, -1, -9, -2, 127, -1, -1, -1, -1, -9, -1, -33, -1, -1, -10, -17, -5, -34, -1};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {36, 87, -90, 80, -28, 113, 51, 79, 113, 82, 1, 80, 16, 24, 10, 64, 0, 0, 112, -56, 91, -32, 47, -118, 48, 20, 0, 68, 109, -104, -61, -38, 63, -18, -1, 91, 31, 122, 8, 17, 10, 1, 112, -47, -102, 4, 16, 29, 3, -119, -112, 120, 0, 0, 22, -35, 14, -128, -123, 37, 97, 38, 1, -95, 69, 33, -72, -59, -80, -59, 64, -128, -63, 64, 0, 0, -88, 111, 8, 84, 34, -42, -35, -70, 6, -74, -127, 3, 14, 100};
  // {00001010 00111000 01000010 01011011 111}
  public static final byte[] GRPSPLIT9 = new byte[] {80, 28, 66, -38, 7};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-3, -1, -17, -1, -17, -1, 55, -33, -1, 119, -51, -5, -2, 63, -1, -41, -65, -1, -1, -1, -1, -1, -65, -33, -2, -1, -1, 111, -17, -70, -9, -1, -1, -17, -1, -1, -33, -5, -4, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -5, -65, -3, -1, -2, -33, -1, -1, -1, -3, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -9, -5, -1, -1, 127, -33, 95, -74, -2, -35, -1, -1, -1, -17, -5, -1, -1};
  // {01000000 00000000 00001000 00000000 00000000 00000000 00010011 00000100 00000000 00010001 01001000 00000000 10000000 00000000 00000000 00010000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00001100 00001000 10100010 00010000 00000000 00000000 00001000 00000000 00000100 00000000 00100000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000100 01000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000001 00000100 00000000 10010010 00000000 01000100 00100000 00000000 00000000 00000000 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, 16, 0, 0, 0, -56, 32, 0, -120, 18, 0, 1, 0, 0, 8, 0, 0, 0, 32, 0, 0, 0, 0, 1, 0, 0, 48, 16, 69, 8, 0, 0, 16, 0, 32, 0, 4, 0, 0, 32, 0, 0, 0, 0, 0, 32, 0, 0, 4, 0, 0, 0, 0, 32, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 8, 0, 0, 0, -128, 32, 0, 73, 0, 34, 4, 0, 0, 0, 4, 0, 0};
  // {...2 0-bits... 00000001 00001000 10010100 00000000 00000110 00100011 00010011 00001000 00000000 00001010 00000000 00100000 00000000 00000001 01000000 00001000 00000000 00000000 00101000 01001110 00001000 00010010 00010001 00000000 00000000 10100000 00000000 00001000 01011000 00000010 00000101 00101100 01100001 01000001 00011010 00001001 00000000 00000000 01000010 00100000 01000010 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000100 01100000 00000000 00000001 10000010 01100001 00000000 00000100 00000000 00010000 00000000 00010010 00000000 00000100 00000010 00010000 01000110 00001000 00000100 00000000 00000000 00000000 00001000 00001000 00000000 00000000 01010011 01011000 01000000 10100000 00010000 00000010 01000000 00100001 00000000 00010000 00000000 00000001 01000000 00000}
  public static final byte[] GRPSPLIT12 = new byte[] {-128, 16, 41, 0, 96, -60, -56, 16, 0, 80, 0, 4, 0, -128, 2, 16, 0, 0, 20, 114, 16, 72, -120, 0, 0, 5, 0, 16, 26, 64, -96, 52, -122, -126, 88, -112, 0, 0, 66, 4, 66, 0, 16, 0, 0, 0, 0, -128, 0, 0, 32, 6, 0, -128, 65, -122, 0, 32, 0, 8, 0, 72, 0, 32, 64, 8, 98, 16, 32, 0, 0, 0, 16, 16, 0, 0, -54, 26, 2, 5, 8, 64, 2, -124, 0, 8, 0, -128, 2, 0};
  // {...2 0-bits... 00000010 00000001 00000000 00000000 10001000 00000000 00100000 01000010 00011000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 01000000 00001001 00000000 01000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000001 00010000 00000010 00100100 01000010 00100001 00000000 00000000 00000000 00000000 00000000 00100010 00000100 00000000 00000000 00000000 10000000 00000010 01000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 10000000 00000000 00010000 00000000 00000000 00000000 00000000 00010010 00001100 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00001001 00000000 00001000 11000100 00000100 10000000 00000100 00000100 00000000 10000000 00000}
  public static final byte[] GRPSPLIT13 = new byte[] {64, -128, 0, 0, 17, 0, 4, 66, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 2, -112, 0, 34, 0, 0, 0, 0, 0, 0, 0, -126, 8, 64, 36, 66, -124, 0, 0, 0, 0, 0, 68, 32, 0, 0, 0, 1, 64, 2, 0, 16, 0, 0, 0, 0, 0, 0, 32, 0, 0, 1, 0, 8, 0, 0, 0, 0, 72, 48, 0, 0, 32, 0, 0, 0, 0, 0, 0, -112, 0, 16, 35, 32, 1, 32, 32, 0, 1, 0};
}


class GBM_model_python_1589382591366_1_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_46_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* term */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.0720591f : 
                    -0.025192324f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.09439225f : 
                    0.24547139f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.07698814f : 
                    0.07907368f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.008898425f : 
                    0.039115246f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
             (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[13])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.0717976f : 
                    -0.002458835f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    -0.03978949f : 
                    0.13095284f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    -0.057344414f : 
                    0.085101485f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT14, 720, 0, data[15])) ? 
                    0.0016767918f : 
                    0.1262321f))));
    return pred;
  } // constant pool size = 999B, number of visited nodes = 15, static init size = 5622B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {52, 44, 52, 84, 0, 53, 79, 70, 1, -6, 56, 4, 17, -111, 0, 96, 96, 8, -112, -56, 88, 0, 42, 8, 32, 20, 0, 81, 89, 20, -18, 89, 61, 48, -96, -5, 14, 16, 41, 17, 8, 0, 0, 16, -60, 0, 48, 4, 3, 1, 0, 74, 0, 0, 54, -51, 0, -128, 15, 6, 32, 34, 0, -95, 5, 0, -84, -64, -30, -123, 64, -126, 65, 33, 0, -128, -95, 102, 72, -124, 3, 103, -57, 88, -126, -65, -100, 7, 59, 116};
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 8, 0, 0};
  // {11111111 11111110 00111111 11111111 11110111 11111111 11110011 11101111 11111111 11111111 01111110 11110111 11111111 11101111 10111111 11101111 11110111 11111111 11111101 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11011111 11011111 11111111 11111111 11111111 11111111 11111101 11111101 11111111 11111111 01111101 10111001 11111111 11111111 11111010 11111111 11111111 01111111 10111111 11111111 11111111 11110111 11111111 11111110 11111101 11110111 11111111 01110111 11111111 11110111 11111111 11111111 11111110 11111111 01111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11101111 11011111 11111111 11101111 01111110 11111011 11111111 11111111 11111111 11111111 10011011 11111111 11111111 11111111 11111111 11011111 11111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 127, -4, -1, -17, -1, -49, -9, -1, -1, 126, -17, -1, -9, -3, -9, -17, -1, -65, -1, -1, 127, -1, -1, -1, -1, -5, -5, -1, -1, -1, -1, -65, -65, -1, -1, -66, -99, -1, -1, 95, -1, -1, -2, -3, -1, -1, -17, -1, 127, -65, -17, -1, -18, -1, -17, -1, -1, 127, -1, -66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -9, -5, -1, -9, 126, -33, -1, -1, -1, -1, -39, -1, -1, -1, -1, -5, -1};
  // {00000000 01000000 11000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000010 00000000 10000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000100 00001000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 64, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 32, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0};
  // {00011011 10111111 11101010 10011001 000}
  public static final byte[] GRPSPLIT5 = new byte[] {-40, -3, 87, -103, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 36, 32, 4, 0, 4, 0, 0, 0, 66, 0, 0, 0, 1, 0, 32, 0, 0, 16, -128, 0, 0, 8, 0, 0, 16, 0, 0, 64, 0, 36, 0, 24, 0, -128, -21, 2, 0, 0, 0, 0, 0, 0, 0, 68, 0, 16, 0, 0, 0, 0, 64, 0, 0, 4, -127, 0, 0, 12, 0, 32, 32, 0, 0, 4, 0, -124, 0, 0, 0, 0, 2, 1, 0, 0, 0, 33, 0, 0, -128, 0, 4, 64, 0, -128, -93, 4, 1, 8, 16};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-21, -37, -33, -21, -1, -21, -1, -1, -2, -67, -9, -1, -17, -2, -1, -1, -97, -1, -17, 127, -81, -1, -9, -1, -1, -5, -1, -1, -74, -1, -39, -1, -13, -33, 127, -107, -3, -1, -1, -17, -1, -1, -1, -1, 59, -1, -17, -5, -1, -1, -1, -65, -1, -1, -5, 123, -1, 127, -1, -3, -33, -1, -1, -2, -5, -1, 123, -65, -65, -2, -65, -3, -2, -33, -1, -1, -33, -37, -1, 127, -1, -6, 61, -9, 127, 92, -13, -2, -12, -17};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {2, -48, -61, 0, -12, 66, -80, 25, 120, 0, -128, 16, 0, 76, 10, 8, 16, 0, 64, 32, 5, -32, 5, -125, 1, 0, 4, -92, 36, 72, 1, -126, 2, -58, 23, 4, -47, 106, 0, 0, -78, 5, 48, -63, 10, 5, -128, 25, 0, 36, -128, 48, 0, 16, 0, 22, 4, 0, -128, 35, 65, 36, 1, 0, 0, 32, 0, 4, 1, 64, 3, 5, 0, 24, 9, 0, 8, -119, 32, 14, 96, 0, 56, -89, 8, 0, 1, -128, 4, 16};
  // {01000100 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {34, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-113, -5, -17, -1, -1, -37, -66, -3, -1, 87, -57, -5, -17, -17, -17, -33, -65, -9, 111, -73, -1, -1, -107, -33, -49, -1, -1, -81, -17, -5, 85, -90, -61, -17, 127, 92, -3, -1, -3, -1, -1, -1, -1, -17, -65, -1, -17, -1, -4, -1, -65, -11, -1, -1, -1, -66, -1, 127, -8, -1, -33, -1, -1, 127, -2, -3, 87, -1, -3, -2, -65, -3, -65, -1, -1, 127, 110, -5, -65, 127, 127, -40, -1, -89, 125, 68, -5, -7, -49, -69};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {64, 0, 0, 0, 0, 4, 64, 0, 1, 48, 10, 0, 0, 0, 0, 0, 0, 0, -128, 0, 2, 0, 64, 32, 16, 0, 0, 64, 0, 0, -126, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 64, 2, 0, 0, 0, 0, -112, 32, 64, 0, -126, 4, 3, 0, -124, 3, 0, 0, 32, 0};
  // {00010100 00101110 11110001 01000110 100}
  public static final byte[] GRPSPLIT12 = new byte[] {40, 116, -113, 98, 1};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -65, -3, -1, 59, -1, -33, -1, -65, -1, -1, -1, -1, -1, -9, -1, -17, -1, -65, -1, -5, 127, -5, 126, -2, -1, -5, -1, -1, -65, -2, 127, -1, -3, -18, -1, 110, -1, -1, -1, -1, -5, -1, -66, -3, -6, -1, -17, -1, -1, -1, -17, -1, -1, -1, -7, -1, -1, -1, -4, -65, -1, -1, -1, -1, -33, -1, -1, -2, -65, -2, -1, -1, -9, -1, -1, -1, -1, -33, -9, -33, -1, -49, -3, -1, -1, -1, 127, -1, -1};
  // {}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -17, 63, -1, -49, -67, 111, -10, -57, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -33, -2, -65, -1, -4, -1, -1, -1, -5, -1, -65, -1, -3, -1, 59, -7, -1, -1, -75, -1, -1, -17, -1, -33, 127, -1, -1, 127, -1, -1, -33, -1, -33, -1, -1, -1, -1, -5, -1, 127, -35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -5, -1, -1, -2, -1, -1, -2, -1, -13, -65, -1, -9, -4, -9, -1, -2, -1, -5, -1};
}


class GBM_model_python_1589382591366_1_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_47_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[14 /* title */] <2598.5f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.09438282f : 
                    -0.05137695f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.052296083f : 
                    -0.007852382f)) : 
             (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.04682731f : 
                    0.054441094f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.008800241f : 
                    0.13869098f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.10440304f : 
                    -0.04579552f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.048329063f : 
                    -0.0023714819f)) : 
             (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[13])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.05289415f : 
                    0.07182457f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.023689648f : 
                    0.09191552f))));
    return pred;
  } // constant pool size = 824B, number of visited nodes = 15, static init size = 4572B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {36, 65, 49, 80, -128, 5, 67, 67, -8, -22, 32, 68, 17, 68, 8, 0, 80, 8, -80, -88, 9, 32, 42, 2, 17, 16, 4, -123, 57, 76, 39, -117, 121, 76, 100, 123, 79, 24, 33, 1, -70, 1, 16, 65, 24, 1, -112, 0, 2, 1, -128, 90, 0, 0, 48, 71, 4, -128, -124, 37, 1, 32, 0, -96, 68, 32, 12, 64, 32, -112, 67, 2, 65, -64, 1, 0, 96, 12, 64, -58, -117, 78, 111, 26, -128, 80, 0, 2, 41, 52};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-81, 113, -5, -1, -81, -97, 79, -49, -1, -1, 118, -17, -1, 127, -19, -41, -33, -1, -65, -1, -35, -1, -1, 102, -35, -5, -1, -17, -1, -18, 119, -1, -5, -19, 125, -1, 111, -3, -1, -1, -1, -1, -65, -1, 123, -5, -1, -18, -2, 91, -81, -1, -1, -1, -7, 111, -67, -1, -4, -3, -1, -3, -1, -1, -2, -1, 79, -6, 125, -2, -1, -1, -1, -2, -5, -1, -10, 126, -33, -1, -65, 110, -17, -38, -3, -41, -29, 123, -1, -1};
  // {11111100 00000110 10010000 11010111 000}
  public static final byte[] GRPSPLIT2 = new byte[] {63, 96, 9, -21, 0};
  // {11001001 10010011 10011101 00000010 110}
  public static final byte[] GRPSPLIT3 = new byte[] {-109, -55, -71, 64, 3};
  // {00000101 11110000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-96, 15, 0, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-37, -2, -34, -17, -1, -1, -65, -4, -1, -43, -1, -65, -1, -5, -9, -1, -65, -1, -17, 127, -9, -1, -43, -1, -18, -1, -1, 127, -26, -5, -1, -3, -74, -77, -69, -73, -9, -25, -1, -1, -27, -1, -17, -1, -17, -1, 127, -1, -1, -1, -1, -17, -1, -1, -17, -71, -5, -1, -1, -33, -1, -33, -1, -1, -1, -1, -5, -65, -33, -1, -68, -3, -1, 127, -1, -1, -33, -5, -65, -65, 125, -1, -43, -9, 127, -1, -1, -1, -33, -1};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 33, 0, 0, 1, 64, 1, 16, 42, 0, 0, 0, 4, 8, 0, 64, 0, 16, 0, 8, 0, 42, 0, 0, 0, 0, -128, 17, 4, 0, 2, 89, 68, 68, 72, 9, 0, 0, 0, 0, 0, 16, 64, 16, 0, -128, 0, 0, 0, 0, 80, 0, 0, 0, 70, 0, 0, 0, 32, 0, 0, 0, 0, 64, 0, 4, 0, 32, 0, 67, 2, 0, -128, 0, 0, 32, 4, 64, 64, -125, 0, 42, 8, 0, 0, 0, 0, 32, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {82, -2, -58, 4, 116, 114, -68, 60, 1, 16, -101, 80, 0, -119, 18, 104, 32, 0, 64, 64, 118, -64, 5, -101, 34, 4, 0, 80, 68, -111, -56, 16, 38, -78, -101, -127, -80, 110, 10, 16, 0, 4, 96, -80, -60, 4, 32, 29, 1, -92, 80, 32, 0, 17, 22, -100, 66, 0, 11, 34, 32, 6, 1, 1, 1, 3, -80, -123, -45, 69, 0, -124, -128, 57, 4, -128, -103, -29, 40, 60, 96, -79, -109, -27, -114, -81, 25, -123, 23, 0};
  // {11111111 01111111 11110111 11111111 11111111 01111111 10111111 01111111 11110111 11111111 11111011 11111111 01110111 11111101 11111111 11111111 11111101 11111111 11110111 11111111 01111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11110011 11011111 11011011 11111110 11100101 11111111 11011011 11111001 00001111 11111111 11111111 11111111 11111011 11111111 11111111 01111101 11111111 11111111 11111111 11111111 11111111 01111111 11111111 10111101 11111111 11111111 11111111 11111111 11011111 11111110 11011111 11111111 01111111 11111111 11111111 11111111 11111101 11111011 11011111 11111111 11111111 11110110 11111111 11111111 01111101 11111110 11111111 11111111 11111011 11001111 11111111 11111100 01111110 10111111 11101101 11111111 11111111 11110111 11111111 10111111 11101111 11111011}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -2, -17, -1, -1, -2, -3, -2, -17, -1, -33, -1, -18, -65, -1, -1, -65, -1, -17, -1, -2, -1, -1, -1, -2, -1, -1, -1, -49, -5, -37, 127, -89, -1, -37, -97, -16, -1, -1, -1, -33, -1, -1, -66, -1, -1, -1, -1, -1, -2, -1, -67, -1, -1, -1, -1, -5, 127, -5, -1, -2, -1, -1, -1, -65, -33, -5, -1, -1, 111, -1, -1, -66, 127, -1, -1, -33, -13, -1, 63, 126, -3, -73, -1, -1, -17, -1, -3, -9, -33};
  // {01111010 01000100 00001010 11010011 000}
  public static final byte[] GRPSPLIT9 = new byte[] {94, 34, 80, -53, 0};
  // {11111001 00101000 10000110 10100101 100}
  public static final byte[] GRPSPLIT10 = new byte[] {-97, 20, 97, -91, 1};
  // {00100001 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-124, 10, 0, 0};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {66, -70, 66, 4, 52, 0, 20, 48, 0, 0, 16, 64, 0, -128, 0, 96, 0, 0, 64, 0, 36, 64, 0, 2, 2, 0, 0, 0, 0, 1, 0, 0, 4, -126, 0, -128, -96, 72, 2, 0, 0, 0, 64, -128, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 16, 16, 64, 0, 10, 2, 0, 0, 0, 1, 0, 2, 0, -128, 1, 0, 0, 0, 0, 1, 4, -128, 1, -128, 32, 40, 64, 49, 18, 5, 4, 13, 24, 5, 1, 0};
  // {00001000 00110001 00000000 00000000 00000010 00000110 00000101 00000100 00000000 00000000 10010000 00001000 00000000 00000000 01000000 00000000 00000100 00000000 00000000 00000010 01000010 00000000 10000000 00011001 00000100 00100000 00000000 00001010 00000010 00001001 00010011 00001000 00000000 00000100 01000001 00000000 00001000 00000000 00000000 00001000 00000000 00000000 00000000 00001000 00000011 00100000 00000000 10001000 10000000 00000001 00000000 00000100 00000000 00000000 01000000 00000001 01000000 00000000 10000000 00000100 00000000 01000000 00000000 00000000 10000000 00000000 00000101 10100000 01001011 10000010 00000000 00100001 00000000 00010000 00000000 00000000 00011000 00000000 00010100 00100000 00000110 00001001 00000000 00000101 01000000 01010100 00000000 10000001 00100000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {16, -116, 0, 0, 64, 96, -96, 32, 0, 0, 9, 16, 0, 0, 2, 0, 32, 0, 0, 64, 66, 0, 1, -104, 32, 4, 0, 80, 64, -112, -56, 16, 0, 32, -126, 0, 16, 0, 0, 16, 0, 0, 0, 16, -64, 4, 0, 17, 1, -128, 0, 32, 0, 0, 2, -128, 2, 0, 1, 32, 0, 2, 0, 0, 1, 0, -96, 5, -46, 65, 0, -124, 0, 8, 0, 0, 24, 0, 40, 4, 96, -112, 0, -96, 2, 42, 0, -127, 4, 0};
}


class GBM_model_python_1589382591366_1_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_48_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <21928.0f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.102506764f : 
                    -0.002073574f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.042691227f : 
                    0.008489671f)) : 
             (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.03821832f : 
                    0.026257953f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.016830267f : 
                    0.08820325f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.12641805f : 
                    -0.09435536f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.06370993f : 
                    0.07921192f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 35, 0, data[6])) ? 
                    0.04793747f : 
                    0.14271767f) : 
                0.23190957f)));
    return pred;
  } // constant pool size = 900B, number of visited nodes = 14, static init size = 5052B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {54, -4, -75, 80, -32, 3, -69, 71, 8, -72, -79, 84, 0, 76, 8, 104, 0, 8, -112, -64, 3, 0, 108, -88, 0, 20, 0, 65, 61, -103, -114, 67, 39, -92, -70, -77, -124, 40, 40, 17, -120, 1, 48, -16, -114, 0, 48, 28, 1, 12, -48, 58, 0, 1, 38, 29, 10, 0, -113, 38, 65, 38, 1, -95, 69, 32, -88, -123, 2, 0, 3, -121, -63, 121, 0, 0, 32, 109, 104, -100, -85, -78, 19, -106, -126, -101, -115, 3, 24, 84};
  // {01111111 11111011 10010100 11000110 111}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -33, 41, 99, 7};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -2, -1, -1, -1, -37, -69, -33, -49, -65, -1, -1, -18, -1, -3, -1, -81, -1, -1, -1, -77, -65, -1, -3, -1, -1, -1, 127, -65, -1, -98, -9, -65, -17, -69, -73, -1, -65, -1, -1, -17, -1, -1, -2, -1, -1, -1, -2, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, 79, -85, -65, -1, -1, -1, -9, -1, -1, -3, -1, -1, -65, -13, -37, -97, -5, -33, -1, -1, -37, -1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 4, 20, 52, 68, 24, 17, 66, 0, 0, 17, 17, 2, 0, 112, 0, 64, 0, 92, -128, 2, 3, 17, 0, 0, -112, 64, 64, 97, -120, 72, 16, 65, 72, 2, 6, 0, 0, 16, 0, 0, 0, 0, 1, 0, 1, 0, -128, 0, 64, 0, 16, 0, 66, 4, -128, 0, 0, 32, 0, 0, 0, 0, 2, 20, 64, 81, 84, 64, 0, 0, 0, 0, 0, -104, 2, 0, 2, 0, 77, -28, 104, 4, 32, 16, 0, 38, 32};
  // {00010100 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {40, 12, 0, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-55, -125, -34, -81, -33, -1, 119, -66, -1, 119, -18, -81, -1, -1, -9, -1, -1, -1, 111, 63, -3, -1, -41, 127, -1, -1, -1, -65, -25, -18, 123, -1, -5, 123, 111, 79, 127, -1, -1, -17, 127, -1, -33, -81, 121, -1, -33, -21, -1, -1, -1, -51, -1, -1, -1, -6, -1, -1, -2, -33, -65, -3, -1, 95, -1, -1, 95, -6, -1, -1, -4, -3, 63, -10, -1, -1, -33, -5, -65, 127, 85, -17, -3, -21, 125, -12, 127, -1, -9, -65};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {54, 100, -95, 80, 32, 1, 25, 65, 0, -128, 17, 80, 0, 0, 0, 64, 0, 0, 16, -128, 2, 0, 40, -128, 0, 0, 0, 64, 24, 17, -128, 0, 4, -128, -112, -80, 0, 0, 0, 0, -128, 0, 32, 80, 6, 0, 32, 20, 0, 0, 0, 50, 0, 0, 0, 5, 8, 0, 1, 32, 64, 38, 0, -96, 0, 0, -96, 5, 0, 0, 3, 2, -64, 8, 0, 0, 32, 4, 64, -128, 42, 16, 2, 0, -126, 11, -128, 0, 8, 80};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 3, 66, 0, 4, 84, 68, 32, 113, 16, 10, 0, 0, 0, 16, 0, 16, 0, 96, 0, 76, 64, 1, 2, 1, 0, 4, -124, 64, 0, -63, -120, 16, 74, 77, 8, 81, 64, 0, 0, 2, 4, 64, 1, 16, 4, 0, 1, 0, 33, 0, 0, 0, 0, 16, 4, 64, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 64, -96, -60, 64, 0, 0, 0, 13, -128, -56, 2, 0, 96, 64, 68, 40, 97, 4, 5, 0, -124, 37, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-35, -33, -53, -1, 31, -4, -58, -4, -9, 87, -1, -5, -1, -1, -1, -1, -1, -1, -1, 127, -2, 95, -73, -41, -1, -1, -1, -1, -17, 47, -11, -67, -33, -1, 95, 111, 127, -1, -9, -1, -9, -1, -17, -17, -1, -1, -17, -5, -2, -1, -65, -19, -1, -2, -1, -2, -11, -1, -3, -1, -1, -1, -1, 95, -65, -1, 127, -1, -1, -1, -3, -6, 63, -73, -1, -1, -34, -33, -97, -17, -36, 125, -18, -5, -1, -3, -9, -1, -1, -21};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -33, -17, -1, 95, -3, -1, -4, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -67, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -3, -1, -3, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -3, -1, -1, -65, -1, -1, -33, -33, -65, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -17};
  // {01000000 00000000 00100010 00110011 100}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 68, -52, 1};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 10001101 00011100 00101001 000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, -79, 56, -108, 0};
}


class GBM_model_python_1589382591366_1_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_49_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* int_rate */] <0.0789376f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.12529483f : 
                    -0.10706955f) : 
                 (data[27 /* total_acc */] <10.0f ? 
                    0.1001079f : 
                    -0.06731943f)) : 
             (data[10 /* annual_inc */] <58125.0f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(704, 11, data[15]) || (GenModel.bitSetIsInRange(704, 11, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 704, 11, data[15])) ? 
                    0.059516717f : 
                    0.22749035f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(704, 11, data[15]) || (GenModel.bitSetIsInRange(704, 11, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 704, 11, data[15])) ? 
                    -0.012656349f : 
                    0.20718217f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
             (Double.isNaN(data[14]) || (data[14] >= 5746) || data[14 /* title */] <4982.5f ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.05915762f : 
                    -0.014894154f) : 
                 (Double.isNaN(data[14 /* title */]) || !GenModel.bitSetIsInRange(760, 4983, data[14]) || (GenModel.bitSetIsInRange(760, 4983, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 760, 4983, data[14])) ? 
                    -0.058771253f : 
                    0.19437605f)) : 
             (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[13])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.080473356f : 
                    0.18222213f) : 
                 (data[14 /* title */] <1313.5f ? 
                    -0.0012397873f : 
                    0.020535963f))));
    return pred;
  } // constant pool size = 887B, number of visited nodes = 15, static init size = 4950B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 40, 33, 0, -128, 0, 8, 0, 0, 32, 2, 16, 0, 81, 2, 0, 0, 8, 0, -128, 2, 0, 0, 0, 0, 16, 0, 64, 64, 1, 64, 0, 64, 96, 81, 91, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 32, 0, 1, 16, 0, 0, 0, 2, 0, 0, 0, 0, 32, 0, 0, -112, -128, 0, -128, 0, 0, 64, 0, 0, 0, -128, 32, 32, 80, 8, 0, 43, 0, -128, -116, 0, 1, 4, 4};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-33, -71, -21, -69, -81, -118, -6, -55, -121, 37, -17, -65, -18, 123, -1, -9, -65, -1, 15, -9, -74, -1, -43, 117, -2, -5, -1, 127, -49, -1, -39, -28, -42, 117, -35, -1, -29, -3, -10, -1, 125, -1, -33, 127, -65, -1, -17, -6, -2, -5, -1, -11, -1, -1, -39, -69, -1, 127, -5, -33, -1, -33, -1, 127, -6, -1, -45, -2, -115, -66, -2, 121, -1, 55, -5, -1, -98, -11, -65, 115, -68, 12, -69, -30, -5, -52, -10, 123, -4, -33};
  // {11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 01111111 10110111 11111111 11111111 10111111 11111111 11111110 11111111 11111111 11111111 11101111 11111111 11011110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -5, -1, -1, -1, -1, -1, -33, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -2, -19, -1, -1, -3, -1, 127, -1, -1, -1, -9, -1, 123, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
  // {...11 0-bits}
  public static final byte[] GRPSPLIT3 = new byte[] {32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 44, 32, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 2, 16, 0, 16, 0, 0, 0, 0, 0, 0, 16, 4, 4, 0, 0, 0, 0, 0, -112, 16, 32, -128, 0};
  // {...11 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, -128};
  // {00100100 11101011 01100011 00101010 00101110 11101110 10001001 11111110 10011110 01011111 10001101 00100010 10001000 00110001 00010000 00010110 00000010 00000000 00001111 00010010 10111010 00000010 11110100 01010001 10000000 00100000 00100000 10101001 10101100 00011000 11110101 11011011 11001100 01111001 01111101 00100001 10111100 01111110 00010100 10001000 01010001 10000000 00001110 10001011 00011001 00100000 00001000 10110000 10000000 00100100 00000001 01011000 00000000 00000000 01101100 10111010 01010010 00000001 10110001 11100100 00000110 01100100 10000000 10000001 10100010 10000100 00010100 10100010 01001101 10000011 11000010 01100001 10000001 10010111 10100000 00000001 10010110 11110010 00010110 00110101 11000111 11101111 00101010 10111111 00100000 11001000 10010001 01100001 11000100 00000100}
  public static final byte[] GRPSPLIT5 = new byte[] {36, -41, -58, 84, 116, 119, -111, 127, 121, -6, -79, 68, 17, -116, 8, 104, 64, 0, -16, 72, 93, 64, 47, -118, 1, 4, 4, -107, 53, 24, -81, -37, 51, -98, -66, -124, 61, 126, 40, 17, -118, 1, 112, -47, -104, 4, 16, 13, 1, 36, -128, 26, 0, 0, 54, 93, 74, -128, -115, 39, 96, 38, 1, -127, 69, 33, 40, 69, -78, -63, 67, -122, -127, -23, 5, -128, 105, 79, 104, -84, -29, -9, 84, -3, 4, 19, -119, -122, 35, 32};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -9, -1, -1, 127, -1, -1, -1, -1, -1, -9, -17, -1, -82, -3, -1, -1, -1, -1, -1, -35, -1, -1, -1, -35, -1, -1, -65, -9, -1, -1, -1, -65, -33, -1, -82, -1, -1, -3, -1, -1, -1, -1, -33, -65, -1, -1, -1, -1, 127, -17, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -3, 111, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -65, -9, -1, -2, -1, -1, -45, -1, -2, -25, -85};
  // {...4983 0-bits}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 16, 0, 0, 0, 4, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, -128, 1, 64, 0, 0, 0, 0, 0, 0, 0, 8, 1, -127, 2, 0, 0, 0, -127, 0, 0, 0, 48, -128, 1, -128, 0, 2, 48, 4, 4, -127, 0, 0, 32, -128, 1, -128, 0, 32, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, -128, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 16, 0, 0, 0, 9, 0};
  // {11111011 01011000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-33, 26, 0, 0};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 0, 0, 0, 0, 0, 16, 0, -128, 16, 0, 0, 0, 0, 32, 0, 0, -128, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 40, 64, 1, 0, 0, 0, 0, 0, 4, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_50 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_50_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_50_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[20 /* inq_last_6mths */] <3.5f ? 
         (Double.isNaN(data[20]) || data[20 /* inq_last_6mths */] <1.5f ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                    -0.073482715f : 
                    -0.02848856f) : 
                 (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.16687344f ? 
                    0.00833318f : 
                    0.035410106f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.0945404f : 
                    -0.00769204f) : 
                 (data[26 /* revol_util */] <94.35f ? 
                    0.073992416f : 
                    0.22698836f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.11345818f : 
                    -0.106990136f) : 
                 (data[7 /* emp_title */] <397.5f ? 
                    0.14525789f : 
                    -0.07729429f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                 (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[13])) ? 
                    -0.11471344f : 
                    0.049342282f) : 
                0.2193021f)));
    return pred;
  } // constant pool size = 706B, number of visited nodes = 14, static init size = 3888B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {98, -122, -107, 68, -64, 96, -66, 126, -7, -112, -87, 68, 17, 68, 24, 0, 112, 8, -112, -88, 111, -32, 36, -110, 17, 0, 4, -43, 61, -115, 107, -39, 27, -4, -13, -29, -1, 122, 40, 1, -88, 5, 112, 49, -124, 0, 48, 13, 0, 12, 0, 58, 0, 1, 38, 77, 10, 0, 7, 32, 96, 38, 0, -96, 4, 35, 8, -60, 115, -60, 67, -126, 65, -88, 0, 0, -23, 108, 64, 94, 43, 61, -37, -93, -124, 95, 25, -128, 50, 68};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-5, -1, -33, -1, -33, -1, -65, -1, -1, -1, -1, -17, -1, 127, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -5, -1, -1, -1, -1, -1, -1, -101, -1, -9, -17, -1, -5, -1, -17, -3, -1, -1, 127, -1, -5, -1, -17, -1, 127, -81, -1, -1, -1, -1, -1, -5, -1, -1, -6, -1, -1, -1, -2, -68, -1, 79, -1, 127, -17, -1, -2, 127, -65, -5, -1, -1, -1, -1, -1, 127, 125, -1, -25, -3, -1, -5, -7, -5, -49};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {20, 123, 35, 16, 100, 21, 64, 1, 0, 42, 18, 16, 0, -103, 2, 72, 0, 0, 32, 72, 17, 0, 73, 33, 2, 20, 0, 0, 64, 64, -124, 2, 100, 2, 12, 28, 8, 12, 2, 16, 18, 0, 0, -64, 64, 5, -128, 16, 1, -128, 80, 0, 0, 0, 16, 0, 6, -128, -120, 3, 1, 0, 0, 1, 65, 0, -92, 1, -126, 16, 0, 5, -128, 89, 5, -128, 24, 3, 40, -128, -32, -26, 36, -35, -126, -128, -124, 7, 13, 48};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-33, 123, -17, -1, -17, -97, -34, -49, -33, 127, -10, -65, -17, -65, -9, -1, -113, -9, 127, 127, -41, -1, -33, -19, -2, -1, -1, 127, -57, 123, -76, 103, -10, 71, 29, 28, 104, -65, -1, -1, -1, -1, -65, -34, -5, -1, -1, -5, -1, -1, -1, -3, -1, -1, -3, -65, -1, -1, -7, -33, -1, -3, -1, 95, -1, -1, -9, 127, -1, -5, -2, -1, -1, -33, -1, -1, -34, -41, -1, -65, -12, -10, -91, -35, -1, -75, -26, -1, -19, -65};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 66, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 64, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-35, 125, -6, -1, 59, -97, -89, -3, -113, -49, -3, -65, -1, -9, -17, -1, -1, -1, -33, -41, -6, -65, -37, -3, -1, -1, -1, -1, -98, -1, -1, -4, -2, -103, 69, 95, -10, -5, -1, -1, -3, -1, -33, 110, -7, -1, -17, -22, -1, -2, -81, -9, -1, -1, -17, -2, -3, -1, 126, -33, -1, -1, -1, -1, -1, -33, -45, 63, -35, 127, -3, -5, -1, -1, -1, 127, -1, -1, -1, 111, 30, -1, -21, -81, 123, 91, -10, -4, -1, -1};
  // {10111111 11111110 11111111 11111111 11111101 11111011 11111111 11111111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111101 11111111 11111111 11111111 11111111 11111111 11101111 11111110 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 10111011 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 01111000 11111111 11011111 11111111 11111111 11111011 11111111 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, 127, -1, -1, -65, -33, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -66, -1, -1, -1, -1, -1, -9, 127, -9, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -33, -1, -1, -35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, 30, -1, -5, -1, -1, -33, -1, -1, -1, -1};
  // {00000110 10010010 10000000 00000000 000}
  public static final byte[] GRPSPLIT7 = new byte[] {96, 73, 1, 0, 0};
  // {10011101 10111100 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-71, 61, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_51 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_51_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_51_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* annual_inc */] <42339.844f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (Double.isNaN(data[22]) || data[22 /* mths_since_last_record */] <90.0f ? 
                    -0.080051094f : 
                    0.14312838f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.036671676f : 
                    0.031905007f)) : 
             (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.121870235f : 
                    0.12180822f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                    0.019736899f : 
                    0.067271f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.08149185f : 
                    -0.020908805f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.042312186f : 
                    0.07363663f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    -0.007178284f : 
                    0.03121403f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.04151241f : 
                    0.132233f))));
    return pred;
  } // constant pool size = 819B, number of visited nodes = 15, static init size = 4542B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 88, 2, 20, 96, 114, -119, 80, 24, 18, -110, 64, 17, 88, 0, 0, 0, 8, -80, -128, 2, 0, 13, 24, 50, 20, 0, 80, 24, 5, 103, -118, 4, -16, 33, 60, -113, 56, 40, 1, 26, 1, 16, 80, 66, 4, 48, 21, 3, -123, -128, 16, 0, 1, 34, -64, 12, -128, 4, 3, 1, 2, 1, 32, 0, 0, 20, 64, -112, 80, 3, 6, 64, -31, 0, 0, -112, 65, 0, 30, 107, 108, 92, 7, -124, -114, 13, -122, 56, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-103, -5, -49, -65, -17, -5, -23, -4, -97, 119, -33, -17, -1, 123, -3, -9, -17, -1, -1, -73, -70, 63, -67, -3, -2, -1, -1, 127, -34, 111, -9, -18, -18, -7, -9, 63, -81, -7, -1, -1, -1, -1, -1, -34, -17, -2, -1, -1, -1, -1, -1, -99, -1, -1, -5, -17, -1, -1, -2, -37, -1, -33, -1, -2, -5, -3, 95, 127, -33, -6, -1, -1, 126, -1, -5, 127, -1, 125, -1, 63, 127, 124, 125, -73, -3, -49, 111, -2, -4, -21};
  // {00010110 00010100 10100011 00100010 001}
  public static final byte[] GRPSPLIT2 = new byte[] {104, 40, -59, 68, 4};
  // {01111011 11110000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-34, 15, 0, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 16, 0, 0, 0, 2, -127, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 32, 0, 16, 0, 0, 0, 0, 4, 0, 0};
  // {01001001 01111011 10001011 10000000 000}
  public static final byte[] GRPSPLIT5 = new byte[] {-110, -34, -47, 1, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {38, -90, -11, 64, 20, 20, 86, 15, -23, -88, 33, 20, 0, -124, 26, 72, 16, 0, 0, -24, 93, -64, 34, -125, 1, 0, 4, -123, 37, -104, -56, 81, 59, 14, -38, -37, 113, 78, 1, 0, 2, 0, 32, 33, 24, 1, -128, 0, 0, 40, 64, 106, 0, 0, 20, 31, 66, 0, -117, 36, 0, 36, 0, -127, 69, 35, -88, -59, 99, -123, 64, -128, -127, 24, 13, -128, 72, -86, 104, -28, -62, -13, -93, -8, 10, 117, -112, 1, 7, 20};
  // {00101000 00000110 01110100 11110011 000}
  public static final byte[] GRPSPLIT7 = new byte[] {20, 96, 46, -49, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-81, -65, -1, -1, 127, -35, 126, -97, -1, -3, -19, -1, -18, -65, -1, -1, -33, -9, -1, -1, -1, -1, -9, -1, -51, -5, -1, -17, -73, -66, -7, -9, -5, 95, -38, -1, 121, -33, -9, -1, -9, -1, -65, -17, -3, -5, -17, -2, -2, 127, -17, -17, -1, -2, -3, 127, -9, 127, -1, -3, -2, -3, -1, -33, -1, -1, -21, -1, 127, -17, -4, -5, -1, 63, -1, -1, -2, -2, -1, -9, -9, -13, -89, -2, -1, -9, -14, 121, -9, -65};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {64, 65, 0, 0, -64, 0, 1, 96, 0, 0, 18, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 64, 65, 4, 8, 0, 64, 37, 0, 0, 0, 0, 0, 8, 0, 0, 16, 0, 4, 16, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, -128, 64, 3, 4, 0, 0, 0, 0, 1, 0, 0, 8, 0, 0, 16, 0, 0, 8, 9, -124, 0, 64};
  // {00000000 00000001 10001000 00001101 100}
  public static final byte[] GRPSPLIT10 = new byte[] {0, -128, 17, -80, 1};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {-5, 95, -70, -1, -17, -21, -87, -11, 22, -33, -2, -1, -1, -1, -27, -1, -17, -1, -1, 127, -30, 63, -3, 124, -1, -1, -1, -5, -6, 119, 55, -2, -41, -1, 39, -25, -17, -9, -1, -1, -3, -1, -1, -1, -9, -1, 127, -1, -1, -41, -65, -1, -1, -1, -17, -16, -65, -1, 127, -1, -1, -1, -1, 127, -65, -3, -1, 58, -100, 127, -1, 127, 127, -17, -9, 127, -73, -3, -97, -65, -67, -113, 94, 47, -9, -70, -1, -1, -1, -1};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 32, 1, 0, 0, 4, 6, 2, 96, 32, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 25, 0, 0, -125, 0, 0, 0, -128, 1, -128, -128, 1, 0, 0, 72, 16, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, -128, 0, 0, -128, 0, 0, -128, 0, 2, 64, 0, 0, 96, 35, 64, 8, 0, 0, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_52 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_52_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_52_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[26]) || data[26 /* revol_util */] <28.6875f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.11080627f : 
                    -0.087931f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.10374115f : 
                    -0.031042948f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.09190777f : 
                    0.0696057f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.05840652f : 
                    0.097451106f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.05860379f : 
                    -0.010256388f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.07583069f : 
                    0.074106224f)) : 
             (data[1 /* funded_amnt */] <1039.5f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(714, 1, data[15]) || (GenModel.bitSetIsInRange(714, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 714, 1, data[15])) ? 
                    -0.06443552f : 
                    0.27849188f) : 
                 (Double.isNaN(data[20]) || data[20 /* inq_last_6mths */] <3.5f ? 
                    0.014403934f : 
                    -0.06995567f))));
    return pred;
  } // constant pool size = 814B, number of visited nodes = 15, static init size = 4512B
  // {00000000 10011000 11100000 00001000 00001001 01001000 10010101 11011010 10001001 00010100 00001000 00000010 10000000 00000010 00010000 00000000 00001000 00000000 00001111 00000001 11000110 00000010 01000000 11000001 01000000 00001000 00000000 00000011 00000010 00000000 01100010 01010000 00000010 00100011 00010001 10011001 00010000 00010000 00000000 00000000 00010000 00000000 00000000 10001000 00100010 00100000 00000000 00000000 10000000 10100000 00000000 00010000 00000000 00001000 00000100 10010011 00000000 00000000 10100000 00000000 00000000 00000000 00000000 10000100 01000000 00000000 00101000 10000001 01001111 00100000 00000000 00000000 00000011 00001101 00100000 00000000 00011000 00010100 00000100 00000010 10000000 00110000 11001001 00001000 01000000 01010000 00000001 00000001 10100100 00001000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 25, 7, 16, -112, 18, -87, 91, -111, 40, 16, 64, 1, 64, 8, 0, 16, 0, -16, -128, 99, 64, 2, -125, 2, 16, 0, -64, 64, 0, 70, 10, 64, -60, -120, -103, 8, 8, 0, 0, 8, 0, 0, 17, 68, 4, 0, 0, 1, 5, 0, 8, 0, 16, 32, -55, 0, 0, 5, 0, 0, 0, 0, 33, 2, 0, 20, -127, -14, 4, 0, 0, -64, -80, 4, 0, 24, 40, 32, 64, 1, 12, -109, 16, 2, 10, -128, -128, 37, 16};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-81, 63, -17, -5, -69, -6, -21, -5, -97, -65, -10, -17, -1, 122, -1, -41, -97, -1, -1, -9, -13, -1, -42, -9, -33, -1, -5, -17, -25, 126, -33, -18, -10, -59, -101, -7, -37, -19, -9, -1, -35, -1, -17, -97, -3, -1, -33, -5, -1, 127, -1, -33, -1, -1, -5, -1, -69, -1, -3, -33, -2, -35, -1, 127, -65, -1, -41, -1, -1, 127, -67, -5, -2, -73, -1, -1, -1, -4, -1, 123, 85, 31, -77, -65, -1, 110, -5, -8, -9, -5};
  // {11111110 01010001 00011010 11001011 111}
  public static final byte[] GRPSPLIT2 = new byte[] {127, -118, 88, -45, 7};
  // {11111111 11111100 01011111 00100111 111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 63, -6, -28, 7};
  // {00001101 10111110 00000011 00100001 000}
  public static final byte[] GRPSPLIT4 = new byte[] {-80, 125, -64, -124, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 9, 5, 0, -128, 0, 0, 0, -112, 40, 0, 64, 1, 64, 0, 0, 16, 0, 96, 0, 1, 0, 0, -127, 0, 16, 0, -64, 0, 0, 0, 8, 0, 0, 0, -103, 0, 0, 0, 0, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, -120, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 20, -128, 16, 0, 0, 0, 64, -128, 0, 0, 24, 40, 32, 64, 0, 12, 19, 0, 0, 10, 0, 0, 0, 16};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -5, -1, 127, -1, -1, -1, 127, -41, -1, -65, -2, -65, -1, -1, -17, -1, -97, -1, -2, -1, -1, 126, -1, -1, -1, -65, -1, -1, -1, -9, -1, -1, -1, -18, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -21, -1, -3, -1, -1, -1, -65, -1, -1, -1, -17, -1, -33, -65, -1, -13, -4, -1, -1, -3, -1, -1, -1, -17};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {114, -10, -48, 68, 100, 101, 91, 4, 105, -46, 59, 20, 16, -100, 18, 104, 96, 8, 16, 104, 95, -128, 45, 8, 49, 0, 4, 53, 61, -99, -23, -45, 59, 62, 127, 38, 119, 54, 41, 17, -94, 1, 112, -32, -104, 1, 48, 29, 2, -88, -128, 114, 0, 1, 16, 22, 78, -128, -118, 39, 97, 38, 1, -128, 69, 35, -88, 68, 3, -64, 67, -121, 1, 73, 9, -128, -63, 71, 72, -100, -22, -10, 109, -17, -116, -11, 29, -121, 26, 4};
  // {00100000 00000101 00100111 10011110 100}
  public static final byte[] GRPSPLIT8 = new byte[] {4, -96, -28, 121, 1};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -2, -6, -17, -17, -19, 91, -25, 127, -33, -1, -1, -2, -66, -9, -1, -1, -1, -1, -1, -1, -1, -3, -50, -3, -17, -1, -65, -65, -1, -7, -1, -65, -65, 127, 119, 119, -1, -3, -1, -17, -1, -1, -2, -5, -1, -1, -1, -1, -6, -81, -1, -1, -17, -5, 63, -1, -1, -2, -1, -1, -1, -1, -33, -3, -1, -21, 127, 111, -6, -1, -1, 63, 79, -5, -1, -17, -1, -1, -67, -2, -9, 125, -17, -3, -11, 127, -1, -6, -1};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 6, 0, 0, 18, 4, 32, 0, 32, 0, 0, 0, 1, 8, 0, 0, 0, 32, -128, 0, 0, 0, 17, 0, 0, 0, 64, 0, 0, 6, 0, 0, 64, -128, -128, -120, 0, 2, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 4, 80, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, 5, 0, 0, -64, 0, 0, 0, 0, 32, 0, 2, 1, 0, 2, 0, 0, 10, -128, 0, 5, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 8, 32, 16, 0, 0, 64, 0, 0, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_53 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_53_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_53_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* annual_inc */] <88818.36f ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.06713032f : 
                    -0.013621257f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.026024811f : 
                    0.14297804f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.08941039f : 
                    0.056215297f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.003151187f : 
                    0.036504004f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.11073948f : 
                    -0.08926016f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.03698589f : 
                    0.04725563f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.02587057f : 
                    0.15185364f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.08333668f : 
                    0.23644613f))));
    return pred;
  } // constant pool size = 996B, number of visited nodes = 15, static init size = 5604B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {34, -34, -89, 80, -32, 84, -83, 101, 8, -6, 3, 84, 16, -64, 10, 64, 0, 8, 112, -56, 105, 32, 109, 34, 1, 16, 0, -59, 100, 17, -19, -109, 80, -52, 62, -13, 14, 8, 40, 17, -118, 1, 96, 0, 0, 4, 48, 25, 3, -96, -128, 42, 0, 0, 52, -99, 10, -128, 11, 38, 0, 32, 1, -127, 69, 33, -116, -63, -126, 0, 66, 7, 1, 9, 4, 0, -87, 111, 8, 28, 104, -105, 63, 23, -128, 46, 25, 5, 10, 16};
  // {00000000 00001010 00000010 01010100 101}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 80, 64, 42, 5};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -17, -1, -1, -34, -65, -1, 95, -1, -41, -1, -1, -1, -17, -1, -1, -1, -1, -1, -5, -65, -1, -1, -1, -1, -1, -1, -9, -1, -1, -65, -37, -17, -65, -1, -1, -7, -1, -1, -33, -1, -17, 126, -3, -1, -1, -5, -1, -1, -65, -65, -1, -17, -1, -1, -69, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -2, -2, -1, -1, -33, -1, -1, -1, -1, -1, -97, -4, -1, -1, -9, -1, -1, 127, -1, -34, -1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 33, 64, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 0, 0, 0, 0, 8, 64, 0, 64, 4, 16, 64, 0, 0, 4, 0, 0, 32, 4, 0, -128, 2, 0, 0, 4, 0, 0, 0, 0, 0, 16, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 64, 32, 0, 0, 0, 0, 0, 0, 2, 0, 0, 72, 0, 0, -128, 0, 32, 0};
  // {00111111 01110111 11101100 10110011 100}
  public static final byte[] GRPSPLIT4 = new byte[] {-4, -18, 55, -51, 1};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 24, 7, 64, -96, 16, 9, 0, 0, 32, 1, 0, 0, 64, 0, 0, 0, 0, 96, -120, 64, 32, 73, 32, 0, 16, 0, 65, 0, 16, 73, -112, 0, -52, 50, -63, 2, 8, 8, 16, 8, 0, 64, 0, 0, 0, 0, 0, 1, 32, 0, 0, 0, 0, 4, 1, 0, 0, 11, 0, 0, 0, 1, -127, 5, 33, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 8, 3, 0, 8, 8, 16, 54, 0, -128, 32, 0, 0, 8, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, -25, -8, -17, -33, -17, -9, -1, -1, -33, -1, -17, -1, 63, -1, -1, -1, -9, -97, -9, -65, -1, -74, -33, -2, -1, -1, -69, -5, -17, -10, -17, -65, 59, -17, -99, -3, -9, -1, -17, -9, -1, -97, -1, -1, -5, -1, -9, -2, -33, -1, -3, -1, -1, -5, 126, -9, -1, -2, -1, -1, -1, -1, 126, -70, -34, -1, -1, -1, -1, -3, -3, -1, -1, -5, -1, 119, -6, -1, -9, -9, -17, -55, -19, -1, -35, -1, -1, -9, -1};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 80, 0, 0, 0, 64, 8, -48, 32, 56, 0, 0, 0, 16, 8, 16, 0, -128, 0, 0, 64, 2, -127, 0, 0, 0, 0, 0, 0, 0, 8, 34, 0, -127, 8, 16, 2, 0, 0, 0, 0, 16, -127, 0, 0, 0, 5, 0, 13, 64, 64, 0, 0, 0, 2, 64, 0, 0, 0, 0, 4, 0, 32, 0, 0, 0, 0, 1, 65, 1, 0, 0, 16, 9, 0, 0, 0, 96, -32, -127, 32, -128, 0, 0, -63, -128, -128, 37, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-35, 85, -37, -1, 79, -65, 82, -36, -1, 55, -4, -21, -17, 127, -3, -1, -1, -1, -81, -73, -98, 95, -106, -33, -2, -1, -1, 63, -49, -82, -108, 108, -1, -69, -45, 60, -1, -17, -9, -1, -11, -1, -65, -1, -1, -1, -49, -1, -2, 127, -17, -3, -1, -1, -33, -6, -3, -1, -3, -35, -1, -1, -1, 127, -1, -1, 119, 126, 127, -5, -1, -5, -1, -1, -1, -1, -34, -43, -1, -1, -9, 106, -34, -22, -1, -45, -26, -5, -9, -17};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, 125, -33, -1, 95, -65, -13, -34, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -9, -2, -1, -9, -1, -2, -1, -1, 127, -1, -18, -34, 127, -1, -1, -5, 63, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, 127, -1, -1, -1, -1, -1, -1, -3, -1, -3, -33, -1, -1, -1, -1, -1, -1, 127, 126, -1, -1, -1, -5, -1, -1, -1, -1, -34, -35, -1, -1, -1, -2, -1, -18, -1, -1, -18, -5, -9, -17};
  // {00000000 10000010 00010001 00001101 010}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 65, -120, -80, 2};
  // {00001011 00100101 00101111 11101010 100}
  public static final byte[] GRPSPLIT11 = new byte[] {-48, -92, -12, 87, 1};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, -112, 0, 32, 0, 0, 0, 0, 8, 0, 0, -128, 0, 0, 64, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 64, 1, 0, -128, 0, 0, 0, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, -128, 32, 0, 0, 0, 0, -128, 0, 33, 0};
}


class GBM_model_python_1589382591366_1_Forest_54 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_54_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_54_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <21928.0f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.12452991f : 
                    0.037212163f) : 
                 (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.20154218f ? 
                    -0.014029592f : 
                    0.0835528f)) : 
             (!Double.isNaN(data[8 /* emp_length */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.07823896f : 
                    0.03224588f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.008793883f : 
                    0.04578269f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                    -0.11280811f : 
                    0.026127845f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.057148177f : 
                    0.06254932f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                 (data[10 /* annual_inc */] <65140.625f ? 
                    0.13259849f : 
                    0.047090083f) : 
                 (!Double.isNaN(data[8 /* emp_length */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[8])) ? 
                    0.09863824f : 
                    0.22288246f))));
    return pred;
  } // constant pool size = 727B, number of visited nodes = 15, static init size = 3990B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {50, -8, -75, 80, -32, 3, -69, 71, 8, -24, 17, 84, 17, -52, 8, 64, 64, 8, -112, -56, 3, -96, 104, -88, 32, 20, 0, 65, 49, -100, -82, 83, 38, -124, -80, -77, -122, 8, 40, 17, -120, 1, 48, -48, -114, 0, 48, 28, 3, 12, -48, 58, 0, 1, 34, 27, 10, 0, -113, 38, 1, 38, 1, -95, 68, 32, -88, -123, 2, 0, 3, -121, -63, 73, 0, 0, 33, 108, 104, -100, -85, -78, 87, -106, -126, -61, 13, 1, 24, 84};
  // {11111111 11111111 11111100 11010010 111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, 63, 75, 7};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-65, -3, -1, -1, -1, -17, -69, -1, -2, -17, -3, -1, -1, -1, -1, -1, -17, -1, -1, -1, -77, -1, -1, -1, -1, -1, -1, 127, -65, -1, -2, 119, -1, -9, -76, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, 127, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, 127, -69, -65, -1, -1, -1, -1, -1, -65, -3, -1, -1, -65, -77, -33, -65, -13, -33, -1, 123, -2, -1};
  // {01110100 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {46, 12, 0, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 20, 0, 0, 3, -127, 69, 8, 40, 16, 0, 1, 4, 8, 0, 64, 0, -112, 8, 3, -96, 32, 40, 0, 20, 0, 65, 1, 8, 8, 3, 0, -128, -96, 1, 2, 0, 0, 1, 8, 0, 48, -64, 0, 0, 16, 12, 0, 4, 0, 8, 0, 0, 34, 8, 0, 0, -118, 6, 0, 0, 1, 32, 68, 0, 8, -124, 2, 0, 2, 6, -127, 65, 0, 0, 1, 104, 32, 12, 33, 34, 7, -124, 0, -62, 12, 0, 24, 4};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -21, -1, -1, -4, 124, -66, -9, -73, -17, -1, -2, 51, -9, -1, -65, -9, 111, -9, -3, 95, -65, -41, -1, -21, -1, -65, -2, -1, -11, -2, -1, 127, 95, -3, 125, -9, -1, -1, -9, -1, -17, 63, -9, -1, -17, -13, -2, -13, -1, -9, -1, -1, -35, -27, -1, -1, -7, -7, -1, -3, -1, -34, -5, -1, -41, 123, -3, -1, -3, 121, -2, -66, -1, -1, -2, -41, -33, -13, 127, -35, -72, 123, -1, 60, -13, -1, -17, -69};
  // {00000000 11000000 01000010 00000000 00100000 00101010 00100010 00000100 10001110 00001000 01010000 00000000 00000000 00000000 00001000 00000000 00001000 00000000 00000110 00000000 00110010 00000010 10000000 01000000 00000000 00000000 00100000 00100001 00000010 00000000 10000011 00010001 00001000 00010010 10110010 00010010 10001010 00000010 00000000 00000000 01000000 00100000 00000010 10000000 00001000 00100000 00000000 10000000 00000000 10000100 00000000 00000000 00000000 00000000 00001000 00100000 00000010 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000010 00000101 00100011 00000010 00000000 00000000 00000000 10110000 00000001 00010011 01000000 00000000 00000110 00000010 00100010 00010100 10000110 00100000 00100000 00000000 00100001 10100100 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 3, 66, 0, 4, 84, 68, 32, 113, 16, 10, 0, 0, 0, 16, 0, 16, 0, 96, 0, 76, 64, 1, 2, 0, 0, 4, -124, 64, 0, -63, -120, 16, 72, 77, 72, 81, 64, 0, 0, 2, 4, 64, 1, 16, 4, 0, 1, 0, 33, 0, 0, 0, 0, 16, 4, 64, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 64, -96, -60, 64, 0, 0, 0, 13, -128, -56, 2, 0, 96, 64, 68, 40, 97, 4, 4, 0, -124, 37, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-35, -33, -53, -1, 31, -4, -58, -4, -9, 87, -1, -5, -1, -1, -1, -1, -1, -1, 127, 127, -1, 95, -77, -41, -1, -1, -1, -1, -17, 47, -11, -67, -33, -1, -33, 111, -1, -1, -9, -1, -9, -1, -17, -1, -1, -1, -17, -5, -2, -1, -65, -19, -1, -1, -1, -2, -11, -1, -3, -1, -1, -1, -1, -33, -1, -1, 127, -1, -1, -1, -3, -5, 63, -73, -1, -1, -33, -33, -65, -17, -36, 127, -17, -5, -1, -3, -9, -1, -1, -21};
  // {00001000 00000000 00000000 00010000 000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 8, 0};
  // {00000000 00000000 00001010 01110111 100}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 80, -18, 1};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 2, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 2, 0, 64, 0, 0, 32, 0, 0, 0, 0, -124, 32, 0};
  // {11000010 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {67, 4, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_55 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_55_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_55_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[19]) || data[19 /* earliest_cr_line */] <3.07543251E12f ? 
         (data[7 /* emp_title */] <7573.5f ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                    -0.044941097f : 
                    -0.015634986f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.01174085f : 
                    0.018982185f)) : 
             (Double.isNaN(data[7 /* emp_title */]) || !GenModel.bitSetIsInRange(641, 7574, data[7]) || (GenModel.bitSetIsInRange(641, 7574, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 641, 7574, data[7])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.07146933f : 
                    0.08551517f) : 
                 (!Double.isNaN(data[7 /* emp_title */]) && (GenModel.bitSetIsInRange(641, 7574, data[7]) && !GenModel.bitSetContains(GRPSPLIT5, 641, 7574, data[7])) ? 
                    0.14750122f : 
                    0.23766825f))) : 
        0.16366266f);
    return pred;
  } // constant pool size = 477B, number of visited nodes = 8, static init size = 2658B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {102, -27, -12, 80, 0, 52, -1, 95, 113, 8, -77, 4, 17, -124, 24, 96, 80, 0, 96, -24, 77, 0, 41, -118, 49, 20, 4, -43, 97, -115, 34, 89, 55, -100, -75, 124, 20, 8, 40, 1, -120, 1, 32, -47, -128, 5, 16, 29, 2, 45, -128, 80, 0, 0, 50, 95, 70, -128, 4, 6, 97, 6, 1, 1, 69, 32, -72, -123, -110, -108, 65, 4, -127, 1, 5, 0, -32, 78, 40, -76, 106, 83, -2, -17, 0, -125, -107, 6, 54, 116};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -4, -1, 79, -4, -1, -1, 127, -1, -1, -81, -1, -17, -3, -1, -33, -1, -1, -1, -33, -1, -3, -49, -3, -1, -1, -33, -9, -65, -1, -1, -65, -33, -1, -2, -42, -17, -3, -17, -19, -1, -1, -33, -7, -1, -33, -1, -2, 127, -1, -43, -1, -18, -1, -1, -9, -1, 125, -34, -1, -33, -1, 95, -3, -3, -1, -1, -1, -1, -1, 125, -1, 95, -9, -1, -1, -1, -65, -1, 127, -13, -1, -1, 127, -13, -1, -1, -9, -1};
  // {00101011 11111001 10111100 01011101 111}
  public static final byte[] GRPSPLIT2 = new byte[] {-44, -97, 61, -70, 7};
  // {...7574 0-bits}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 9, 0, 0, 0, 16, -112, 0, 0, 9, -32, 0, 48, 8, -128, 66, 28, 16, 0, 0, 0, 80, -64, 2, 0, 1, 8, 0, -119, 0, -96, 72, 4, 0, -127, 17, 32, 0, 65, 0, 0, 0, -95, 0, 68, 0, 12, 0, 20, 1, 16, 50, 0, 48, 32, -96, -125, 0, 16, 48, 0, 0, 32, 0, 0, 0, 0, 70, 32, 4, 16, 33, 16, 0, 98, -96, 1, 8, 0, 0, 1};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 10, 3, 0, 36, 65, 0, 0, -120, 0, 0, 64, 0, 72, 0, 0, 32, 0, -112, 0, 0, 0, 0, 17, 2, 0, 0, 32, 8, 80, -60, -126, 64, 96, 0, -128, 40, 16, 2, 16, 16, 0, 0, 0, 6, 0, 32, 0, 1, -128, 0, 34, 0, 16, 0, 1, 8, 0, -118, 1, 0, 32, 0, -128, 2, 1, 0, 0, 32, 64, 2, -126, 0, -88, 8, 0, 8, 32, 0, 8, -96, 32, 1, 16, -124, 44, 8, 1, 9, 0};
  // {...7574 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {-3, -1, -1, -1, -1, -17, -17, -1, -1, -10, 95, -1, -49, -9, 127, -3, -17, -1, -1, -1, -1, -17, 127, -3, -1, -2, -1, -1, -10, -1, -1, -65, -5, -1, -2, -2, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -2, -1, -3, -1, -49, -33, -33, -3, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -3, -33, -1, -1, -1, -17, -1, -35, -33, -1, -1, -1, -1, 1};
}


class GBM_model_python_1589382591366_1_Forest_56 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_56_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_56_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.07075739f : 
                    -0.0297923f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.05649323f : 
                    0.059406556f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.058679312f : 
                    0.040667254f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.010478747f : 
                    0.0317162f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.11888002f : 
                    -0.062217638f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                    -0.011736871f : 
                    0.10933561f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    -0.09436079f : 
                    0.13087831f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT14, 720, 0, data[15])) ? 
                    0.13680384f : 
                    0.2015629f))));
    return pred;
  } // constant pool size = 1001B, number of visited nodes = 15, static init size = 5634B
  // {00000001 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {50, -34, -27, 84, 96, 51, -1, 111, 121, -6, -77, 84, 17, -60, 10, 96, 64, 8, 112, -64, 31, -32, 13, -126, 33, 20, 4, -43, 121, -99, -19, -39, 59, -86, 127, -34, -33, 120, 40, 17, -94, 1, 112, -31, -60, 5, -80, 21, 3, 1, -48, 122, 0, 17, 54, 23, 78, -128, -113, 37, 65, 38, 1, -95, 68, 33, 56, 68, -94, 84, 65, 7, -127, 57, 1, 0, -23, 107, 104, -108, -23, 71, 126, -97, -122, 125, -99, -125, 63, 52};
  // {00010000 11000010 10010100 01101000 100}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 67, 41, 22, 1};
  // {11111101 01111111 11111111 11111111 11011111 11011111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111110 11101111 11111101 11111111 10111111 01101111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 10111111 11011111 11111111 11111110 11111111 11111111 11011111 01111111 11111111 11111111 11111111 11111111 11110111 10110111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 00111111 11111111 11011111 01111110 11110111 11111110 11111111 11111111 11111101 11111100 11111111 11111111 11111111 11111111 11111111 11101101 10111111 11111010 01111111 11111001 11111111 10111111 11111111 11111111 11111111 11111101}
  public static final byte[] GRPSPLIT3 = new byte[] {-65, -2, -1, -1, -5, -5, -1, -17, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, 127, -9, -65, -1, -3, -10, -1, -1, -1, -1, -1, -1, -3, -3, -5, -1, 127, -1, -1, -5, -2, -1, -1, -1, -1, -17, -19, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -4, -1, -5, 126, -17, 127, -1, -1, -65, 63, -1, -1, -1, -1, -1, -73, -3, 95, -2, -97, -1, -3, -1, -1, -1, -65};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 1, 0, 0, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, -128, 8, 64, 0, 0, 9, 0, 0, 0, 0, 0, 64, 2, 2, 4, 64, -128, 0, 0, 0, 1, 0, 16, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 1, 0, -128, 2, 0, 64, -64, 0, 0, 16, 0, 0, 72, 2, -96, 1, 64, 0, 2, 0, 0, 0, 0};
  // {00001111 00111101 11101011 11111111 100}
  public static final byte[] GRPSPLIT5 = new byte[] {-16, -68, -41, -1, 1};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 12, 37, 20, 0, 32, 72, 0, 17, 72, 2, 16, 0, 68, 2, 64, 0, 8, 96, -64, 4, 0, 8, 2, 0, 16, 0, -128, 64, 0, 32, 88, 27, -120, 117, 8, 16, 64, 8, 0, 2, 0, 96, -96, 64, 5, 16, 4, 1, 1, 16, 104, 0, 16, 2, 1, 0, 0, 14, 0, 1, 32, 1, 1, 4, 32, 16, 0, -96, 80, 1, 1, -127, 0, 0, 0, 9, 10, 0, -112, 32, 4, 14, 9, 6, 13, 4, 3, 62, 16};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-19, -13, -38, -21, -97, -49, -102, -11, -2, -73, 125, -17, -1, -69, -3, -33, -1, -9, -97, 63, -5, -33, -13, -3, -1, -1, -1, 123, -73, -1, -98, -89, -26, 87, -86, -5, 45, -81, -9, -1, -3, -1, -97, 94, -65, -6, 111, -5, -4, -2, -17, -105, -1, -18, -7, -8, -13, -1, -7, -1, -2, -33, -1, -34, -69, -1, -49, -65, 95, -85, -66, -2, 126, -49, -1, -1, 118, -11, -1, 111, -33, -6, -15, 116, -7, -78, -5, -4, -63, -1};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {64, 32, 2, 0, 4, 68, 0, 0, 0, 0, 8, 0, 0, 1, 0, 8, 32, 0, -128, 0, 96, 0, 32, 0, 0, 0, 0, 32, 0, 0, -126, 2, 0, 64, -128, 1, 0, 4, 0, 0, 0, 0, 0, 16, 8, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 32, 0, 0, 0, 1, 0, -124, -127, 80, -128, 2, 0, 0, 64, 0, -128, 0, 32, 0, 8, 2, 48, -127, 32, 8, -125, 0, 4, 4, 64};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 2, 0, 0, 0, 16, 0, 0, 1, 16, 2, 0, 0, 8, 16, 0, 16, 0, 0, 40, 0, 0, 2, 9, 16, 0, 0, 0, 4, 0, 65, 0, 32, 12, 16, 32, 0, 8, 0, 0, 8, 4, 0, 0, 0, 4, 0, 8, 0, 40, 0, 0, 0, 0, 32, -115, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 64, 64, -128, 64, 0, 0, 0, -48, 4, 96, 16, 96, -56, 4, -128, 0, 0, 8, -127, 9, 0};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -9, -1, -1, -1, -1, -65, -1, -17, -1, -17, -1, -1, -1, -3, -1, -1, -1, -1, -1, -2, -1, -1, 125, -1, -1, -1, -1, -1, -1, -1, -25, -1, -3, -37, -25, -1, -65, -1, -1, -1, -1, -65, -1, -65, -1, -1, -2, -2, -2, -1, -1, -1, -1, -19, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -11, -1, -5, -9, -1, -1, -1, -17};
  // {00101001 00101011 00100000 00010011 000}
  public static final byte[] GRPSPLIT11 = new byte[] {-108, -44, 4, -56, 0};
  // {01011010 01100100 11001010 00000000 000}
  public static final byte[] GRPSPLIT12 = new byte[] {90, 38, 83, 0, 0};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -3, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -17, -1, -33, -9, -4, -1, -5, -1, -1};
  // {}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 8, 2, 48, 1, 32, 0, 1, 0, 4, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_57 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_57_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_57_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.11941202f : 
                    -0.10237759f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                    -0.055679407f : 
                    0.059177514f)) : 
             (Double.isNaN(data[22]) || data[22 /* mths_since_last_record */] <88.0f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(716, 1, data[15]) || (GenModel.bitSetIsInRange(716, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 716, 1, data[15])) ? 
                    0.01848416f : 
                    0.09648818f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(716, 1, data[15]) || (GenModel.bitSetIsInRange(716, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 716, 1, data[15])) ? 
                    -0.0032373255f : 
                    0.24424492f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.10496647f : 
                    -0.0020984253f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.02603363f : 
                    0.020386396f)) : 
             (data[10 /* annual_inc */] <89695.31f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(716, 2, data[15]) || (GenModel.bitSetIsInRange(716, 2, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 716, 2, data[15])) ? 
                    0.014506807f : 
                    0.04954104f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(716, 2, data[15]) || (GenModel.bitSetIsInRange(716, 2, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 716, 2, data[15])) ? 
                    -0.07482993f : 
                    0.038374413f))));
    return pred;
  } // constant pool size = 989B, number of visited nodes = 15, static init size = 5562B
  // {00101011 11010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 11, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {66, -88, 65, 4, 16, 6, -52, 0, 8, 40, 34, 4, 0, -60, 0, 0, 64, 8, 0, 0, 44, 0, 96, 32, 0, 0, 4, -127, 16, 1, 4, -127, 64, 0, 8, -123, 96, 8, 35, 0, -128, 0, 0, 0, 0, 0, 32, 0, 0, 4, 64, 2, 0, 0, 32, 0, 64, 0, 8, 2, 0, 0, 0, 0, 2, 2, 0, 0, 3, 80, 3, 6, 0, 9, 1, -128, 65, 0, 96, -88, -87, 36, 54, 68, -128, 13, 8, -124, 33, 16};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-37, -5, -55, -1, 127, -50, -3, -34, -33, 63, -2, -17, -1, -1, -9, -1, -1, -1, 47, 119, -2, -1, -9, -9, -33, -5, -1, -65, -97, -1, -2, -91, -10, -75, 27, -89, -20, -3, -1, -17, -9, -1, -17, 127, -1, -1, -17, -5, -1, 126, -1, -73, -1, -1, -3, -1, -3, 127, -1, -33, -1, -33, -1, 95, -2, -1, 103, -66, 127, -1, -1, -1, -65, -1, -1, -1, -41, -33, -1, -21, -1, 127, -10, -17, -3, -35, -18, -1, -13, -1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -19, -1, 127, -1, -1, -2, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, 127, -1, -2, -1, -9, -1, -1, -1, -1, -1, -65, -1, -2, -1, -1, -1, -1, -73, -4, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -9, -33, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
  // {00000010 00000000 01000001 10000000 000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, -126, 1, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {32, -64, 0, 2, 0, 0, 4, 0, 0, 0, 0, 2, 0, 98, 0, 0, 32, 0, 0, 0, 0, 0, 32, 0, 0, 0, 2, 0, -128, 0, 0, 0, 0, 0, 0, 66, 32, -128, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 1, 1, 0, 0, 0, 0, 0, 0, 0, 80, 68, 0, 0, 0, 0, 4, 0, 2, 16, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 16, 0, 0, 0, 0, 64, 8, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 48, -124, 0, 0, 18, 0, 0, 2, 0, -128, 0, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {52, 87, -90, 80, -28, 113, 19, 119, 49, 82, 1, 80, 16, 8, 10, 64, 16, 0, -16, -56, 83, -96, 45, 10, 49, 20, 0, 64, 108, -100, -61, 90, 59, -18, -5, 122, 23, 58, 8, 17, 8, 1, 80, -48, -102, 4, 16, 13, 2, -119, -128, 120, 0, 0, 18, -97, 14, -128, -125, 37, 96, 38, 1, -95, 65, 33, -72, -63, -80, -123, 65, -128, -63, 64, 0, 0, -72, 106, 8, 20, 98, -42, 73, -78, -122, -74, -111, 3, 14, 36};
  // {01111111 01111101 11110110 01011011 111}
  public static final byte[] GRPSPLIT8 = new byte[] {-2, -66, 111, -38, 7};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, -1, -17, -1, -1, -5, 83, -1, -73, 127, -19, -1, -2, -5, -1, -1, -1, -1, -1, -1, -9, -1, -65, 79, -1, -1, -5, 127, -2, -2, -1, 127, -1, -1, -5, 127, 119, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -17, -1, -5, -65, -1, -1, -1, -33, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -3, -81, -1, -1, -1, -9, -1, -1, -65, -1, -33, -1, -1, -1, -51, -5, -1, -10, -13, -1, -2, -1};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 16, 0, 0, 4, -92, 8, 72, -88, 26, 0, 1, 17, 0, 0, 32, 0, 0, 0, 8, 0, 2, -112, 0, 0, 4, 16, 1, 64, 0, -128, 0, 0, 4, 0, -120, 64, 0, 0, 0, 0, 0, 1, 0, 1, 0, 16, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 66, 64, 0, 1, 0, 17, 0, 0, 64, 1, 32, 0, 0, 1, 18, 4, 0, 0, 4, 0, 1, 64};
  // {...2 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 16, 8, 0, 32, 64, 64, 8, 0, 64, 0, 4, 0, 0, 0, 16, 0, 0, 4, 112, 0, 0, 0, 0, 0, 4, 0, 16, 16, 64, 0, 0, 0, 0, 8, -112, 0, 0, 66, 4, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, -126, 0, -128, 0, 0, 0, 8, 0, 32, 64, 0, 64, 0, 32, 0, 0, 0, 0, 0, 0, 0, -118, 24, 2, 1, 8, 64, 2, 4, 0, 0, 4, 0, 2, 0};
  // {...2 0-bits}
  public static final byte[] GRPSPLIT12 = new byte[] {64, -128, 0, 0, 17, 0, 4, 64, 8, 0, 0, 0, 0, 2, 2, 0, 4, 0, 32, -128, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, -126, -120, 64, 52, 66, -124, 0, 0, 0, 0, 0, 4, 36, 0, 0, 0, 1, 64, 2, 0, 16, 0, 0, -128, 0, 0, 0, 32, 0, 0, 1, 0, 8, 0, 0, 0, 0, 72, 32, 0, 0, 32, 0, 0, 0, 0, 0, 0, -124, 24, 16, 2, 40, 33, 32, 96, 0, 1, 0};
}


class GBM_model_python_1589382591366_1_Forest_58 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_58_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_58_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <21928.0f ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.10092381f : 
                    -0.015964778f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.029229505f : 
                    0.03012225f)) : 
             (!Double.isNaN(data[8 /* emp_length */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.045361206f : 
                    0.033003397f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.018085979f : 
                    0.04594925f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.1177872f : 
                    -0.08551312f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.062729985f : 
                    0.058151957f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.048477877f : 
                    0.11040098f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.07447822f : 
                    0.18605916f))));
    return pred;
  } // constant pool size = 995B, number of visited nodes = 15, static init size = 5598B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {50, -2, -75, 80, -32, 19, -69, 79, 8, -8, -79, 84, 17, 76, 10, 104, 64, 8, -48, -24, 19, -96, 108, -72, 48, 20, 0, 65, 125, -100, -82, 83, 38, -66, -70, -9, -82, 56, 40, 17, -88, 1, 48, -16, -50, 1, 48, 28, 3, 12, -48, 122, 0, 1, 38, -97, 10, -128, -113, 38, 65, 38, 1, -95, 69, 32, -88, -123, 3, 16, 3, -121, -63, -7, 0, 0, 57, -20, 104, -100, -85, -74, 87, -98, -122, -5, -99, 1, 26, 84};
  // {01111111 01111011 00010000 11000110 111}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -34, 8, 99, 7};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -2, -1, -1, -1, -37, -5, -33, -113, -1, -9, -1, -1, 127, -1, -1, -17, -1, -1, -1, -65, -65, -1, -1, -2, -1, -1, 127, -1, -2, -66, 119, -73, -1, -69, -9, -2, -65, -1, -1, -1, -1, -1, -1, -1, -5, -1, -2, -1, 127, -1, -1, -1, -1, -1, -65, -5, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -65, -49, -5, -65, -1, -1, -1, -1, -1, -1, -3, -1, -33, -65, -9, -33, -33, -1, -1, -1, -1, -37, -1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 36, 68, 0, 16, 2, 8, 0, 0, -112, 0, 0, 48, 0, 0, 0, 64, 0, 2, 0, 1, 0, 0, -112, 0, 65, 65, -128, 72, 0, 64, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -128, 0, 0, 0, 16, 0, 64, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 64, 16, 64, 64, 0, 0, 0, 0, 0, -128, 2, 0, 0, 0, 9, 32, 32, 0, 0, 0, 0, 36, 0};
  // {01010100 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {42, 12, 0, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, -122, 16, 0, 64, 19, -127, 69, 8, 72, -80, 0, 17, 4, 10, 40, 0, 8, -128, 40, 17, -128, 96, 8, 0, 20, 0, 65, 65, 8, 10, 1, 32, -114, 58, 17, 4, 32, 40, 1, 40, 1, 16, -96, 72, 0, 48, 12, 1, 4, 0, 0, 0, 0, 38, 8, 2, -128, -118, 6, 0, 32, 1, 32, 69, 0, 0, 0, 2, 16, 0, 5, 1, 96, 0, 0, 17, 104, 32, 12, -87, 6, 16, -106, 0, -30, 21, 0, 16, 4};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {50, 104, -91, 80, 32, 0, 57, 2, 0, -96, 1, 84, 0, 0, 0, 64, 0, 0, 16, -64, 0, 32, 8, -112, 48, 0, 0, 0, 40, 20, -96, 82, 6, 32, -128, -10, -126, 0, 0, 16, -128, 0, 32, 80, -122, 1, 0, 16, 2, 0, -48, 114, 0, 1, 0, 23, 8, 0, 5, 32, 65, 36, 0, -96, 0, 32, -120, -123, 1, 0, 3, 0, -64, -120, 0, 0, 32, -128, 104, -112, 34, -112, 71, 8, -122, 25, -120, 1, 10, 16};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 3, 66, 0, 4, 84, 68, 32, 113, 16, 10, 0, 0, 0, 16, 0, 16, 0, 96, 0, 76, 64, 1, 2, 1, 0, 4, -124, 64, 0, -63, -120, 16, 74, 69, 0, 81, 64, 0, 0, 2, 4, 64, 1, 16, 4, 0, 1, 0, 33, 0, 0, 0, 0, 16, 4, 64, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 64, -96, -60, 64, 0, 0, 0, 13, -128, -56, 2, 0, 96, 64, 68, 40, 97, 4, 5, 0, -124, 37, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-35, -33, -53, -1, 31, -4, -58, -12, -9, 87, -1, -5, -1, -1, -1, -1, -1, -1, 127, 31, -2, 95, -77, -41, -33, -1, -1, -1, -17, 47, -11, -67, -33, -1, 95, 110, 127, -1, -9, -1, -9, -1, -17, -17, -1, -1, -49, -5, -2, -1, -65, -19, -1, -2, -1, -2, -11, -1, -4, -1, -1, -1, -1, 95, -65, -1, 119, -1, -1, -1, -3, -6, 63, -73, -1, -1, -34, -33, -97, 111, -36, 125, -18, -21, 127, -3, -9, -1, -1, -21};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -33, -17, -1, 95, -3, -1, -4, -9, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -17, -17, -1, -67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -2, -1, -1, -1, -1, -1, -1, -1, -3, -1, -3, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -3, -5, -1, -73, -1, -1, -33, -33, -65, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -17};
  // {01000000 00100000 00111010 00110111 100}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 4, 92, -20, 1};
  // {00000000 10011111 01011100 01101001 000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, -7, 58, -106, 0};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, 2, 0, 0, 84, 64, 32, 64, 0, 2, 0, 0, 0, 0, 0, 0, 0, 64, 0, 4, 64, 0, 0, 0, 0, 0, 4, 0, 0, -128, 8, 0, 8, 1, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 16, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 64, -128, 4, 0, 0, 0, 0, 12, 0, 0, 0, 0, 96, 0, 0, 32, 64, 4, 4, 0, -124, 32, 0};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 64, 0, 0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0, 68, 0, 1, 64, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 64, 64, 0, 0, 0, 0, 0, -128, 5, 0};
}


class GBM_model_python_1589382591366_1_Forest_59 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_59_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_59_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[26]) || data[26 /* revol_util */] <89.35625f ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.07883883f : 
                    -0.012363125f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.053984575f : 
                    0.022863058f)) : 
             (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[13])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.05193651f : 
                    0.053042237f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    0.0014592028f : 
                    0.029096855f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.11281124f : 
                    -0.026732782f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.055474963f : 
                    0.061328057f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 35, 0, data[6])) ? 
                    0.015423291f : 
                    0.093731984f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 35, 0, data[6])) ? 
                    0.09494549f : 
                    0.19179192f))));
    return pred;
  } // constant pool size = 825B, number of visited nodes = 15, static init size = 4578B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {114, -10, 101, 80, -28, 115, -7, 127, 25, -6, -77, 80, 17, 76, 26, 104, 112, 0, -16, -64, 26, -32, 36, -118, 17, 20, 4, -59, 61, -103, 110, -38, 118, 46, 123, -45, -2, 46, 8, 17, -96, 1, 32, 112, 12, 5, 16, 29, 3, -84, -48, 56, 0, 17, 50, -99, 78, -128, -114, 5, 97, 38, 1, -95, 65, 33, -72, 69, -78, -112, 1, -126, 65, -7, 5, 0, -72, -49, 104, -100, 72, -1, 114, 59, 12, -11, 8, -128, 7, 32};
  // {10111011 01010011 01110000 10001010 000}
  public static final byte[] GRPSPLIT1 = new byte[] {-35, -54, 14, 81, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-5, -1, -1, -5, -1, -5, -3, -1, -65, -1, -1, -5, -1, 127, -1, -1, -1, -9, -1, -1, -2, -1, -9, -1, -35, -1, -1, -17, -65, -69, 126, -1, -10, -81, -1, -33, -2, -1, -1, -1, -11, -1, -65, 127, -3, -1, -33, -1, -1, -1, -1, -65, -1, -1, -5, -1, -1, -1, -2, -3, -1, -1, -1, -1, -5, -1, -1, 127, -1, -70, -65, -5, 127, -1, -1, 127, -2, -33, -1, -1, 127, -1, -14, 127, 127, -11, -22, -4, -33, -1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 4, 16, 4, 0, 0, 64, 0, 0, 0, 0, 16, 0, 0, 0, 8, 0, 32, 0, 0, 8, 0, 34, 0, 0, 16, 64, 0, -127, 1, 8, 64, 0, 32, 1, 0, 0, 0, 2, 0, 0, -128, 66, 0, 32, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 4, -128, 0, 68, 64, 4, -128, 0, 0, -128, 64, 0, 0, 0, -128, 0, 13, -124, -128, 8, 5, 1, 32, 64};
  // {00101010 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {84, 31, 0, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {64, -96, 65, 0, 0, 2, 72, 0, 8, 32, 32, 0, 0, 68, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, -127, 16, 1, 68, -126, 0, 0, 16, -127, 96, 12, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 4, 64, 32, 0, 0, 32, -128, 64, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 16, 0, 2, 0, 9, 1, 0, 0, 0, 0, -120, 8, 48, 34, 33, 0, 1, 0, 0, 1, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {18, 2, 32, 64, -128, 17, 1, 101, 1, 72, 1, 16, 0, 0, 10, 64, 16, 0, -48, 64, 10, 32, 0, -126, 17, 20, 0, 64, 0, 16, 0, 88, 50, 14, 107, 16, 16, 2, 8, 17, -128, 1, 0, 0, 8, 0, 16, 9, 0, -128, -128, 8, 0, 0, 2, 24, 6, 0, -126, 0, 64, 36, 1, -96, 0, 33, 32, 0, -128, 0, 0, -128, 65, 32, 0, 0, 40, 76, 8, 20, 0, 65, 0, 16, 0, 32, 8, 0, 6, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 2, 0, 64, 4, 6, 0, 16, 0, 10, 4, 0, -128, 0, 0, 0, 8, 0, -128, 101, 0, 73, 1, 32, 0, 0, 0, 96, 4, -127, 1, 9, -48, -124, 44, 1, 16, 32, 0, 10, 0, 80, -128, 0, 0, -96, 0, 0, 4, 0, 64, 0, 0, 20, 2, 0, 0, 1, 34, 0, 0, 0, 0, 4, 2, 0, -128, 1, -63, 66, 4, 0, 0, 8, -128, 65, 32, 64, 2, -93, 0, 15, -60, -128, 10, 17, 7, 40, 20};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-51, -39, -33, -1, -1, -20, -66, -10, -10, 71, -49, -1, -1, -6, -9, -1, -81, -1, 47, -65, -11, -33, -5, 117, -1, -1, -1, 63, -17, -17, -1, 101, -1, -13, -108, -20, -49, -1, -1, -1, -1, -1, -33, -1, -1, -2, -1, -18, -1, 127, -65, -57, -1, -1, -3, -2, -1, 127, 125, -1, -65, -1, -1, -1, -2, -1, 79, -1, 95, -1, -2, -1, -65, -58, -1, -1, -17, -9, -33, 103, -65, 124, -97, -9, -5, 90, -9, -1, -7, -1};
  // {00000010 11000011 10001000 00000010 111}
  public static final byte[] GRPSPLIT9 = new byte[] {64, -61, 17, 64, 7};
  // {00000001 00011000 10101001 11111001 100}
  public static final byte[] GRPSPLIT10 = new byte[] {-128, 24, -107, -97, 1};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 32, 0, 0, 0, 0, 4, -127, 0, 9, -112, 0, 44, 0, 16, 0, 0, 8, 0, 0, -128, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 32, 0, 0, 0, 0, 0, 2, 0, -128, 0, 1, 0, 4, 0, 0, 0, 0, 1, 32, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 40, 0};
  // {11111010 11000110 01001101 11011101 110}
  public static final byte[] GRPSPLIT12 = new byte[] {95, 99, -78, -69, 3};
  // {00000000 00011111 11000110 00000000 000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, -8, 99, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_60 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_60_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_60_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* term */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.09884344f : 
                    0.009878755f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.057510264f : 
                    -0.011733197f)) : 
             (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[13])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.076284945f : 
                    0.056821723f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                    3.292139E-5f : 
                    0.028684271f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.0880056f : 
                    0.022445744f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                    -0.021798173f : 
                    0.023999825f)) : 
             (data[10 /* annual_inc */] <26554.688f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(716, 1, data[15]) || (GenModel.bitSetIsInRange(716, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 716, 1, data[15])) ? 
                    0.03238183f : 
                    0.2117621f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(34, 1, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 34, 1, data[6])) ? 
                    0.0043322747f : 
                    0.061391853f))));
    return pred;
  } // constant pool size = 739B, number of visited nodes = 15, static init size = 4062B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {52, 110, 52, 80, 0, 53, 79, 102, 65, -6, 58, 4, 17, -111, 0, 96, 96, 8, -80, -56, 90, 0, 42, 10, 35, 20, 0, 81, 89, 20, -18, 89, 61, 58, -88, -21, 46, 20, 41, 17, 8, 0, 64, 16, -60, 4, 48, 5, 3, 1, 0, 74, 0, 0, 22, -51, 0, -128, 15, 4, 32, 34, 0, -95, 5, 2, -68, -63, -30, -123, 64, -126, 65, -95, 0, -128, -95, 70, 72, -124, -63, 119, -57, 88, -122, -65, -100, 6, 59, 116};
  // {11111111 11111101 01001000 01101100 110}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -65, 18, 54, 3};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-3, -17, -3, -1, -37, -67, 111, -18, -49, -1, -1, -65, -1, -13, -1, -1, -17, -1, -65, -1, -5, -97, -6, 127, -1, -1, -5, 127, -33, 63, -2, -1, -1, 123, -4, -1, 110, -33, -1, -1, -35, -1, -17, 63, -1, -2, -1, -1, -1, -1, -65, -49, -1, -1, -33, -1, -1, -1, 127, -33, -65, -1, -1, -1, -1, -1, -1, -1, -1, -81, -4, -6, 127, -25, -1, -1, -65, -1, -33, -121, -33, 119, -49, 93, -1, -1, -2, 126, -5, -1};
  // {11111111 01111110 01111101 11111111 11110000 10111101 11110011 11101111 11101111 11111111 01111110 11110111 11111111 11101101 10100111 11101111 11110111 11111111 11111111 11111011 01111111 11111110 11111111 01110111 11111111 11111111 11011111 11011011 11011111 01101101 11111111 10111111 11111101 11111101 11011111 11011111 11111100 10111001 10111111 11111111 11110010 11111111 11111011 01111111 10100111 01111111 11111111 11110111 11111111 11101010 11111111 11110111 11111111 01110111 11111111 10110111 10011111 11111111 11111111 11111111 01111101 11111111 11111111 11111111 11111111 11111011 11111111 11011111 01111111 11111111 10111111 11111111 11111111 11110101 01001111 11111111 11100111 01101110 11111111 10111111 10101111 11111111 11111111 10011110 11111111 11111111 11111111 11111111 11011111 11111111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 126, -66, -1, 15, -67, -49, -9, -9, -1, 126, -17, -1, -73, -27, -9, -17, -1, -1, -33, -2, 127, -1, -18, -1, -1, -5, -37, -5, -74, -1, -3, -65, -65, -5, -5, 63, -99, -3, -1, 79, -1, -33, -2, -27, -2, -1, -17, -1, 87, -1, -17, -1, -18, -1, -19, -7, -1, -1, -1, -66, -1, -1, -1, -1, -33, -1, -5, -2, -1, -3, -1, -1, -81, -14, -1, -25, 118, -1, -3, -11, -1, -1, 121, -1, -1, -1, -1, -5, -1};
  // {10101011 11010000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-43, 11, 0, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 40, 0, 0, 0, 0, 13, 0, 0, 8, 34, 4, 0, -128, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 16, 0, 4, 1, 0, 0, 0, -128, 32, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 16, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, -128, 0, 2, 0, 1, 0, -128, 1, 2, 64, -128, 65, 48, 0, 64, 0, 12, 0, 4, 1, 16};
  // {00001101 00110011 01001110 10010001 000}
  public static final byte[] GRPSPLIT7 = new byte[] {-80, -52, 114, -119, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {2, -112, -61, 0, -12, 66, -80, 25, 56, 0, -128, 16, 0, 76, 10, 8, 16, 0, 64, 32, 5, -32, 5, 17, 0, 0, 4, -92, 36, 8, 1, -126, 2, 70, 5, 4, -47, 106, 0, 0, -78, 5, 48, -63, 10, 1, -128, 9, 0, -92, 0, 48, 0, 16, 0, 18, 4, 0, -128, 32, 65, 4, 1, 0, 0, 32, 0, 4, 1, 64, 3, 4, -128, 88, 9, 0, 24, -119, 32, 14, 106, -128, 48, -89, 8, 0, 0, -127, 4, 16};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-49, -13, -49, -5, -1, -34, -72, -35, -1, 85, -49, -5, -17, -18, -1, -33, -97, -9, -17, -73, -17, -1, -43, -1, -35, -17, -1, -17, -81, -5, -41, -90, -62, -17, 127, 92, -7, -17, -33, -1, -1, -1, -1, -17, -65, -1, -17, -1, -4, -1, -1, -75, -1, -1, -5, -66, -1, 127, -6, -5, -33, -3, -1, 127, -2, -7, 83, 63, 93, -2, -1, 125, -65, -1, -1, -1, -34, -5, -1, 63, -1, -68, 63, -89, -3, 70, -21, -3, -19, -101};
  // {01000100 00000000 00001101 00001010 101}
  public static final byte[] GRPSPLIT10 = new byte[] {34, 0, -80, 80, 5};
  // {00100000 11000100 10110001 11110101 100}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 35, -115, -81, 1};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 8, 0, 0, 0, 0, 64, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 2, 0, 64, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 16, 0, 0, 0, 64, 0, 0};
  // {...1 0-bits... 00101010 11110101 11100010 10001000 00}
  public static final byte[] GRPSPLIT13 = new byte[] {84, -81, 71, 17, 0};
}


class GBM_model_python_1589382591366_1_Forest_61 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_61_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_61_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* annual_inc */] <42339.844f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.08680773f : 
                    0.111513674f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.017842116f : 
                    0.13092834f)) : 
             (data[7 /* emp_title */] <3922.5f ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(714, 4, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 714, 4, data[15])) ? 
                    -0.082804136f : 
                    0.070988044f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(714, 4, data[15]) || (GenModel.bitSetIsInRange(714, 4, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 714, 4, data[15])) ? 
                    0.021351775f : 
                    0.11169567f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.085730866f : 
                    -0.027544027f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.042482853f : 
                    0.079843745f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    -0.04860159f : 
                    0.03975182f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.012958095f : 
                    0.049762886f))));
    return pred;
  } // constant pool size = 905B, number of visited nodes = 15, static init size = 5058B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 82, 2, 20, 96, 98, -55, 112, 24, 82, -110, 64, 17, 88, 0, 0, 0, 8, -80, -128, 10, 0, 13, 24, 50, 20, 0, 80, 72, 5, 103, -118, 68, -16, -95, 44, -114, 56, 40, 1, -102, 1, 16, -48, 66, 4, 48, 21, 3, -123, -128, 16, 0, 1, 34, -60, 8, -128, 4, 3, 33, 2, 1, 32, 0, 0, 20, 64, -128, 80, 3, 6, 64, -31, 0, 0, -112, 65, 0, 30, 107, 108, 124, 7, -124, -114, 12, -122, 56, 32};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-101, -5, -49, -1, -17, -5, -23, -4, -97, 119, -33, -1, -1, 123, -3, -9, -17, -1, -1, -73, -6, 63, -65, -3, -2, -1, -1, 127, -34, 111, -9, -18, -18, -7, -9, 63, -81, -7, -1, -1, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -35, -1, -1, -5, -1, -1, -1, -2, -37, -1, -33, -1, -2, -1, -1, 95, 127, -33, -2, -1, -1, 126, -1, -5, 127, -1, -3, -1, 127, -1, 124, -3, -73, -3, -1, 111, -2, -3, -21};
  // {00000000 00000000 00010000 10010000 000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 8, 9, 0};
  // {00000000 00000000 00000011 00100010 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, -64, 68, 0};
  // {...4 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 5, 0, 1, 36, 2, 8, 0, 33, 32, 9, 20, 0, 4, 0, 0, 0, 0, 8, -128, 0, -112, -128, 0, 2, 1, 0, -123, 64, 80, -128, 0, 0, 12, 74, -64, 8, 2, 2, -96, 24, 0, 0, 0, 64, 0, 1, 32, 0, 0, 0, 0, 0, 0, 64, 8, 0, 0, 0, 0, 2, 0, 0, 0, 0, 64, 0, 4, 8, 0, 64, 0, 16, 0, 0, 0, 0, 4, -32, 0, 68, -62, 17, 64, 104, 64, 96, 8, 1, 0};
  // {...4 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 64, 0, 2, 4, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, -128, 0, 2, 32, 0, 64, 0, 0, 0, 0, 0, 0, 20, 32, -94, 8, 4, 0, 0, 34, 0, -128, 16, 0, 0, 0, 0, 1, 4, 0, 82, 17, 16, 0, 0, 0, 16, 0, 2, -124, 0, 72, 48, 16, 0, 0, 0, 0, 0, 0, 1, 0, 0, 17, 0, 0, 4, 12, 0, 0, 17, 0, 0, -95, -126, 0, 68, 0, 0, -120, 0, -128, 2, 0};
  // {01100110 01100101 10101111 00000010 00101001 10101000 01101110 11110000 10010111 00010101 11000100 00101000 00000000 00100001 01011000 00010010 00001010 00000000 00000010 00010111 10111110 00000111 01000100 11000100 10000000 00000000 00100000 10100001 10100110 00011001 00010011 10001010 11011100 01110000 01011011 11010011 10001110 01110010 10000000 00000000 00000100 00000000 00001110 10000101 00011000 10000000 00000001 00000000 00000000 00010100 00001010 01010110 00000000 00000000 00101000 11111000 01000010 00000000 11010001 00100100 00000000 00100100 00000000 10000001 10100010 11000100 00010101 10100011 11000110 10100001 00000010 00000001 10000001 00011000 10110000 00000001 10010110 01010101 00010110 00100111 01000001 11001111 11100001 00011111 01110000 10001110 00001001 10000000 11100000 00101000}
  public static final byte[] GRPSPLIT6 = new byte[] {102, -90, -11, 64, -108, 21, 118, 15, -23, -88, 35, 20, 0, -124, 26, 72, 80, 0, 64, -24, 125, -32, 34, 35, 1, 0, 4, -123, 101, -104, -56, 81, 59, 14, -38, -53, 113, 78, 1, 0, 32, 0, 112, -95, 24, 1, -128, 0, 0, 40, 80, 106, 0, 0, 20, 31, 66, 0, -117, 36, 0, 36, 0, -127, 69, 35, -88, -59, 99, -123, 64, -128, -127, 24, 13, -128, 105, -86, 104, -28, -126, -13, -121, -8, 14, 113, -112, 1, 7, 20};
  // {00101000 00000100 01110100 11100011 000}
  public static final byte[] GRPSPLIT7 = new byte[] {20, 32, 46, -57, 0};
  // {11111111 11111101 11111111 11111111 11111111 10111111 01111110 11111001 11111111 11111111 11110111 11111111 01110111 11111101 11111111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11101111 11110110 11111011 11111111 11111111 11111111 11101111 01111111 10011111 11101111 11111111 11111110 01011011 11111111 10011111 11111111 11101111 11111111 11111111 11111111 11111111 11110111 11111111 11011111 11110111 11110111 01111111 11111111 11111111 11111111 11111111 11111111 10111111 11111110 11101111 11111110 11111111 10111111 01111111 11111111 11111111 11111011 11111111 11111111 11110111 11111111 11111110 11110111 01111111 11011111 11111111 11111101 11111111 11111111 11111111 01111111 11111111 11101111 11101111 11001111 11100101 11111111 11111111 11101111 01001111 10011111 11101111 11111101}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -65, -1, -1, -1, -3, 126, -97, -1, -1, -17, -1, -18, -65, -1, -1, -33, -1, -1, -1, -1, -1, -9, 111, -33, -1, -1, -1, -9, -2, -7, -9, -1, 127, -38, -1, -7, -1, -9, -1, -1, -1, -1, -17, -1, -5, -17, -17, -2, -1, -1, -1, -1, -1, -3, 127, -9, 127, -1, -3, -2, -1, -1, -33, -1, -1, -17, -1, 127, -17, -2, -5, -1, -65, -1, -1, -1, -2, -1, -9, -9, -13, -89, -1, -1, -9, -14, -7, -9, -65};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 64, 0, 0, 64, 0, 1, 96, 0, 64, 16, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 9, -128, 0, 0, 0, 0, 0, 65, 0, 8, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 48, 0, 0, 8, 8, -128, 32, 64};
  // {00010011 10101011 10011000 01011101 100}
  public static final byte[] GRPSPLIT10 = new byte[] {-56, -43, 25, -70, 1};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {98, -92, 96, 0, 16, 4, 80, 1, 0, -120, 3, 16, 0, 4, 2, 0, 0, 0, 64, -32, 37, -32, 2, 0, 0, 0, 0, -128, 4, -104, -128, 1, 27, 8, 0, -61, 112, 10, 0, 0, 0, 0, 32, -128, 16, 0, -128, 0, 0, 0, 80, 96, 0, 0, 4, 0, 66, 0, 1, 36, 0, 4, 0, -128, 64, 1, -96, 0, 2, 5, 0, 0, 1, 16, 9, 0, 73, 8, 104, 0, -128, -111, 3, -96, 0, 80, -112, 1, 5, 20};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {-99, 91, -69, -1, 111, -21, -81, -10, 118, 87, -4, -17, -1, -1, -3, -1, -1, -1, -65, 31, -53, 31, -3, -2, -1, -1, -5, -1, -5, 111, 127, -2, -10, -9, 127, -68, -49, -73, -2, -1, -33, -1, -33, 126, -17, -1, 127, -1, -1, -9, -81, -97, -1, -1, -5, -5, -65, -1, 124, -33, -1, -1, -1, 127, -65, -1, 95, -65, -67, -5, -1, 127, -1, -17, -9, -1, -74, -1, -97, -33, -3, -18, -4, 95, -1, -66, -17, -2, -6, -21};
}


class GBM_model_python_1589382591366_1_Forest_62 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_62_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_62_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[14 /* title */] <4977.5f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (Double.isNaN(data[22]) || data[22 /* mths_since_last_record */] <112.0f ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                    -0.028235497f : 
                    0.017700868f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.10188814f : 
                    0.2080181f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.019865438f : 
                    0.02748294f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.04285304f : 
                    0.066731125f))) : 
         (Double.isNaN(data[14 /* title */]) || !GenModel.bitSetIsInRange(768, 4978, data[14]) || (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 768, 4978, data[14])) ? 
             (!Double.isNaN(data[14 /* title */]) && (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 768, 4978, data[14])) ? 
                 (!Double.isNaN(data[14 /* title */]) && (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 768, 4978, data[14])) ? 
                    -0.12985715f : 
                    -0.11264129f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.061068226f : 
                    0.13819973f)) : 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[14 /* title */]) && (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT11, 768, 4978, data[14])) ? 
                    -0.10508072f : 
                    0.14743043f) : 
                 (Double.isNaN(data[14 /* title */]) || !GenModel.bitSetIsInRange(768, 4978, data[14]) || (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT12, 768, 4978, data[14])) ? 
                    0.19532765f : 
                    0.33260217f))));
    return pred;
  } // constant pool size = 1105B, number of visited nodes = 15, static init size = 6258B
  // {01001100 11000011 11001111 00001010 00100010 10101000 11010101 11100110 10011110 00010100 01000100 00100000 10001000 00010010 00011000 00000100 00001010 00010000 00001100 00010011 10000000 00000000 10010100 01001001 10001000 00101000 00100000 10101000 00100110 10110000 01110011 11011011 11010110 01110111 10000111 10010101 11110000 00010100 00010100 10001000 01011101 10000000 00000110 00001011 01101001 10100000 00001000 00100000 01000000 10010100 00000001 00011000 00000000 00000000 01100100 11110000 00010010 00000001 11110001 10100100 10000000 01000100 00000000 00000001 00000010 10000100 00001101 00000010 00000110 00100001 11000010 01100001 10000011 00010000 10100000 00000000 10010011 00110000 00010100 00001100 11000111 00101000 11111100 01111100 00000000 01001011 00101001 01100000 11100000 00100100}
  public static final byte[] GRPSPLIT0 = new byte[] {50, -61, -13, 80, 68, 21, -85, 103, 121, 40, 34, 4, 17, 72, 24, 32, 80, 8, 48, -56, 1, 0, 41, -110, 17, 20, 4, 21, 100, 13, -50, -37, 107, -18, -31, -87, 15, 40, 40, 17, -70, 1, 96, -48, -106, 5, 16, 4, 2, 41, -128, 24, 0, 0, 38, 15, 72, -128, -113, 37, 1, 34, 0, -128, 64, 33, -80, 64, 96, -124, 67, -122, -63, 8, 5, 0, -55, 12, 40, 48, -29, 20, 63, 62, 0, -46, -108, 6, 7, 36};
  // {00000000 00000000 10001111 00000010 000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, -15, 64, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 32, 0, 64, 4, 0, 0, 0, 8, 0};
  // {00001000 00001111 00010000 11011101 000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, -16, 8, -69, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -65, -67, -65, -69, -22, 124, -66, -58, -41, -33, -1, -1, -1, -17, -1, -17, -9, -17, -65, -2, -1, -42, 127, -1, -5, -1, -17, -97, -2, -79, 52, -66, -41, 94, -2, -4, -9, -1, -17, -57, -1, -1, -1, 109, -6, -1, -5, -3, -34, -1, -9, -1, -1, -33, -3, -65, -1, -8, -6, -1, -1, -1, 127, -1, -34, -1, -65, -97, 127, -68, 127, 63, -9, -1, -1, 63, -1, -1, -1, 61, -17, -54, -9, -1, 127, 111, -1, -6, -5};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-19, -4, -50, -17, -1, -1, -33, -36, -65, -1, -3, -5, -17, -65, -9, -1, -65, -1, -33, 119, -1, -1, -34, -19, -18, -1, -5, -5, -5, -5, 127, -17, -9, 57, -65, 95, -13, -33, -33, -1, -35, -1, -97, 63, -21, -1, -17, -1, -1, -1, -1, -17, -1, -1, -7, -6, -1, 127, 127, -33, -2, -3, -1, -1, -1, -1, 79, -1, -1, 123, -1, -5, -1, -1, -1, -1, -2, -13, -33, -17, 95, -5, -11, -19, -1, -83, -5, -7, -3, -1};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT6 = new byte[] {18, 0, 24, 64, 1, -128, 97, 32, 4, 0, 0, 0, 4, 5, -128, -64, 8, 49, 0, 8, 0, 36, 0, 0, 80, -64, 0, 33, 33, 114, 0, 0, 0, 33, 16, 64, -128, 34, 14, 32, 8, 32, 66, 0, -126, -128, 40, 48, 3, -128, 64, 48, 0, 0, 9, 68, 2, 56, -128, 0, 0, 0, -128, 0, 60, -127, -108, 0, 16, 24, 0, 16, -128, 0, 64, 0, 0, 64, 32, 0, 1, 0, 32, 64, 0, -96, 64, 64, 32, 0, 2, 0, 0, 32, 17, 4};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, 21, 58, 127, 103, -9, 111, -2, 93, 39, -91, -33, -84, 127, -35, -12, 126, 121, -27, 105, 25, 125, 127, -121, 113, -41, -41, -15, 53, -9, -66, -108, -75, 49, -65, -45, -102, -66, -82, -73, -1, 118, 87, -98, -1, -83, 40, -15, -69, -37, -33, -69, -48, 55, -53, 117, 46, -4, -84, -75, 115, 31, -50, -77, -68, -117, -43, -1, 116, -5, -49, -34, -97, 38, -38, -73, -12, -53, -11, 79, -79, -120, -23, -55, 90, -83, -43, 123, 38, -3, -54, 74, -67, -66, 127, 60};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -65, -65, 127, -9, -1, -1, -2, -1, -1, -1, -1, -3, -1, -33, -1, -1, -1, -1, -5, -1, -3, -1, -1, -1, -1, -1, -11, -1, -9, -1, -1, -1, -5, -1, -33, -1, -65, -1, -73, -1, -2, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -4, 119, -1, 127, -1, -1, -1, -1, -1, -33, -2, -5, -65, -1, -3, -1, -4, -1, -1, -1, -1, -26, -6, -9, -1, -53, -3, -17, -3, -85, -1, -1, -1, -17, -1, -1, 126, -3, -34, -1, -1, -65, -1, 127};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 20, 0, 4, 0, 0, 16, 0, 1, 32, 8, 0, 0, -108, 2, 8, 0, 0, 0, 0, 7, 0, 4, 0, 32, 0, 0, 0, 8, 16, 0, 0, 16, 0, 11, 16, 0, 64, 0, 0, 0, 0, 16, 0, 64, 0, 0, 0, 1, 0, 0, 32, 0, 0, 16, 16, 2, 0, 0, 0, 0, 0, 0, 33, 0, 2, 8, 1, -126, 0, 0, 0, 0, 96, 0, 0, 16, 2, 96, 4, 8, 32, 32, 0, 0, 32, 1, -128, 0, 80};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 24, 4, 0, 0, 16, 68, 40, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 90, 64, 0, 0, 0, 0, 0, 64, 0, 16, 65, 0, 0, 16, 18, 66, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, -64, 0, 64, 0, 0, 0, 1, 0, 0, 0, 32, 0, 8, 0, 68, 1, 64, -124, 1, 0, 0, 0, 0};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {-3, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT12 = new byte[] {2, 0, 0, 0, 1, 0, 0, 32, 0, 0, 0, 0, 0, 1, -128, 0, 0, 0, 0, 0, 0, 4, 0, 0, 64, 0, 0, 33, 1, 18, 0, 0, 0, 0, 0, 0, -128, 32, 0, 32, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 9, 4, 0, 8, -128, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_63 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_63_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_63_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[26]) || data[26 /* revol_util */] <28.6875f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.09934109f : 
                    -0.069057606f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.031010987f : 
                    0.051371127f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.06853085f : 
                    0.07984506f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    0.033516996f : 
                    0.121827245f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (data[7 /* emp_title */] <8158.5f ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.048102073f : 
                    -0.011873557f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.048333768f : 
                    0.15317817f)) : 
             (data[0 /* loan_amnt */] <1039.5f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(717, 1, data[15]) || (GenModel.bitSetIsInRange(717, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 717, 1, data[15])) ? 
                    -0.062271297f : 
                    0.23213127f) : 
                 (Double.isNaN(data[20]) || data[20 /* inq_last_6mths */] <3.5f ? 
                    0.014890982f : 
                    -0.06854524f))));
    return pred;
  } // constant pool size = 808B, number of visited nodes = 15, static init size = 4476B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 9, 7, 16, -128, 2, -96, 123, -112, 40, 0, 64, 1, 64, 8, 0, 0, 0, -96, -128, 96, 64, 2, 3, 2, 16, 0, -64, 64, 0, 6, 10, 64, -64, -120, -103, 8, 8, 0, 0, 0, 0, 0, 16, 68, 4, 0, 0, 0, 5, 0, 0, 0, 16, 32, -55, 0, 0, 5, 0, 0, 0, 0, 33, 2, 0, 20, -128, -14, 4, 0, 0, -64, -80, 4, 0, 24, 40, 32, 64, 1, 12, -110, 16, 2, 10, -128, -128, 37, 16};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-113, 63, -17, -69, -101, -38, -21, -5, -97, 61, -12, -17, -1, 114, -1, -41, -97, -9, -1, -73, -13, 127, -42, -9, -33, -1, -5, -17, -25, 126, 94, 110, -10, -59, -101, -7, -53, -23, -9, -1, -35, -1, -113, -97, -3, -1, -33, -13, -1, 127, -1, -35, -1, -2, -5, -1, -69, 127, -3, -34, -2, -35, -1, 127, -65, -2, -41, -1, -1, 127, -67, -5, -2, -74, -1, -1, 126, -4, -65, 123, 85, 31, -77, -111, -1, 126, -21, -8, -27, -5};
  // {11111100 00010001 00011010 01001010 111}
  public static final byte[] GRPSPLIT2 = new byte[] {63, -120, 88, 82, 7};
  // {00000000 00100000 00011001 10000010 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 4, -104, 65, 0};
  // {00011101 10100011 00000111 00100001 000}
  public static final byte[] GRPSPLIT4 = new byte[] {-72, -59, -32, -124, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 8, 5, 0, -128, 0, 0, 0, -128, 32, 0, 0, 1, 64, 0, 0, 0, 0, 32, 0, 0, 0, 0, 1, 2, 16, 0, -64, 0, 0, 0, 0, 0, 0, 0, -128, 0, 8, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -128, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 20, 0, -62, 4, 0, 0, -128, 32, 0, 0, 0, 8, 32, 0, 0, 0, 18, 16, 0, 2, -128, 0, 0, 16};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 8, 2, 0, 0, 0, -128, 41, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, -120, -103, 0, 0, 0, 0, 0, 0, 0, 16, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 32, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -112, 0, 0, 0, 64, -128, 0, 0, 16, 32, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 36, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {50, -10, -48, 64, 100, 117, 83, 4, 105, -110, 19, 20, 16, -116, 16, 104, 64, 8, 16, 104, 31, -128, 41, 24, 32, 0, 4, 49, 44, -99, -87, -111, 59, 62, 115, 36, 53, 54, 41, 17, -94, 1, 112, -32, 24, 1, 48, 13, 0, -88, -128, 120, 0, 1, 18, 20, 78, -128, -118, 39, 33, 38, 1, -128, 68, 33, -88, 69, 1, -64, 67, -124, 1, 73, 9, -128, -128, 71, 72, -100, -22, -14, 77, -81, -124, -107, 29, 7, 10, 36};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -10, -4, -1, -17, -1, 95, -25, 127, -1, -1, -65, -2, -81, -3, -1, -1, -1, 127, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -5, -1, -65, -1, -1, -73, -9, -1, -1, -1, -1, -1, -1, -2, -7, -1, -1, -1, -1, -2, -1, -3, -1, -17, -1, 62, -1, -1, -6, -1, -1, -1, -1, -34, -3, -1, -5, -1, -17, -1, -1, -3, -1, 79, -5, -1, -1, -33, -33, -65, -2, -13, -1, -17, -3, -9, -1, -1, -2, -1};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 2, 0, 0, 0, 0, 0, 0, 32, 0, 64, 0, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 2, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 32, 0, 1, 4, 0, 0, 0, 8, 0, 0, 1, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 1, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 8, 32, 16, 0, 0, 64, 0, 0, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_64 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_64_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_64_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.06757821f : 
                    -0.0219363f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.039646164f : 
                    0.067301534f)) : 
             (Double.isNaN(data[19]) || data[19 /* earliest_cr_line */] <2.86946099E12f ? 
                 (data[19 /* earliest_cr_line */] <1.13056704E12f ? 
                    0.005660686f : 
                    -0.030095257f) : 
                0.13433295f)) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.11765858f : 
                    -0.07748305f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                    -0.015966054f : 
                    0.08374794f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.08817522f : 
                    0.12750512f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    0.12178669f : 
                    0.1907305f))));
    return pred;
  } // constant pool size = 809B, number of visited nodes = 14, static init size = 4506B
  // {00000001 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-128, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {38, -34, -11, 80, -32, 49, -33, 127, 121, -8, -109, 84, 1, -64, 10, 96, 0, 8, 112, -64, 95, -96, 9, -110, 33, 20, 4, -59, 120, -99, 109, -39, 87, -66, 127, -34, 127, 120, 40, 17, -78, 1, 112, -64, -108, 5, -80, 17, 1, -127, -48, 120, 0, 17, 54, 22, 78, -128, -113, 37, 65, 38, 1, -95, 70, 33, 56, 68, -93, 85, 65, 7, -127, 57, 1, 0, -119, 106, 104, -76, -23, 71, 126, -101, -122, -19, 25, -127, 43, 48};
  // {00010000 11000000 11010100 00111000 100}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 3, 43, 28, 1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-81, -1, -1, -5, -1, -5, -1, -1, -1, -1, -33, -1, -1, -5, -1, -9, -33, -1, 127, -9, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, 125, -3, -9, -65, 127, -33, -1, -5, -2, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -2, -1, -1, -1, -3, -1, -1, -1, -1, -2, -1, -5, 126, -17, 127, -1, -1, -1, 63, -1, -1, -1, -1, -1, -73, -1, 95, -2, -33, -1, -3, -5, -3, -1, -65};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, -128, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 2, 8, 64, 0, 32, 0, 0, 1, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 2, 0, 1, 0, -128, 0, 0, 0, -64, 0, 0, 0, 0, 0, 72, 0, -96, 1, 4, 0, 0, 4, 2, 4, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 32, 2, 0, 4, 84, 0, 0, 0, 0, 8, 0, 0, 9, 0, 8, 32, 0, 0, 0, 96, 0, 32, 0, 0, 0, 0, 32, 0, 0, -126, 2, 32, 64, -128, 1, 0, 4, 0, 0, 0, 0, 0, 16, 8, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 32, 0, 0, 0, 1, 0, -124, -127, 80, -128, 2, 0, 0, 64, 0, -128, 64, 32, 0, 8, 2, 48, -127, 32, 8, -125, 0, 4, 4, 64};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -89, -17, -5, -65, -1, -95, -105, -49, -75, -17, -1, -2, 127, -11, -1, -1, -1, -113, 63, -32, 127, -9, 125, -2, -1, -1, -1, -33, -77, -13, -26, -1, -3, -111, -91, -70, -97, -33, -1, -1, -1, -97, 63, -69, -1, -49, -6, -2, -2, -17, -43, -1, -18, -23, -3, -5, 127, -7, -1, -1, -17, -1, 95, -5, -33, -25, -1, 126, -21, -2, -5, 126, -26, -1, -1, -2, -9, -1, 63, -10, -2, -59, -73, 123, -109, 127, -2, -3, -21};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -9, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -2, -1, -1, 125, -1, -1, -1, -1, -1, -1, -1, -25, -1, -1, -33, -17, -1, -65, -1, -1, -1, -1, -65, -1, -65, -1, -1, -2, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -11, -1, -5, -1, -1, -1, -1, -17};
  // {00101001 00101010 00100001 00000011 000}
  public static final byte[] GRPSPLIT8 = new byte[] {-108, 84, -124, -64, 0};
  // {01011010 01110100 10001010 10000000 000}
  public static final byte[] GRPSPLIT9 = new byte[] {90, 46, 81, 1, 0};
  // {11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 10111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111101 11111111 11111111 11101111 11111111 11110111 11111111 11111011 11101111 00111111 11111111 11011111 11111111 11111111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -3, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, 127, -65, -1, -1, -9, -1, -17, -1, -33, -9, -4, -1, -5, -1, -1};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, 0, 0, 0, 0, 0, 0, 0, -128, 64, 0, 0, 8, 0, 48, 1, 32, 0, 1, 0, 4, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_65 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_65_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_65_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[14 /* title */] <2598.5f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.09861087f : 
                    -0.051629595f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.044433195f : 
                    -0.0060606645f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.05849473f : 
                    0.070514485f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.071441926f : 
                    0.07387042f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.079423934f : 
                    -0.031975444f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.053879026f : 
                    0.010233475f)) : 
             (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[13])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.04073714f : 
                    0.059419975f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.010327006f : 
                    0.077851385f))));
    return pred;
  } // constant pool size = 825B, number of visited nodes = 15, static init size = 4578B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 65, 16, 80, -128, 5, 67, 65, 120, 104, 32, 68, 17, 64, 8, 0, 80, 8, -80, 40, 9, 32, 40, 2, 17, 16, 4, -127, 48, 12, 39, -120, 121, 76, 100, 126, 7, 16, 33, 1, -96, 1, 16, 65, 0, 1, -128, 0, 2, 1, -128, 90, 0, 0, 48, 3, 4, -128, -124, 33, 1, 32, 0, -96, 64, 32, 12, 64, 32, -112, 3, 2, 65, -64, 1, 0, 96, 12, 64, -58, -117, 78, 109, 10, 0, 80, 0, 2, 40, 52};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-81, 113, -5, -1, -81, -97, 79, -49, -1, -1, 118, -17, -1, 127, -19, -41, -33, -1, -65, -1, -33, -1, -1, 102, -35, -5, -1, -1, -1, -18, -9, -1, -5, -3, 125, -1, -1, -3, -1, -1, -1, -1, -65, -1, 123, -1, -1, -18, -2, 91, -81, -1, -1, -1, -7, 111, -67, -1, -4, -3, -1, -3, -1, -1, -2, -2, 79, -6, -3, -2, -1, -1, -1, -2, -5, -1, -10, -1, -33, -1, -65, 110, -17, -37, -3, -41, -29, 123, -3, -1};
  // {11110100 01011110 00010000 01000111 000}
  public static final byte[] GRPSPLIT2 = new byte[] {47, 122, 8, -30, 0};
  // {11011010 10010011 11111111 10000011 010}
  public static final byte[] GRPSPLIT3 = new byte[] {91, -55, -1, -63, 2};
  // {00000101 01110111 00011001 01111001 001}
  public static final byte[] GRPSPLIT4 = new byte[] {-96, -18, -104, -98, 4};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 65, 0, 64, -128, 1, 64, 1, 80, 40, 0, 4, 17, 64, 8, 0, 64, 8, -80, 40, 9, 0, 0, 0, 1, 16, 0, 1, 16, 12, 2, 8, 65, 0, 4, 120, 3, 16, 1, 0, 32, 0, 0, 64, 0, 0, 0, 0, 0, 1, -128, 64, 0, 0, 0, 2, 0, 0, 0, 32, 0, 0, 0, 32, 64, 32, 0, 0, 0, -112, 0, 0, 0, -64, 0, 0, 0, 0, 64, -62, -119, 4, 40, 2, 0, 16, 0, 2, 8, 20};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -66, -1, -1, 127, -1, -65, -2, -1, -9, -1, -5, -18, -1, -9, -1, -65, -9, 127, -41, -9, -1, -1, -1, -2, -1, -1, -1, -17, -5, -1, -9, -2, -1, -5, -113, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, 127, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, 111, -1, -1, -1, -65, -1, -1, -1, -1, -65, 61, -9, -1, -41, -3, -1, -1, -1, -3, -1, -5};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {82, -66, -58, 4, 116, 114, -76, 60, 1, 16, -101, 16, 0, -120, 16, 104, 32, 0, 64, 64, 114, -64, 5, -103, 34, 4, 0, 80, 68, -111, -56, 18, 38, 2, -101, -128, 48, 46, 10, 0, 0, 0, 64, -80, -60, 4, 32, 29, 1, -92, 64, 32, 0, 17, 6, -104, 66, 0, 11, 34, 32, 6, 1, 0, 1, 3, -80, -123, -45, 69, 0, -124, -128, 25, 4, -128, -103, -29, 40, 60, 96, -79, -112, -27, 14, -81, 25, -123, 6, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-33, -2, -17, -65, -1, -6, -67, -2, -89, -33, -33, -1, -18, -65, -1, -1, -65, -1, 79, -33, -2, -1, -1, -1, -18, -1, -1, -1, -49, -69, -39, 127, -73, -5, -101, -99, -16, -1, -1, -1, -33, -1, -17, -66, -1, -2, -1, -1, -1, -2, -1, -83, -1, -1, -1, -1, -5, 127, -5, -2, -2, -1, -1, -1, -65, -33, -13, -1, -1, 111, -2, -1, -66, 127, -1, -1, -33, -13, -1, 63, 118, -15, -105, -11, -1, -17, -1, -3, -9, -37};
  // {01111110 00101101 00001011 01100011 101}
  public static final byte[] GRPSPLIT9 = new byte[] {126, -76, -48, -58, 5};
  // {11111011 10111000 11000110 10101101 101}
  public static final byte[] GRPSPLIT10 = new byte[] {-33, 29, 99, -75, 5};
  // {00101001 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-108, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {64, -66, 66, 4, 52, 0, -92, 52, 0, 0, 16, 0, 0, -128, 0, 96, 0, 0, 64, 0, 0, 0, 4, 0, 32, 4, 0, 0, 0, 17, -128, 16, 6, 2, 1, 0, 32, 10, 2, 0, 0, 0, 64, -128, 64, 0, 0, 17, 0, 4, 64, 0, 0, 17, 0, 0, 64, 0, 11, 0, 0, 0, 1, 0, 0, 2, 32, -127, 1, 1, 0, 0, -128, 9, 0, 0, 17, 32, 32, 40, 64, 17, 16, 69, 4, 13, 25, 4, 6, 0};
  // {01001000 00010000 00100000 00000000 00000010 01001100 00001000 00000100 10000000 00000000 11010000 00001000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 01000010 00000001 10000000 00011001 00000100 00000000 00000000 00001010 00000010 00000001 00010011 01000000 00000000 01000000 01000001 00000000 00001000 00000000 00010000 00000000 00000000 00000000 00000010 00001100 00000001 00100000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 01000000 00001001 01000000 00000000 00000000 00000000 00000100 01000000 00000000 00000000 10000000 00000000 00000001 00100000 00000011 00100010 00000000 00100001 00000000 00001000 00100000 00000000 00011001 01000000 00010100 00101000 00000110 00001101 00000000 10100101 01000000 00000100 00000000 10000001 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {18, 8, 4, 0, 64, 50, 16, 32, 1, 0, 11, 16, 0, 0, 0, 0, 32, 0, 0, 0, 66, -128, 1, -104, 32, 0, 0, 80, 64, -128, -56, 2, 0, 2, -126, 0, 16, 0, 8, 0, 0, 0, 64, 48, -128, 4, 0, 0, 0, 0, 0, 32, 0, 0, 2, -112, 2, 0, 0, 0, 32, 2, 0, 0, 1, 0, -128, 4, -64, 68, 0, -124, 0, 16, 4, 0, -104, 2, 40, 20, 96, -80, 0, -91, 2, 32, 0, -127, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_66 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_66_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_66_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.22230732f ? 
         (data[10 /* annual_inc */] <42339.844f ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                    -0.099098615f : 
                    -0.020834329f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    0.021782944f : 
                    0.06299145f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.06105775f : 
                    -0.015900448f) : 
                 (data[10 /* annual_inc */] <62441.254f ? 
                    0.024427205f : 
                    -0.0013674453f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                -0.11759711f : 
                -0.036274754f) : 
            0.15022403f));
    return pred;
  } // constant pool size = 679B, number of visited nodes = 10, static init size = 3822B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 82, 2, 20, 96, 115, -119, 112, 24, 82, -110, 64, 17, 88, 0, 0, 0, 8, -16, -128, 10, 0, 13, -104, 50, 20, 0, 112, 72, 5, 103, -118, 68, -16, 49, 44, -113, 56, 40, 1, 26, 1, 80, -48, 66, 4, 48, 29, 3, -123, -128, 16, 0, 1, 34, -60, 8, -128, 4, 3, 33, 2, 1, 32, 0, 0, 20, 64, -128, -48, 3, 6, 64, -31, 0, 0, -112, 73, 0, 30, 107, 76, 124, -121, -124, -114, 13, -126, 56, 32};
  // {11011011 11011111 11110011 11111111 11111111 11011111 10010111 00111111 11111001 11111111 11111111 11111111 11111111 11011110 11111111 11101111 11110111 11111111 11111111 11101101 01011111 11111110 11111111 10111111 11111111 11111111 11111111 11111110 01111011 11111111 11111111 11110111 01110111 10011111 11111111 11111100 11111101 10011111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 11111111 01111111 11111111 11111111 11111011 11111110 11111011 01111111 11111111 11111111 01111110 11111111 11011111 11111111 11111111 11111111 11111111 11111110 11111111 10111110 11111111 11111101 10111111 11111111 11110110 01111111 11111111 11110111}
  public static final byte[] GRPSPLIT1 = new byte[] {-37, -5, -49, -1, -1, -5, -23, -4, -97, -1, -1, -1, -1, 123, -1, -9, -17, -1, -1, -73, -6, 127, -1, -3, -1, -1, -1, 127, -34, -1, -1, -17, -18, -7, -1, 63, -65, -7, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -2, -1, -1, -33, 127, -33, -2, -1, -1, 126, -1, -5, -1, -1, -1, -1, 127, -1, 125, -1, -65, -3, -1, 111, -2, -1, -17};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 80, 0, 0, 32, 96, -119, 16, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 16, 0, 16, 0, 64, 8, 1, 0, 8, 4, 64, 32, 0, 6, 40, 40, 1, 0, 0, 0, 0, 0, 4, 0, 17, 0, 1, 0, 16, 0, 0, 2, 0, 8, -128, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, -128, 0, 3, 4, 0, 32, 0, 0, 0, 1, 0, 0, 40, 0, 72, 1, -128, 4, 0, 0, 40, 0};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {102, -90, -11, 64, -108, 20, 82, 15, -23, -88, 33, 20, 0, -124, 26, 72, 16, 0, 0, -24, 77, 64, 98, 34, 1, 0, 4, -123, 117, -104, -56, 81, 59, 14, -38, -53, 113, 70, 1, 0, 32, 0, 32, 33, 24, 1, -128, 0, 0, 40, 0, 98, 0, 0, 20, 27, 66, 0, -117, 36, 0, 36, 0, -127, 69, 33, -88, 69, 35, -123, 64, -128, -127, 24, 13, -128, 104, -86, 104, -28, -126, -77, 3, 88, 10, 49, -111, 5, 7, 20};
  // {11110111 11111111 11111111 11011111 11111111 10111011 11111110 11111111 11110111 10111111 11110111 11111111 01110111 11111101 11111111 11111111 11111011 11101111 11111111 11111111 10111111 11111111 11111111 11110110 10111011 11011111 11111111 11110111 11101111 01011111 11111111 11101111 11011101 11111010 11111111 11011111 10011110 11111011 11101011 11111111 11111111 11111111 11111111 11111111 10111101 11011111 11111111 01110111 00111111 01011110 11111111 11110111 11111111 01111111 10111111 11111110 11101111 11111110 11111111 11111111 01111011 10111111 11111111 11111111 11111111 11111111 11010111 11111111 11110111 11110111 01111111 11011111 11111111 11111000 11111111 11111111 11111111 01111111 11111111 11111111 11101111 11101111 11101101 10011111 11111111 11111111 11011111 10111111 11100111 11111111}
  public static final byte[] GRPSPLIT4 = new byte[] {-17, -1, -1, -5, -1, -35, 127, -1, -17, -3, -17, -1, -18, -65, -1, -1, -33, -9, -1, -1, -3, -1, -1, 111, -35, -5, -1, -17, -9, -6, -1, -9, -69, 95, -1, -5, 121, -33, -41, -1, -1, -1, -1, -1, -67, -5, -1, -18, -4, 122, -1, -17, -1, -2, -3, 127, -9, 127, -1, -1, -34, -3, -1, -1, -1, -1, -21, -1, -17, -17, -2, -5, -1, 31, -1, -1, -1, -2, -1, -1, -9, -9, -73, -7, -1, -1, -5, -3, -25, -1};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 32, 0, -128, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, -128, 0, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 8, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_67 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_67_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_67_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <18458.0f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.041701697f : 
                    -0.012163499f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.033971604f : 
                    0.18814306f)) : 
             (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.03631755f : 
                    0.03719272f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.031572916f : 
                    0.06837078f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.10339921f : 
                    0.01474736f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.038766105f : 
                    0.05321802f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    0.0055015977f : 
                    0.09938669f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.0697547f : 
                    0.20141281f))));
    return pred;
  } // constant pool size = 909B, number of visited nodes = 15, static init size = 5082B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {38, 116, -76, 80, -32, 103, -79, 69, 8, -88, 56, 20, 0, 12, 8, 104, 64, 8, -48, -56, 3, 0, 104, 41, 3, 20, 4, 65, 57, 17, 46, 81, 38, -124, 72, -5, -122, 24, 40, 17, -120, 1, 48, -48, -116, 0, 48, 28, 1, 4, -48, 24, 0, 1, 38, -37, 10, 0, 9, 38, 0, 34, 1, -95, 7, 32, -88, -123, -125, 16, 1, 5, -127, 72, 0, 0, 32, 105, 40, -108, -94, 50, 87, 50, -122, -117, 28, 1, 42, 16};
  // {00000000 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 10, 0, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -2, -4, -1, -1, -1, -1, -9, -81, -1, -4, -65, -1, -65, -19, -1, -1, -1, -1, -33, -13, -1, -2, -19, -1, -1, -1, -5, -5, -1, -2, -1, -66, -73, -7, -1, -90, -1, -1, -1, -19, -1, -1, -34, -19, -2, -1, -1, -1, -34, -1, -1, -1, -17, -17, -1, -65, -1, 127, -2, -1, -1, -1, -1, -1, -1, -1, -1, -97, 123, -1, 127, -1, -1, -6, 127, -1, -1, -65, -97, -66, -5, -1, 59, -1, -81, -1, -5, -6, -1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 20, 0, 1, 16, 0, 0, 0, 0, 0, 0, 64, 0, 1, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 68, 0, 32, 0, 0, 0, 0};
  // {00010110 00100000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {104, 4, 0, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-39, -85, -33, -81, -33, -2, -1, -70, -1, 119, -1, -17, -1, -1, -1, -1, -65, -1, 63, 55, -3, -1, -41, -1, -4, -21, -1, -65, -25, -18, -5, -1, -5, 123, -65, 6, 127, -17, -1, -17, 127, -1, -33, -81, 127, -1, -17, -17, -1, -1, -1, -17, -1, -1, -33, 124, -1, -1, -2, -33, -1, -3, -1, 95, -4, -1, 95, -5, 127, -1, -2, -1, 126, -9, -1, -1, -33, -33, -1, 127, -35, -49, -83, -17, -7, 118, -9, -1, -33, -1};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -33, -21, -1, 63, -37, 95, -1, -9, -33, -41, -1, -1, -9, -9, -9, -1, -9, -17, -1, -1, -1, -65, -34, -3, -1, -1, -1, -34, -1, -43, -18, -1, -5, -73, -3, -7, -9, -1, -1, -9, -1, -17, 127, -9, -1, -33, -5, -2, -1, -1, -9, -1, -2, -3, 55, -1, -1, -1, -5, -1, -33, -1, -2, -5, -33, -9, -2, -4, -17, -1, -2, -1, -65, -1, -1, -1, -10, -33, -17, 127, -3, -6, -3, 127, 127, -21, -2, -11, -1};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 3, 67, 0, 4, 16, 64, 8, 113, 80, 3, 64, 0, 64, 0, 0, 16, 0, 32, 32, 76, 0, 0, -126, 0, 0, 0, -124, 4, -128, -127, -118, 17, 74, -73, 64, 81, 64, 0, 0, 2, 4, 64, 1, 16, 5, 0, 1, 0, 9, 0, 32, 0, 0, 16, 4, 64, 0, -126, 1, 0, 4, 0, 0, 0, 1, 0, 0, 96, -60, 1, -126, 64, 1, 13, -128, 72, 34, 64, 100, 64, -60, 40, -59, 0, 84, 1, -124, 5, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-35, -5, -53, -1, 79, -4, 78, -66, -9, 87, -49, -5, -1, -6, -9, -1, -65, -1, 111, 55, -2, 127, -105, -41, -4, -1, -1, -17, -25, -82, -43, -82, -1, 127, -1, 110, 125, -1, -9, -1, -9, -1, -17, 111, -5, -1, -49, -5, -2, -5, -81, -19, -1, -2, -1, 126, -11, -1, -2, -3, -1, -1, -1, 95, -1, -1, 119, 127, -3, -1, -1, -6, 127, -73, -1, -1, -34, -1, -33, 111, -41, -35, -21, -51, 127, -43, -29, -1, -41, -21};
  // {00000000 00000000 00001010 00010101 100}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 80, -88, 1};
  // {00000000 00000000 10101100 01110110 000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 53, 110, 0};
  // {01100000 00011111 00010000 01111001 100}
  public static final byte[] GRPSPLIT11 = new byte[] {6, -8, 8, -98, 1};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 1, 67, 0, 0, 0, 64, 8, 64, 64, 0, 64, 0, 64, 0, 0, 0, 0, 32, 0, 64, 0, 0, 2, 0, 0, 0, 0, 0, 0, -127, 10, 1, 72, 0, 0, 0, 64, 0, 0, 2, 0, 0, 1, 0, 4, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 1, 4, 0, 0, 34, 64, 96, 0, 4, 40, 1, 0, 20, 0, 0, 4, 0};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 0, 0, 4, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 64, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 32, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, -64, 0, 64, 0, 0, 1, 4, 4, 0};
}


class GBM_model_python_1589382591366_1_Forest_68 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_68_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_68_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* int_rate */] <0.0789376f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.12422618f : 
                    -0.10647783f) : 
                 (data[7 /* emp_title */] <196.5f ? 
                    0.12955248f : 
                    -0.062645055f)) : 
             (data[10 /* annual_inc */] <58125.0f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(704, 11, data[15]) || (GenModel.bitSetIsInRange(704, 11, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 704, 11, data[15])) ? 
                    0.054915138f : 
                    0.18047471f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(704, 11, data[15]) || (GenModel.bitSetIsInRange(704, 11, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 704, 11, data[15])) ? 
                    -0.063635826f : 
                    0.14507324f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.046967775f : 
                    -0.005857472f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.0411996f : 
                    0.0899882f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.0051732585f : 
                    0.01960949f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    -0.06512333f : 
                    0.097760275f))));
    return pred;
  } // constant pool size = 980B, number of visited nodes = 15, static init size = 5508B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 40, 1, 0, -128, 0, 8, 0, 1, 32, 2, 16, 0, 81, 2, 0, 0, 8, 0, -128, 2, 0, 0, 0, 0, 16, 0, 64, 64, 1, 64, 0, 64, 96, 81, 91, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 32, 0, 1, 16, 0, 0, 0, 2, 0, 0, 0, 0, 32, 0, 0, -112, -128, 0, -128, 0, 0, 0, 0, 0, 0, -128, 32, 32, 80, 8, 0, 43, 0, -128, -116, 0, 1, 12, 4};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-33, -7, -21, -5, -17, -113, -2, -55, -121, -75, -17, -65, -2, 127, -1, -9, -65, -1, 15, -73, -74, -1, -43, 117, -1, -1, -1, 127, -49, -1, -33, -28, -34, 117, -39, -1, -13, -19, -10, -1, 127, -1, -33, 127, -65, -1, -17, -6, -2, -1, -1, -9, -1, -1, -3, -69, -1, 127, -1, -33, -1, -33, -1, 127, -6, -2, -33, -2, -83, -65, -1, -7, -1, 55, -5, -1, -98, -11, -65, 115, -66, 14, -5, -18, -5, -36, -10, 123, -4, -33};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -5, -1, -1, -1, -1, -1, -33, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -2, -19, -1, -1, -3, -1, 127, -1, -1, -1, -1, -1, 123, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
  // {...11 0-bits}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 64, 0, 2, 0, 8, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 44, 32, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 2, 16, 0, 16, 0, 0, 0, 0, 0, 0, 16, 4, 4, 0, 0, 64, 0, 0, -112, 16, 32, 0, 0};
  // {...11 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 32, 0, 0, 0, 1, 0, 0, -128};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {36, 87, -60, 80, 116, 115, 85, 118, 120, -38, -112, 68, 1, -120, 8, 72, 80, 0, -16, 72, 77, 64, 43, -118, 1, 4, 4, -127, 52, 24, -83, -37, 59, -98, -82, -124, 61, 62, 40, 17, -118, 1, 112, -64, -100, 4, 16, 13, 1, 32, -128, 24, 0, 0, 38, 93, 74, -128, -115, 37, 96, 38, 1, -127, 69, 33, 40, 69, 50, -63, 67, -121, 1, -55, 5, 0, 73, 78, 72, -84, 99, -9, 68, -79, 4, 51, -103, -124, 35, 32};
  // {00000000 00000001 11000011 00011111 000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, -128, -61, -8, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -9, -2, -1, 127, -1, -11, -1, 127, -33, -42, -1, -17, -82, -3, -1, -1, -9, -1, -33, -19, -1, -1, -2, -33, -1, -1, -69, -10, 123, -1, -1, -65, -97, -1, -49, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -33, -1, -1, -1, -1, -1, -1, -2, -17, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, 111, 127, -1, -1, -1, -1, 127, -17, -9, 127, 127, -1, -1, -65, -9, -9, -36, -3, -1, 51, -1, -2, -1, -85};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 8, 2, 0, -128, 4, 10, 0, -127, 32, 33, 0, 16, 0, 0, 0, 0, 8, 0, 0, 18, 0, 0, 0, 32, 0, 0, 0, 1, -124, 0, 0, 0, 64, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, -64, 16, 8, -128, 0, 0, 0, 0, 0, 0, 50, 66, 0, -52, 0, 1, 0, 80};
  // {00101000 00000000 00100000 11000000 100}
  public static final byte[] GRPSPLIT9 = new byte[] {20, 0, 4, 3, 1};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-5, -68, -1, -1, -85, -52, -70, -97, -17, 119, -1, -1, -2, 119, -9, -1, -65, -1, 111, -73, -70, -1, -12, 127, -2, -1, -5, -1, -37, -17, 122, -65, -42, -17, -37, 127, -49, -55, -1, -17, -3, -1, -1, -65, 107, -5, -17, -1, -1, -1, -1, -17, -1, -1, -37, -5, -73, 127, 126, -5, -33, -3, -1, -1, -65, -33, -9, -69, -33, -66, -66, -5, -2, -10, -1, -1, -73, -3, -1, -33, -4, -5, -5, 95, -1, -17, 102, 123, -2, -33};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 66, 0, 0, 80, 16, 64, 96, 16, 8, 0, 0, 0, 8, 8, 0, 0, 0, 16, 72, 69, 0, 11, -128, 0, 0, 0, 0, 32, 0, -124, 8, 33, 8, 32, -128, 0, 16, 0, 0, 2, 0, 0, 64, 0, 0, 16, 0, 0, 0, 0, 8, 0, 0, 32, 4, 0, 0, -127, 0, 0, 0, 0, 0, 64, 32, 8, 0, 32, 64, 65, 4, 0, 9, 0, 0, 64, 2, 8, 0, 66, 4, 4, -96, 0, 0, -119, -124, 1, 0};
}


class GBM_model_python_1589382591366_1_Forest_69 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_69_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_69_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.12396366f : 
                    -0.10905716f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.10726495f : 
                    -0.07722891f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                -0.029947724f : 
                0.23324765f)) : 
         (data[14 /* title */] <1397.5f ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.09876715f : 
                    -0.03341714f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                    0.008765325f : 
                    0.07189043f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.04983498f : 
                    -0.009623325f) : 
                 (data[7 /* emp_title */] <1058.5f ? 
                    0.06511619f : 
                    0.019545114f))));
    return pred;
  } // constant pool size = 714B, number of visited nodes = 13, static init size = 3960B
  // {11111111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, 31, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 32, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 40, 0, 4, 0, 0, 0, 0, 0, 5, 0, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -3, -33, -1, -1, -1, -9, -33, -1, -1, -3, -1, -1, -1, -9, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -2, -3, -1, -1, -73, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -33, -23, -1, -5, -1, -10, -1, -1, -1};
  // {01011000 10010100 00000000 00000000 000}
  public static final byte[] GRPSPLIT3 = new byte[] {26, 41, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -25, -1, -1, -1, -18, -2, -1, -49, -17, -1, -1, -1, -1, -1, -1, -1, -9, -1, 127, -71, -1, -1, -33, -1, -1, -1, -1, -33, -1, -65, -17, -1, -1, 127, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -6, -1, -1, -1, -3, -1, -1, -1, -33, -1, -1, -1, -65, -34, -65, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -3, -1, -1, -2, 127, -2, -1, 127, -1, -1};
  // {00001000 10001001 01100100 00000000 000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, -111, 38, 0, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {36, 65, 48, 80, 36, 4, 13, 1, 120, -86, 18, 64, 16, 4, 8, 0, 80, 8, 48, 32, 73, 32, 0, 2, 17, 0, 4, -127, 48, 68, 38, -118, 89, -116, 113, 66, 15, 88, 1, 1, 56, 1, 16, -128, 24, 0, 16, 0, 0, 1, -128, 26, 0, 0, 0, 0, 4, -128, 0, 33, 0, 32, 0, 0, 4, 0, 8, 64, 0, -112, 3, 2, 1, 72, 1, 0, 32, 8, 0, -106, -120, 80, 110, 0, -128, -44, -127, 0, 44, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-19, -37, -5, -1, 63, -33, -35, -33, -1, -65, 87, -1, -2, 127, -1, -33, -1, -1, -1, -9, -1, -1, -33, 111, -35, -1, -1, -1, -66, -2, -2, -17, -1, -17, -13, -54, -1, -3, -1, -1, -1, -1, -65, -1, -1, -1, -1, -18, -3, -5, -1, -1, -1, -1, -3, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -3, -1, -1, -5, -1, -1, -1, -1, -9, -1, -97, -1, -66, -1, -1, -25, -1, -41, -25, -5, -2, -21};
  // {01000111 00110111 00010101 01011101 101}
  public static final byte[] GRPSPLIT8 = new byte[] {-30, -20, -88, -70, 5};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {82, 22, -59, 0, -64, 113, -22, 118, 1, 80, -119, 20, 1, -120, 16, 96, 32, 0, 64, -56, 38, -128, 41, -71, 34, 20, 0, 68, 77, -127, -119, 81, 38, 66, -114, -67, 112, 38, 42, 0, -126, 0, 64, 0, -64, 5, 32, 25, 3, -124, 64, 32, 0, 17, 54, -97, 2, 0, 11, 6, 1, 38, 1, -95, 1, 35, -96, -127, -93, 65, 64, 0, 0, 17, 4, 0, -39, -27, 104, 76, 99, -85, -111, -71, 6, 41, 24, -121, 3, 52};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-37, -2, -49, -65, -1, -5, -5, -2, -89, -1, -1, -1, -17, -5, -1, -1, -65, -9, -17, -1, -9, -1, -1, -3, -18, -1, -1, 127, -49, -5, -39, 127, -74, 115, -65, -67, -15, -73, -1, -1, -49, -1, -17, -1, -17, -1, -1, -1, -1, -2, -1, -3, -1, -1, -1, -1, -69, 127, -1, -2, -1, -1, -1, -1, -5, -1, -9, -1, -1, 111, -1, -1, -2, -65, -1, -1, -33, -9, -1, 95, 119, -1, -73, -1, -1, -17, 126, -1, -13, -1};
}


class GBM_model_python_1589382591366_1_Forest_70 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_70_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_70_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[25]) || data[25 /* revol_bal */] <116727.5f ? 
         (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <21928.0f ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                    -0.035800315f : 
                    -1.8476282E-4f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    0.0028327366f : 
                    0.039724927f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.09666788f : 
                    -0.012264289f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                    0.03454149f : 
                    0.103225455f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
            -0.13437887f : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                    -0.10761037f : 
                    -0.10409113f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.10208093f : 
                    0.053772423f))));
    return pred;
  } // constant pool size = 620B, number of visited nodes = 12, static init size = 3420B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {2, -16, -75, 80, -32, 35, 57, 71, 8, -72, -128, 20, 0, 72, 10, 104, 0, 8, -112, -32, 35, 32, 104, -88, 32, 20, 0, 65, 48, -112, -86, 67, 38, -60, -16, -13, 4, 8, 40, 17, -88, 1, 48, -64, -114, 0, 48, 28, 1, 4, -48, 32, 0, 1, 36, 25, 10, 0, 15, 38, 0, 36, 1, -95, 67, 32, -120, 5, 18, 16, 3, -123, -63, 104, 0, 0, 41, 104, 104, -124, 35, -108, 19, 20, -126, -126, -119, 0, 0, 16};
  // {00011111 11110011 11010000 00000010 111}
  public static final byte[] GRPSPLIT1 = new byte[] {-8, -49, 11, 64, 7};
  // {00000000 00000100 00100011 10100101 000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 32, -60, -91, 0};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 3, 66, 0, 4, 84, 68, 32, 113, 16, 10, 0, 0, 0, 16, 0, 16, 0, 32, 0, 76, 64, 1, 2, 1, 0, 4, -124, 96, 0, 65, -120, 16, 72, 77, 8, 81, 64, 0, 0, 2, 4, 64, 1, 16, 4, 0, 1, 0, 33, 0, 0, 0, 0, 16, 4, 64, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 64, -96, -124, 64, 0, 0, 0, 13, -128, -56, 2, 0, 96, 64, 4, 40, 97, 4, 5, 0, -124, 37, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {-35, -33, -53, -1, 31, -4, -58, -12, -9, 87, -1, -1, -1, -1, -1, -1, -1, -1, 127, 31, -2, 95, -73, -41, -1, -1, -1, -1, -17, 47, -11, -67, -1, -1, -33, 111, 127, -1, -9, -1, -9, -1, -17, -1, -1, -1, -17, -5, -2, -1, -65, -19, -1, -1, -1, -2, -11, -1, -4, -1, -1, -1, -1, 95, -65, -1, 127, -1, -1, -1, -3, -5, 63, -73, -1, -1, -33, -33, -65, -17, -36, 125, -17, -21, 127, -3, -9, -1, -1, -21};
  // {00011000 10001101 00011100 00101001 000}
  public static final byte[] GRPSPLIT5 = new byte[] {24, -79, 56, -108, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -33, -1, -1, -65, -1, -1, -5, -5, -1, -1, -1, -1, -1};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 80, 0, 0, 0, 4, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 48, 2, 32, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 16, -128, 0, 0, 0, 0, 0};
  // {11101100 10111000 01111100 11111111 111}
  public static final byte[] GRPSPLIT8 = new byte[] {55, 29, 62, -1, 7};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {8, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_71 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_71_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_71_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* annual_inc */] <88818.36f ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (data[10 /* annual_inc */] <13191.429f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(717, 3, data[15]) || (GenModel.bitSetIsInRange(717, 3, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 717, 3, data[15])) ? 
                    -0.06282469f : 
                    0.20601566f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.032513186f : 
                    0.008456196f)) : 
             (Double.isNaN(data[27]) || data[27 /* total_acc */] <21.5f ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(716, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 716, 1, data[15])) ? 
                    -0.028465968f : 
                    0.025824362f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(716, 1, data[15]) || (GenModel.bitSetIsInRange(716, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 716, 1, data[15])) ? 
                    -0.013542966f : 
                    0.073799446f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                    -0.11195176f : 
                    -0.075210564f) : 
                 (!Double.isNaN(data[22]) ? 
                    0.10331389f : 
                    -0.021182347f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.11254873f : 
                    0.104266435f) : 
                 (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                    0.061567757f : 
                    0.18164039f))));
    return pred;
  } // constant pool size = 720B, number of visited nodes = 15, static init size = 3960B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {38, -2, -89, 80, -28, 85, -81, 103, 8, -38, 3, 20, 0, -128, 10, 64, 0, 8, 112, -56, 105, -96, 109, 34, 3, 20, 4, -63, 36, 17, -17, -61, 80, -36, 122, -13, 6, 8, 40, 17, -118, 1, 96, 64, -116, 4, 48, 25, 3, -96, -112, 40, 0, 0, 52, -99, 10, 0, 11, 39, 0, 34, 1, -127, 67, 33, -116, -59, -110, -128, 66, -123, 65, 105, 4, -128, -23, 111, 8, 14, 106, -33, 63, 21, -128, 44, 25, 4, 10, 16};
  // {...3 0-bits}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 4, 0, 0, 64, 0, 0, 0, 0, 0};
  // {00000000 01101010 10010011 00010000 001}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 86, -55, 8, 4};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT3 = new byte[] {-20, -66, -17, -33, -67, -43, -81, -2, -5, -13, -1, -9, -1, -65, -1, -1, -1, -1, -9, -37, -33, 127, -33, 110, -1, -3, -3, -33, -1, -1, -86, -1, -9, -3, -34, -9, -2, -5, -1, -1, -2, -1, -1, -33, -3, -3, 119, -1, -1, -17, -9, -17, -1, -1, 101, -3, -2, 127, -2, -1, -1, -1, 127, 127, -1, -17, 61, -1, -1, -65, 127, -1, 127, -1, -1, 63, 15, -2, -1, -6, -38, -12, -20, -3, -65, 123, -5, -1, -1, 7};
  // {...1 0-bits... 00001000 10000010 00001000 00000100 01000010 01010101 01001000 10000000 00100000 00110000 00000000 00010000 00000000 00000010 00000000 00000000 00000000 00000000 00010000 00100100 00000100 00000001 00000000 10000001 00000000 01000000 01000000 00000110 00000000 00000001 00101010 00000000 00010000 01000000 10000100 00000010 10000000 00100000 00000001 00000000 10000000 00000000 00000000 00000000 01000000 01000000 00000001 00000000 00000000 00001000 00010000 00001000 00000000 00000000 01011001 01000000 10000000 00000001 10000000 00000000 00000000 00000000 00000001 00000001 00000000 00001000 01000001 00000000 00000000 00000010 00000001 00000000 00000000 00000000 00000000 00000010 00001011 10000000 00100000 11100000 10100100 11010001 11001000 01000000 00000010 00000001 00100000 00000000 00000000 0001}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 65, 16, 32, 66, -86, 18, 1, 4, 12, 0, 8, 0, 64, 0, 0, 0, 0, 8, 36, 32, -128, 0, -127, 0, 2, 2, 96, 0, -128, 84, 0, 8, 2, 33, 64, 1, 4, -128, 0, 1, 0, 0, 0, 2, 2, -128, 0, 0, 16, 8, 16, 0, 0, -102, 2, 1, -128, 1, 0, 0, 0, -128, -128, 0, 16, -126, 0, 0, 64, -128, 0, 0, 0, 0, 64, -48, 1, 4, 7, 37, -117, 19, 2, 64, -128, 4, 0, 0, 8};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 16, 0, 0, 0, 64, 0, -48, 32, 56, 0, 0, 0, 16, 8, 0, 0, -128, 0, 0, 64, 2, -127, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, -127, 8, 16, 2, 0, 0, 0, 0, 16, -127, 0, 0, 0, 4, 0, 12, 64, 64, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0, 32, 0, 0, 0, 0, 1, 1, 1, 0, -128, 16, 1, 0, 0, 0, 96, -32, -127, 32, -128, 0, 0, -63, -128, -128, 33, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-35, 17, -37, -1, 79, -81, 82, -36, -1, 53, -4, -85, -1, 127, -3, -1, -1, -1, -81, -73, -106, 95, -106, -35, -2, -1, -1, 63, -49, -82, -112, 108, -1, -69, -47, 60, -1, -17, -41, -1, -11, -1, -65, -1, -1, -1, -49, -17, -4, 127, -17, -3, -1, -1, -37, -6, -3, 127, -4, -35, -1, -1, -1, 127, -1, -1, 119, 126, 127, -5, -1, -5, -1, -2, -1, -1, 94, -43, -1, -1, -9, 106, -50, -22, -1, -45, -26, -5, -11, -17};
  // {11111111 11100110 01100010 01010101 101}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, 103, 70, -86, 5};
  // {00001111 11111101 01101111 11111011 100}
  public static final byte[] GRPSPLIT8 = new byte[] {-16, -65, -10, -33, 1};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {10000101 10100000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {-95, 5, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_72 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_72_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_72_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* term */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.08844441f : 
                    0.11293382f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.0636759f : 
                    -0.0071993717f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.07595252f : 
                    0.060727283f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.00564843f : 
                    0.029915163f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
             (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[13])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.048328567f : 
                    4.746027E-4f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    -0.019273788f : 
                    0.12058063f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    -0.06930998f : 
                    0.07623138f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT14, 720, 0, data[15])) ? 
                    -0.02405691f : 
                    0.0870375f))));
    return pred;
  } // constant pool size = 1000B, number of visited nodes = 15, static init size = 5628B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {36, 108, 48, 80, 0, 53, 79, 102, 65, -70, 58, 4, 17, 17, 0, 96, 96, 8, -80, -56, 90, 0, 42, -118, 35, 20, 0, 81, 81, 20, -18, 89, 61, 30, -24, -21, 46, 20, 41, 17, 8, 0, 64, 16, -60, 4, 48, 1, 3, 1, 0, 74, 0, 0, 22, -51, 0, -128, 15, 4, 32, 34, 0, -95, 7, 2, -88, -64, -14, -123, 64, -126, 65, -95, 0, -128, -95, 102, 72, -92, 0, 127, -25, 88, -122, -65, -108, 6, 59, 100};
  // {11111111 11111100 01011010 01101100 110}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 63, 90, 54, 3};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 64, 0, 0, 0, 8, 0, 0, 64, 0, 0, 10, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 16, 0, 0, 0, -126, 0, 0, 0, 0, 0, 8, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 126, -66, -1, -81, -65, -49, -9, -9, -1, -2, -81, -1, -73, -11, -9, -17, -1, -1, -1, -2, 127, -1, -1, -1, -1, -5, -5, -5, -10, -2, 125, -65, -1, -5, -1, -65, -99, -1, -1, 95, -1, -33, -2, -11, -2, -1, -17, -1, 127, -1, -17, -1, -18, -1, -19, -7, -1, 127, -2, -66, -1, -1, -1, -1, -1, -1, -5, -2, -1, -1, -1, -1, -81, -6, -1, -25, 118, -1, -1, 117, -1, -1, -7, -1, -1, -9, -1, -5, -1};
  // {00011111 10111111 01101010 10011001 000}
  public static final byte[] GRPSPLIT5 = new byte[] {-8, -3, 86, -103, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 12, 32, 0, 0, 4, 0, 2, 1, 0, 2, 0, 16, 1, 0, 0, 0, 0, 32, 0, 10, 0, 8, 2, 0, 16, 0, 0, 64, 0, 32, 8, 24, 0, -128, -23, 2, 0, 0, 0, 0, 0, 0, 0, -64, 0, 16, 0, 0, 0, 0, 64, 0, 0, 4, -127, 0, 0, 12, 0, 32, 32, 0, 0, 4, 0, -128, -64, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -128, 0, 0, 0, 64, -128, -85, 4, 0, 8, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -109, -33, -17, -1, -5, -1, -3, -2, -1, -11, -1, -18, -18, -1, -1, -97, -1, -33, -1, -91, -1, -9, -3, -4, -5, -1, -1, -66, -1, -39, -9, -13, -5, 31, -105, -3, -17, -1, -17, -1, -1, -1, -1, 59, -5, -17, -1, -1, -1, -1, -65, -1, -1, -7, 122, -1, -1, -1, -5, -33, -3, -1, -2, -7, -3, 127, 63, -65, -2, -65, -1, -2, -33, -1, -1, -2, -33, -1, 127, -1, -48, 126, -81, 123, 80, -5, -1, -11, -65};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {2, -112, 67, 0, -12, 66, -80, 25, 24, 0, -128, 16, 0, 76, 10, 8, 16, 0, 64, 32, 5, -32, 5, 17, 0, 0, 4, -92, 36, 73, 1, -126, 2, 70, 17, 68, 81, 106, 0, 0, -78, 5, 48, -63, 10, 1, -128, 9, 0, -92, 0, 48, 0, 16, 32, 18, 4, 0, -128, 32, 65, 4, 1, 0, 0, 32, 0, 4, 1, 0, 3, 5, -128, 88, 9, 0, 24, -88, 32, 14, -86, 0, 48, -89, 8, 0, 0, -127, 4, 16};
  // {01010100 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {42, 12, 0, 0};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-97, -5, -17, -1, -1, -38, -70, -3, -66, 87, -57, -5, -17, -17, -17, -33, -97, -9, 111, -73, -1, -1, -107, -35, -18, -1, -1, -17, -17, -5, 93, -90, -57, -17, -9, 84, -3, -17, -3, -1, -1, -1, -1, -17, -65, -1, -17, -1, -2, -1, -65, -11, -1, -1, -21, -66, -1, 127, -8, -3, -33, -33, -1, 127, -2, -1, 87, -65, -35, -2, -65, -3, -1, -1, -1, 127, 126, -1, -65, 127, -1, 24, -4, -89, 125, 68, -21, -7, -49, -5};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {64, 0, 0, 0, 0, 4, 64, 0, 1, 48, 10, 0, 0, 0, 0, 0, 0, 0, -128, 0, 2, 0, 64, 32, 1, 0, 0, 64, 0, 0, -126, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 32, 0, 0, 1, 0, 0, 0, 2, 0, 64, 2, 0, 0, 0, 0, 0, 0, 64, 16, 0, 4, 3, 0, 0, 3, 0, 0, 32, 0};
  // {00010101 01100010 11110001 01000111 000}
  public static final byte[] GRPSPLIT12 = new byte[] {-88, 70, -113, -30, 0};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -1, -3, -1, -69, -65, -33, -9, -1, -1, -1, -1, -1, -5, -9, -1, -17, -1, -65, -1, -5, 127, -5, -1, -1, -1, -1, 127, -33, -65, -2, 125, -1, -3, -18, -1, -2, -1, -1, -1, -1, -1, -33, 62, -1, -2, -1, -1, -1, -1, -1, -17, -1, -1, -33, -1, -1, -1, -1, -1, -66, -1, -1, -1, -1, -33, -1, -1, -2, -1, -2, -1, 127, -1, -1, -1, -17, -33, -1, -9, -41, -1, -33, -7, -1, -1, -1, 126, -1, -1};
  // {}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -17, -1, -1, -33, -3, 111, -9, -17, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -65, -1, -18, -1, -1, -1, -5, -1, -66, -1, -1, -1, -5, -1, -69, -1, -65, -1, -1, -17, -6, -17, -1, -3, -1, 127, -2, -1, 91, -1, -33, -1, -1, -1, -3, -5, -1, 127, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -2, -1, -9, 127, -33, -5, 125, -1, -1, -2, -9, -1, -1, -1, -1, -1};
}


class GBM_model_python_1589382591366_1_Forest_73 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_73_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_73_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[26]) || data[26 /* revol_util */] <89.35625f ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[13])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.05372445f : 
                    -0.017847208f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.031505737f : 
                    0.113936976f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.07713602f : 
                    0.073950015f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.009169638f : 
                    0.019902328f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.11581641f : 
                    -0.044905216f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.051552467f : 
                    0.062599264f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.12687524f : 
                    0.09785205f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.07962649f : 
                    0.17611164f))));
    return pred;
  } // constant pool size = 910B, number of visited nodes = 15, static init size = 5088B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {82, -10, 101, 80, 100, 83, -7, 127, 121, -6, -79, 80, 1, 76, 26, 104, 112, 0, -16, -64, 10, -32, 36, -70, 19, 20, 4, -11, 61, 25, 110, -38, 118, 14, 123, 83, -2, 108, 8, 17, -96, 1, 32, 96, -100, 5, 16, 25, 1, -88, -48, 56, 0, 16, 50, 29, 78, -128, -114, 5, 65, 38, 1, -95, 67, 33, -88, 69, -78, -112, 1, -126, 65, -7, 5, 0, -72, 76, 104, -68, 72, -1, 98, 63, 14, -75, -116, 0, 23, 32};
  // {00010011 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-56, 12, 0, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-5, -1, -1, -1, -1, -1, -3, -1, -1, -1, -9, -5, -1, -1, -1, -1, -1, -1, -1, -1, -101, -1, -9, -1, -1, -1, -1, -1, -65, -5, -2, -2, -1, 47, 127, 83, -1, -17, -2, -1, -9, -1, -1, -17, -3, -1, -1, -1, -1, -1, -1, -65, -1, -1, -5, -1, -1, -1, -1, -3, -1, -1, -1, -1, -5, -1, -5, 127, -1, -2, -1, -1, -1, -1, -1, 127, -2, -35, -1, -1, 93, -1, -17, -65, 127, -3, -17, -7, -1, -69};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 68, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, -128, -88, 0, 0, 1, 0, 0, 0, 0, 16, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, -128, 64, 0, 0, 0, 0, 0, 0, -128, 0, 34, 0, 0, 35, 0, -111, 0, -128, 0, 0, 5, 8, 64};
  // {00011111 11111110 11111010 00110111 001}
  public static final byte[] GRPSPLIT4 = new byte[] {-8, 127, 95, -20, 4};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {66, 32, 33, 0, 64, 2, 0, 0, 8, 64, 1, 80, 0, 72, 2, 8, 0, 0, 32, 0, 2, 64, 0, 0, 1, 16, 0, -64, 1, 0, 4, 0, 0, 0, 64, 64, 16, 64, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, -128, -112, 32, 0, 0, 0, 0, 4, -128, -128, 1, 0, 0, 0, 0, 64, 32, -128, 68, -126, -128, 0, 2, 64, 64, 0, 0, 24, 64, 32, -128, 0, 12, 2, 33, 4, -96, -120, 0, 1, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-67, 95, -98, -1, -65, -3, 119, -11, -41, -65, -2, -81, -1, -73, -19, -41, -1, -1, -33, 127, -3, -65, -5, -17, -20, -21, -5, -117, -2, -1, -47, -1, -69, -1, -81, -65, 47, -97, -1, -17, -33, -1, -1, -33, 99, -2, -17, -1, -1, 87, -17, -33, -1, -17, -1, -17, -5, 127, -1, -6, -2, -1, -1, -2, -67, -33, 127, -69, 125, 111, -2, -3, -66, -81, -5, -1, -57, -5, -33, 95, -1, -13, -3, -52, -15, 127, 119, -1, -2, -33};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 2, 0, 64, 4, 6, 0, 0, 0, 10, 4, 0, 0, 0, 0, 0, 8, 0, -128, 101, 0, 65, 1, 32, 0, 0, 0, 64, 4, -127, 1, 9, -48, -128, 44, 1, 16, 0, 0, 10, 0, 80, -128, 0, 0, -96, 0, 0, 0, 0, 64, 0, 0, 4, 2, 0, 0, 1, 32, 0, 0, 0, 0, 4, 2, 0, -128, 1, -63, 64, 4, 0, 0, 8, -128, 65, 32, 0, 2, -93, 0, 9, -64, -128, 10, 17, 7, 40, 20};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-115, -39, -33, -1, -1, -20, -66, -42, -10, 69, -49, -1, -1, -6, -9, -1, -81, -1, 47, -65, -11, 31, -5, 117, -1, -1, -1, 63, -17, -17, -1, 101, -1, -13, -108, -20, -49, -1, -1, -1, -1, -1, -33, -1, -1, -2, -1, -18, -1, 127, -65, -57, -1, -1, -3, -2, -5, 127, 125, -1, -65, -1, -1, -33, -2, -1, 79, -2, 95, -1, -2, -1, -65, -58, -1, -1, 111, -9, -33, 103, -65, 108, -97, -9, -13, 90, -9, -1, -7, -1};
  // {00001010 11000111 10011000 10000010 111}
  public static final byte[] GRPSPLIT9 = new byte[] {80, -29, 25, 65, 7};
  // {11110011 10011000 10101010 01111101 101}
  public static final byte[] GRPSPLIT10 = new byte[] {-49, 25, 85, -66, 5};
  // {11111010 01111111 11000101 11000101 110}
  public static final byte[] GRPSPLIT11 = new byte[] {95, -2, -93, -93, 3};
  // {11111111 11111111 11111111 11111111 11111101 11011111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11011101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111110 01111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111110 11111101 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 10111111 11111111 11111111 11111100 11111111 10111111 11111111 01111111 11111111 11011111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -1, -1, -65, -5, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, 127, -69, -1, -1, -1, -1, -1, -1, -1, -1, -5, 127, -2, -1, -1, 127, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, 127, -65, -1, -1, -1, -1, -1, -65, -1, -1, -1, -3, -1, -1, 63, -1, -3, -1, -2, -1, -5};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 2, 0, 0, 4, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, -127, 1, 1, -112, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 64, 0, 0, 0, 0, 0, 1, 32, 0, 0, 2, 0, 0, -128, 0, 8, 1, 0, 8, 4};
}


class GBM_model_python_1589382591366_1_Forest_74 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_74_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_74_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[26]) || data[26 /* revol_util */] <28.6875f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.109416105f : 
                    -0.075301446f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.035651207f : 
                    0.04141693f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.08419766f : 
                    0.058269054f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    0.030702682f : 
                    0.103667915f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.07277868f : 
                    -0.0029369313f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.039531f : 
                    0.036433093f)) : 
             (data[26 /* revol_util */] <29.000439f ? 
                0.18311f : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                    -0.01165762f : 
                    0.017643614f))));
    return pred;
  } // constant pool size = 725B, number of visited nodes = 14, static init size = 4002B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 9, 7, 16, -112, 2, -88, 91, -112, 40, 0, 64, 1, 64, 8, 0, 0, 0, -96, -128, 97, 64, 2, 3, 2, 16, 0, -64, 64, 0, 70, 10, 64, -60, -120, -103, 9, 8, 0, 0, 8, 0, 0, 16, 68, 4, 0, 0, 0, 5, 0, 0, 0, 16, 32, -55, 0, 0, 5, 0, 0, 0, 0, 33, 2, 0, 20, -128, -16, 4, 0, 0, -64, -80, 4, 0, 88, 40, 32, 64, 1, 12, -110, 16, 2, 10, -128, -128, 37, 16};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-81, 63, -17, -1, -69, -6, -21, -5, -65, -65, -12, -17, -1, 122, -1, -41, -97, -1, -1, -9, -13, -1, -42, -9, -33, -1, -5, -1, -25, 126, 95, 111, -10, -59, -33, -7, -37, -19, -9, -1, -3, -1, -17, -65, -1, -1, -33, -5, -1, 127, -1, -33, -1, -1, -1, -1, -5, -1, -3, -33, -2, -35, -1, 127, -65, -1, -41, -65, -1, 127, -67, -5, -2, -74, -1, -1, -1, -4, -1, 123, 85, 31, -73, -65, -1, 126, -5, -8, -11, -5};
  // {11111110 00000101 00001011 01101011 111}
  public static final byte[] GRPSPLIT2 = new byte[] {127, -96, -48, -42, 7};
  // {00000000 00100100 00010001 00000010 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 36, -120, 64, 0};
  // {00011101 10111010 01000011 00100001 000}
  public static final byte[] GRPSPLIT4 = new byte[] {-72, 93, -62, -124, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 9, 5, 0, -128, 0, 0, 0, -128, 32, 0, 64, 1, 64, 0, 0, 0, 0, 32, 0, 1, 0, 0, 1, 0, 16, 0, -64, 64, 0, 0, 2, 0, 64, 0, -120, 1, 8, 0, 0, 8, 0, 0, 0, 64, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -120, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 20, 0, -128, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 8, 18, 0, 0, 2, 0, 0, 0, 16};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 8, 2, 0, 0, 0, -128, 9, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 32, 0, 0, 0, 2, 0, 0, 0, 64, 0, 64, 8, 0, 0, -128, -103, 8, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 5, 0, 0, 0, 16, 32, 65, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -128, -48, 4, 0, 0, 64, -128, 0, 0, 0, 32, 0, 0, 1, 0, 0, 16, 0, 8, 0, 0, 36, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {50, -26, -80, 64, 100, 69, 80, 4, 104, 18, 3, 20, 16, -108, 16, 104, 64, 8, 0, 104, 30, -128, 33, 56, 33, 4, 4, 53, 60, -39, -87, -111, 59, 62, 119, 102, 52, 118, 40, 17, -78, 1, 112, -32, 24, 1, 48, 13, 0, -88, -128, 104, 0, 1, 18, 20, 78, -128, -118, 39, 97, 38, 1, -128, 68, 33, -88, 69, 2, -64, 67, -124, 1, 73, 9, -128, -55, 103, 72, -100, -22, -16, 108, -50, -116, -107, 20, 7, 26, 36};
  // {00110000 01101101 10110110 11011110 100}
  public static final byte[] GRPSPLIT8 = new byte[] {12, -74, 109, 123, 1};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -9, -2, -5, -1, -17, -43, -27, 127, -65, -1, -65, -2, -65, -3, -1, -17, -1, -1, 127, -2, -1, -9, -1, -1, -1, -1, -65, -1, -1, -7, -11, -65, -65, -9, 118, 119, -9, -1, -1, -1, -1, -1, -1, 123, -1, -1, -17, -1, -2, -65, -17, -1, -17, -1, 62, -1, -1, -1, -1, -1, -1, -1, -33, -3, -1, -1, 127, 94, -17, -1, -1, -1, -33, -1, -1, -1, -1, -33, -1, -2, -3, -20, -49, -3, -43, 119, 127, -38, -1};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 2, 4, 0, 16, 14, 2, 1, 64, -72, 64, 0, 73, 10, 0, 16, 0, 0, -128, 1, 0, 12, -127, 16, 0, 0, 64, 0, 0, 70, 10, 0, 64, 8, 16, -120, 8, 2, 0, 0, 0, 0, 0, -128, 0, 0, 16, 2, 0, 64, 16, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -95, 1, 0, 0, 0, 0, 0, 0, 0, 0, 32, 2, 1, 2, 19, 32, 0, 42, -120, -128, 37, 0};
  // {11111111 11011111 11101001 11100001 111}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -5, -105, -121, 7};
}


class GBM_model_python_1589382591366_1_Forest_75 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_75_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_75_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <21928.0f ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.0855084f : 
                    -0.011729918f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.03216995f : 
                    0.030246496f)) : 
             (!Double.isNaN(data[8 /* emp_length */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.037650608f : 
                    0.03222916f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.013131393f : 
                    0.043674394f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.099169016f : 
                    -0.05204689f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.020882707f : 
                    0.08141376f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.020664187f : 
                    0.10761053f) : 
                 (!Double.isNaN(data[8 /* emp_length */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[8])) ? 
                    0.048064772f : 
                    0.20688638f))));
    return pred;
  } // constant pool size = 909B, number of visited nodes = 15, static init size = 5082B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {54, -14, -75, 80, -32, 99, -71, 95, 8, -8, -79, 84, 1, 76, 10, 104, 96, 8, -112, -24, 115, -96, 108, -71, 49, 20, 0, 113, 125, -39, -82, -45, 111, -84, -7, -1, -82, 62, 40, 17, -72, 1, 48, -16, -114, 1, 48, 28, 1, -116, -48, 58, 0, 17, 38, -99, 14, 0, -113, 38, 97, 38, 1, -95, 67, 32, -88, 5, 19, 80, 3, -123, -63, -7, 0, 0, -23, -20, 104, -100, 43, -9, 119, -114, -122, -7, -103, 3, 58, 116};
  // {11011100 01111001 10010100 10010110 111}
  public static final byte[] GRPSPLIT1 = new byte[] {59, -98, 41, 105, 7};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-65, -5, -1, -1, -1, -5, -67, -1, -82, -1, -1, -1, -17, -1, -1, -1, -17, -1, -33, -1, -13, -65, -1, -1, -1, -1, -1, 127, -1, -1, -66, -9, -1, -65, -5, -1, -1, -65, -1, -1, -3, -1, -1, -2, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -17, -1, -65, 127, -1, -2, -1, -1, -1, -1, -1, -1, -1, 127, -33, 123, -1, -3, -1, -1, -1, -1, -1, -4, -1, -1, -1, -9, -1, -33, -1, -3, -5, -1, -5, -1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 4, 0, 4, 16, 20, 66, 0, 17, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 12, 0, 2, 0, 0, 0, 0, -128, 0, 0, 65, 8, 0, 64, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 16, 0, 0, -128, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, -128, -124, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 8, 0, 32, 0, 2, 4, 0, 4, 0};
  // {01010100 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {42, 12, 0, 0};
  // {00000000 01000001 00001000 00000000 00000010 11000100 10000000 10101010 00010000 00010010 00001101 00000000 10000000 00100000 00000000 00010100 00000000 00010000 00000001 00010100 10001110 00000001 00000110 00010000 00000000 00101000 00000000 10001010 10000010 10010000 01010000 10000001 10000100 00110001 00010100 10011000 00100000 01100100 00010100 10000000 00011100 10000000 00001000 00000101 00010000 00000000 00001100 00110000 10000000 00100000 00000000 00010000 00000000 00000000 01100100 00010000 01100000 00000000 01010001 01100000 00000000 00000100 10000000 00000100 10000010 00000000 00000000 00000000 01000000 00001010 00000000 10100000 10000000 00000110 00000000 00000000 10000000 00010110 00000100 00110000 10010100 01100000 00001000 01000001 00000000 00000111 10011000 01000000 00001000 00100000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, -126, 16, 0, 64, 35, 1, 85, 8, 72, -80, 0, 1, 4, 0, 40, 0, 8, -128, 40, 113, -128, 96, 8, 0, 20, 0, 81, 65, 9, 10, -127, 33, -116, 40, 25, 4, 38, 40, 1, 56, 1, 16, -96, 8, 0, 48, 12, 1, 4, 0, 8, 0, 0, 38, 8, 6, 0, -118, 6, 0, 32, 1, 32, 65, 0, 0, 0, 2, 80, 0, 5, 1, 96, 0, 0, 1, 104, 32, 12, 41, 6, 16, -126, 0, -32, 25, 2, 16, 4};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {50, 96, -95, 80, 32, 0, 57, 2, 0, -96, 1, 84, 0, 0, 0, 64, 0, 0, 16, -64, 0, 32, 40, -128, 49, 0, 0, 0, 40, 16, -96, 82, 78, 32, 0, -26, 2, 0, 0, 0, -128, 0, 32, 80, -122, 0, 0, 16, 0, -128, -48, 48, 0, 0, 0, 21, 8, 0, 1, 32, 64, 36, 0, -128, 2, 32, -120, 5, 17, 0, 3, 0, -64, -120, 0, 0, -96, -128, 72, -112, 34, -111, 103, 8, -122, 17, -128, 1, 42, 48};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 2, 66, 0, 4, 64, 64, 32, 81, 0, 2, 0, 0, 0, 0, 0, 0, 0, 32, 0, 76, 64, 0, 2, 0, 0, 4, -128, 0, 0, 1, 8, 16, 8, 1, 0, 81, 64, 0, 0, 2, 4, 64, 1, 16, 4, 0, 1, 0, 1, 0, 0, 0, 0, 16, 4, 64, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -96, -124, 0, 0, 0, 0, 12, -128, 0, 2, 0, 96, 64, 0, 40, 97, 0, 4, 0, -124, 37, 0};
  // {00000010 10001000 00000000 00000000 00000000 00101000 00100000 00000000 00000101 00001000 00010000 00000000 00000000 00000000 00001000 00000000 00001000 00000000 00000010 00000000 01000000 00000000 10000000 10000000 10000000 00000000 00000000 00100000 00000010 00000000 00000011 00000001 00000000 01000010 01110010 00010010 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 10000011 00000000 00000010 00000010 01000000 00000000 00000000 10000000 00000000 00010011 00000000 00000000 00010000 00000000 00100110 00100000 00000000 00100000 10000000 00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {64, 17, 0, 0, 0, 20, 4, 0, -96, 16, 8, 0, 0, 0, 16, 0, 16, 0, 64, 0, 2, 0, 1, 1, 1, 0, 0, 4, 64, 0, -64, -128, 0, 66, 78, 72, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -63, 0, 64, 64, 2, 0, 0, 1, 0, -56, 0, 0, 8, 0, 100, 4, 0, 4, 1, 0, 1, 0, 0};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-35, -33, -17, -1, 31, -4, -58, -4, -9, -41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -9, -9, -1, -1, -1, -1, -17, 111, -1, -67, -1, -1, -33, 127, -1, -1, -9, -1, -1, -1, -17, -1, -1, -1, -17, -5, -2, -1, -1, -17, -1, -1, -1, -1, -11, -1, -3, -1, -1, -1, -1, -33, -1, -1, 127, -1, -1, -1, -3, -5, -65, -73, -1, -1, -33, -33, -65, -1, -36, 127, -17, -5, -1, -3, -9, -1, -1, -17};
  // {01000000 01001100 00101100 01111001 000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 50, 52, -98, 0};
  // {00011000 10001010 00010010 00001011 000}
  public static final byte[] GRPSPLIT11 = new byte[] {24, 81, 72, -48, 0};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -65, -1, -5, -65, -65, -33, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -69, -1, -1, -3, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -5, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, 127, -1, -1, -1, -1, -9, 127, -1, -1, -1, -1, -65, -1, -9, -1, -1, -1, -1, -1, -6, -1};
  // {01001110 11110000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {114, 15, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_76 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_76_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_76_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* annual_inc */] <42339.844f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (data[7 /* emp_title */] <433.5f ? 
                    0.14556485f : 
                    -0.08216872f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.019567106f : 
                    0.10989127f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.068958245f : 
                    0.069603145f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    0.013212768f : 
                    0.08291241f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.06324031f : 
                    -0.01659833f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.058438115f : 
                    0.041889805f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    -0.03998056f : 
                    0.027358485f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.011320979f : 
                    0.08177072f))));
    return pred;
  } // constant pool size = 905B, number of visited nodes = 15, static init size = 5058B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 82, 2, 20, 96, 99, -55, 112, 16, 82, -110, 64, 17, 88, 0, 0, 0, 8, -16, -128, 10, 0, 13, 24, 50, 20, 0, 112, 8, 5, 103, -118, 68, -16, 53, 12, -114, 56, 42, 1, 26, 1, 80, -48, 66, 4, 16, 21, 3, -123, -128, 16, 0, 1, 34, -60, 12, -128, 0, 3, 33, 2, 1, 32, 0, 0, 20, 64, -112, -48, 3, 6, 64, -31, 0, 0, -112, 65, 64, 30, 106, 108, 125, -121, -124, -114, 5, -122, 60, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-37, -5, -49, -1, -1, -5, -23, -4, -97, 119, -1, -17, -1, 123, -1, -9, -17, -1, -1, -73, -6, 63, -65, -3, -2, -1, -1, 127, -34, 127, -9, -18, -18, -7, -9, 62, -65, -7, -1, -1, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -33, -1, -1, -5, -1, -1, -1, -2, -37, -1, -33, -1, -2, -1, -1, 95, 126, -33, -2, -1, -1, 126, -1, -5, -1, -33, -35, -1, 127, -1, 124, -1, -73, -3, -1, 111, -2, -3, -17};
  // {00000000 00000000 00000011 00110000 000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, -64, 12, 0};
  // {01011011 11111000 00101011 00000000 001}
  public static final byte[] GRPSPLIT3 = new byte[] {-38, 31, -44, 0, 4};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 16, 32, 3, 8, 0, 0, 18, 0, 64, 16, 64, 0, 0, 0, 8, 32, -128, 10, 0, 8, 0, 32, 0, 0, 64, 8, 4, 36, -126, 4, 64, 4, 8, -126, 0, 2, 0, 26, 0, 0, 0, 66, 4, 16, 1, 3, -127, -128, 0, 0, 0, 32, 0, 12, 0, 0, 1, 0, 0, 0, 0, 0, 0, 16, 0, 0, -64, 0, 6, 64, 64, 0, 0, 16, 64, 64, 18, 0, 8, 68, 6, -124, 10, 0, -128, 40, 0};
  // {00001000 01001010 01000000 00000000 00000110 00000110 10000011 00001010 00001000 00000010 00001000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 10100000 00001000 00000000 00000000 00000000 00000010 00000000 10000000 10000010 00010000 00000010 00000001 10000100 00100000 01110000 00000000 00010000 10000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00001000 00000000 10000000 01000000 00000011 00000000 00000001 00000000 00000000 10000000 01000000 00000000 00000100 00000000 00000000 00100000 00000000 00001001 00001000 11000000 00100000 00000000 00000101 00000000 00000000 00000000 10000000 00000000 00100000 01010100 00100100 10010100 10100000 00000000 00000001 00100000 01100000 00101000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 82, 2, 0, 96, 96, -63, 80, 16, 64, 16, 0, 1, 0, 0, 0, 0, 0, -128, 0, 0, 0, 5, 16, 0, 0, 0, 64, 0, 1, 65, 8, 64, -128, 33, 4, 14, 0, 8, 1, 0, 0, 0, 64, 0, 0, 0, 16, 0, 0, 0, 16, 0, 1, 2, -64, 0, -128, 0, 0, 1, 2, 0, 32, 0, 0, 4, 0, -112, 16, 3, 4, 0, -96, 0, 0, 0, 1, 0, 4, 42, 36, 41, 5, 0, -128, 4, 6, 20, 0};
  // {01100100 00100101 10101111 00000010 00101001 10101000 01101100 11110000 10010110 00010101 01000100 00101000 00000000 00100001 01011000 00010010 00001010 00000000 00000010 00010111 10111110 00000111 01000110 11000100 10000000 00000000 00100000 10100001 10101110 00011011 00010001 10001010 11011100 01110000 01011011 11011011 10001110 01100010 10000000 00000000 00000100 00000000 00000100 00000100 00011000 10000000 00000101 00000000 00000000 00010100 00001000 01010110 00000000 00000000 00101000 10111000 01000010 00000000 10010001 00100100 00000000 00100100 00000000 10000001 10100010 11000100 00010101 10100001 11000100 10100001 00000010 10000001 10000001 00011000 10110000 00000001 10010110 01010101 00010110 00100101 10000001 11001111 11000100 00011110 01110000 10001100 00001001 10100000 11100000 00101000}
  public static final byte[] GRPSPLIT6 = new byte[] {38, -92, -11, 64, -108, 21, 54, 15, 105, -88, 34, 20, 0, -124, 26, 72, 80, 0, 64, -24, 125, -32, 98, 35, 1, 0, 4, -123, 117, -40, -120, 81, 59, 14, -38, -37, 113, 70, 1, 0, 32, 0, 32, 32, 24, 1, -96, 0, 0, 40, 16, 106, 0, 0, 20, 29, 66, 0, -119, 36, 0, 36, 0, -127, 69, 35, -88, -123, 35, -123, 64, -127, -127, 24, 13, -128, 105, -86, 104, -92, -127, -13, 35, 120, 14, 49, -112, 5, 7, 20};
  // {00101100 00000110 00110101 11100011 000}
  public static final byte[] GRPSPLIT7 = new byte[] {52, 96, -84, -57, 0};
  // {11111101 01111101 11111111 11111111 11111101 11111111 01111100 11111001 11110111 10111101 01110111 11111111 01110111 11111101 11111111 11111111 11111011 11101111 11110011 11111111 11111111 11111111 11101111 11111110 10111011 11011111 11111111 11111101 11101111 01111111 10011111 11101111 11011111 11111010 01011011 11111011 10011111 11111011 10101111 11111111 11101111 11111111 11111101 11110101 10111111 11111111 11110111 11111111 01111111 01111111 11111101 11110111 11111111 01111111 10111111 11111111 11101111 11111110 11111111 11111111 01111111 10111111 11111111 11111011 11111111 11111111 11010111 11111111 11111110 11111101 00111111 11011111 11111111 01111000 11111111 11111111 11111110 01111111 11111111 11101111 11101101 11001111 11000101 11111111 11111111 11101111 01011111 10111111 11101111 11111111}
  public static final byte[] GRPSPLIT8 = new byte[] {-65, -66, -1, -1, -65, -1, 62, -97, -17, -67, -18, -1, -18, -65, -1, -1, -33, -9, -49, -1, -1, -1, -9, 127, -35, -5, -1, -65, -9, -2, -7, -9, -5, 95, -38, -33, -7, -33, -11, -1, -9, -1, -65, -81, -3, -1, -17, -1, -2, -2, -65, -17, -1, -2, -3, -1, -9, 127, -1, -1, -2, -3, -1, -33, -1, -1, -21, -1, 127, -65, -4, -5, -1, 30, -1, -1, 127, -2, -1, -9, -73, -13, -93, -1, -1, -9, -6, -3, -9, -1};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {64, 81, 2, 0, 64, 0, 65, 96, 0, 64, 17, 0, 0, 1, 0, 0, 0, 0, 48, 0, 0, 0, 8, -128, 0, 0, 0, 64, 0, 1, 6, 8, 0, 0, 37, 0, 0, 0, 0, 0, 8, 0, 64, 80, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 32, 0, 0, 0, 64, -128, 64, 3, 4, 0, 1, 0, 0, 0, 0, 0, 8, 66, 4, 20, -128, -128, 72, 9, -128, 0, 0};
  // {00000011 00001011 11001000 01011101 110}
  public static final byte[] GRPSPLIT10 = new byte[] {-64, -48, 19, -70, 3};
  // {11011111 11111111 01110001 11111111 11011110 01110111 10010111 11101111 11101001 11111010 11111011 11011111 11111111 11111110 11110111 11111111 11111101 11111111 11111111 11111011 11000101 11111101 11111011 00111011 01111111 11111111 11111111 11011111 01110011 11110101 11101111 11111101 11111111 10011111 10100100 11110111 01111111 11011111 11111111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 11111111 11111111 10101111 11111111 11111111 11111111 01001111 10111111 11111111 11111110 11111111 11111111 11111111 11111111 11111110 11111111 11111011 11101111 11011110 11111111 11111111 11111101 11111111 11111110 11111111 11111111 11111110 01111011 11111110 11111101 11111111 01111111 11111101 11111011 11100001 11001111 01110111 11111110 01111111 11111111 11111111}
  public static final byte[] GRPSPLIT11 = new byte[] {-5, -1, -114, -1, 123, -18, -23, -9, -105, 95, -33, -5, -1, 127, -17, -1, -65, -1, -1, -33, -93, -65, -33, -36, -2, -1, -1, -5, -50, -81, -9, -65, -1, -7, 37, -17, -2, -5, -1, -1, -33, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -11, -1, -1, -1, -14, -3, -1, 127, -1, -1, -1, -1, 127, -1, -33, -9, 123, -1, -1, -65, -1, 127, -1, -1, 127, -34, 127, -65, -1, -2, -65, -33, -121, -13, -18, 127, -2, -1, -1};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {6, 0, 113, 0, 0, 1, 4, 1, 104, -96, 32, 4, 0, -128, 0, 8, 0, 0, 0, 0, 8, 0, 32, 34, 1, 0, 0, -124, 49, 0, 8, 1, 0, 6, 88, -112, 1, 4, 0, 0, 32, 0, 0, 0, 8, 0, 32, 0, 0, 0, 0, 10, 0, 0, 0, 20, 0, 0, -128, 32, 0, 32, 0, -128, 0, 32, 8, -124, 0, 0, 64, 0, -128, 0, 0, -128, 33, -128, 0, 0, -127, 64, 32, 80, 8, 49, -128, 1, 0, 16};
}


class GBM_model_python_1589382591366_1_Forest_77 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_77_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_77_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[14 /* title */] <4977.5f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (data[1 /* funded_amnt */] <4408.5f ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                    -0.10097542f : 
                    0.013598518f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.049905498f : 
                    -9.0945285E-4f)) : 
             (data[10 /* annual_inc */] <26554.688f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(717, 1, data[15]) || (GenModel.bitSetIsInRange(717, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 717, 1, data[15])) ? 
                    -0.053188466f : 
                    0.13858816f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(717, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 717, 1, data[15])) ? 
                    -0.01811546f : 
                    0.014769525f))) : 
         (Double.isNaN(data[14 /* title */]) || !GenModel.bitSetIsInRange(768, 4978, data[14]) || (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 768, 4978, data[14])) ? 
             (!Double.isNaN(data[14 /* title */]) && (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 768, 4978, data[14])) ? 
                 (!Double.isNaN(data[14 /* title */]) && (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 768, 4978, data[14])) ? 
                    -0.12603575f : 
                    -0.11100288f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.06923472f : 
                    0.11762365f)) : 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[14 /* title */]) && (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT10, 768, 4978, data[14])) ? 
                    -0.10522495f : 
                    0.13739598f) : 
                 (Double.isNaN(data[14 /* title */]) || !GenModel.bitSetIsInRange(768, 4978, data[14]) || (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT11, 768, 4978, data[14])) ? 
                    0.17473373f : 
                    0.28514734f))));
    return pred;
  } // constant pool size = 1184B, number of visited nodes = 15, static init size = 6732B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {22, -62, -29, 80, 64, 39, 43, 103, 120, 8, -126, 4, 17, 72, 24, 32, 64, 8, 48, -24, 1, 0, 32, -93, 17, 20, 4, 21, 112, 13, -90, -37, 43, 78, -31, -88, -113, 8, 40, 17, -102, 1, 96, -48, -106, 5, 16, 5, 0, 41, -128, 10, 0, 16, 34, 13, 72, -128, -118, 37, 1, 34, 0, 0, 66, 33, 32, 0, 48, -128, 67, -122, -63, 8, 5, 0, -23, 12, 40, 48, 99, 20, 62, 44, 0, -40, -108, 6, 7, 32};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -13, -21, -1, 95, -65, -69, -17, -1, -83, -1, -81, -1, 111, -3, -9, -17, -1, 127, -1, -71, -1, -2, -1, -35, -1, -1, 63, -9, -17, -74, -1, -69, 79, -7, -83, -113, -67, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -5, -1, -1, -1, -65, -1, -1, -33, -1, -1, 119, 63, 125, -6, -1, -1, -1, -66, -1, -1, -17, -3, -65, 115, -1, 125, -65, -2, -7, -6, -10, 127, -1, -17};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -5, -5, -17, -1, -5, -9, -1, 63, -25, -1, -1, 107, -3, -1, -33, -1, -65, -1, -59, -1, -5, -1, -1, -1, -1, -1, -1, -17, -1, -1, -17, -17, -1, -6, -17, -65, -4, -1, -1, -1, -1, -33, -65, -1, -1, -17, -4, 127, -17, -1, -1, -2, -1, -81, -3, -1, -2, -3, -1, -1, -1, -2, -5, -3, -21, -6, -1, -17, -1, -1, -1, -1, -1, -1, -1, 95, -1, -1, -9, -10, -1, -17, 127, -34, -1, -2, -25, -1};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 1, 1, 0, 32, 16, 0, 0, 8, 0, 1, -128, 8, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 65, 68, 0, -96, 80, 20, 64, 0, 0, 0, 0, 0, 16, 72, 0, 0, -128, 2, 0, 0, 0, 4, 0, 0, 16, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -64, 0, 3, 32, 0, 0, 0, 0, 2, 16, 0, 32, 8, 0, 16, 0, 0, 0, -125, 0, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {-10, -2, -2, -9, -1, -18, -1, -1, -9, -1, -65, 127, -9, -1, -5, -17, -1, -1, -1, -1, -1, -1, -17, -1, -1, -3, -1, -1, -1, -3, -66, -70, -1, 95, -65, -21, -65, -1, -17, -1, -65, -1, -17, -73, -1, -1, 127, -3, -1, -1, -1, -5, -1, -9, -1, -1, -5, -65, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -65, -1, -4, -33, -1, -1, -1, -1, -3, -1, -1, -33, -9, -1, -1, -1, -1, -1, 124, -1, 31};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 16, 16, 64, 1, -128, 97, 32, 4, 0, 0, 0, 4, 5, -128, -64, 8, 49, 0, 8, 0, 4, 0, 0, 80, -64, 0, 33, 33, 114, 0, 0, 0, 33, 0, 64, -128, 34, 14, 32, 8, 0, 66, 0, -126, -128, 32, 0, 3, -128, 64, 48, 0, 0, 9, 68, 2, 56, -128, 0, 0, 0, -128, 0, 56, -127, -108, 0, 16, 24, 0, 16, -128, 0, 64, 0, 0, 64, 32, 0, 1, 0, 32, 64, 0, -96, 64, 64, 32, 0, 2, 0, 0, 32, 17, 4};
  // {...4978 0-bits... 01111111 10101000 11011100 11111110 11100110 11101111 11110110 01111111 10111011 11100100 10100101 11111011 00110101 11111110 10111011 00101111 01111010 10111110 10100111 10010110 10011010 10111110 11111110 11101111 10011110 11101111 11101011 10101111 10101100 11101111 01111111 00111001 10111101 10001101 11111111 11001011 01111001 01111101 01110101 11101101 11111111 01101110 11111010 01111001 11101111 10110101 00111100 10001111 11011101 01011011 11111011 11111101 00001011 11101100 11010011 10101110 01010100 00111111 00110101 10101101 11101110 11111000 01110011 11001101 00111101 11010011 10101011 11111111 00101110 11011111 11111011 01111011 11111001 01100100 01011011 11101101 00101111 11010011 10101111 11110010 10001101 00010001 10010111 10010011 01011010 10110101 10101011 10011110 01100100 10111111 01011011 01010010 10111101 01111101 11111110 01111100}
  public static final byte[] GRPSPLIT6 = new byte[] {-2, 21, 59, 127, 103, -9, 111, -2, -35, 39, -91, -33, -84, 127, -35, -12, 94, 125, -27, 105, 89, 125, 127, -9, 121, -9, -41, -11, 53, -9, -2, -100, -67, -79, -1, -45, -98, -66, -82, -73, -1, 118, 95, -98, -9, -83, 60, -15, -69, -38, -33, -65, -48, 55, -53, 117, 42, -4, -84, -75, 119, 31, -50, -77, -68, -53, -43, -1, 116, -5, -33, -34, -97, 38, -38, -73, -12, -53, -11, 79, -79, -120, -23, -55, 90, -83, -43, 121, 38, -3, -38, 74, -67, -66, 127, 62};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, -65, -65, 127, -1, -1, -1, -2, -1, -1, -1, -1, -3, -1, -33, -1, -1, -1, -1, -5, -1, -3, -1, -1, -1, -1, -1, -11, -1, -9, -1, -1, -1, -7, -1, -33, -1, -65, -1, -73, -1, -2, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -4, -9, -1, 127, -1, -1, -1, -1, -1, -97, -2, -5, -65, -1, -3, -1, -11, -1, -1, -1, -1, -26, -5, -1, -1, -53, -1, -17, -3, -85, -1, -1, -2, -1, -1, -1, 126, -1, -34, -1, -1, -65, -1, 127};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 20, 0, 4, 0, 0, 64, 0, 1, 48, 24, 16, 0, -108, 2, 8, 0, 0, 0, 0, 7, 0, 4, 8, 32, 0, 0, -128, 8, -112, 0, 0, 16, 0, 11, 16, 0, 64, 0, 0, 0, 0, 16, 0, 64, 0, 0, 0, 1, 0, 16, 32, 0, 1, 16, 0, 2, 0, 0, 0, 0, 0, 0, 33, 0, 2, 8, 5, -126, 0, 0, 0, 0, 96, 0, 0, 16, 2, 96, 4, 8, 32, 32, 0, 0, 32, 1, -128, 32, 80};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-65, -33, -1, -1, 111, -1, -1, -1, -2, -1, -3, -65, -1, -1, -1, -1, -65, -1, 127, -1, -33, -1, -1, -1, -35, -1, -1, -1, -1, -1, 127, -1, -1, -1, -41, -1, -17, -65, -1, -1, -1, -1, -1, -33, -1, -3, -1, -1, -1, -5, -1, -3, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -4, -1, -1, -1, -1, -1, -1, 127, -1, -17, -1, 127, -9, 118, -1, -37, -9, 127, -77, -1};
  // {...4978 0-bits... 10111111 11110111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT10 = new byte[] {-3, -17, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 1, 0, 0, 32, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 32, 0, 18, 0, 0, 0, 0, 0, 0, -128, 32, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 9, 0, 0, 8, -128, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_78 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_78_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_78_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.057310186f : 
                    -0.010508825f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.029996488f : 
                    0.07423378f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.06025488f : 
                    0.031481903f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.009123038f : 
                    0.034697615f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.12845299f : 
                    -0.06906204f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    -0.053709716f : 
                    0.11807729f)) : 
             (data[17 /* dti */] <8.434688f ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(34, 0, data[6]) || (GenModel.bitSetIsInRange(34, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 34, 0, data[6])) ? 
                    0.043064803f : 
                    0.17099449f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(702, 6, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 702, 6, data[15])) ? 
                    -0.09452883f : 
                    0.0987908f))));
    return pred;
  } // constant pool size = 908B, number of visited nodes = 15, static init size = 5076B
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {6, -48, -11, 80, -32, 51, -3, 125, 56, 120, -110, 84, 1, -60, 8, 96, 64, 8, 112, -64, 79, 96, 9, 18, 33, 20, 4, 85, 113, -56, -20, -37, 90, 42, 123, -37, 111, 104, 40, 17, -70, 1, 112, -64, -124, 0, 32, 1, 1, -127, -64, 42, 0, 16, 50, -108, 76, -128, -113, 37, 65, 38, 1, -127, 70, 33, 56, -60, 18, 81, 65, 6, -127, -87, 1, 0, -88, 106, 104, -92, 73, 53, 122, 61, -122, 29, -127, -123, 35, 48};
  // {00000000 11000001 01011100 00001001 000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -125, 58, -112, 0};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-81, -37, -1, -5, -1, -5, -3, -1, -2, 127, -9, -1, -1, -1, -1, -9, -33, -1, 127, -9, -1, -1, -3, -1, -1, -1, -1, 127, -1, -5, -3, -1, -1, 63, -5, -33, -1, -1, -2, -1, -1, -1, -1, -1, -65, -1, -17, -1, -1, -5, -17, -65, -1, -1, -1, -2, -1, -1, -1, -3, -1, -1, -1, -1, -2, -1, -5, -1, -1, -1, -1, -1, -65, -1, -1, 127, -2, -5, -1, -9, -1, -1, -2, -1, -1, -35, -5, -3, -1, -65};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 36, 0, 4, 0, 4, 2, 0, 1, -128, 0, 0, 0, 0, 0, 8, 0, 0, -128, 8, 16, 0, 0, 0, 0, 0, 0, -128, 0, 0, 2, 0, 0, -128, -124, 32, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 4, 16, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 32, 1, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 8, 0, -64, 1, 0, 0, 34, 4, 2, 0, 0};
  // {00111111 00110110 10100011 11110111 111}
  public static final byte[] GRPSPLIT5 = new byte[] {-4, 108, -59, -17, 7};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {6, 0, 69, 64, 0, 49, 76, 17, 40, 80, 0, 16, 0, 68, 0, 0, 0, 8, 96, 0, 64, 64, 9, 0, 32, 16, 4, 65, 65, 0, 40, 27, 24, 34, 96, 65, 3, 64, 8, 16, 58, 0, 112, 64, 0, 0, 32, 0, 1, 1, 0, 0, 0, 0, 2, -124, 8, 0, 15, 32, 1, 32, 1, -127, 6, 32, 0, 64, 2, 64, 64, 6, -127, 32, 1, 0, 8, 74, 32, 32, 0, 32, 2, 33, 6, 21, -128, 5, 1, 16};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 80, -112, 0, -32, 2, 17, 100, 16, 40, -110, 4, 1, 0, 8, 64, 64, 0, 16, -64, 11, 0, 0, 2, 1, 0, 0, 16, 48, -120, -60, -64, 66, 0, 25, -110, 44, 32, 32, 1, -128, 1, 0, -128, 4, 0, 0, 1, 0, 0, -128, 42, 0, 0, 48, 0, 0, -128, -128, 5, 0, 6, 0, 0, 0, 0, 40, 4, 16, 0, 0, 0, 0, -119, 0, 0, 32, 32, 72, 4, 73, 21, 32, 4, -128, 0, 1, -128, 32, 32};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {64, 34, 2, 0, 4, 68, 0, 0, 1, 16, 8, 0, 0, 9, 16, 8, 48, 0, -128, 40, 64, 0, 34, 9, 16, 0, 0, 32, 4, 0, 3, 0, 32, 76, -112, 32, 0, 0, 0, 0, 0, 4, 0, 16, 8, 4, 0, 8, 0, 44, 0, 0, 0, 0, 0, 1, 2, 0, 0, 2, 32, 0, 0, 0, 1, 0, -128, 65, 64, -128, 0, -128, 64, 0, 0, -128, 64, 36, 96, 24, 98, 76, -123, -128, 8, -125, 0, 0, 13, 0};
  // {11110100 11001111 00101001 01010001 011}
  public static final byte[] GRPSPLIT9 = new byte[] {47, -13, -108, -118, 6};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -65, -1, 127, -1, -1, -1, -73, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -33, -1, -1, -1, -65, -65, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, 111, -3, -1, -1, -1, -9, -1, -1, -17};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, -128, 0, 0, 0, 0, 8, -128, 0, 0};
  // {00101001 10101010 00100010 00000010 00}
  public static final byte[] GRPSPLIT12 = new byte[] {-108, 85, 68, 64, 0};
  // {...6 0-bits}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -5, -65, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -2, -1, -2, -1, -17, -18, -1, -35, -5, -1, -1, 63};
}


class GBM_model_python_1589382591366_1_Forest_79 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_79_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_79_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[20 /* inq_last_6mths */] <3.5f ? 
         (Double.isNaN(data[20]) || data[20 /* inq_last_6mths */] <2.5f ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
                 (data[7 /* emp_title */] <8206.5f ? 
                    -0.026752092f : 
                    0.04130417f) : 
                 (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <30284.0f ? 
                    0.008207759f : 
                    -0.068276435f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.110962845f : 
                    -0.018578125f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    0.038098913f : 
                    0.13678825f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.11192472f : 
                    -0.105649866f) : 
                 (data[7 /* emp_title */] <397.5f ? 
                    0.119614914f : 
                    -0.07188583f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                 (data[26 /* revol_util */] <39.525f ? 
                    0.04297052f : 
                    -0.10048778f) : 
                0.19222054f)));
    return pred;
  } // constant pool size = 616B, number of visited nodes = 14, static init size = 3348B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {34, -42, -73, 64, -48, 114, 46, 61, -7, -72, -69, 84, 16, -52, 24, 32, 112, 8, 64, -24, 79, -32, 37, -77, 49, 0, 4, -11, 61, -99, 107, 88, 127, -68, -73, -9, -18, 122, 42, 17, -86, 1, 112, -79, -106, 5, -112, 28, 3, -88, 0, 106, 0, 17, 22, 79, 14, 0, -121, 34, 96, 38, 0, -96, 5, 35, 44, -60, 51, -107, 3, -125, 1, -71, 1, 0, -24, 111, 72, -66, -21, 51, -5, -67, -124, -97, -103, 2, 35, 100};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {20, 40, 0, 0, 4, 5, -48, 64, 0, 82, 2, 0, 0, 17, 2, 0, 0, 0, 112, 0, 80, 0, 0, 8, 2, 4, 0, 0, 64, 64, -124, 3, 0, 66, 88, 8, 1, 4, 0, 0, 16, 0, 0, 64, 64, 0, 32, 1, 0, 1, 80, 0, 0, 0, 32, -128, 0, -128, 0, 5, 1, 0, 0, 1, 0, 0, -128, 1, -128, 64, 64, 4, -128, 64, 4, -128, 80, 0, 32, 0, 0, -60, 4, 0, 2, -96, 0, -123, 12, 16};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-3, 41, -55, -1, 63, -49, -13, -33, -9, -41, -17, -1, -17, -65, -9, -1, -81, -1, 127, 127, -6, -1, -1, 125, -33, -1, -1, 63, -25, -1, -99, -17, -1, -41, 120, -34, -3, -1, -1, -1, -11, -1, -65, -1, -5, -5, -1, -5, -4, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -33, -33, -65, -25, -4, -17, -1, 107, 123, -11, -10, -3, -2, -65};
  // {00001111 11101111 11010100 11011011 101}
  public static final byte[] GRPSPLIT3 = new byte[] {-16, -9, 43, -37, 5};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 66, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 64, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-35, 125, -5, -1, 59, -33, -89, -3, -81, -51, -3, -65, -1, -9, -9, -1, -1, -1, -33, -41, -6, -1, -37, -3, -1, -1, -1, -1, -98, -1, -7, -4, -1, -79, 69, 95, -10, -5, -1, -1, -3, -1, -1, 110, -5, -1, -1, -18, -1, -2, -65, -9, -1, -1, -17, -2, -3, -1, 126, -33, -1, -1, -1, -1, -1, -33, -9, 63, -35, 127, -1, -1, -1, -1, -1, 127, -1, -1, -1, 103, 30, -1, -21, -81, 123, 95, -10, -3, -1, -1};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, 127, -1, -1, -1, -33, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -65, -1, 127, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1};
  // {00000110 10010010 10000000 00000000 000}
  public static final byte[] GRPSPLIT7 = new byte[] {96, 73, 1, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_80 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_80_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_80_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <18458.0f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.073864944f : 
                    -0.0040475223f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.022550616f : 
                    0.020598996f)) : 
             (Double.isNaN(data[17]) || data[17 /* dti */] <15.4635935f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 718, 1, data[15])) ? 
                    -0.032929707f : 
                    0.034516312f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 1, data[15]) || (GenModel.bitSetIsInRange(718, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 718, 1, data[15])) ? 
                    -0.027271139f : 
                    0.061108004f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                 (data[0 /* loan_amnt */] <21818.5f ? 
                    -0.11046971f : 
                    -0.05492257f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                    -0.043073457f : 
                    0.0360831f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    0.005928928f : 
                    0.10956891f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    0.052555136f : 
                    0.17387693f))));
    return pred;
  } // constant pool size = 899B, number of visited nodes = 15, static init size = 5022B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {6, -34, -76, 80, -32, 103, -13, 85, 8, -86, -72, 20, 0, 12, 8, 104, 64, 8, -48, -56, 35, -128, 109, 57, 35, 20, 4, 81, 57, 89, 110, 81, 118, -84, 89, -77, -82, 56, 40, 17, -120, 1, 48, -32, -114, 0, 48, 28, 1, -124, -48, 24, 0, 17, 54, -37, 14, 0, 13, 38, 65, 34, 1, -96, 6, 32, -88, -123, 19, -111, 64, 5, -127, 120, 0, 0, -95, 73, 40, -108, -86, 48, 87, 58, -122, -81, -100, 1, 58, 116};
  // {11111111 01110001 11100000 10000010 110}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -114, 7, 65, 3};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-65, -1, -1, -1, -1, -1, -13, -35, -65, -65, -3, -65, -18, -1, -3, -1, -1, -1, -1, -1, -13, -1, -1, 125, -1, -1, -1, 127, -65, -5, 126, -9, -9, -67, -37, -9, -2, -1, -1, -1, -3, -1, -1, -17, -1, -2, -1, -2, -1, -1, -1, -33, -1, -1, -1, -1, -1, 127, -1, -2, -1, -1, -1, -1, -1, -1, -5, -1, -33, -69, -1, -1, -1, 126, -1, -1, -1, -35, -65, -9, -65, 112, -41, 123, -1, -17, -2, -5, -6, -1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 32, 0, 0, 16, 0, 12, 34, 0, 0, 2, 0, 17, 0, 2, 0, 32, 0, 0, 0, 8, 0, 0, -128, 0, 0, 0, -128, 64, 4, -127, -128, 8, 64, 4, 8, 1, 2, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 34, 0, 8, 0, 15, 32, 4, 0, 0, 1, 0, 1, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 97, 2, 8, -128, -111, 89, 10, 0, 4, 8, 8, 0, 0, 4, 20, 32, 0, 64, -92, 16, -128, 0, -124, 1, 0, 0, 0, -112, 12, 48, 32, 42, -108, -124, 17, 66, 8, -124, 0, 4, 0, 8, 16, 69, 0, 0, 2, 0, 64, 96, 0, 0, 8, -101, 109, 4, 0, 2, 17, 0, 1, 0, 80, 0, 0, 0, -128, 1, 8, 0, 2, 0, 24, 0, 0, 64, 32, 4, 66, 80, -104, 40, 17, -64, 67, 74, 0, 17, 48};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 6, 24, 32, 112, 34, -128, 32, 4, 81, 84, 2, 0, 6, 0, 32, 0, 4, 40, -64, 1, 64, 52, 4, 0, 2, -126, -120, 8, 0, -107, 8, 16, 66, 40, 72, 5, 4, 16, 0, -64, 0, 0, 96, 2, 0, 24, -116, 0, 2, 8, 8, 0, 0, 0, 0, 3, 0, 0, -128, 32, -112, 0, 0, 0, 16, -44, 66, -120, 0, -96, 0, 64, 36, 0, -128, -112, 4, 16, 8, 5, 0, 3, 12, 3, 20, -124, 0, 12, 8};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 3, 67, 0, 4, 16, 72, 8, -48, 80, 2, 64, 0, 64, 0, 0, 0, 0, 32, 32, 76, 0, 0, -126, 0, 0, 0, -124, 68, -128, -127, -118, 17, 72, -73, 0, 81, 64, 0, 0, 2, 4, 64, 1, 16, 5, 0, 1, 0, 9, 0, 32, 0, 0, 0, 4, 64, 0, -128, 1, 0, 0, 0, 0, 0, 1, 0, 0, 64, -60, 1, -126, 64, 1, 13, -128, 64, 34, 64, 108, 65, -60, 40, -59, 0, 80, 1, -124, 5, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-35, -5, -53, -1, 79, -4, 78, -66, -9, 87, -49, -5, -1, -6, -9, -1, -65, -1, 111, 55, -1, 127, -73, -41, -4, -1, -1, -17, -25, -82, -43, -82, -33, 127, -1, 110, 121, -1, -9, -1, -9, -1, -17, 111, -5, -1, -49, -5, -2, -5, -81, -19, -1, -2, -33, 124, -11, -1, -2, -3, -1, -1, -1, 95, -1, -3, 119, -1, -4, -1, -1, -6, 127, -89, -1, -1, -33, -1, -33, 111, -41, -51, -22, -59, 127, -44, -29, -1, -41, -21};
  // {01011000 10000000 10111110 10110111 100}
  public static final byte[] GRPSPLIT8 = new byte[] {26, 1, 125, -19, 1};
  // {00100000 00011110 00110001 01111000 000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 120, -116, 30, 0};
  // {00000000 00000000 11000000 00000000 00000000 00000000 00000000 00010000 00000010 00000010 00000000 00000010 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 10000000 01010000 10000000 00010010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00100000 00000000 10000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000100 00000010 00000110 00000000 00100000 00010100 00000000 00000000 00001000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 3, 0, 0, 0, 0, 8, 64, 64, 0, 64, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 1, 10, 1, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 64, 96, 0, 4, 40, 0, 0, 16, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 4, 0, 0, 0, 16, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, -110, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 64, 0, 0, 8, 65, -64, 0, -128, 0, 64, 1, 4, 4, 0};
}


class GBM_model_python_1589382591366_1_Forest_81 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_81_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_81_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* annual_inc */] <124773.44f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (data[4 /* installment */] <158.52747f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(719, 1, data[15]) || (GenModel.bitSetIsInRange(719, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 719, 1, data[15])) ? 
                    -0.042468745f : 
                    0.08913667f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(719, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 719, 1, data[15])) ? 
                    -0.048670836f : 
                    0.0025130375f)) : 
             (data[4 /* installment */] <183.1546f ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(711, 6, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 711, 6, data[15])) ? 
                    -0.071138225f : 
                    0.02636304f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(711, 6, data[15]) || (GenModel.bitSetIsInRange(711, 6, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 711, 6, data[15])) ? 
                    -0.0018184187f : 
                    0.041181307f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                    -0.12799914f : 
                    -0.09070235f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                    -0.06732614f : 
                    0.059732243f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.027719842f : 
                    0.1676877f) : 
                 (data[1 /* funded_amnt */] <17615.5f ? 
                    0.28131112f : 
                    0.11271688f))));
    return pred;
  } // constant pool size = 806B, number of visited nodes = 15, static init size = 4464B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {64, 84, -27, 80, -92, 116, 41, 79, 8, -112, 2, 20, 0, 64, 8, 96, 0, 0, 16, -64, 77, 0, 32, 2, 0, 16, 0, 69, 32, 16, -31, -125, 48, 12, 51, -119, 9, 8, 40, 17, -128, 1, 96, -128, 4, 4, 0, 8, 2, -128, -128, 32, 0, 0, 16, 29, 74, 0, 11, 32, 0, 32, 1, 0, 64, 33, -128, 69, 2, -128, 66, 4, 1, 1, 1, 0, -24, 106, 72, 4, 96, 96, 22, 5, -124, 45, 0, 4, 36, 16};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0, -96, 0, 42, -128, 8, 20, 8, 0, 0, 8, 0, 0, 0, 0, 48, 4, 0, 0, 0, -128, 0, 2, 2, 8, -88, 64, 1, 36, 0, 32, 0, 10, 0, -126, 0, 0, 0, 0, 0, 0, 32, 0, 8, -118, 0, 0, 0, 12, -128, 0, 0, 33, 0, 64, 0, 1, 0, 1, 0, 0, 1, 0, 26, -128, 16, -88, 0, 0, 96, 64, 0, 0, 0, 64, 0, -120, -128, 12, 16, 16, 0, 0, -120, 1, 1, 16};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT2 = new byte[] {127, -2, -1, -1, -1, -1, -41, -1, -89, -21, -25, -1, -1, -77, -9, -1, -17, -1, -33, -5, -1, -1, -2, 63, -1, -3, -3, -9, 87, -67, -2, -37, -33, -34, -1, -11, -73, 124, -1, -1, -1, -1, 127, -1, -34, -1, -9, 117, 127, -1, -1, -13, 127, -1, -2, -34, -1, -65, -1, -2, -1, -2, -1, -1, -2, -1, -31, 127, -17, 87, -1, -1, -97, -65, -1, -1, -1, -65, -1, 87, 63, -13, -21, -21, -1, -1, 119, -2, -6, 111};
  // {...6 0-bits}
  public static final byte[] GRPSPLIT3 = new byte[] {-17, 110, -1, 127, -1, 122, -45, -33, -1, -9, -65, -1, -1, -2, -1, -1, -1, -65, -1, -22, -2, -1, -9, -1, -1, -1, -17, 127, -1, 127, -5, 127, -17, 127, -1, -37, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -17, -9, -1, -1, 127, -1, -1, -1, -1, -1, 127, -1, -3, -9, -1, -1, -1, -5, -5, -1, -1, -33, -44, -1, -18, -1, 126, -10, -21, -17, -37, -1, -1, -17, 127};
  // {...6 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {16, -111, 0, -112, 0, -123, 36, 32, 0, 8, 64, 0, 0, 33, 0, 0, 0, 64, 0, 21, 1, 0, 8, 0, 0, 0, 20, -128, 0, -128, 4, -128, 48, -128, 0, 36, 0, 32, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 16, 8, 0, 0, -128, 0, -128, 0, 0, 0, -128, 0, 2, 9, 0, 2, 0, 4, 4, 0, 0, -96, 41, 33, 17, 0, 1, 9, 20, 16, 36, 0, 0, 16, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 16, 0, 64, 0, 64, 0, -80, 32, 32, 0, 0, 8, 0, 0, 0, 0, 0, 0, 2, 0, 2, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -56, 0, 16, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 1, 0, -128, 0, 8, 0, 0, 0, 32, -48, -128, 0, 40, 0, 0, 0, 0, 0, 1, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, -1, -33, -1, 91, -17, -13, -2, -9, -17, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -13, -1, -1, -11, -1, -1, -1, -65, -33, -17, 94, -1, -1, -1, -22, 119, -2, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, 127, -65, -1, 127, -65, -5, -1, -1, -1, -1, -97, -35, -1, -1, -65, 63, -1, -5, -1, 127, -1, -1, -5, -1};
  // {11111111 11110111 11100000 00011101 101}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -17, 7, -72, 5};
  // {00000000 10000000 01010010 11100011 000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 74, -57, 0};
  // {00010001 00010000 00100101 01001110 000}
  public static final byte[] GRPSPLIT9 = new byte[] {-120, 8, -92, 114, 0};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_82 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_82_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_82_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[14 /* title */] <1397.5f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.12824163f : 
                    -0.07695567f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.047923166f : 
                    -7.189648E-4f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.04161465f : 
                    0.08571793f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    0.023322137f : 
                    0.14614686f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.07222582f : 
                    -0.0060424386f) : 
                 (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                    -0.032211907f : 
                    0.010140157f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.020935677f : 
                    0.028499302f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    -0.015902622f : 
                    0.0982186f))));
    return pred;
  } // constant pool size = 825B, number of visited nodes = 15, static init size = 4578B
  // {00100000 10000010 10001100 00001010 00100100 00100000 10000000 10000000 00011110 01010100 00001000 00000010 00001000 00100000 00010000 00000000 00001010 00010000 00001000 00000100 10010010 00000100 00000000 01000000 10001000 00000000 00100000 10000000 00001100 00100010 01100100 01010001 10011010 00110001 10001110 01000010 11110000 00011010 10000000 10000000 00011100 10000000 00001000 00000001 00011000 00100000 00001000 00000000 00000000 10000000 00000001 01010000 00000000 00000000 00000000 00000000 00100000 00000001 00000000 10000100 00000000 00000100 00000000 00000000 00100000 00000000 00010000 00000010 00000000 00001001 11000000 01000000 10000010 00000010 10000000 00000000 00000100 00010100 00000000 01101001 00010001 00000010 01110110 00100000 00000000 00101011 10000001 00000000 00110100 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {4, 65, 49, 80, 36, 4, 1, 1, 120, 42, 16, 64, 16, 4, 8, 0, 80, 8, 16, 32, 73, 32, 0, 2, 17, 0, 4, 1, 48, 68, 38, -118, 89, -116, 113, 66, 15, 88, 1, 1, 56, 1, 16, -128, 24, 4, 16, 0, 0, 1, -128, 10, 0, 0, 0, 0, 4, -128, 0, 33, 0, 32, 0, 0, 4, 0, 8, 64, 0, -112, 3, 2, 65, 64, 1, 0, 32, 40, 0, -106, -120, 64, 110, 4, 0, -44, -127, 0, 44, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-19, -33, -5, -1, 63, -33, -1, -33, -1, -65, 95, -1, -2, -1, -1, -1, -1, -1, -1, -9, -1, -1, -34, 111, -35, -1, -1, -1, -66, -2, -2, -17, -1, -1, -13, -53, -1, -3, -1, -1, -1, -1, -65, -1, -1, -1, -1, -2, -3, -5, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -5, -1, -1, -1, -1, -9, -1, -97, -1, -66, -1, -1, -9, -1, -41, -9, -5, -2, -17};
  // {11111111 11011100 11011001 01100010 011}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 59, -101, 70, 6};
  // {01110000 01010000 11100001 10011111 101}
  public static final byte[] GRPSPLIT3 = new byte[] {14, 10, -121, -7, 5};
  // {00000111 00100111 00010001 01011001 000}
  public static final byte[] GRPSPLIT4 = new byte[] {-32, -28, -120, -102, 0};
  // {00100000 10000010 00000000 00000010 00000100 00100000 00000000 10000000 00011010 00000000 00000000 00000000 00001000 00100000 00010000 00000000 00000000 00010000 00000000 00000100 10000000 00000100 00000000 00000000 00000000 00000000 00000000 10000000 00001000 00100000 01000100 00010000 10011000 00000001 00000100 00000010 11000000 00001010 00000000 10000000 00001100 00000000 00001000 00000000 00001000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001001 11000000 00000000 10000000 00000010 10000000 00000000 00000000 00000000 00000000 01001001 00010001 00000000 00000100 00000000 00000000 00101000 00000001 00000000 00110000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 65, 0, 64, 32, 4, 0, 1, 88, 0, 0, 0, 16, 4, 8, 0, 0, 8, 0, 32, 1, 32, 0, 0, 0, 0, 0, 1, 16, 4, 34, 8, 25, -128, 32, 64, 3, 80, 0, 1, 48, 0, 16, 0, 16, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, -112, 3, 0, 1, 64, 1, 0, 0, 0, 0, -110, -120, 0, 32, 0, 0, 20, -128, 0, 12, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 48, 0, 0, 0, 0, 0, 32, 2, 0, 64, 0, 0, 0, 0, 0, 0, 16, 0, 72, 0, 0, 0, 1, 0, 0, 0, 32, 0, 36, 2, 8, 12, 65, 2, 12, 0, 0, 0, 8, 0, 0, -128, 0, 4, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 4, 0, 0, 1, 0, 32, 0, 0, 0, 0, 8, 0, 0, 0, 0, 2, 64, 0, 0, 0, 0, 40, 0, 0, 0, 0, 74, 0, 0, 0, 1, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {82, 54, -57, 4, -64, 114, -10, 126, 1, 80, -117, 4, 1, -120, 16, 104, 32, 0, 64, 72, 38, -64, 41, -103, 34, 20, 0, 68, 77, -127, -55, 17, 38, 98, -113, -67, -16, 36, 42, 16, -126, 0, 64, 0, -124, 1, 32, 25, 3, -124, 64, 32, 0, 17, 54, -97, 74, 0, 11, 6, 33, 38, 1, -128, 65, 35, -92, -123, -30, 64, 64, 4, 0, 17, 4, 0, -39, -57, 104, 44, 99, -89, -111, -71, 6, 41, 24, -121, 3, 52};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-37, -1, -49, -1, -1, -5, -1, -2, -89, -1, -1, -1, -17, -5, -9, -1, -65, -9, -17, -1, -9, -1, -1, -1, -2, -1, -1, 127, -49, -5, -39, 127, -74, 115, -65, -67, -15, -65, -1, -1, -49, -1, -17, -1, -17, -1, -1, -1, -1, -2, -1, -3, -1, -1, -1, -1, -5, 127, -1, -2, -1, -1, -1, -1, -5, -1, -9, -1, -1, 111, -1, -1, -2, -65, -1, -1, -1, -9, -1, 127, 119, -1, -73, -1, -1, -17, 126, -1, -45, -1};
  // {01101000 10010101 00001000 00000111 101}
  public static final byte[] GRPSPLIT9 = new byte[] {22, -87, 16, -32, 5};
  // {00111100 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {60, 10, 0, 0};
  // {00000000 00101000 01100110 00100010 000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 20, 102, 68, 0};
  // {11111111 10111111 00011101 11111111 11111111 10110001 11111001 10011101 11111111 11111101 10111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 10111011 11111111 01111111 11100111 11111111 11011111 11111111 11111111 11001111 11111111 11101101 11111111 11111011 11111111 01011111 01001010 11111111 11011011 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01110111 11111111 11111111 11111101 11111111 11111111 11111111 11110011 10111111 11101101 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111000 11111111 11111111 11111111 11111111 11110111 11011111 11111111 01110111 01011111 11111101 11101011 01111011 10011111 11111111 11111011 11111111 11111011 11111111 01111111 11111111 11111111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -3, -72, -1, -1, -115, -97, -71, -1, -65, -3, -1, -1, -9, -1, -1, -1, -1, -1, -1, -35, -1, -2, -25, -1, -5, -1, -1, -13, -1, -73, -1, -33, -1, -6, 82, -1, -37, -1, -17, -1, -1, -1, -1, -1, -1, -1, -18, -1, -1, -65, -1, -1, -1, -49, -3, -73, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -5, 31, -1, -1, -1, -1, -17, -5, -1, -18, -6, -65, -41, -34, -7, -1, -33, -1, -33, -1, -2, -1, -1};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 2, 6, 0, 0, 112, 96, 98, 0, 64, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 24, 32, 0, 0, 0, 0, 0, 72, 0, 0, 0, 4, 44, 0, 4, 0, 16, 0, 0, 64, 0, 0, 0, 0, 17, 0, 0, 64, 0, 0, 0, 48, 2, 8, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, -30, 0, 0, 0, 0, 16, 4, 0, 65, 5, 96, 40, 1, 6, 0, 32, 0, 32, 0, 1, 1, 16};
}


class GBM_model_python_1589382591366_1_Forest_83 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_83_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_83_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2 /* term */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (data[10 /* annual_inc */] <16031.25f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.06099453f : 
                    0.18352942f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.050430022f : 
                    -0.018802375f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.062494762f : 
                    0.04598475f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.01597911f : 
                    0.03768953f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.085354164f : 
                    0.018858464f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.02424172f : 
                    0.01879005f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.03669951f : 
                    0.067809f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.022589542f : 
                    0.09730571f))));
    return pred;
  } // constant pool size = 910B, number of visited nodes = 15, static init size = 5088B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {52, 110, 48, 80, 0, 53, 79, 102, 81, -6, 58, 4, 0, -111, 0, 98, 96, 8, -80, -56, 72, 0, 42, -118, 34, 20, 0, 81, 89, 20, -18, 89, 61, 24, -8, -85, 46, 16, 41, 17, 8, 0, 64, 16, -60, 4, 48, 5, 3, 1, 0, 74, 0, 0, 18, 77, 0, -128, 15, 4, 32, 34, 0, -95, 7, 2, -88, -64, -14, -123, 64, -126, 65, -95, 0, -128, -95, 70, 72, -108, 65, 98, -57, 88, -122, -67, -100, 6, 59, 100};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 80, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 127, -2, -1, -49, -67, 79, -10, -9, -1, 126, -81, -1, -9, -3, -1, -17, -1, -65, -33, -2, 95, -2, -1, -1, -1, -5, 123, -5, 126, -2, 127, -65, -65, -1, -5, 47, -99, -1, -1, 95, -1, -49, 126, -11, -2, -1, -17, -1, 127, -65, -17, -1, -18, -1, 111, -1, -1, 127, -1, -66, -1, -1, -1, -1, -1, -17, -5, -2, -17, -2, -5, -1, -17, -6, -1, -9, 118, -1, -1, -9, -17, -1, 121, -1, -3, -1, -1, -5, -1};
  // {00011110 00111111 01101010 10011000 000}
  public static final byte[] GRPSPLIT4 = new byte[] {120, -4, 86, 25, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 10, 32, 0, 0, 4, 5, 2, 65, 80, 0, 0, 0, -127, 0, 0, 32, 0, -96, 8, 72, 0, 40, 2, 32, 16, 0, 0, 72, 0, 34, 24, 24, 8, 96, -96, 14, 0, 9, 0, 0, 0, 0, 0, -64, 0, 48, 0, 0, 0, 0, 66, 0, 0, 2, 5, 0, 0, 12, 0, 32, 32, 0, 1, 7, 2, -120, -64, -128, 0, 64, -128, 1, 0, 0, 0, 1, 0, 64, 0, 1, 96, -128, 80, 2, 1, 12, 2, 25, 0};
  // {11110111 10101111 11111011 11110111 11111111 11011111 01011111 10111111 01111101 11110101 11111111 11111111 11111111 01110110 11111111 11111111 11111001 11111111 11111010 11101111 11101111 11111111 11101011 10111111 10111011 11011111 11111111 11111111 01101101 11110111 10111011 11100111 11001111 11101111 11111001 11111010 10001111 11110111 01111111 11111111 11111111 11111111 11111111 11111111 11011100 11011111 11110011 11111111 11111111 11111111 11111111 10111101 11111111 11111111 10111111 01011111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 01111111 00011111 10111111 11101110 11111100 11111100 01111111 11111101 11111111 11111101 11111011 11111111 11111111 01111111 11111111 11111101 11111111 01111111 11111001 11111100 11110101 10011111 01111111 11001111 10111111 01100111 11111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-17, -11, -33, -17, -1, -5, -6, -3, -66, -81, -1, -1, -1, 110, -1, -1, -97, -1, 95, -9, -9, -1, -41, -3, -35, -5, -1, -1, -74, -17, -35, -25, -13, -9, -97, 95, -15, -17, -2, -1, -1, -1, -1, -1, 59, -5, -49, -1, -1, -1, -1, -67, -1, -1, -3, -6, -1, -1, -1, -1, -33, -1, -1, -2, -8, -3, 119, 63, 63, -2, -65, -1, -65, -33, -1, -1, -2, -1, -65, -1, -2, -97, 63, -81, -7, -2, -13, -3, -26, -1};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {2, -112, -61, 0, -12, 66, -80, 25, -104, 0, -128, 16, 0, 76, 10, 8, 16, 0, 64, 32, 5, -32, 5, 17, 0, 0, 4, -92, 36, 73, 1, -126, 2, 70, 17, 68, 81, 106, 2, 0, -78, 5, 48, -63, 10, 1, -128, 8, 0, -92, 0, 48, 0, 16, 32, 18, 4, 0, -128, 0, 65, 4, 1, 0, 0, 32, 0, 4, 1, 64, 3, 5, -128, 88, 9, 0, 24, -120, 32, 14, -22, 4, 56, -89, 8, 0, 1, -128, 36, 16};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-33, -45, -49, -1, -1, -34, -6, -35, -65, 87, -57, -5, -17, -18, -1, -33, -33, -9, -17, -73, -81, -1, -41, -3, -1, -17, -1, -17, -17, -5, -41, -26, -58, -17, -1, 84, -3, -17, -33, -1, -9, -1, -1, -17, -65, -1, -17, -1, -4, -2, -1, -75, -1, -1, -21, -66, -1, 127, -6, -1, -33, -1, -1, 127, -2, -7, 87, -65, 95, -1, -1, 127, -65, -1, -1, -1, -34, -1, -1, 127, -1, -68, 127, -89, -3, 70, -21, -3, -19, -5};
  // {01100100 10000000 00001101 01110011 100}
  public static final byte[] GRPSPLIT9 = new byte[] {38, 1, -80, -50, 1};
  // {10100001 11001101 10010011 10111001 101}
  public static final byte[] GRPSPLIT10 = new byte[] {-123, -77, -55, -99, 5};
  // {00011110 01110010 11100001 01000100 000}
  public static final byte[] GRPSPLIT11 = new byte[] {120, 78, -121, 34, 0};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {-3, -1, -1, -1, -85, -65, 79, -2, 111, -1, -1, -17, -1, -5, -9, -1, -17, -1, -65, -1, -2, 127, -5, -1, -1, -1, -1, 127, -1, -65, -2, 127, -3, -67, -18, -65, -2, -11, -1, -1, -1, -1, -49, -66, -1, -1, -1, -1, -1, -1, -1, -49, -1, -1, -33, -1, -1, -1, -1, -1, -65, -5, -2, -1, -1, -33, -1, -1, -2, -65, -1, -5, 127, -9, -1, -1, -17, -1, -33, -9, -73, -5, -33, -3, -1, -1, -2, 127, -1, -1};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {2, -128, 0, 0, 84, 0, 16, 1, 0, 0, -128, 16, 0, 12, 10, 0, 16, 0, 64, 0, 0, -96, 4, 0, 0, 0, 0, -128, 0, 0, 0, -128, 0, 66, 1, 64, 1, 2, 0, 0, 0, 0, 48, 64, 8, 0, 0, 0, 0, 0, 0, 32, 0, 16, 32, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0, -128, 8, 0, 0, 16, 8, 0, 8, 64, 0, 48, -126, 0, 0, 1, 0, 4, 0};
}


class GBM_model_python_1589382591366_1_Forest_84 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_84_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_84_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[26]) || data[26 /* revol_util */] <28.6875f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.106702864f : 
                    -0.06691894f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.024848955f : 
                    0.07957819f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (data[10 /* annual_inc */] <44093.75f ? 
                    0.056427386f : 
                    0.004428383f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    0.0037030908f : 
                    0.18137185f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[13])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.053861614f : 
                    -0.0049173613f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.0424834f : 
                    0.11985343f)) : 
             (data[26 /* revol_util */] <29.000439f ? 
                0.1631963f : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.008135644f : 
                    0.01820568f))));
    return pred;
  } // constant pool size = 633B, number of visited nodes = 14, static init size = 3450B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 9, 7, 16, -128, 2, -96, 91, -112, 40, 0, 64, 1, 64, 8, 0, 16, 0, -96, -128, 96, 64, 2, -127, 2, 16, 0, -64, 64, 0, 68, 10, 64, -64, -128, -103, 8, 8, 0, 0, 0, 0, 0, 16, 68, 4, 0, 0, 0, 5, 0, 0, 0, 16, 32, -55, 0, 0, 5, 0, 0, 0, 0, 33, 2, 0, 4, -128, -48, 4, 0, 0, 0, -80, 4, 0, 120, 8, 32, 64, 1, 12, 18, 16, 2, 10, 0, -128, 37, 16};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-83, 29, -17, -5, -101, -38, -21, -5, -97, 63, -10, -17, -17, 122, -1, -41, -97, -9, -1, -73, -13, 127, -42, -9, -33, -1, -5, -1, -25, 126, 95, 110, -10, -59, -37, -7, -37, -19, -9, -1, -35, -1, -81, -65, -1, -1, -33, -5, -1, 127, -1, -33, -1, -1, -5, -1, -5, 127, -3, -33, -2, -35, -1, 127, -65, -2, -41, -65, -1, 127, -67, -5, -2, -74, -1, -1, 127, -4, -65, 115, 85, 29, -73, -105, -9, 110, -5, -8, -11, -5};
  // {11111110 00100100 01101010 01101011 111}
  public static final byte[] GRPSPLIT2 = new byte[] {127, 36, 86, -42, 7};
  // {00000000 00000100 00010001 00000010 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 32, -120, 64, 0};
  // {00000000 00110000 01000011 00100001 000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 12, -62, -124, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 0, 2, 0, 32, 0, 0, 0, 0, 8, 0, 0, 0, 0, -128, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 2, 16, 0, 0, 0, 0, 0, 0};
  // {01001100 01001111 00000011 00000010 00100110 10101010 00001010 00100000 00000110 00001010 11000000 00101000 00001000 00100001 00001000 00010110 00000010 00010000 00000000 00010010 11111000 00000000 10000100 01011100 00000100 00000000 00100000 10101100 00110000 00011011 10000101 10001001 11011100 01011100 11101110 00100010 10101100 00001110 10010100 10000000 01000101 10000000 00001110 00000111 00011000 00000000 00001100 10110000 00000000 00010101 00000001 00000110 00000000 10000000 01001000 00101000 01110010 00000000 01010000 10100100 10000110 01100100 10000000 00000001 00100010 10000100 00010101 00100010 01000000 00000011 11000010 00100001 10000000 10010000 10000000 00000001 00000001 11000010 00010010 00111001 01010110 00001111 00110110 01110111 00100001 10101001 00100000 10100000 01010000 00100000}
  public static final byte[] GRPSPLIT6 = new byte[] {50, -14, -64, 64, 100, 85, 80, 4, 96, 80, 3, 20, 16, -124, 16, 104, 64, 8, 0, 72, 31, 0, 33, 58, 32, 0, 4, 53, 12, -40, -95, -111, 59, 58, 119, 68, 53, 112, 41, 1, -94, 1, 112, -32, 24, 0, 48, 13, 0, -88, -128, 96, 0, 1, 18, 20, 78, 0, 10, 37, 97, 38, 1, -128, 68, 33, -88, 68, 2, -64, 67, -124, 1, 9, 1, -128, -128, 67, 72, -100, 106, -16, 108, -18, -124, -107, 4, 5, 10, 4};
  // {10011001 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-103, 9, 0, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -10, -2, -1, 111, -33, -33, -57, 127, 127, -1, -1, -2, -82, -1, -1, -33, -1, 127, -33, -33, -1, -1, -2, -3, -1, -1, -65, -17, -1, -3, -3, -1, -65, -1, 102, 127, -13, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -6, -1, -1, -1, -17, -33, -67, -1, -1, 127, -3, -1, -1, -1, -34, -3, -1, -17, 127, -34, -21, -1, -1, -1, 95, -13, -1, -33, 119, -1, -65, 127, -10, -4, -17, -3, -3, -17, -1, -5, -81};
  // {00000010 00000000 00000000 00000000 00000001 00000100 00000000 00000100 00000000 00000001 00010000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000100 00000100 00000000 00000000 10000000 00000000 00000000 00000000 00000010 00001000 00000000 00000000 01000000 00000000 00000010 00010000 10001001 00000001 00100000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 01000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 10000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000001 00000000 00000000 00000001 10100000 10000000 00000000 00010000 01000000 00001000 00000000 00000000 00000010}
  public static final byte[] GRPSPLIT9 = new byte[] {64, 0, 0, 0, -128, 32, 0, 32, 0, -128, 8, 0, 0, 16, 0, 0, 0, 0, 0, 32, 32, 0, 0, 1, 0, 0, 0, 64, 16, 0, 0, 2, 0, 64, 8, -111, -128, 4, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, -128, 33, 0, 0, 0, 0, 0, 0, 0, 64, -128, 0, 0, -128, 5, 1, 0, 8, 2, 16, 0, 0, 64};
  // {11111111 11011011 10101001 11110001 101}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -37, -107, -113, 5};
}


class GBM_model_python_1589382591366_1_Forest_85 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_85_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_85_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.1215107f : 
                    -0.10785176f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.10688879f : 
                    -0.070056744f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                -0.0062199435f : 
                0.212109f)) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.047813877f : 
                    0.0017760666f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.030402722f : 
                    0.08132052f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    -0.036775544f : 
                    0.015454139f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.0060058837f : 
                    0.04738456f))));
    return pred;
  } // constant pool size = 811B, number of visited nodes = 13, static init size = 4542B
  // {11111111 11111000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, 31, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 32, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 40, 0, 4, 0, 0, 0, 0, 0, 5, 0, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -3, -33, -1, -1, -1, -9, -33, -1, -1, -3, -1, -1, -1, -9, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -2, -3, -1, -1, -73, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -23, -1, -5, -1, -9, -1, -1, -1};
  // {01011000 10010100 00000000 00000000 000}
  public static final byte[] GRPSPLIT3 = new byte[] {26, 41, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -25, -1, -1, -1, -18, -2, -65, -49, -17, -1, -1, -1, -1, -1, -1, -1, -9, -1, 127, -71, -1, -1, -33, -1, -1, -1, -1, -33, -1, -65, -65, -1, -1, 127, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -17, -6, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -65, -34, -65, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -4, -1, -1, -2, 127, -2, -2, 127, -1, -1};
  // {00001000 00001001 01100100 00000000 000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, -112, 38, 0, 0};
  // {00000000 01001001 11100111 00001010 00000111 10001110 10010010 00100110 00001000 00001100 01000001 00101000 00000000 00000010 01010000 00010110 00001010 00000000 00000110 00000011 11100010 00000000 10000100 00000101 01000100 00101000 00000000 10100011 00010100 00000000 10000011 01000011 11001110 01110001 10010111 10011001 11110110 00000000 00010100 10001000 01010001 10000000 00001110 00000001 00110000 00100000 00000100 10010000 00000000 00000000 00000001 00000100 00000000 00001000 01001100 10111000 01010000 00000000 10010001 01100100 10000000 00100100 10000000 00000000 00000010 10000100 00010000 00100010 00000100 00000011 10000010 00000001 00000010 10010100 10000000 00000000 00000101 00010110 00010110 00100000 11010100 00001110 11111100 10110100 00100001 10010000 10010000 00000001 10110100 00001000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, -110, -25, 80, -32, 113, 73, 100, 16, 48, -126, 20, 0, 64, 10, 104, 80, 0, 96, -64, 71, 0, 33, -96, 34, 20, 0, -59, 40, 0, -63, -62, 115, -114, -23, -103, 111, 0, 40, 17, -118, 1, 112, -128, 12, 4, 32, 9, 0, 0, -128, 32, 0, 16, 50, 29, 10, 0, -119, 38, 1, 36, 1, 0, 64, 33, 8, 68, 32, -64, 65, -128, 64, 41, 1, 0, -96, 104, 104, 4, 43, 112, 63, 45, -124, 9, 9, -128, 45, 16};
  // {00000100 01010001 01000100 00110000 100}
  public static final byte[] GRPSPLIT7 = new byte[] {32, -118, 34, 12, 1};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-113, -38, -1, -5, -1, -5, -23, -1, -9, -65, -41, -65, -1, -5, -1, -1, -1, -1, -17, -33, -49, 63, -1, -1, -1, -1, -1, -1, -18, -6, -37, -2, -9, -65, -7, -35, -1, -67, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -17, -65, -1, -1, -1, 127, -65, 127, -5, -1, -33, -1, -1, -1, -1, -1, -37, -1, 125, -1, -1, -7, 126, -1, -1, -1, -18, -3, -1, -57, -65, -14, -65, -17, -1, -23, -21, -2, -1, -97};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {112, 36, 0, 4, 0, 4, 20, 0, 8, 64, 0, 64, 0, 4, 0, 0, 0, 0, 16, 0, 32, -64, 0, 0, 0, 0, 0, 0, 65, 0, 36, 9, 0, 64, 6, 32, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, -128, 4, 1, 32, 0, 0, 0, 0, 0, 32, 0, -126, 0, 0, 6, -127, 0, 0, 0, 17, 2, 0, 16, 64, 13, 64, 16, 0, 4, 4, 0, 0, 96};
  // {00001001 00100110 10101010 11101101 101}
  public static final byte[] GRPSPLIT10 = new byte[] {-112, 100, 85, -73, 5};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -3, -6, -1, 31, -65, -2, -69, -1, -49, 127, -1, -1, -1, -11, -1, -1, -1, -1, -65, -68, -1, -33, 95, -1, -5, -1, -1, -41, -1, -66, 61, -98, -13, -41, 111, -45, -1, -1, -1, 127, -1, -1, 127, -1, -5, -1, -1, -1, -1, -1, -1, -1, -17, -33, -25, -1, -1, 126, -37, -1, -33, -1, -1, -65, -1, -9, -69, -33, -1, -1, -1, -1, -9, -1, -1, 95, -33, -65, -1, -44, -33, -50, -13, -1, -1, -10, 127, -41, -1};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 2, 1, 0, -32, 64, 1, 68, 0, 48, -128, 0, 0, 0, 10, 0, 0, 0, 0, 0, 67, 0, 32, -96, 0, 4, 0, 0, 32, 0, 65, -62, 33, 12, 41, -112, 44, 0, 0, 0, -128, 1, 0, -128, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 32, 8, 0, 0, -128, 36, 0, 32, 0, 0, 64, 0, 8, 4, 32, 0, 0, 0, 0, 8, 0, 0, -96, 32, 72, 4, 43, 32, 20, 12, 0, 0, 9, -128, 40, 0};
}


class GBM_model_python_1589382591366_1_Forest_86 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_86_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_86_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[7 /* emp_title */] <7902.5f ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.048612326f : 
                    -0.013715165f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.021044394f : 
                    0.077770524f)) : 
             (Double.isNaN(data[3]) || data[3 /* int_rate */] <0.22104336f ? 
                 (data[19 /* earliest_cr_line */] <7.618752E11f ? 
                    0.023578808f : 
                    3.115382E-4f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(717, 1, data[15]) || (GenModel.bitSetIsInRange(717, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 717, 1, data[15])) ? 
                    -0.010212392f : 
                    0.14131063f))) : 
         (Double.isNaN(data[7 /* emp_title */]) || !GenModel.bitSetIsInRange(312, 7903, data[7]) || (GenModel.bitSetIsInRange(312, 7903, data[7]) && !GenModel.bitSetContains(GRPSPLIT5, 312, 7903, data[7])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.10363124f : 
                    -0.00886224f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                    0.028219251f : 
                    0.15725647f)) : 
             (Double.isNaN(data[7 /* emp_title */]) || !GenModel.bitSetIsInRange(312, 7903, data[7]) || (GenModel.bitSetIsInRange(312, 7903, data[7]) && !GenModel.bitSetContains(GRPSPLIT9, 312, 7903, data[7])) ? 
                 (!Double.isNaN(data[7 /* emp_title */]) && (GenModel.bitSetIsInRange(312, 7903, data[7]) && !GenModel.bitSetContains(GRPSPLIT10, 312, 7903, data[7])) ? 
                    0.13728051f : 
                    0.15899381f) : 
                0.20867899f)));
    return pred;
  } // constant pool size = 736B, number of visited nodes = 14, static init size = 4068B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {6, -27, -28, 80, 0, 54, -1, 127, 113, -54, -77, 20, 17, 4, 24, 104, 112, 8, 96, -64, 79, 64, 41, -86, 49, 20, 4, -43, 77, -115, 3, 81, 63, -40, -51, 120, 70, 104, 42, 1, -120, 1, 48, -32, -112, 5, 16, 13, 3, 45, -64, 80, 0, 0, 50, -36, 70, 0, 0, 38, 97, 6, 1, 1, 69, 32, -72, -123, -109, -63, 67, 5, -63, 33, 1, -128, -24, 74, 40, 60, 106, 114, 42, -17, 4, -79, -107, -124, 38, 52};
  // {00000001 00000100 00110011 10110000 000}
  public static final byte[] GRPSPLIT1 = new byte[] {-128, 32, -52, 13, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -3, -4, -1, -113, -1, -1, -1, -1, -33, -1, -65, -1, 127, -3, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -33, -1, 127, -3, -65, -37, -33, 127, 71, -1, -1, -17, -3, -1, -1, -17, -69, -1, -33, -17, -1, 127, -1, -35, -1, -17, -5, -1, -9, -1, -3, -1, -1, -33, -1, 95, -3, -1, -1, -1, -1, -1, -1, -3, -1, 127, -1, -1, -1, -33, -65, -1, -2, -5, -1, -17, 127, -5, -9, -1, -2, -1};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 2, 0, 0, 96, 0, 0, 0, 0, 32, 8, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 10, 0, 4, 32, -128, -72, 0, 0, 0, 0, 0, 64, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 32, 64, 0, 1, 0, 0, 16, 0, 0, 8, 0, 0, 0};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 01000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000010 00001000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 64, 16, 0};
  // {...7903 0-bits... 00000001 00001010 00000000 01000100 00000000 01100000 00000000 01010000 00000000 00010000 00011000 00000000 00000000 00000000 00000011 10000010 00000000 00010000 00011000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 11000100 00000000 01000000 00010001 00001000 00000000 00000000 10001100 00001011 00000000 00100000 00000000 00000001}
  public static final byte[] GRPSPLIT5 = new byte[] {-128, 80, 0, 34, 0, 6, 0, 10, 0, 8, 24, 0, 0, 0, -64, 65, 0, 8, 24, 0, 0, 16, 0, 0, 0, 0, 35, 0, 2, -120, 16, 0, 0, 49, -48, 0, 4, 0, -128};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 2, 3, 0, 48, 65, 0, 0, -120, 0, 0, 64, 0, 64, 2, 0, 0, 0, -112, 0, 32, 0, 0, 17, 0, 0, 0, 32, 0, 0, -60, -126, 64, 32, 16, -128, 40, 0, 0, 16, 2, 0, 0, 0, 0, 0, 32, 0, 0, -128, 0, 34, 0, 17, 0, 0, 0, 0, 2, 1, 0, 32, 0, -128, 0, 0, 0, 0, 32, 64, 0, 2, 0, -120, 0, 0, 0, 0, 0, 0, -127, 4, 0, 16, -128, 12, 8, 1, 1, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, 123, -37, -5, 63, -21, -15, -66, -98, -73, -19, -17, -18, -5, -1, -1, -65, -9, -97, 127, -75, -1, -2, -1, -33, -1, -5, -81, -65, -1, -3, -82, -33, 125, -34, -59, -1, -65, -1, -1, -1, -1, -81, 127, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -51, -69, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -17, 127, -1, -1, -66, -1, -2, -1, -1, -1, -33, -11, -1, -33, -65, -19, -35, -3, -1, -2, -2, 123, -39, -5};
  // {01111010 00110101 11111111 11001011 011}
  public static final byte[] GRPSPLIT8 = new byte[] {94, -84, -1, -45, 6};
  // {...7903 0-bits... 00000000 00000000 00000000 00000100 00000000 01000000 00000000 01010000 00000000 00000000 00011000 00000000 00000000 00000000 00000011 00000010 00000000 00000000 00011000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000001}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 0, 32, 0, 2, 0, 10, 0, 0, 24, 0, 0, 0, -64, 64, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, -128};
  // {...7903 0-bits... 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 00111111 11111111 11111111 11101110 11111111 11111111 11111111 11110111 11110101 11111111 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -4, -1, -1, 119, -1, -1, -1, -17, -81, -1, -1, -1, -1};
}


class GBM_model_python_1589382591366_1_Forest_87 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_87_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_87_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* annual_inc */] <42339.844f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (data[7 /* emp_title */] <441.5f ? 
                    0.10061461f : 
                    -0.06443363f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.012515957f : 
                    0.12406046f)) : 
             (data[19 /* earliest_cr_line */] <1.12946197E12f ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    0.0094461655f : 
                    0.054501876f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(706, 4, data[15]) || (GenModel.bitSetIsInRange(706, 4, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 706, 4, data[15])) ? 
                    -0.09196341f : 
                    0.11671227f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
                    -0.07274606f : 
                    -0.017167298f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.03726829f : 
                    0.04586724f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.041791502f : 
                    0.02446849f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    -0.016184786f : 
                    0.05858918f))));
    return pred;
  } // constant pool size = 813B, number of visited nodes = 15, static init size = 4506B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 82, 0, 20, 96, 99, -55, 112, 16, 82, -110, 64, 17, 88, 0, 0, 0, 8, -80, -128, 2, 0, 13, 24, 50, 20, 0, 80, 8, 5, 103, -118, 68, -16, 53, 4, -114, 56, 42, 1, 26, 1, 80, 64, 70, 4, 16, 17, 3, -123, -128, 16, 0, 1, 34, -60, 12, -128, 0, 2, 1, 2, 1, 0, 0, 0, 20, 64, -112, 80, 3, 6, 64, 97, 0, 0, -112, 65, 64, 30, 106, 76, 124, -121, -124, -114, 5, -122, 60, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {-39, -5, -49, -1, -17, -5, -23, -4, -97, 87, -33, -17, -1, 123, -1, -9, -17, -1, -1, -73, -6, 63, -65, -3, -2, -1, -1, 127, -34, 111, 119, -18, -18, -7, -9, 63, -65, -7, -1, -1, -1, -1, -1, -33, -17, -2, -1, -1, -1, -1, -1, -35, -1, -1, -5, -17, -1, -1, -2, -37, -1, -33, -1, -2, -1, -1, 95, 126, -33, -2, -1, -1, 126, -9, -5, 127, -2, -3, -1, 127, -1, 124, -3, -89, -3, -49, 111, -2, -3, -21};
  // {00000000 00000000 00000010 00100000 000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 64, 4, 0};
  // {01001010 11111100 01001011 00000010 001}
  public static final byte[] GRPSPLIT3 = new byte[] {82, 63, -46, 64, 4};
  // {...4 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 32, 2, 0, 4, 0, 1, 0, 4, 1, 0, 0, 0, 0, 0, 2, 32, 0, 0, 0, 1, 0, 0, 0, -128, 0, 0, 0, 0, 0, 16, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 4, 0, 0, 0, 0, 0, 64, 0, 64, 0, 64, 0, 32, 64, 0, 0, 2};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {102, -91, -9, 64, -108, 20, 118, 15, -23, -88, 41, 20, 0, -124, 26, 72, 80, 0, 0, -24, 125, 64, 98, 35, 1, 0, 4, -123, 117, -40, -56, 81, 59, 14, -38, -37, 113, 78, 1, 0, 0, 0, 48, -95, 24, 1, -96, 4, 0, 40, 80, 106, 0, 0, 20, 25, 66, 0, -117, 36, 0, 36, 0, -127, 69, 35, -88, -59, 99, -123, 64, -127, -127, 8, 13, -128, 105, -86, 104, -92, -63, -13, -89, 120, 14, 49, -112, 1, 7, 20};
  // {00101100 01000100 01110101 01100111 100}
  public static final byte[] GRPSPLIT6 = new byte[] {52, 34, -82, -26, 1};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -65, -1, -1, -65, -1, 126, -97, -1, -65, -19, -1, -18, -1, -1, -1, -33, -9, -49, -1, -3, 127, -9, 111, -1, -1, -1, -65, -9, -2, -35, 119, -1, 31, -38, -33, -7, -1, -9, -1, -3, -1, -65, -81, -1, -5, -17, -17, -2, -1, -1, -1, -1, -1, -3, -1, -9, 127, -1, -3, -2, -3, -1, -33, -1, -1, -1, -1, -1, -81, -2, -5, -1, -1, -1, -1, -1, -1, -1, -9, -9, -13, -89, -5, -1, -13, -6, 125, -33, -65};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 64, 0, 0, 64, 0, 1, 96, 0, 64, 18, 0, 0, 1, 0, 0, 0, 0, 48, 0, 0, -128, 8, -128, 0, 0, 0, 64, 0, 1, 34, -128, 0, 64, 33, 32, 0, 0, 0, 0, 2, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 0, 0, 0, 0, 0, 64, 0, 4, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 16, 4, 0, 76, 0, -128, 32, 64};
  // {00000011 10001011 10001000 11011101 110}
  public static final byte[] GRPSPLIT9 = new byte[] {-64, -47, 17, -69, 3};
  // {11011111 11111111 01010011 11111111 11011111 11110111 10011101 11101111 11101000 11111011 11111011 11011111 11111111 11011110 10110111 11111111 11111101 11111111 11111111 11101111 01000101 11111111 11111011 00111011 01111111 11111111 11111111 11011111 01110011 11111101 11101111 11110101 11111111 10011111 10101100 11110111 01111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111011 11011111 11111111 11111111 11111111 10101111 11111111 11111111 11111111 01101111 11111111 11111111 11111110 11111011 11111111 11111111 11111111 11111110 01111111 10111011 11101111 11011101 11111101 11111111 11111101 11111110 11111110 11111111 11111111 11111110 11111011 11111110 11111111 11111111 01111100 11111101 11011010 11100101 10001111 01111111 11111110 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT10 = new byte[] {-5, -1, -54, -1, -5, -17, -71, -9, 23, -33, -33, -5, -1, 123, -19, -1, -65, -1, -1, -9, -94, -1, -33, -36, -2, -1, -1, -5, -50, -65, -9, -81, -1, -7, 53, -17, -2, -5, -1, -1, -1, -1, -1, -1, -9, -1, -33, -5, -1, -1, -1, -11, -1, -1, -1, -10, -1, -1, 127, -33, -1, -1, -1, 127, -2, -35, -9, -69, -65, -1, -65, 127, 127, -1, -1, 127, -33, 127, -1, -1, 62, -65, 91, -89, -15, -2, 127, -1, -1, -1};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {6, 0, 53, 64, -124, 16, 64, 8, 104, 32, 32, 4, 0, -124, 18, 8, 64, 0, 0, 8, 93, 0, 32, 35, 1, 0, 0, -123, 49, 16, 8, 81, 0, 6, 74, -48, 1, 4, 0, 0, 0, 0, 0, 0, 8, 0, 32, 4, 0, 0, 0, 10, 0, 0, 0, 25, 0, 0, -128, 32, 0, 32, 0, -127, 1, 32, 8, -124, 0, 0, 64, -128, -128, 0, 0, -128, 32, -128, 0, 0, -127, 64, 32, 88, 14, 33, -128, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_88 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_88_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_88_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[19]) || data[19 /* earliest_cr_line */] <3.07543251E12f ? 
         (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <18458.0f ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
                 (Double.isNaN(data[1]) || data[1 /* funded_amnt */] <15594.5f ? 
                    -0.014066546f : 
                    -0.07522749f) : 
                 (Double.isNaN(data[17]) || data[17 /* dti */] <15.4635935f ? 
                    -0.00260904f : 
                    0.018597629f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.084347114f : 
                    -0.01627809f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.010114575f : 
                    0.06740607f))) : 
        0.13390397f);
    return pred;
  } // constant pool size = 313B, number of visited nodes = 8, static init size = 1674B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {2, -2, -76, 80, -32, 103, -13, 87, 8, -86, -72, 20, 0, 12, 8, 104, 96, 8, -48, -56, 19, -128, 109, 41, 51, 20, 4, 113, 57, 89, 110, -47, 126, -98, 88, -13, 46, 56, 41, 17, -72, 1, 48, -16, -114, 0, 48, 28, 1, 4, -48, 24, 0, 17, 38, -37, 14, 0, 13, 38, 65, 34, 1, -95, 7, 32, -120, -59, -109, -127, 65, 5, -127, 120, 0, 0, -80, 111, 40, -100, -86, 48, -41, 62, -122, -81, -100, -127, 58, 84};
  // {00000000 11000000 11000010 00000000 00100000 00001000 00110010 00010000 10001111 00001010 11000000 00000010 00000000 00000010 00000000 00000000 00001000 00000000 00000100 00000100 00110010 00000000 00000000 01000001 00000000 00000000 00000000 00100001 00100010 00000001 10000001 01010001 10001000 00010010 11101101 00010000 10001010 00010010 00000000 00000000 01000000 00100000 00000010 10000000 00001000 10100000 00000001 10000000 00000000 10010000 00000000 00000100 00000000 00000000 00000000 00100000 00000010 00000000 01000001 10000000 00000000 00100000 00000000 00000000 00000000 10000000 00000000 00000010 00000110 00100011 10000000 01000001 00000010 10000000 10110000 00000001 00010010 01000100 00000010 00110110 10000010 00100011 00010100 10100011 00000000 00001010 10000000 00100000 10100000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 3, 67, 0, 4, 16, 76, 8, -15, 80, 3, 64, 0, 64, 0, 0, 16, 0, 32, 32, 76, 0, 0, -126, 0, 0, 0, -124, 68, -128, -127, -118, 17, 72, -73, 8, 81, 72, 0, 0, 2, 4, 64, 1, 16, 5, -128, 1, 0, 9, 0, 32, 0, 0, 0, 4, 64, 0, -126, 1, 0, 4, 0, 0, 0, 1, 0, 64, 96, -60, 1, -126, 64, 1, 13, -128, 72, 34, 64, 108, 65, -60, 40, -59, 0, 80, 1, 4, 5, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-35, -5, -53, -1, 79, -4, 78, -66, -9, -9, -17, -1, -1, -6, -9, -1, -65, -1, 111, 55, -1, 127, -9, -9, -2, -1, -1, -17, -9, -18, -43, -82, -1, 127, -1, 111, -3, -1, -9, -1, -9, -1, -17, 127, -5, -1, -49, -5, -2, -1, -81, -19, -1, -1, -1, -2, -11, -1, -1, -3, -1, -1, -1, -33, -1, -1, 127, 127, -3, -1, -1, -6, -1, -89, -1, -1, -33, -1, -33, -17, -33, -33, -21, -35, 127, -11, -13, -1, -41, -21};
  // {10100001 10111111 01110101 11111001 100}
  public static final byte[] GRPSPLIT3 = new byte[] {-123, -3, -82, -97, 1};
}


class GBM_model_python_1589382591366_1_Forest_89 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_89_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_89_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[26]) || data[26 /* revol_util */] <89.35625f ? 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[13])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.052666377f : 
                    -0.014149977f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.034071267f : 
                    0.08848654f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.050983317f : 
                    0.036754817f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.016971951f : 
                    0.032229245f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.114929594f : 
                    -0.07777758f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                    -0.050631218f : 
                    0.05722733f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.10909801f : 
                    0.11869915f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    0.06676882f : 
                    0.1330239f))));
    return pred;
  } // constant pool size = 995B, number of visited nodes = 15, static init size = 5598B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {82, -2, 101, 80, -96, 115, -55, 119, -71, -70, -80, 80, 1, 76, 26, 104, 112, 0, -64, 64, 10, -32, 36, -86, 3, 20, 4, -43, 56, -103, 2, -38, 118, 14, 123, -109, 126, 104, 8, 17, -128, 1, 48, 96, -116, 5, 16, 29, 1, -88, -64, 56, 0, 16, 34, 29, 78, 0, -114, 4, 65, 36, 1, -95, 67, 33, -88, 69, -94, -112, 1, -125, 65, 105, 5, 0, -72, 74, 104, -100, 72, -9, 126, 41, 4, -91, 8, 0, 7, 0};
  // {00010011 00110000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-56, 12, 0, 0};
  // {11011111 11111111 10111111 11111111 11011111 11111111 10111111 11111111 11111111 11111111 11101111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011001 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111101 11011111 01011111 01111111 11111111 11110100 11111110 11001001 11111111 11010111 01111111 11111111 11101111 11111111 11111101 11110111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11011111 11111111 11111111 11111111 11111111 10111011 11111011 11111111 11111111 11111111 11011111 11111111 11111111 11111110 11110111 01111111 11111111 11111111 11111111 11111111 11111111 11111110 01111111 11111011 11111111 11111111 10111110 11101111 11111111 10110101 11111110 10111111 11110111 10011111 11111111 11011101}
  public static final byte[] GRPSPLIT2 = new byte[] {-5, -1, -3, -1, -5, -1, -3, -1, -1, -1, -9, -5, -1, -1, -1, -1, -1, -1, -1, -1, -101, -1, -9, -1, -1, -1, -1, -1, -65, -5, -6, -2, -1, 47, 127, -109, -1, -21, -2, -1, -9, -1, -65, -17, -3, -1, -1, -1, -1, -1, -1, -65, -1, -1, -5, -1, -1, -1, -1, -35, -33, -1, -1, -1, -5, -1, -1, 127, -17, -2, -1, -1, -1, -1, -1, 127, -2, -33, -1, -1, 125, -9, -1, -83, 127, -3, -17, -7, -1, -69};
  // {}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 2, 0, 4, 4, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 32, 0, 100, 0, 10, 0, 0, 0, 0, 32, 0, 0, 4, 1, 0, -64, -128, 40, 0, 4, 1, 0, 0, 4, 0, 16, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, -128, 80, 0, 2, 0, 0, 0, 0, -128, 0, 32, 0, 0, 35, 8, -127, 18, -120, 0, 0, 5, 8, 64};
  // {00001111 10101110 11011010 00100111 001}
  public static final byte[] GRPSPLIT4 = new byte[] {-16, 117, 91, -28, 4};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {80, 36, 32, 0, 0, 82, 8, 0, 24, 40, 32, 80, 0, 76, 2, 8, 0, 0, 0, 64, 2, 0, 0, 0, 3, 16, 0, -64, 16, -127, 0, 10, 16, 0, 82, 1, 80, 0, 0, 1, 0, 0, 32, 96, 0, 0, 16, 24, 0, -128, -64, 32, 0, 0, 0, 1, 4, 0, -122, 0, 1, 32, 0, 0, 64, 33, -96, 0, -126, -112, 1, 1, 65, 1, 0, 0, 24, 74, 40, -112, 0, -91, 2, 33, 4, -95, 8, 0, 2, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-81, -37, -65, -17, -1, -19, 119, -1, 103, -9, -33, -81, -2, -77, -19, -9, -1, -1, -1, -1, -3, -1, -1, -1, -4, -17, -5, 59, -17, 126, -1, -11, -81, -1, -83, 126, -81, -65, -1, -1, -1, -1, -33, -97, 123, -1, -17, -25, -1, 119, -65, -33, -1, -1, -1, -18, -5, -1, -5, -5, -2, -33, -1, -2, -65, -33, 87, -65, 125, 111, -2, -3, -66, -2, -1, -1, -25, -3, -33, 111, -1, 90, -11, -34, -5, 126, -9, -1, -3, -1};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 2, 0, 64, 4, 6, 0, 0, 0, 10, 4, 0, 0, 0, 0, 0, 8, 0, -128, 101, 0, 73, 1, 32, 0, 0, 0, 64, 4, -127, 1, 9, -48, -124, 44, 1, 16, 32, 0, 10, 0, 80, -128, 0, 0, -96, 0, 0, 4, 0, 64, 0, 0, 4, 2, 0, 0, 1, 32, 0, 0, 0, 0, 4, 2, 0, -128, 1, -63, 64, 4, 0, 0, 8, -128, 65, 32, 0, 2, -94, 64, 9, -64, -128, 8, 17, 7, 40, 20};
  // {10110011 10111011 11111011 11111111 11111111 00110111 01111101 01111111 01101111 11100010 11110111 11111111 11111111 11011111 11101111 11111111 11110101 11111111 11110101 11111101 10111111 11111011 11111111 10101110 11111111 11111111 11111111 11111100 11111111 11110111 11111111 10100110 11111111 11101111 00101001 00111111 11110011 11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 01111111 11111111 01110111 11111111 11111110 11111101 11100111 11111111 11111111 10111111 01111111 11111111 11111111 10111111 11111111 11111101 11111111 11111111 11111111 01111111 11111111 11110010 11111111 11111010 11111111 01111111 11111111 11111101 01100011 11111111 11111111 11111111 11101111 11111011 11110110 11111101 00111110 11111001 11111111 11111111 01011010 11101111 11111111 10011111 11111111}
  public static final byte[] GRPSPLIT8 = new byte[] {-51, -35, -33, -1, -1, -20, -66, -2, -10, 71, -17, -1, -1, -5, -9, -1, -81, -1, -81, -65, -3, -33, -1, 117, -1, -1, -1, 63, -1, -17, -1, 101, -1, -9, -108, -4, -49, -1, -1, -1, -1, -1, -33, -1, -1, -2, -1, -18, -1, 127, -65, -25, -1, -1, -3, -2, -1, -1, -3, -1, -65, -1, -1, -1, -2, -1, 79, -1, 95, -1, -2, -1, -65, -58, -1, -1, -1, -9, -33, 111, -65, 124, -97, -1, -1, 90, -9, -1, -7, -1};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -3, -1, -1, -1, -4, -65, -1, -1, -33, -17, -1, -1, -1, -9, -1, -81, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -65, -1, -1, -1, 111, -1, -9, -41, -1, -33, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -33, -1, -1, 125, -33, -1, -1, -34, -9, -1, -1, -1};
  // {00000010 10010000 10101010 01111101 100}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 9, 85, -66, 1};
  // {11111111 01111111 11001101 10001101 110}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -2, -77, -79, 3};
  // {}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 4, 0, 1, 16, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 6, 0, 0};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 2, 0, 0, 4, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 64, 4, -127, 0, 9, -112, -128, 44, 0, 0, 0, 0, 8, 0, 0, -128, 0, 0, 32, 0, 0, 4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, -128, 0, 64, 0, 0, 0, 0, 0, -128, 1, 32, 0, 0, 2, 0, 0, -64, 0, 8, 0, 1, 40, 4};
}


class GBM_model_python_1589382591366_1_Forest_90 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_90_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_90_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* annual_inc */] <124773.44f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (data[10 /* annual_inc */] <25020.02f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(718, 2, data[15]) || (GenModel.bitSetIsInRange(718, 2, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 718, 2, data[15])) ? 
                    -0.044552464f : 
                    0.11756346f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(718, 2, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 718, 2, data[15])) ? 
                    -0.038601264f : 
                    -0.006902235f)) : 
             (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <21389.5f ? 
                 (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                    -0.0017345267f : 
                    0.03235262f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(716, 1, data[15]) || (GenModel.bitSetIsInRange(716, 1, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 716, 1, data[15])) ? 
                    0.013360681f : 
                    0.11183015f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                    -0.12509286f : 
                    -0.079199545f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                    -0.06639428f : 
                    0.041130133f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.113819376f : 
                    0.10735215f) : 
                 (data[0 /* loan_amnt */] <12764.0f ? 
                    0.2697762f : 
                    0.10153358f))));
    return pred;
  } // constant pool size = 722B, number of visited nodes = 15, static init size = 3960B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {66, -38, -25, 80, -92, 84, -83, 111, 8, -104, 2, 20, 0, 4, 10, 104, 64, 0, -112, -64, 77, 32, 33, 10, 32, 16, 4, 69, 104, 16, -23, -125, 112, 76, 55, -53, 9, 72, 40, 1, -118, 1, 80, -64, -116, 4, 48, 8, 2, -96, -128, 32, 0, 16, 18, 29, 74, 0, 11, 38, 0, 32, 1, 0, 66, 32, -120, 69, -96, -128, 66, -122, 1, 41, 1, 0, -24, 106, 72, 4, 104, -10, 23, 36, -124, -81, 1, -124, 44, 16};
  // {...2 0-bits}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 16, 8, 0, 0, -124, 0, 4, 16, 4, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 2, 0, 8, 0, 12, 32, 0, 0, 0, 0, 0, 8, 4, 0, 0, 64, 5, 0, 0, 0, 2, 0, 0, 8, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 84, 0, 0, 16, 0, 0, 0, 4, 1, 8, 0, 0, 0, 0, 36, 0, 0, -64, 0, 0, 0};
  // {...2 0-bits}
  public static final byte[] GRPSPLIT2 = new byte[] {-69, -1, -5, -1, -17, -1, -1, -1, 83, -1, -45, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -33, -1, -1, -1, -1, -1, 126, -1, -3, -1, -9, -33, -13, 91, -1, -1, -1, -1, -1, -73, -5, -17, -1, -65, -6, -65, -1, -1, -3, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -85, -1, -1, -49, -1, -1, -1, -1, -2, -9, -49, -1, -1, -1, -5, -1, -1, 127, -1, -1, 63};
  // {00000100 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {32, 10, 0, 0};
  // {...1 0-bits}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, -128, 64, 0, 8, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 80, 64, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 32, 0, 0, 0, -126, 0, 0, 2, 16, 0};
  // {00000000 00000000 00001000 00000000 00000010 00000000 00000010 00000000 00001001 00000100 00000100 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00010011 00000000 00001000 01000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 10000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 10000000 00000000 00000001 00000000 00010000 00000000 00000000 00000000 00000100 00001010 00000001 00000000 00010100 00000000 00000000 00000000 00000000 00000000 10000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 16, 0, 64, 0, 64, 0, -112, 32, 32, 0, 0, 8, 0, 0, 0, 0, 0, 0, 2, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -56, 0, 16, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 1, 0, -128, 0, 8, 0, 0, 0, 32, 80, -128, 0, 40, 0, 0, 0, 0, 0, 1, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, -1, -33, -1, 91, -17, -13, -2, -9, 111, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -13, -1, -1, -11, -1, -1, -1, -65, -33, -17, 94, -1, -1, -1, -22, 119, -2, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -21, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, 127, -65, -1, 127, -65, -5, -1, -1, -1, -1, -97, -35, -65, -1, -65, 63, -1, -5, -1, -5, -1, -1, -13, -1};
  // {11111111 11110011 11100000 00011101 101}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -49, 7, -72, 5};
  // {00000000 10000000 11010110 11101011 000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 1, 107, -41, 0};
  // {00011001 00010000 00100100 01001110 000}
  public static final byte[] GRPSPLIT9 = new byte[] {-104, 8, 36, 114, 0};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -17, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -2, -1, -1, -1, -1, -1, -1, -1, -1, -17, 127, -1, -1, -1, -1, -1, -1, -1, -2, -1};
}


class GBM_model_python_1589382591366_1_Forest_91 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_91_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_91_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[14 /* title */] <4977.5f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (Double.isNaN(data[22]) || data[22 /* mths_since_last_record */] <112.0f ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                    -0.02278669f : 
                    0.02042483f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.0997363f : 
                    0.1733984f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                    -0.020543568f : 
                    0.015148904f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.030225614f : 
                    0.0786841f))) : 
         (Double.isNaN(data[14 /* title */]) || !GenModel.bitSetIsInRange(768, 4978, data[14]) || (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 768, 4978, data[14])) ? 
             (!Double.isNaN(data[14 /* title */]) && (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 768, 4978, data[14])) ? 
                 (!Double.isNaN(data[14 /* title */]) && (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 768, 4978, data[14])) ? 
                    -0.12302029f : 
                    -0.110134944f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.08444232f : 
                    0.09376983f)) : 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[14 /* title */]) && (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT11, 768, 4978, data[14])) ? 
                    -0.10318919f : 
                    0.12933038f) : 
                 (Double.isNaN(data[14 /* title */]) || !GenModel.bitSetIsInRange(768, 4978, data[14]) || (GenModel.bitSetIsInRange(768, 4978, data[14]) && !GenModel.bitSetContains(GRPSPLIT12, 768, 4978, data[14])) ? 
                    0.1609404f : 
                    0.23849046f))));
    return pred;
  } // constant pool size = 1105B, number of visited nodes = 15, static init size = 6258B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {50, -61, -13, 80, 64, 55, -85, 103, 121, -120, -126, 4, 1, 72, 24, 32, 80, 8, -80, -24, 1, 32, 40, -69, 17, 20, 4, 21, 113, -115, -58, -53, 111, -50, -27, -84, 79, 40, 40, 17, -70, 1, 64, -48, -106, 5, 16, 4, 0, 41, -64, 90, 0, 16, 38, -115, 76, 0, -117, 37, 97, 34, 0, 0, 66, 33, 32, 64, 32, -127, 67, -121, -63, 8, 5, 0, -23, 12, 40, 48, 99, 85, 127, 44, 0, -38, -100, 2, 7, 36};
  // {00000000 00000000 10001011 00000000 011}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, -47, 0, 6};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000001 00000100 00000000 00000010 00100000 00000000 00000000 00000000 00010000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -128, 32, 0, 64, 4, 0, 0, 0, 8, 0};
  // {00001000 00001001 00010000 11111101 000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, -112, 8, -65, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -65, -3, -65, -65, -56, 117, -98, -58, -9, -1, -1, -1, -1, -17, -1, -17, -1, -17, -65, -2, -33, -9, -34, -1, -1, -1, -17, -66, 126, -69, -9, -66, -1, 95, -9, -4, -1, -1, -17, -41, -1, -1, -17, -17, -2, -1, -5, -1, -33, -1, -1, -1, -1, -33, -1, -5, -1, -4, -2, -1, -1, -1, -1, -1, -33, -1, -65, -33, -1, -65, -1, 127, -9, -1, -1, 127, -1, -33, -1, -3, -17, -50, -1, -1, 127, 119, -1, -6, -5};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 64, 2, 0, 64, 55, -118, 64, 57, 8, 0, 0, 0, 0, 16, 0, 16, 8, 0, 64, 1, 32, 8, 32, 0, 0, 4, 16, 64, -127, 68, 9, 1, 0, -96, 8, 3, 0, 0, 16, 8, 0, 0, 16, 16, 1, 0, 4, 0, 40, 0, 0, 0, 0, 32, 0, 4, 0, 3, 1, 0, 0, 0, 0, 64, 32, 0, 64, 32, 0, 65, 0, 0, 8, 0, 0, -128, 0, 32, 0, 34, 16, 53, 36, 0, -128, -120, 0, 5, 4};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 16, 64, 1, -128, 97, 36, 4, 0, 0, 0, 4, 5, -128, -64, 8, 49, 0, 8, 0, 4, 0, 0, 80, -64, 0, 33, 33, 114, 0, 0, 0, 33, 0, 64, -128, 34, 14, 32, 8, 0, 66, 0, -126, -128, 32, 0, 3, -128, 64, 48, 0, 0, 9, 68, 2, 56, -128, 0, 0, 0, -128, 0, 56, -127, -108, 0, 0, 24, 0, -112, -128, 0, 64, 0, 0, 64, 32, 0, 1, 0, 32, 64, 0, -96, 64, 64, 0, 0, 2, 0, 0, 32, 17, 4};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, -75, 59, 123, 103, -9, 127, -2, -35, -89, -75, -33, -68, 127, -33, -12, 95, 125, -27, -21, 89, 125, 127, -9, 117, -9, -41, -11, -3, -9, -1, -36, -67, -15, -65, -45, -98, -66, -82, -73, -1, 126, 95, -34, -1, -65, -66, -9, -65, -37, -33, -65, -48, 119, -17, 125, 62, -4, -84, -11, 119, 31, -50, -69, -68, -49, -43, -1, 116, -5, -1, -34, -99, 102, -38, -9, -11, -53, -11, 79, -79, -88, -7, -55, 122, -83, -35, 123, 38, -3, -38, 90, -1, -66, -1, 63};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT8 = new byte[] {-2, -65, -65, 127, -1, -1, -1, -2, -1, -1, -1, -1, -3, -1, -33, -1, -1, -1, -1, -5, -1, -3, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -7, -1, -33, -1, -65, -1, -73, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -4, -9, -1, -1, -1, -3, -2, -1, -1, -65, -2, -5, -65, -1, -3, -1, -11, -1, -1, -1, -33, -25, -5, -1, -1, -49, -3, -17, -1, -85, -1, -1, -2, -17, -1, -1, 111, -1, -34, -1, -1, -65, -1, 127};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {64, 20, 0, 4, 32, 16, 80, 0, 1, 48, 24, 16, 0, -108, 2, 8, 0, 0, 0, 0, 39, 0, 5, 8, 32, 0, 0, -128, 8, -112, 0, 0, 16, 0, 11, 16, 48, 64, 2, 0, 0, 0, 16, 0, 64, 0, 0, 0, 1, 0, 16, 32, 0, 1, 16, 16, 2, 0, 0, 0, 0, 0, 0, 33, 0, 2, 8, 5, -126, -128, 0, 0, 0, 64, 0, 0, 16, 2, 96, 4, 8, 32, 32, 0, 4, 32, 1, -128, 32, 80};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 8, 4, 0, 0, 16, 4, 40, 0, 82, 0, 0, 0, 0, 2, 0, 0, 0, 64, 0, 82, 64, 0, 0, 0, 0, 0, 64, 0, 16, 65, 0, 0, 16, 18, 66, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0, 1, 0, 0, 64, 32, 0, 8, 0, 68, 1, 64, -124, 1, 0, 0, 16, 0};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {-3, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1};
  // {...4978 0-bits}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 32, 0, 18, 0, 0, 0, 0, 0, 0, -128, 32, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 9, 0, 0, 8, -128, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_92 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_92_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_92_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* installment */] <1149.7701f ? 
         (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.024964886f : 
                    0.014480321f) : 
                 (!Double.isNaN(data[8 /* emp_length */]) && (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                    -0.03160009f : 
                    0.006783915f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.08415024f : 
                    0.0054381983f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 35, 0, data[6])) ? 
                    0.030692432f : 
                    0.116549134f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
            -0.11866459f : 
            -0.104264416f));
    return pred;
  } // constant pool size = 424B, number of visited nodes = 9, static init size = 2316B
  // {00000000 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {18, -46, -27, 80, -32, 51, -3, 117, 120, 40, -126, 20, 1, -60, 8, 96, 80, 8, 112, -64, 15, 64, 9, -126, 33, 20, 4, -43, 105, -56, -20, -45, 86, -118, 123, -33, 77, 104, 41, 17, -86, 1, 112, -64, -124, 0, 48, 1, 3, -127, -64, 42, 0, 16, 54, -48, 76, 0, -113, 37, 65, 36, 1, -128, 66, 33, 56, 68, 18, 64, 67, 6, -127, 105, 1, 0, 40, 104, 72, -108, 105, -11, 126, 60, -124, 61, 1, -123, 42, 48};
  // {00000000 11001001 01010100 10101000 100}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -109, 42, 21, 1};
  // {11110111 11110000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-17, 15, 0, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 34, 2, 0, 4, 68, 0, 0, 1, 16, 8, 0, 0, 9, 0, 8, 32, 0, -128, 8, 64, 0, 32, 9, 16, 0, 0, 32, 0, 0, 3, 0, 32, 64, -128, 32, 0, 0, 0, 0, 0, 0, 0, 16, 8, 4, 0, 8, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 32, 0, 0, 0, 1, 0, -128, 1, 64, -128, 0, 0, 64, 0, 0, -128, 64, 36, 32, 24, 2, 68, -123, -128, 8, -126, 0, 0, 4, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -17, -17, -1, -1, -17, -69, -1, -49, -1, -17, -1, -1, -1, -1, -1, -1, -1, -33, 63, -16, -1, -9, -3, -1, -1, -1, -1, -65, -65, 51, -17, -1, -1, -105, -65, -1, -97, -1, -1, -1, -1, -65, 63, -5, -1, -1, -2, -2, -2, -1, -3, -1, -1, -19, 127, -1, 127, -1, -2, -1, -1, -1, -1, -5, -33, -1, -1, -1, -1, -2, -5, 127, -10, -1, -1, -1, -1, -1, -1, -2, -17, -43, -73, -5, -9, -1, -5, -3, -17};
  // {00110111 10111100 00101010 10000000 000}
  public static final byte[] GRPSPLIT6 = new byte[] {-20, 61, 84, 1, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -9, -65, -1, -3, -1, -1, -2, -1, -1, -1, -1};
}


class GBM_model_python_1589382591366_1_Forest_93 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_93_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_93_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[20 /* inq_last_6mths */] <3.5f ? 
         (Double.isNaN(data[20]) || data[20 /* inq_last_6mths */] <2.5f ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
                 (data[7 /* emp_title */] <8206.5f ? 
                    -0.022241743f : 
                    0.048584f) : 
                 (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <30284.0f ? 
                    0.00793227f : 
                    -0.07002545f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.10802905f : 
                    -0.028743206f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    0.01714251f : 
                    0.11378394f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.11112468f : 
                    -0.105454735f) : 
                 (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[13])) ? 
                    -0.08405257f : 
                    0.085129395f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                -0.05052296f : 
                0.17281747f)));
    return pred;
  } // constant pool size = 617B, number of visited nodes = 13, static init size = 3378B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {34, -42, -73, 64, -64, 114, 47, 55, -7, -88, -77, 84, 1, 76, 24, 32, 112, 8, 0, -24, 15, -32, 45, -77, 49, 0, 4, -43, 61, -99, 107, 88, 127, -68, -89, -9, 110, 120, 43, 17, -86, 1, 112, -79, -106, 4, -112, 28, 3, -88, 0, 122, 0, 16, 22, 79, 14, 0, -121, 34, 96, 38, 0, -96, 5, 33, 40, -60, 51, -107, 3, -126, 1, 57, 1, 0, -88, 110, 72, -68, -21, 115, -5, -65, -124, -97, -103, 2, 35, 116};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {20, 40, 0, 0, 4, 5, -48, 64, 1, 82, 2, 0, 0, 17, 2, 0, 0, 0, 112, 0, 80, 0, 0, 8, 2, 0, 0, 0, 64, 64, -124, 3, 0, 66, 88, 8, 1, 4, 0, 0, 16, 0, 0, 64, 64, 0, 32, 1, 0, 5, 80, 0, 0, 0, 32, -128, 0, -128, 0, 5, 1, 0, 0, 1, 0, 0, -128, 1, -128, 64, 64, 4, 0, 64, 4, -128, 80, 0, 32, 0, 0, -60, 6, 64, 2, -96, 0, -123, 12, 16};
  // {10111111 10110100 10010011 11111111 11111100 11110011 11011111 11111011 11111111 11101011 11110111 11111111 11110111 11111101 11111111 11111111 11110101 11111111 11111110 11111110 01111111 11111111 11111111 10111110 11111011 11111111 11111111 11111100 11110111 11111111 10111001 11101111 11111111 11101011 00011111 01111111 10111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11011111 11111111 11011111 00111111 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111011 11111011 11111101 11110111 00111111 11110111 11111111 11010110 11011110 10101111 01101111 10111111 01111111 11111101}
  public static final byte[] GRPSPLIT2 = new byte[] {-3, 45, -55, -1, 63, -49, -5, -33, -1, -41, -17, -1, -17, -65, -1, -1, -81, -1, 127, 127, -2, -1, -1, 125, -33, -1, -1, 63, -17, -1, -99, -9, -1, -41, -8, -2, -3, -1, -1, -1, -1, -1, -65, -1, -1, -5, -1, -5, -4, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -33, -33, -65, -17, -4, -17, -1, 107, 123, -11, -10, -3, -2, -65};
  // {00001111 11101111 11011100 11011011 101}
  public static final byte[] GRPSPLIT3 = new byte[] {-16, -9, 59, -37, 5};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 64, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-35, 125, -5, -1, 59, -33, -89, -65, -1, -51, -3, -65, -1, -1, -9, -1, -1, -1, -33, -41, -2, -1, -33, -3, -1, -1, -1, -1, -98, -1, -5, -4, -1, -67, 71, 127, -9, -1, -1, -1, -1, -1, -1, 111, -1, -1, -1, -17, -1, -1, -65, -9, -1, -1, -17, -2, -3, -1, -2, -33, -1, -1, -1, -1, -1, -33, -1, 63, -35, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, 111, 62, -1, -21, -81, 123, 95, -1, -3, -1, -1};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, 127, -1, -1, -1, -33, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -65, -1, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1};
  // {00000000 10010000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 9, 0, 0};
  // {00000110 10000110 10001000 00000000 000}
  public static final byte[] GRPSPLIT8 = new byte[] {96, 97, 17, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_94 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_94_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_94_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[13 /* purpose */]) && (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    -0.11699892f : 
                    -0.06210244f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                    -0.07376592f : 
                    0.069691405f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.09357696f : 
                    0.12129893f) : 
                 (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[8])) ? 
                    0.117185146f : 
                    0.2255058f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.057489175f : 
                    0.0016216757f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    -0.030265069f : 
                    0.0725919f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    -0.052098483f : 
                    0.035523172f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT14, 720, 0, data[15])) ? 
                    -0.0032098638f : 
                    0.027185464f))));
    return pred;
  } // constant pool size = 830B, number of visited nodes = 15, static init size = 4608B
  // {01111011 11011000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-34, 27, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 32, 64, 0, 80, 2, 68, 0, 0, 32, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 40, 0, 0, 0, 1, 0, 0, 0, 0, 1, 64, -128, 0, 0, 24, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 0, 4, 64, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 2, 4, 0, 8, 0, 0, 0, 0, 0, 40, -128, 68, 2, 0, 0, 0, 0, 5, 0, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-3, 127, -35, -1, -5, -1, -9, -1, -1, -9, -1, -17, -1, -1, -9, -1, -1, -1, -65, -1, -7, -1, -1, -33, -33, -1, -1, 63, -17, -1, 126, -67, -1, -3, -66, -73, -4, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -2, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, 127, 127, -2, -1, -1, -1, -1, -1, -65, -35, -97, -17, -67, -49, -18, -5, -5, -2, -10, -1, -2, -1};
  // {11110000 00000000 00000011 01001000 001}
  public static final byte[] GRPSPLIT3 = new byte[] {15, 0, -64, 18, 4};
  // {00000000 00100100 01000000 01000000 000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 36, 2, 2, 0};
  // {00001001 11001001 11100001 00100000 000}
  public static final byte[] GRPSPLIT5 = new byte[] {-112, -109, -121, 4, 0};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 32, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 32, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00100001 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-124, 10, 0, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {2, -38, -89, 80, -92, 113, 9, 70, 49, 24, -125, 20, 0, 8, 8, 104, 16, 8, 64, -64, 71, 0, 0, -96, 32, 16, 0, -59, 113, 0, -123, 67, 58, 78, -31, 90, 11, 8, 40, 1, -120, 1, 80, -128, 12, 4, 16, 9, 3, 8, -128, 40, 0, 0, 48, 25, 10, 0, -119, 35, 32, 36, 1, 32, 64, 33, 8, 69, -128, -64, 65, -126, -64, 33, 1, 0, -24, 106, 104, 20, 106, -80, 61, 53, -124, -115, 9, -128, 45, 16};
  // {00000010 10010000 10001111 10011010 101}
  public static final byte[] GRPSPLIT9 = new byte[] {64, 9, -15, 89, 5};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {-37, -38, -1, -1, -17, -1, -81, -49, -1, -3, -49, -1, -18, -1, -1, -1, -65, -1, 95, -9, -9, -1, -1, -4, -4, -1, -5, -1, -9, -2, -3, -17, -66, 127, -7, -5, -1, -67, -2, -1, -17, -1, -1, -1, 127, -1, -33, -5, -1, 123, -81, -1, -1, -1, -7, -5, -1, 127, -1, -1, -65, -3, -1, -2, -2, -1, -33, -1, -2, -5, -1, -1, -1, -65, -1, 127, -1, 127, -1, -1, 126, -66, -3, -3, -3, -1, -17, -3, -1, -33};
  // {00100100 10100100 00000000 00000000 00000000 00000000 00001000 00001100 00000010 00000000 00001000 00000000 10001000 00000000 01000000 00000000 00000000 00000000 00000101 00010000 00010000 00000000 00000000 11000000 11000000 00000000 00000000 00000000 00010000 00000000 01000000 00001000 10000000 00000001 01100000 00100000 00000000 01000110 10000000 00000000 00001000 00000000 00000000 00000010 00000000 00000000 00000100 00100000 00000000 10100001 00001000 00000000 00000000 00000000 01100000 00100000 00000000 00000001 00000000 00000000 00000000 01000000 00000000 10000000 10000000 00000000 00000100 00000000 00000000 00100000 00000000 00000000 00000000 00000010 00000000 00000001 00000000 00000001 00000000 00000001 10000000 10000010 01000000 01000000 00000000 01000000 00000000 01000000 00000000 00000100}
  public static final byte[] GRPSPLIT11 = new byte[] {36, 37, 0, 0, 0, 0, 16, 48, 64, 0, 16, 0, 17, 0, 2, 0, 0, 0, -96, 8, 8, 0, 0, 3, 3, 0, 0, 0, 8, 0, 2, 16, 1, -128, 6, 4, 0, 98, 1, 0, 16, 0, 0, 64, 0, 0, 32, 4, 0, -123, 16, 0, 0, 0, 6, 4, 0, -128, 0, 0, 0, 2, 0, 1, 1, 0, 32, 0, 0, 4, 0, 0, 0, 64, 0, -128, 0, -128, 0, -128, 1, 65, 2, 2, 0, 2, 0, 2, 0, 32};
  // {01011101 01110111 10111010 11110101 000}
  public static final byte[] GRPSPLIT12 = new byte[] {-70, -18, 93, -81, 0};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 0, 39, 64, -124, 33, 8, 0, 1, 0, 1, 4, 0, 8, 0, 8, 0, 0, 64, 0, 4, 0, 0, 0, 32, 0, 0, -63, 48, 0, 0, 0, 2, 70, -128, 72, 3, 0, 8, 0, 0, 0, 80, 0, 8, 0, 16, 0, 1, 0, 0, 32, 0, 0, 32, 1, 10, 0, 1, 34, 0, 0, 1, 32, 0, 33, 0, 4, 0, -64, 1, -128, 0, 32, 1, 0, 72, 8, 0, 4, 72, 16, 56, 1, -124, 9, 0, 0, 13, 16};
  // {}
  public static final byte[] GRPSPLIT14 = new byte[] {0, -118, -128, 0, 0, 64, 0, 64, 48, 24, 2, 16, 0, 0, 8, 64, 0, 8, 0, -64, 67, 0, 0, -96, 0, 16, 0, 0, 64, 0, -123, 67, 24, 0, 97, 26, 8, 8, 0, 1, 8, 1, 0, -128, 4, 0, 0, 1, 2, 8, -128, 8, 0, 0, 16, 16, 2, 0, 8, 0, 32, 36, 0, 32, 64, 0, 8, 65, -128, 0, 64, 2, -64, 1, 0, 0, -96, 106, 104, 20, 32, 32, 5, 52, 0, -124, 1, -128, 32, 0};
}


class GBM_model_python_1589382591366_1_Forest_95 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_95_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_95_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[25]) || data[25 /* revol_bal */] <116727.5f ? 
         (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[13])) ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.043477543f : 
                    -0.016126368f) : 
                 (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                    0.0025779987f : 
                    0.024548125f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.08137233f : 
                    -0.008488543f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 35, 0, data[6])) ? 
                    0.011902973f : 
                    0.089492925f))) : 
         (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
            -0.12117201f : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.106853835f : 
                    -0.103625424f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.10179121f : 
                    0.049356744f))));
    return pred;
  } // constant pool size = 709B, number of visited nodes = 12, static init size = 3954B
  // {00001001 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-112, 10, 0, 0};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {22, -23, -11, 84, -48, 22, 79, 40, -7, -38, -78, 84, 0, -60, 8, 104, 80, 0, -32, 0, 82, -96, 73, -70, 1, 0, 4, -111, 97, -59, 45, 17, 77, 22, 82, -26, 94, 120, 43, 17, -78, 1, 80, 96, -122, 5, 0, 1, 2, -127, -48, 114, 0, 0, 54, 64, 78, 0, 14, 33, 65, 38, 0, 0, 4, 1, 24, -60, -125, -64, 0, 7, 1, 113, 1, 0, -88, 106, 72, -58, -86, -61, 86, -121, -124, 116, -112, -127, 61, 48};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -3, -1, -33, -2, 95, -6, -1, -1, -1, -1, -2, -1, -1, -1, -33, -1, -1, -41, -1, -1, -1, -1, -35, -5, -1, -69, -25, -1, 127, 61, -33, -97, 91, -17, 127, -7, -1, -1, -1, -1, -33, 111, -1, -1, -17, -17, -1, -1, -1, -9, -1, -1, -1, -1, -1, 127, 127, -5, -1, -1, -1, -34, -1, -1, -33, -2, -33, -2, -2, -1, 127, -9, -5, -1, -1, 127, -1, -1, -2, -49, -34, -57, -1, -3, -5, -1, -3, -69};
  // {00110101 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-84, 10, 0, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 22, 2, 0, 36, 97, -96, 87, 0, 32, 0, 0, 0, 16, 0, 0, 32, 0, 0, -56, 45, 64, 36, 1, 50, 20, 0, 68, 28, 16, -64, -62, 48, 104, -83, 17, -95, 12, 0, 0, 8, 0, 32, -112, 0, 4, 16, 28, 1, 32, 0, 8, 0, 16, 16, 11, 0, -128, 1, 6, 32, 0, 1, 33, 65, 0, 36, 1, 96, 1, 67, -128, -64, 8, 4, 0, 0, -128, 32, 24, 65, 60, -87, 60, 8, -117, 5, 4, 34, 68};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-3, -105, -49, -1, -65, -5, -14, -33, -89, 119, -17, -65, -1, -5, -1, -1, -1, -1, -97, -1, -65, 127, -1, 127, -2, -1, -5, 127, -65, 122, -13, -2, -2, -1, -67, -71, -11, -65, -9, -1, -1, -1, -65, -65, 127, -1, -1, -1, -1, 126, -1, -1, -1, -1, -3, -1, -5, -1, -3, -34, -1, -1, -1, -1, -1, -1, -9, 123, 125, 127, -1, -5, -1, -1, -1, -1, -1, -43, -1, 127, 95, -4, -19, -2, -1, -37, 111, 127, -1, -33};
  // {00011110 01101110 10001001 00000000 010}
  public static final byte[] GRPSPLIT6 = new byte[] {120, 118, -111, 0, 2};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -33, -1, -1, -65, -1, -1, -5, -5, -1, -1, -1, -1, -1};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -2, -1, -1, -1, -17, -9, -65, -34, -1, -3, -1, -1, -1, -1, -1, -1, -1, 127, 127, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -9, -3, -1, -5, -1, -1, -2, -1, -1, -1, -1};
  // {11101100 10011010 11111110 11111111 111}
  public static final byte[] GRPSPLIT9 = new byte[] {55, 89, 127, -1, 7};
  // {}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_96 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_96_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_96_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[19]) || data[19 /* earliest_cr_line */] <3.07543251E12f ? 
         (data[19 /* earliest_cr_line */] <1.1307048E12f ? 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
                 (Double.isNaN(data[14]) || (data[14] >= 5746) || data[14 /* title */] <4870.5f ? 
                    -0.017281653f : 
                    0.018427214f) : 
                 (Double.isNaN(data[10]) || data[10 /* annual_inc */] <65140.625f ? 
                    0.017401187f : 
                    -0.004597651f)) : 
             (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.11598643f : 
                    -0.044840015f) : 
                 (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 35, 0, data[6])) ? 
                    0.0213938f : 
                    0.1591156f))) : 
        0.123905405f);
    return pred;
  } // constant pool size = 313B, number of visited nodes = 8, static init size = 1674B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 118, 33, 80, -64, 84, -119, 36, 49, -94, -110, 20, 0, 4, 0, 104, 16, 0, -128, -64, 65, 0, 33, 3, 32, 16, 4, -43, 113, -111, -51, -61, 115, -52, 74, -44, 8, 0, 40, 1, 8, 1, 80, 65, 12, 4, 16, 5, 1, 0, -128, 40, 0, 0, 48, 25, 78, -128, -117, 1, 64, 36, 1, 0, 67, 33, 32, 69, -96, -63, 1, 2, 1, 32, 1, 0, -64, 106, 104, 24, 106, -128, -1, 34, -124, -115, 1, -127, 7, 32};
  // {}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 6, 0, 0, 34, 64, 64, 0, 16, 0, 64, 16, 0, 8, 0, 64, 0, 64, 0, 0, 0, 0, -104, 0, 0, 0, 0, 8, 0, 0, 0, 4, 0, -127, 41, 4, 72, 0, 0, 0, 0, 0, -128, -128, 0, 32, 24, 2, 0, 0, 0, 0, 16, 0, -60, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 8, -128, 0, 0, 64, 4, 64, 8, 0, 0, 32, 0, 0, 4, -127, 112, 0, 84, 0, 34, 4, 0, 32, 0};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-3, -101, -1, -1, 127, -5, -10, -1, -2, -35, -19, -1, -1, -1, -1, -1, -1, -1, 127, 127, -65, -1, -2, -1, -33, -1, -1, 47, -33, -1, -72, -4, -2, -73, -65, 59, -1, -1, -1, -1, -9, -1, -1, -65, -1, -1, -17, -6, -1, -1, -1, -1, -1, -1, -49, -2, -1, 127, -3, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, -1, -1, -65, -43, -65, -17, -73, -1, -113, -35, 123, -13, -2, -1, -6, -33};
  // {00010101 00101010 10101100 10000000 000}
  public static final byte[] GRPSPLIT3 = new byte[] {-88, 84, 53, 1, 0};
}


class GBM_model_python_1589382591366_1_Forest_97 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_97_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_97_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <18458.0f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 720, 0, data[15])) ? 
                    -0.07657661f : 
                    -0.010167165f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 720, 0, data[15])) ? 
                    -0.025486574f : 
                    0.042123392f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.02480873f : 
                    0.018458916f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.035282772f : 
                    0.074091524f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                 (data[0 /* loan_amnt */] <21430.5f ? 
                    -0.108137704f : 
                    -0.052910745f) : 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 35, 0, data[6])) ? 
                    -0.04595223f : 
                    0.032308947f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 35, 0, data[6])) ? 
                 (data[7 /* emp_title */] <196.5f ? 
                    0.18635005f : 
                    0.013583908f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT11, 720, 0, data[15])) ? 
                    0.046470013f : 
                    0.14613852f))));
    return pred;
  } // constant pool size = 814B, number of visited nodes = 15, static init size = 4512B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {50, -4, -76, 80, -32, 103, -15, 87, 8, -86, -72, 20, 1, 12, 8, 104, 64, 8, -48, -56, 3, -128, 108, 41, 35, 20, 4, 81, 57, 89, 108, 81, 118, -122, 80, -41, 10, 56, 40, 17, -88, 1, 48, -64, 14, 0, 48, 12, 1, 4, -48, 24, 0, 1, 54, -37, 14, 0, 13, 38, 65, 32, 1, -96, 4, 32, -120, -124, -109, 0, 0, 5, -127, 120, 0, 0, -87, 105, 40, -108, -86, 50, 87, 50, -122, -85, -99, -127, 56, 112};
  // {00011101 01000100 11100000 10000010 110}
  public static final byte[] GRPSPLIT1 = new byte[] {-72, 34, 7, 65, 3};
  // {}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -3, -1, -5, -1, -1, -1, -1, -97, -1, -2, -1, -17, -1, -1, -1, -1, -1, -1, -1, -13, -1, -1, 109, -1, -1, -1, 127, -1, -5, 126, -9, -1, -33, -41, -1, 59, -1, -3, -1, -1, -1, -1, -17, 127, -1, -1, -1, -3, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, 123, -1, -1, -65, 127, -1, -1, -65, -3, -65, -1, -65, 123, -33, 123, -1, -21, -1, -1, -2, -5};
  // {00000000 01000000 00000000 00100000 00001000 00000000 00000000 00000000 10000000 00000010 00000000 00000000 00001000 00000000 01000000 00000000 00000100 00000000 00000000 00000000 00010000 00000000 00000000 00001001 00000000 00000000 00000000 00000001 00000000 00000000 10000001 01010000 00000000 00010110 00110000 00000100 00100001 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000001 00000000 00000000 00000000 01000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000001 00000000 00000000 00000010 00000001 00000000 00000000 00000010 01000000 00000010 00000000 00000010 00100000 00000100 00100000 00000000 00100000 00000000 00000000 11000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 2, 0, 4, 16, 0, 0, 0, 1, 64, 0, 0, 16, 0, 2, 0, 32, 0, 0, 0, 8, 0, 0, -112, 0, 0, 0, -128, 0, 0, -127, 10, 0, 104, 12, 32, -124, 0, 0, 0, 0, 0, 0, 32, -128, 0, 0, 0, 2, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 4, 0, 0, -128, 0, 0, 64, -128, 0, 0, 64, 2, 64, 0, 64, 4, 32, 4, 0, 4, 0, 0, 3, 0};
  // {00000010 00100011 00001011 00000100 001}
  public static final byte[] GRPSPLIT4 = new byte[] {64, -60, -48, 32, 4};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-3, -113, -17, -17, -1, -103, -33, -69, -1, 125, -9, -1, -2, -1, -9, -1, -65, -9, -65, -1, -3, -1, -65, -41, -2, -5, -1, -65, -58, -9, -65, -65, -37, -1, -81, -69, -9, -33, -1, -1, -9, -1, -17, -65, -3, -1, -33, -1, -2, -5, -1, -25, -1, -1, -21, -73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -5, -4, -1, -1, -1, 127, -25, -1, -1, -33, -9, -1, -5, 117, -3, -7, -1, -5, 94, -1, -1, -33, -17};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 112, 16, 0, 0, 102, 32, 68, 8, 2, 8, 4, 1, 0, 8, 0, 64, 8, 0, 0, 2, 0, 0, 8, 1, 4, 0, 64, 57, 24, 96, 64, 36, 0, 80, -60, 8, 32, 0, 0, 8, 0, 16, 64, 0, 0, 32, 0, 1, 4, 0, 24, 0, 0, 20, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 4, 3, 0, 0, 4, -128, 24, 0, 0, 32, 8, 0, 4, -118, 34, 6, 0, 4, -95, 0, 0, 32, 16};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 3, 67, 0, 4, 16, 64, 8, -48, 80, 3, 64, 0, 64, 0, 0, 0, 0, 32, 32, 76, 64, 0, -126, 0, 0, 0, -124, 68, -128, -127, -118, 17, 72, -89, 0, 81, 72, 0, 0, 2, 4, 64, 1, 16, 5, 0, 1, 0, 9, 0, 32, 0, 0, 0, 4, 64, 0, -128, 1, 0, 4, 0, 0, 0, 1, 0, 64, 96, -60, 1, -126, 64, 1, 5, -128, 64, 32, 64, 108, 65, -60, 40, -63, 0, 80, 1, 4, 5, 0};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-35, -5, -53, -1, 79, -4, 78, -66, -9, 87, -17, -5, -1, -6, -9, -1, -65, -1, 111, 55, -1, 127, -73, -41, -2, -1, -1, -17, -9, -82, -43, -82, -1, 127, -1, 110, -7, -17, -9, -1, -9, -1, -17, 63, -5, -1, -49, -5, -2, -1, -81, -19, -1, -2, -33, 124, -11, 127, -2, -3, -1, -1, -1, 95, -1, -1, 119, 127, -4, -1, -1, -6, 127, -89, -1, -1, -33, -1, -33, 111, -41, -35, -85, -43, 127, -43, -13, -1, -41, -21};
  // {11010001 10001001 10001110 01111111 100}
  public static final byte[] GRPSPLIT9 = new byte[] {-117, -111, 113, -2, 1};
  // {00100000 00011110 00110001 11101000 000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 120, -116, 23, 0};
  // {}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 4, 0, 64, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 8, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 64, 0, 0, 8, 64, -64, 0, -128, 0, 64, 1, 4, 0, 0};
}


class GBM_model_python_1589382591366_1_Forest_98 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_98_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_98_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[26]) || data[26 /* revol_util */] <28.6875f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT1, 720, 0, data[15])) ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 0, data[6])) ? 
                    -0.10003163f : 
                    -0.02015387f) : 
                 (Double.isNaN(data[13 /* purpose */]) || !GenModel.bitSetIsInRange(32, 0, data[13]) || (GenModel.bitSetIsInRange(32, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[13])) ? 
                    -0.035619866f : 
                    0.03439702f)) : 
             (Double.isNaN(data[8 /* emp_length */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.05054772f : 
                    0.049761478f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    2.0670779E-4f : 
                    0.14510241f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT7, 720, 0, data[15])) ? 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.044491593f : 
                    -0.002964646f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT10, 720, 0, data[15])) ? 
                    -0.03582216f : 
                    0.092484444f)) : 
             (!Double.isNaN(data[6 /* sub_grade */]) && (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 35, 0, data[6])) ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT12, 720, 0, data[15])) ? 
                    -0.048771117f : 
                    0.049198925f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT13, 720, 0, data[15])) ? 
                    -0.008084797f : 
                    0.038804468f))));
    return pred;
  } // constant pool size = 909B, number of visited nodes = 15, static init size = 5082B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 9, 7, 16, -128, 0, -88, 123, -112, 40, 0, 0, 1, 64, 2, 0, 16, 0, -96, -128, 96, 64, 2, -125, 2, 16, 0, -64, 64, 0, 68, 10, 64, -60, -128, -103, 9, 8, 0, 0, 0, 0, 0, 16, 68, 4, 0, 0, 0, 5, 0, 0, 0, 16, 32, -55, 0, 0, 1, 0, 0, 0, 0, 33, 2, 0, 20, -128, -62, 4, 0, 0, -128, -80, 4, 0, 56, 40, 32, 64, 1, 12, 18, 16, 2, 10, -128, -128, 37, 16};
  // {10110101 10111100 11110111 11011111 11011001 11011011 11010111 11011111 11111001 10111100 01101111 11110111 11110111 01011110 11111111 11101011 11111001 11101111 11111111 11101101 11001111 11111110 01101011 11101111 01111011 11111111 11011111 11110111 11100111 01110110 11101011 01110110 01101111 10100011 01011011 10011111 11010011 10110111 11101111 11111111 10111011 11111111 11110101 11111101 11111111 11111111 11111011 11001111 10111111 11111110 11111111 11111011 11111111 11111111 11111111 11011111 11011101 11111110 10111111 11111011 01111111 10111011 11111111 11111110 11111101 01111111 11101010 11111101 11111111 11111110 10111101 11011111 01111111 01101101 11111111 11111111 11111110 00111111 11111101 11001110 10101010 11110000 11001101 11101001 11101111 01110110 11011111 00011111 10101111 11011011}
  public static final byte[] GRPSPLIT1 = new byte[] {-83, 61, -17, -5, -101, -37, -21, -5, -97, 61, -10, -17, -17, 122, -1, -41, -97, -9, -1, -73, -13, 127, -42, -9, -34, -1, -5, -17, -25, 110, -41, 110, -10, -59, -38, -7, -53, -19, -9, -1, -35, -1, -81, -65, -1, -1, -33, -13, -3, 127, -1, -33, -1, -1, -1, -5, -69, 127, -3, -33, -2, -35, -1, 127, -65, -2, 87, -65, -1, 127, -67, -5, -2, -74, -1, -1, 127, -4, -65, 115, 85, 15, -77, -105, -9, 110, -5, -8, -11, -37};
  // {11000010 00100001 01011010 01101010 111}
  public static final byte[] GRPSPLIT2 = new byte[] {67, -124, 90, 86, 7};
  // {00010101 01010000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-88, 10, 0, 0};
  // {10010101 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-87, 2, 0, 0};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -10, -5, -1, -1, -1, -9, -65, -17, -41, -1, -1, -2, -1, -3, -1, -1, -1, -1, -1, -65, -1, -1, -3, -1, -1, -1, -1, -1, -1, -5, -9, -1, -1, 127, 110, -9, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, 62, -1, -1, -2, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -49, -33, -1, -1, -1, -5, -3, -1, -1, -1, -1, 127, -2, -1};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 8, 4, 0, 0, 0, -120, 64, 16, 40, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, -111, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, -63, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 16, 32, 0, 0, 0, 0, 2, 0, 0, 0, 0, -128, 0, 0};
  // {}
  public static final byte[] GRPSPLIT7 = new byte[] {50, -10, -80, 64, 100, 84, 87, 4, 96, -110, 3, 20, 0, -124, 16, 104, 64, 8, 64, 104, 15, -128, 109, 40, 33, 0, 4, 17, 28, -36, -87, -111, 59, 58, 127, 68, 52, 112, 41, 1, 34, 1, 112, -32, 26, 0, 48, 13, 2, -88, -128, 104, 0, 1, 0, 20, 78, 0, -118, 39, 97, 38, 1, -128, 68, 33, -88, 69, 0, -64, 67, -121, 1, 73, 9, 0, -127, 71, 72, -98, 106, -14, 108, -82, -124, -107, 8, 5, 8, 36};
  // {00010000 00000100 10000010 11011111 000}
  public static final byte[] GRPSPLIT8 = new byte[] {8, 32, 65, -5, 0};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -10, -6, -1, 111, -1, -41, -59, 127, -33, 79, -1, -18, -65, -3, -1, -1, -1, -1, 127, -1, -1, -1, 124, -3, -1, -1, -5, -1, -1, -71, -3, -65, -65, -1, -25, 127, -9, -3, -1, -1, -1, -1, -1, 123, -1, -1, -1, -1, -2, -1, -1, -1, -17, -17, 63, -1, -1, -2, -1, -1, -1, -1, -33, -3, -1, -1, -1, 127, -17, -1, -1, -1, 95, -5, 127, -65, -33, -1, -65, -2, -9, -20, -17, -3, -1, 127, 127, -35, -1};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00010000 00000100 00000000 00000100 00001100 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 11000001 00000000 00000000 00000000 00000000 00000000 00000000 01000010 01000000 00000000 00000010 00000000 00001000 00000001 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000010 00000100 00000000 00000000 10000000 00000000 10000000 00000010 00000000 00000000 00000001 00000001 01000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 8, 0, 0, 0, 0, 8, 32, 0, 32, 48, 0, 16, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, -125, 0, 0, 0, 0, 0, 0, 66, 2, 0, 64, 0, 16, -128, 0, 2, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 64, 32, 0, 0, 1, 0, 1, 64, 0, 0, -128, -128, 2, 0};
  // {11101111 11011011 01101000 01100000 101}
  public static final byte[] GRPSPLIT11 = new byte[] {-9, -37, 22, 6, 5};
  // {11110011 10010110 11110011 11111111 11011111 11010111 11010101 11111111 11111011 10111110 10111111 11011111 11111111 11011110 11111111 11111111 11111101 11111111 11111111 11101001 11111111 11111110 01001111 11111111 01111111 11111111 11111111 11111111 11010111 11011101 01101011 11110111 11110111 10110011 10110101 11111101 11011111 11110111 01111111 11111111 11111011 11111111 11111011 11111100 10111111 11111111 11110011 11011111 11111111 11111111 11111111 11111011 11111111 01111111 11111111 11011111 10011111 11111111 10111110 10111111 11111111 10111111 11111111 11111111 11111111 11111011 11101010 11111101 11111111 11111101 10111101 11011111 01111111 01111111 01111111 11111111 11111110 01111111 11111111 11100111 10101101 11111101 11011001 11101010 11011111 01010111 11111111 11111111 11111111 11011011}
  public static final byte[] GRPSPLIT12 = new byte[] {-49, 105, -49, -1, -5, -21, -85, -1, -33, 125, -3, -5, -1, 123, -1, -1, -65, -1, -1, -105, -1, 127, -14, -1, -2, -1, -1, -1, -21, -69, -42, -17, -17, -51, -83, -65, -5, -17, -2, -1, -33, -1, -33, 63, -3, -1, -49, -5, -1, -1, -1, -33, -1, -2, -1, -5, -7, -1, 125, -3, -1, -3, -1, -1, -1, -33, 87, -65, -1, -65, -67, -5, -2, -2, -2, -1, 127, -2, -1, -25, -75, -65, -101, 87, -5, -22, -1, -1, -1, -37};
  // {}
  public static final byte[] GRPSPLIT13 = new byte[] {16, -122, 16, 64, 4, 20, 84, 0, 32, -128, 0, 20, 0, -124, 0, 96, 0, 0, 0, 72, 0, -128, 41, 0, 33, 0, 0, 17, 20, 0, 33, 16, 58, 34, 112, 0, 4, 16, 9, 1, 32, 1, 32, -64, 2, 0, 48, 12, 0, 0, 0, 32, 0, 0, 0, 4, 6, 0, -126, 34, 1, 34, 1, -128, 0, 32, -88, 64, 0, 0, 66, -124, 1, 1, 1, 0, 0, 65, 72, 12, 74, 64, 108, 32, 4, 21, 0, 0, 0, 4};
}


class GBM_model_python_1589382591366_1_Forest_99 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += GBM_model_python_1589382591366_1_Tree_99_class_0.score0(fdata);
  }
}
class GBM_model_python_1589382591366_1_Tree_99_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* annual_inc */] <42339.844f ? 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT0, 720, 0, data[15])) ? 
             (Double.isNaN(data[22]) || data[22 /* mths_since_last_record */] <112.0f ? 
                 (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 35, 0, data[6])) ? 
                    -0.04450429f : 
                    0.0038932518f) : 
                0.1317864f) : 
             (Double.isNaN(data[23]) || data[23 /* open_acc */] <10.5f ? 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(714, 4, data[15]) || (GenModel.bitSetIsInRange(714, 4, data[15]) && !GenModel.bitSetContains(GRPSPLIT2, 714, 4, data[15])) ? 
                    0.0031757345f : 
                    0.07165456f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(714, 4, data[15]) || (GenModel.bitSetIsInRange(714, 4, data[15]) && !GenModel.bitSetContains(GRPSPLIT3, 714, 4, data[15])) ? 
                    -0.028049212f : 
                    0.16274548f))) : 
         (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT4, 720, 0, data[15])) ? 
             (Double.isNaN(data[0]) || data[0 /* loan_amnt */] <19098.5f ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 720, 0, data[15])) ? 
                    -0.047015615f : 
                    -0.013368922f) : 
                 (Double.isNaN(data[15 /* zip_code */]) || !GenModel.bitSetIsInRange(720, 0, data[15]) || (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT6, 720, 0, data[15])) ? 
                    -0.043513875f : 
                    0.043308843f)) : 
             (Double.isNaN(data[6 /* sub_grade */]) || !GenModel.bitSetIsInRange(35, 0, data[6]) || (GenModel.bitSetIsInRange(35, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 35, 0, data[6])) ? 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT8, 720, 0, data[15])) ? 
                    -0.037299752f : 
                    0.025059748f) : 
                 (!Double.isNaN(data[15 /* zip_code */]) && (GenModel.bitSetIsInRange(720, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT9, 720, 0, data[15])) ? 
                    -0.03750726f : 
                    0.06657018f))));
    return pred;
  } // constant pool size = 798B, number of visited nodes = 14, static init size = 4440B
  // {}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 90, 0, 20, 96, 99, -119, 112, 16, 82, -110, 0, 1, 72, 0, 0, 0, 8, -96, -128, 2, 0, 13, 24, 50, 20, 0, 80, 8, 5, 103, -118, 68, -48, 49, 4, -114, 56, 40, 1, 26, 1, 64, 0, 70, 4, 16, 17, 3, -123, -128, 16, 0, 1, 34, -124, 12, -128, 2, 3, 1, 2, 1, 0, 0, 0, 20, 64, -128, 80, 3, 6, 64, -31, 0, 0, -112, 65, 64, 26, 40, 76, 92, -121, -128, 4, 5, -128, 44, 32};
  // {00011000 11010101 10000011 10110000 001}
  public static final byte[] GRPSPLIT1 = new byte[] {24, -85, -63, 13, 4};
  // {...4 0-bits}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 5, 0, 0, 4, 20, 0, 5, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 2, 0, 0, 0, 16, 0, -128, 0, 4, 16, 2, 0, -128, -128, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 16, 0, 0, 1, 0, 32, 0, -128, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 4, 8, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, -128, 84, 0, 72, 64, 0, -128, 0, 0};
  // {...4 0-bits}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 32, 0, 8, 0, 1, 33, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 4, 0, 16, 0, 0, 0, 4, 2, 32, 0, 0, 0, -128, 0, 0, 0, 32, 64, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 48, 0, 0, 4, 0, 0, 0, 24, 0, -124, -128, 0, 68, 1, 0, 0, 0, 0, 0, 2, 0};
  // {}
  public static final byte[] GRPSPLIT4 = new byte[] {38, -92, -9, 64, -108, 20, 86, 15, -24, -88, 32, 84, 0, -124, 26, 72, 80, 0, 64, 104, 69, -64, 96, 35, 1, 0, 4, -123, 117, -40, -120, 81, 59, 14, 90, -53, 97, 70, 1, 0, 32, 0, 48, -95, 24, 1, 32, 0, 0, 40, 64, 106, 0, 0, 20, 25, 66, 0, -117, 36, 0, 36, 0, 1, 65, 32, -88, -123, 35, -127, 64, -127, -127, 8, 5, -128, 41, -86, 40, -28, -125, -77, 39, 56, 10, 49, -112, 1, 7, 20};
  // {}
  public static final byte[] GRPSPLIT5 = new byte[] {-17, -1, -1, -5, -65, -1, 127, -1, -17, -83, 124, -1, -18, -65, -1, -1, -33, -9, -33, -1, -9, -1, -1, 111, -33, -5, -1, -1, -9, -2, -2, 117, -69, 127, -6, -5, -23, -33, -41, -1, -3, -1, -65, -1, -3, -5, -1, -18, -2, 126, -1, -17, -1, -1, -3, -1, -1, 127, -1, -2, -2, -3, -1, -1, -1, -2, -21, -1, -17, -85, -4, -7, -65, 30, -9, -1, 63, -2, -65, -9, -73, -77, -73, 120, -1, -69, -5, -7, -1, -1};
  // {}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 3, 0, 0, 0, 0, 0, 32, 17, 80, 3, 0, 0, 0, 0, 0, 0, 0, 32, 0, 8, 0, 0, -128, 0, 0, 0, 0, 0, 0, 1, -118, 0, 0, -123, 0, 16, 8, 0, 0, 2, 4, 64, 0, 0, 4, 0, 1, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 64, 64, 68, 1, 2, 64, 1, 0, 0, 64, 0, 64, 8, 64, 68, 8, -63, 0, 68, 1, 4, 0, 0};
  // {00000111 00100001 00001000 11011101 110}
  public static final byte[] GRPSPLIT7 = new byte[] {-32, -124, 16, -69, 3};
  // {}
  public static final byte[] GRPSPLIT8 = new byte[] {-5, 95, -50, -1, -1, -17, -7, -13, 31, 127, -33, -69, -1, 127, -27, -1, -81, -1, -65, -1, -66, 63, -33, -33, -2, -1, -1, -1, -50, 63, -1, -1, -33, -5, -75, 117, -2, -1, -1, -1, -1, -1, -17, -2, -1, -1, -33, -1, -1, -1, -1, -3, -1, -1, -17, -10, -1, -1, 127, -33, -1, -1, -1, -1, -1, -33, -9, -5, -36, -1, -65, -1, 127, -9, -5, 127, -33, 95, -1, -33, -2, -19, -7, -49, -9, -2, 127, -1, -1, -1};
  // {}
  public static final byte[] GRPSPLIT9 = new byte[] {-35, -5, -71, -1, 123, -1, -81, -11, 119, -41, -1, -17, -1, -5, -19, -1, -1, -1, -1, -105, -5, -1, -65, -4, -1, -1, -1, -1, -69, -81, 119, -82, -10, -11, -17, -66, -33, -69, -1, -1, -1, -1, -33, -33, -1, -2, -1, -1, -1, -9, -1, -9, -1, -1, -5, -1, -65, -1, -4, -1, -1, -1, -1, -1, -66, -1, 127, 127, -1, 127, -1, 126, -1, -1, -1, -1, -10, -1, -33, -65, 125, 95, -34, -9, -3, -1, -17, -2, -8, -5};
}


