/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2020-05-15T15:39:18.431-04:00
  3.30.0.2
  
  Standalone prediction code with sample test data for XGBoostModel named XGBoost_model_python_1589382591366_94

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/XGBoost_model_python_1589382591366_94 > XGBoost_model_python_1589382591366_94.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m XGBoost_model_python_1589382591366_94.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;


@ModelPojo(name="XGBoost_model_python_1589382591366_94", algorithm="xgboost")
public class XGBoost_model_python_1589382591366_94 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }

  public boolean isSupervised() { return true; }
  public int nclasses() { return 1; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_XGBoost_model_python_1589382591366_94.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* csrNotes */ XGBoost_model_python_1589382591366_94_ColInfo_0.VALUES,
    /* state */ XGBoost_model_python_1589382591366_94_ColInfo_1.VALUES,
    /* kycRiskScore */ null,
    /* income */ null,
    /* tenureMonths */ null,
    /* creditScore */ null,
    /* nbrPurchases90d */ null,
    /* avgTxnSize90d */ null,
    /* totalSpend90d */ null,
    /* nbrDistinctMerch90d */ null,
    /* nbrMerchCredits90d */ null,
    /* nbrMerchCreditsRndDollarAmt90d */ null,
    /* totalMerchCred90d */ null,
    /* nbrMerchCreditsWoOffsettingPurch */ null,
    /* nbrPayments90d */ null,
    /* totalPaymentAmt90d */ null,
    /* overpaymentAmt90d */ null,
    /* overpaymentInd90d */ null,
    /* nbrCustReqRefunds90d */ null,
    /* totalRefundsToCust90d */ null,
    /* nbrPaymentsCashLike90d */ null,
    /* maxRevolveLine */ null,
    /* indOwnsHome */ null,
    /* nbrInquiries1y */ null,
    /* nbrCollections3y */ null,
    /* nbrWebLogins90d */ null,
    /* nbrPointRed90d */ null,
    /* PEP */ null,
    /* SAR */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = null;
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public XGBoost_model_python_1589382591366_94() { super(NAMES,DOMAINS,"SAR"); }
  public String getUUID() { return Long.toString(-5466029279370725856L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    float preds_0 = 0f;
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_0.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_1.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_2.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_3.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_4.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_5.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_6.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_7.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_8.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_9.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_10.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_11.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_12.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_13.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_14.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_15.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_16.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_17.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_18.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_19.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_20.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_21.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_22.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_23.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_24.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_25.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_26.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_27.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_28.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_29.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_30.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_31.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_32.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_33.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_34.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_35.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_36.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_37.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_38.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_39.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_40.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_41.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_42.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_43.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_44.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_45.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_46.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_47.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_48.score0(data);
    preds_0 += XGBoost_model_python_1589382591366_94_Tree_g_0_t_49.score0(data);
    preds_0 += 0.5f;
    preds[0] = preds_0;
    preds[0] = (float) preds[0];
    return preds;
  }
}
// The class representing training column names
class NamesHolder_XGBoost_model_python_1589382591366_94 implements java.io.Serializable {
  public static final String[] VALUES = new String[28];
  static {
    NamesHolder_XGBoost_model_python_1589382591366_94_0.fill(VALUES);
  }
  static final class NamesHolder_XGBoost_model_python_1589382591366_94_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "csrNotes";
      sa[1] = "state";
      sa[2] = "kycRiskScore";
      sa[3] = "income";
      sa[4] = "tenureMonths";
      sa[5] = "creditScore";
      sa[6] = "nbrPurchases90d";
      sa[7] = "avgTxnSize90d";
      sa[8] = "totalSpend90d";
      sa[9] = "nbrDistinctMerch90d";
      sa[10] = "nbrMerchCredits90d";
      sa[11] = "nbrMerchCreditsRndDollarAmt90d";
      sa[12] = "totalMerchCred90d";
      sa[13] = "nbrMerchCreditsWoOffsettingPurch";
      sa[14] = "nbrPayments90d";
      sa[15] = "totalPaymentAmt90d";
      sa[16] = "overpaymentAmt90d";
      sa[17] = "overpaymentInd90d";
      sa[18] = "nbrCustReqRefunds90d";
      sa[19] = "totalRefundsToCust90d";
      sa[20] = "nbrPaymentsCashLike90d";
      sa[21] = "maxRevolveLine";
      sa[22] = "indOwnsHome";
      sa[23] = "nbrInquiries1y";
      sa[24] = "nbrCollections3y";
      sa[25] = "nbrWebLogins90d";
      sa[26] = "nbrPointRed90d";
      sa[27] = "PEP";
    }
  }
}
// The class representing column csrNotes
class XGBoost_model_python_1589382591366_94_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[2690];
  static {
    XGBoost_model_python_1589382591366_94_ColInfo_0_0.fill(VALUES);
  }
  static final class XGBoost_model_python_1589382591366_94_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "      lost cardrefund requested. supply additional details, call back";
      sa[1] = "  billing address customer call lost cardrefund requested. supply additional details, call back";
      sa[2] = "  customer call password change lost cardrefund requested. supply additional details, call back";
      sa[3] = "  plastic replace card replace lost cardrefund requested. supply additional details, call back";
      sa[4] = "  plastic replace statement lost cardrefund requested. supply additional details, call back";
      sa[5] = "  statement card replace lost cardrefund requested. supply additional details, call back";
      sa[6] = "  statement change request lost cardrefund requested. supply additional details, call back";
      sa[7] = "  statement customer call lost cardrefund requested. supply additional details, call back";
      sa[8] = "  transfer billing address lost cardrefund requested. supply additional details, call back";
      sa[9] = "  transfer change request lost cardrefund requested. supply additional details, call back";
      sa[10] = "  transfer customer call lost cardrefund requested. supply additional details, call back";
      sa[11] = "billing address  ";
      sa[12] = "billing address    ";
      sa[13] = "billing address     atm limit";
      sa[14] = "billing address     bitcoin";
      sa[15] = "billing address     statement";
      sa[16] = "billing address   billing address";
      sa[17] = "billing address   billing address atm denied";
      sa[18] = "billing address   billing address atm limit";
      sa[19] = "billing address   billing address moneyorder";
      sa[20] = "billing address   bitcoin";
      sa[21] = "billing address   card replace";
      sa[22] = "billing address   card replace moneyorder payment";
      sa[23] = "billing address   card replace statement";
      sa[24] = "billing address   card replace withdraw limit";
      sa[25] = "billing address   change request";
      sa[26] = "billing address   change request moneyorder";
      sa[27] = "billing address   customer call";
      sa[28] = "billing address   customer call overseas atm";
      sa[29] = "billing address   late payment";
      sa[30] = "billing address   late payment moneyorder payment";
      sa[31] = "billing address   late payment statement";
      sa[32] = "billing address   late payment withdraw limit";
      sa[33] = "billing address   moneyorder payment";
      sa[34] = "billing address   password change";
      sa[35] = "billing address   password change atm limit";
      sa[36] = "billing address   password change statement";
      sa[37] = "billing address   statement";
      sa[38] = "billing address   statement lost cardrefund requested. supply additional details, call back";
      sa[39] = "billing address   statement moneyorder payment";
      sa[40] = "billing address   transfer";
      sa[41] = "billing address   transfer atm limit";
      sa[42] = "billing address   transfer lost cardrefund requested. supply additional details, call back";
      sa[43] = "billing address   withdraw limit";
      sa[44] = "billing address atm denied";
      sa[45] = "billing address billing address";
      sa[46] = "billing address billing address  ";
      sa[47] = "billing address billing address   statement";
      sa[48] = "billing address billing address billing address";
      sa[49] = "billing address billing address billing address atm limit";
      sa[50] = "billing address billing address billing address cash";
      sa[51] = "billing address billing address billing address moneyorder";
      sa[52] = "billing address billing address billing address overseas atm";
      sa[53] = "billing address billing address billing address statement";
      sa[54] = "billing address billing address card replace";
      sa[55] = "billing address billing address card replace bitcoin";
      sa[56] = "billing address billing address card replace lost cardrefund requested. supply additional details, call back";
      sa[57] = "billing address billing address card replace statement";
      sa[58] = "billing address billing address change request";
      sa[59] = "billing address billing address change request atm denied";
      sa[60] = "billing address billing address change request statement";
      sa[61] = "billing address billing address customer call";
      sa[62] = "billing address billing address customer call lost cardrefund requested. supply additional details, call back";
      sa[63] = "billing address billing address customer call statement";
      sa[64] = "billing address billing address late payment";
      sa[65] = "billing address billing address late payment atm denied";
      sa[66] = "billing address billing address late payment atm limit";
      sa[67] = "billing address billing address late payment statement";
      sa[68] = "billing address billing address password change";
      sa[69] = "billing address billing address password change bitcoin";
      sa[70] = "billing address billing address password change statement";
      sa[71] = "billing address billing address plastic replace";
      sa[72] = "billing address billing address plastic replace overseas atm";
      sa[73] = "billing address billing address plastic replace statement";
      sa[74] = "billing address billing address statement";
      sa[75] = "billing address billing address transfer";
      sa[76] = "billing address billing address transfer atm denied";
      sa[77] = "billing address billing address transfer atm limit";
      sa[78] = "billing address billing address transfer cash";
      sa[79] = "billing address card replace";
      sa[80] = "billing address card replace  ";
      sa[81] = "billing address card replace   atm limit";
      sa[82] = "billing address card replace atm denied";
      sa[83] = "billing address card replace atm limit";
      sa[84] = "billing address card replace billing address statement";
      sa[85] = "billing address card replace card replace";
      sa[86] = "billing address card replace card replace bitcoin";
      sa[87] = "billing address card replace card replace lost cardrefund requested. supply additional details, call back";
      sa[88] = "billing address card replace card replace statement";
      sa[89] = "billing address card replace change request";
      sa[90] = "billing address card replace change request bitcoin";
      sa[91] = "billing address card replace change request statement";
      sa[92] = "billing address card replace customer call";
      sa[93] = "billing address card replace customer call statement";
      sa[94] = "billing address card replace late payment";
      sa[95] = "billing address card replace late payment atm limit";
      sa[96] = "billing address card replace password change";
      sa[97] = "billing address card replace password change atm limit";
      sa[98] = "billing address card replace password change bitcoin";
      sa[99] = "billing address card replace password change cash";
      sa[100] = "billing address card replace password change moneyorder payment";
      sa[101] = "billing address card replace password change statement";
      sa[102] = "billing address card replace password change withdraw limit";
      sa[103] = "billing address card replace plastic replace";
      sa[104] = "billing address card replace plastic replace lost cardrefund requested. supply additional details, call back";
      sa[105] = "billing address card replace plastic replace moneyorder";
      sa[106] = "billing address card replace plastic replace moneyorder payment";
      sa[107] = "billing address card replace plastic replace withdraw limit";
      sa[108] = "billing address card replace statement";
      sa[109] = "billing address card replace statement statement";
      sa[110] = "billing address card replace transfer";
      sa[111] = "billing address card replace transfer statement";
      sa[112] = "billing address change request";
      sa[113] = "billing address change request  ";
      sa[114] = "billing address change request   statement";
      sa[115] = "billing address change request billing address";
      sa[116] = "billing address change request billing address atm denied";
      sa[117] = "billing address change request billing address statement";
      sa[118] = "billing address change request card replace statement";
      sa[119] = "billing address change request change request";
      sa[120] = "billing address change request change request statement";
      sa[121] = "billing address change request customer call";
      sa[122] = "billing address change request customer call lost cardrefund requested. supply additional details, call back";
      sa[123] = "billing address change request customer call moneyorder";
      sa[124] = "billing address change request customer call statement";
      sa[125] = "billing address change request customer call withdraw limit";
      sa[126] = "billing address change request late payment bitcoin";
      sa[127] = "billing address change request late payment statement";
      sa[128] = "billing address change request moneyorder payment";
      sa[129] = "billing address change request password change";
      sa[130] = "billing address change request password change moneyorder payment";
      sa[131] = "billing address change request plastic replace";
      sa[132] = "billing address change request plastic replace atm denied";
      sa[133] = "billing address change request plastic replace lost cardrefund requested. supply additional details, call back";
      sa[134] = "billing address change request plastic replace statement";
      sa[135] = "billing address change request statement";
      sa[136] = "billing address change request statement atm denied";
      sa[137] = "billing address change request statement atm limit";
      sa[138] = "billing address change request statement moneyorder";
      sa[139] = "billing address change request statement withdraw limit";
      sa[140] = "billing address change request transfer";
      sa[141] = "billing address change request transfer atm denied";
      sa[142] = "billing address change request transfer statement";
      sa[143] = "billing address customer call";
      sa[144] = "billing address customer call  ";
      sa[145] = "billing address customer call   atm limit";
      sa[146] = "billing address customer call   statement";
      sa[147] = "billing address customer call atm limit";
      sa[148] = "billing address customer call billing address";
      sa[149] = "billing address customer call billing address overseas atm";
      sa[150] = "billing address customer call billing address statement";
      sa[151] = "billing address customer call card replace";
      sa[152] = "billing address customer call card replace lost cardrefund requested. supply additional details, call back";
      sa[153] = "billing address customer call card replace statement";
      sa[154] = "billing address customer call change request";
      sa[155] = "billing address customer call change request cash";
      sa[156] = "billing address customer call change request statement";
      sa[157] = "billing address customer call customer call";
      sa[158] = "billing address customer call customer call atm limit";
      sa[159] = "billing address customer call customer call cash";
      sa[160] = "billing address customer call customer call statement";
      sa[161] = "billing address customer call late payment";
      sa[162] = "billing address customer call moneyorder payment";
      sa[163] = "billing address customer call password change";
      sa[164] = "billing address customer call password change statement";
      sa[165] = "billing address customer call plastic replace";
      sa[166] = "billing address customer call plastic replace lost cardrefund requested. supply additional details, call back";
      sa[167] = "billing address customer call plastic replace statement";
      sa[168] = "billing address customer call statement";
      sa[169] = "billing address customer call statement statement";
      sa[170] = "billing address customer call transfer";
      sa[171] = "billing address customer call transfer overseas atm";
      sa[172] = "billing address late payment  ";
      sa[173] = "billing address late payment billing address";
      sa[174] = "billing address late payment billing address atm limit";
      sa[175] = "billing address late payment billing address statement";
      sa[176] = "billing address late payment bitcoin";
      sa[177] = "billing address late payment card replace";
      sa[178] = "billing address late payment card replace overseas atm";
      sa[179] = "billing address late payment change request";
      sa[180] = "billing address late payment change request atm denied";
      sa[181] = "billing address late payment change request statement";
      sa[182] = "billing address late payment customer call";
      sa[183] = "billing address late payment customer call bitcoin";
      sa[184] = "billing address late payment customer call statement";
      sa[185] = "billing address late payment late payment";
      sa[186] = "billing address late payment late payment moneyorder payment";
      sa[187] = "billing address late payment password change";
      sa[188] = "billing address late payment password change statement";
      sa[189] = "billing address late payment password change withdraw limit";
      sa[190] = "billing address late payment plastic replace";
      sa[191] = "billing address late payment statement";
      sa[192] = "billing address late payment statement atm denied";
      sa[193] = "billing address late payment statement statement";
      sa[194] = "billing address late payment transfer";
      sa[195] = "billing address late payment transfer moneyorder payment";
      sa[196] = "billing address late payment transfer statement";
      sa[197] = "billing address password change";
      sa[198] = "billing address password change   statement";
      sa[199] = "billing address password change   withdraw limit";
      sa[200] = "billing address password change billing address";
      sa[201] = "billing address password change billing address withdraw limit";
      sa[202] = "billing address password change card replace";
      sa[203] = "billing address password change card replace moneyorder payment";
      sa[204] = "billing address password change card replace overseas atm";
      sa[205] = "billing address password change card replace statement";
      sa[206] = "billing address password change change request";
      sa[207] = "billing address password change change request atm denied";
      sa[208] = "billing address password change change request statement";
      sa[209] = "billing address password change customer call";
      sa[210] = "billing address password change customer call atm denied";
      sa[211] = "billing address password change customer call overseas atm";
      sa[212] = "billing address password change customer call statement";
      sa[213] = "billing address password change late payment";
      sa[214] = "billing address password change late payment cash";
      sa[215] = "billing address password change late payment statement";
      sa[216] = "billing address password change moneyorder payment";
      sa[217] = "billing address password change password change";
      sa[218] = "billing address password change password change atm denied";
      sa[219] = "billing address password change plastic replace";
      sa[220] = "billing address password change plastic replace statement";
      sa[221] = "billing address password change statement";
      sa[222] = "billing address password change statement bitcoin";
      sa[223] = "billing address password change statement overseas atm";
      sa[224] = "billing address password change statement statement";
      sa[225] = "billing address password change transfer";
      sa[226] = "billing address password change transfer statement";
      sa[227] = "billing address plastic replace";
      sa[228] = "billing address plastic replace  ";
      sa[229] = "billing address plastic replace   atm denied";
      sa[230] = "billing address plastic replace billing address";
      sa[231] = "billing address plastic replace bitcoin";
      sa[232] = "billing address plastic replace card replace";
      sa[233] = "billing address plastic replace card replace atm denied";
      sa[234] = "billing address plastic replace card replace lost cardrefund requested. supply additional details, call back";
      sa[235] = "billing address plastic replace card replace overseas atm";
      sa[236] = "billing address plastic replace card replace statement";
      sa[237] = "billing address plastic replace card replace withdraw limit";
      sa[238] = "billing address plastic replace change request";
      sa[239] = "billing address plastic replace change request atm limit";
      sa[240] = "billing address plastic replace change request lost cardrefund requested. supply additional details, call back";
      sa[241] = "billing address plastic replace change request overseas atm";
      sa[242] = "billing address plastic replace customer call";
      sa[243] = "billing address plastic replace customer call statement";
      sa[244] = "billing address plastic replace late payment";
      sa[245] = "billing address plastic replace late payment statement";
      sa[246] = "billing address plastic replace late payment withdraw limit";
      sa[247] = "billing address plastic replace overseas atm";
      sa[248] = "billing address plastic replace password change";
      sa[249] = "billing address plastic replace password change atm limit";
      sa[250] = "billing address plastic replace password change moneyorder";
      sa[251] = "billing address plastic replace password change statement";
      sa[252] = "billing address plastic replace plastic replace";
      sa[253] = "billing address plastic replace plastic replace moneyorder";
      sa[254] = "billing address plastic replace plastic replace moneyorder payment";
      sa[255] = "billing address plastic replace plastic replace withdraw limit";
      sa[256] = "billing address plastic replace statement";
      sa[257] = "billing address plastic replace statement lost cardrefund requested. supply additional details, call back";
      sa[258] = "billing address plastic replace transfer";
      sa[259] = "billing address plastic replace transfer cash";
      sa[260] = "billing address plastic replace transfer moneyorder";
      sa[261] = "billing address plastic replace transfer statement";
      sa[262] = "billing address statement";
      sa[263] = "billing address statement  ";
      sa[264] = "billing address statement   lost cardrefund requested. supply additional details, call back";
      sa[265] = "billing address statement   statement";
      sa[266] = "billing address statement billing address";
      sa[267] = "billing address statement billing address moneyorder";
      sa[268] = "billing address statement billing address statement";
      sa[269] = "billing address statement card replace";
      sa[270] = "billing address statement card replace moneyorder payment";
      sa[271] = "billing address statement card replace statement";
      sa[272] = "billing address statement change request";
      sa[273] = "billing address statement change request statement";
      sa[274] = "billing address statement customer call";
      sa[275] = "billing address statement customer call overseas atm";
      sa[276] = "billing address statement customer call statement";
      sa[277] = "billing address statement customer call withdraw limit";
      sa[278] = "billing address statement late payment statement";
      sa[279] = "billing address statement password change";
      sa[280] = "billing address statement password change atm denied";
      sa[281] = "billing address statement password change atm limit";
      sa[282] = "billing address statement password change lost cardrefund requested. supply additional details, call back";
      sa[283] = "billing address statement plastic replace";
      sa[284] = "billing address statement statement";
      sa[285] = "billing address statement statement atm limit";
      sa[286] = "billing address statement statement moneyorder payment";
      sa[287] = "billing address statement transfer";
      sa[288] = "billing address statement transfer bitcoin";
      sa[289] = "billing address statement transfer statement";
      sa[290] = "billing address transfer";
      sa[291] = "billing address transfer  ";
      sa[292] = "billing address transfer   atm limit";
      sa[293] = "billing address transfer billing address";
      sa[294] = "billing address transfer billing address lost cardrefund requested. supply additional details, call back";
      sa[295] = "billing address transfer card replace atm limit";
      sa[296] = "billing address transfer card replace bitcoin";
      sa[297] = "billing address transfer card replace cash";
      sa[298] = "billing address transfer card replace statement";
      sa[299] = "billing address transfer cash";
      sa[300] = "billing address transfer change request";
      sa[301] = "billing address transfer change request bitcoin";
      sa[302] = "billing address transfer change request statement";
      sa[303] = "billing address transfer customer call";
      sa[304] = "billing address transfer customer call bitcoin";
      sa[305] = "billing address transfer customer call cash";
      sa[306] = "billing address transfer customer call lost cardrefund requested. supply additional details, call back";
      sa[307] = "billing address transfer customer call statement";
      sa[308] = "billing address transfer late payment";
      sa[309] = "billing address transfer late payment overseas atm";
      sa[310] = "billing address transfer late payment statement";
      sa[311] = "billing address transfer password change";
      sa[312] = "billing address transfer password change cash";
      sa[313] = "billing address transfer password change moneyorder";
      sa[314] = "billing address transfer password change moneyorder payment";
      sa[315] = "billing address transfer password change statement";
      sa[316] = "billing address transfer plastic replace statement";
      sa[317] = "billing address transfer statement";
      sa[318] = "billing address transfer statement withdraw limit";
      sa[319] = "billing address transfer transfer";
      sa[320] = "billing address transfer transfer atm denied";
      sa[321] = "billing address transfer transfer statement";
      sa[322] = "card replace";
      sa[323] = "card replace  ";
      sa[324] = "card replace    ";
      sa[325] = "card replace   billing address lost cardrefund requested. supply additional details, call back";
      sa[326] = "card replace   billing address moneyorder payment";
      sa[327] = "card replace   billing address statement";
      sa[328] = "card replace   bitcoin";
      sa[329] = "card replace   card replace";
      sa[330] = "card replace   card replace statement";
      sa[331] = "card replace   change request";
      sa[332] = "card replace   change request statement";
      sa[333] = "card replace   change request withdraw limit";
      sa[334] = "card replace   customer call";
      sa[335] = "card replace   customer call atm limit";
      sa[336] = "card replace   customer call moneyorder payment";
      sa[337] = "card replace   customer call statement";
      sa[338] = "card replace   late payment";
      sa[339] = "card replace   moneyorder";
      sa[340] = "card replace   password change";
      sa[341] = "card replace   password change moneyorder payment";
      sa[342] = "card replace   password change statement";
      sa[343] = "card replace   password change withdraw limit";
      sa[344] = "card replace   plastic replace";
      sa[345] = "card replace   plastic replace atm denied";
      sa[346] = "card replace   plastic replace bitcoin";
      sa[347] = "card replace   plastic replace statement";
      sa[348] = "card replace   statement";
      sa[349] = "card replace   statement atm denied";
      sa[350] = "card replace   statement statement";
      sa[351] = "card replace   statement withdraw limit";
      sa[352] = "card replace   transfer";
      sa[353] = "card replace   transfer moneyorder payment";
      sa[354] = "card replace   transfer overseas atm";
      sa[355] = "card replace   transfer statement";
      sa[356] = "card replace   transfer withdraw limit";
      sa[357] = "card replace billing address";
      sa[358] = "card replace billing address  ";
      sa[359] = "card replace billing address   statement";
      sa[360] = "card replace billing address atm denied";
      sa[361] = "card replace billing address atm limit";
      sa[362] = "card replace billing address billing address";
      sa[363] = "card replace billing address bitcoin";
      sa[364] = "card replace billing address card replace";
      sa[365] = "card replace billing address card replace atm limit";
      sa[366] = "card replace billing address change request";
      sa[367] = "card replace billing address change request lost cardrefund requested. supply additional details, call back";
      sa[368] = "card replace billing address change request statement";
      sa[369] = "card replace billing address customer call";
      sa[370] = "card replace billing address customer call bitcoin";
      sa[371] = "card replace billing address customer call statement";
      sa[372] = "card replace billing address late payment";
      sa[373] = "card replace billing address password change";
      sa[374] = "card replace billing address password change lost cardrefund requested. supply additional details, call back";
      sa[375] = "card replace billing address password change statement";
      sa[376] = "card replace billing address plastic replace";
      sa[377] = "card replace billing address plastic replace atm denied";
      sa[378] = "card replace billing address plastic replace statement";
      sa[379] = "card replace billing address statement";
      sa[380] = "card replace billing address statement atm limit";
      sa[381] = "card replace billing address statement cash";
      sa[382] = "card replace billing address transfer";
      sa[383] = "card replace billing address transfer atm denied";
      sa[384] = "card replace billing address transfer atm limit";
      sa[385] = "card replace billing address transfer statement";
      sa[386] = "card replace billing address withdraw limit";
      sa[387] = "card replace card replace";
      sa[388] = "card replace card replace  ";
      sa[389] = "card replace card replace   moneyorder";
      sa[390] = "card replace card replace billing address";
      sa[391] = "card replace card replace billing address cash";
      sa[392] = "card replace card replace billing address statement";
      sa[393] = "card replace card replace card replace";
      sa[394] = "card replace card replace card replace statement";
      sa[395] = "card replace card replace change request";
      sa[396] = "card replace card replace change request statement";
      sa[397] = "card replace card replace customer call";
      sa[398] = "card replace card replace customer call moneyorder payment";
      sa[399] = "card replace card replace customer call statement";
      sa[400] = "card replace card replace late payment";
      sa[401] = "card replace card replace late payment statement";
      sa[402] = "card replace card replace late payment withdraw limit";
      sa[403] = "card replace card replace password change";
      sa[404] = "card replace card replace password change lost cardrefund requested. supply additional details, call back";
      sa[405] = "card replace card replace password change moneyorder";
      sa[406] = "card replace card replace plastic replace";
      sa[407] = "card replace card replace plastic replace statement";
      sa[408] = "card replace card replace plastic replace withdraw limit";
      sa[409] = "card replace card replace statement";
      sa[410] = "card replace card replace statement atm limit";
      sa[411] = "card replace card replace transfer";
      sa[412] = "card replace change request";
      sa[413] = "card replace change request  ";
      sa[414] = "card replace change request   lost cardrefund requested. supply additional details, call back";
      sa[415] = "card replace change request   statement";
      sa[416] = "card replace change request atm denied";
      sa[417] = "card replace change request billing address";
      sa[418] = "card replace change request billing address atm denied";
      sa[419] = "card replace change request billing address cash";
      sa[420] = "card replace change request card replace";
      sa[421] = "card replace change request card replace statement";
      sa[422] = "card replace change request change request";
      sa[423] = "card replace change request change request statement";
      sa[424] = "card replace change request customer call";
      sa[425] = "card replace change request customer call lost cardrefund requested. supply additional details, call back";
      sa[426] = "card replace change request customer call overseas atm";
      sa[427] = "card replace change request customer call statement";
      sa[428] = "card replace change request customer call withdraw limit";
      sa[429] = "card replace change request late payment";
      sa[430] = "card replace change request password change atm limit";
      sa[431] = "card replace change request password change statement";
      sa[432] = "card replace change request plastic replace statement";
      sa[433] = "card replace change request statement";
      sa[434] = "card replace change request statement atm limit";
      sa[435] = "card replace change request statement cash";
      sa[436] = "card replace change request statement statement";
      sa[437] = "card replace change request transfer";
      sa[438] = "card replace customer call";
      sa[439] = "card replace customer call  ";
      sa[440] = "card replace customer call   cash";
      sa[441] = "card replace customer call   overseas atm";
      sa[442] = "card replace customer call billing address";
      sa[443] = "card replace customer call billing address moneyorder";
      sa[444] = "card replace customer call billing address moneyorder payment";
      sa[445] = "card replace customer call card replace";
      sa[446] = "card replace customer call change request";
      sa[447] = "card replace customer call change request statement";
      sa[448] = "card replace customer call customer call";
      sa[449] = "card replace customer call customer call atm limit";
      sa[450] = "card replace customer call customer call cash";
      sa[451] = "card replace customer call customer call statement";
      sa[452] = "card replace customer call late payment";
      sa[453] = "card replace customer call password change";
      sa[454] = "card replace customer call password change statement";
      sa[455] = "card replace customer call plastic replace";
      sa[456] = "card replace customer call plastic replace statement";
      sa[457] = "card replace customer call statement";
      sa[458] = "card replace customer call statement overseas atm";
      sa[459] = "card replace customer call statement statement";
      sa[460] = "card replace customer call transfer";
      sa[461] = "card replace customer call transfer cash";
      sa[462] = "card replace customer call transfer statement";
      sa[463] = "card replace customer call transfer withdraw limit";
      sa[464] = "card replace late payment";
      sa[465] = "card replace late payment  ";
      sa[466] = "card replace late payment   statement";
      sa[467] = "card replace late payment atm limit";
      sa[468] = "card replace late payment billing address";
      sa[469] = "card replace late payment billing address statement";
      sa[470] = "card replace late payment card replace";
      sa[471] = "card replace late payment card replace moneyorder";
      sa[472] = "card replace late payment card replace overseas atm";
      sa[473] = "card replace late payment card replace statement";
      sa[474] = "card replace late payment cash";
      sa[475] = "card replace late payment change request";
      sa[476] = "card replace late payment change request statement";
      sa[477] = "card replace late payment customer call";
      sa[478] = "card replace late payment customer call atm limit";
      sa[479] = "card replace late payment customer call cash";
      sa[480] = "card replace late payment customer call lost cardrefund requested. supply additional details, call back";
      sa[481] = "card replace late payment customer call moneyorder payment";
      sa[482] = "card replace late payment customer call statement";
      sa[483] = "card replace late payment customer call withdraw limit";
      sa[484] = "card replace late payment late payment";
      sa[485] = "card replace late payment late payment statement";
      sa[486] = "card replace late payment password change";
      sa[487] = "card replace late payment password change moneyorder";
      sa[488] = "card replace late payment password change moneyorder payment";
      sa[489] = "card replace late payment password change statement";
      sa[490] = "card replace late payment plastic replace";
      sa[491] = "card replace late payment plastic replace overseas atm";
      sa[492] = "card replace late payment plastic replace statement";
      sa[493] = "card replace late payment statement";
      sa[494] = "card replace late payment statement statement";
      sa[495] = "card replace late payment transfer cash";
      sa[496] = "card replace late payment transfer moneyorder";
      sa[497] = "card replace password change";
      sa[498] = "card replace password change   atm limit";
      sa[499] = "card replace password change   moneyorder payment";
      sa[500] = "card replace password change   statement";
      sa[501] = "card replace password change atm limit";
      sa[502] = "card replace password change billing address";
      sa[503] = "card replace password change billing address statement";
      sa[504] = "card replace password change billing address withdraw limit";
      sa[505] = "card replace password change card replace";
      sa[506] = "card replace password change change request";
      sa[507] = "card replace password change change request statement";
      sa[508] = "card replace password change customer call";
      sa[509] = "card replace password change customer call atm limit";
      sa[510] = "card replace password change late payment atm denied";
      sa[511] = "card replace password change late payment atm limit";
      sa[512] = "card replace password change late payment statement";
      sa[513] = "card replace password change moneyorder payment";
      sa[514] = "card replace password change password change";
      sa[515] = "card replace password change password change atm limit";
      sa[516] = "card replace password change password change cash";
      sa[517] = "card replace password change plastic replace";
      sa[518] = "card replace password change plastic replace moneyorder payment";
      sa[519] = "card replace password change statement";
      sa[520] = "card replace password change statement statement";
      sa[521] = "card replace password change transfer";
      sa[522] = "card replace password change transfer bitcoin";
      sa[523] = "card replace plastic replace";
      sa[524] = "card replace plastic replace  ";
      sa[525] = "card replace plastic replace   bitcoin";
      sa[526] = "card replace plastic replace   overseas atm";
      sa[527] = "card replace plastic replace   statement";
      sa[528] = "card replace plastic replace billing address";
      sa[529] = "card replace plastic replace billing address atm limit";
      sa[530] = "card replace plastic replace billing address moneyorder payment";
      sa[531] = "card replace plastic replace billing address statement";
      sa[532] = "card replace plastic replace bitcoin";
      sa[533] = "card replace plastic replace card replace";
      sa[534] = "card replace plastic replace card replace cash";
      sa[535] = "card replace plastic replace change request";
      sa[536] = "card replace plastic replace change request cash";
      sa[537] = "card replace plastic replace change request withdraw limit";
      sa[538] = "card replace plastic replace customer call";
      sa[539] = "card replace plastic replace customer call cash";
      sa[540] = "card replace plastic replace late payment";
      sa[541] = "card replace plastic replace late payment atm limit";
      sa[542] = "card replace plastic replace late payment cash";
      sa[543] = "card replace plastic replace late payment statement";
      sa[544] = "card replace plastic replace moneyorder payment";
      sa[545] = "card replace plastic replace overseas atm";
      sa[546] = "card replace plastic replace password change";
      sa[547] = "card replace plastic replace password change cash";
      sa[548] = "card replace plastic replace password change statement";
      sa[549] = "card replace plastic replace plastic replace";
      sa[550] = "card replace plastic replace statement";
      sa[551] = "card replace plastic replace statement atm denied";
      sa[552] = "card replace plastic replace statement atm limit";
      sa[553] = "card replace plastic replace statement lost cardrefund requested. supply additional details, call back";
      sa[554] = "card replace plastic replace statement statement";
      sa[555] = "card replace plastic replace transfer";
      sa[556] = "card replace statement";
      sa[557] = "card replace statement  ";
      sa[558] = "card replace statement   atm denied";
      sa[559] = "card replace statement   bitcoin";
      sa[560] = "card replace statement   moneyorder";
      sa[561] = "card replace statement   statement";
      sa[562] = "card replace statement billing address";
      sa[563] = "card replace statement billing address overseas atm";
      sa[564] = "card replace statement billing address statement";
      sa[565] = "card replace statement card replace";
      sa[566] = "card replace statement card replace statement";
      sa[567] = "card replace statement change request";
      sa[568] = "card replace statement change request atm denied";
      sa[569] = "card replace statement change request bitcoin";
      sa[570] = "card replace statement customer call";
      sa[571] = "card replace statement customer call atm limit";
      sa[572] = "card replace statement customer call statement";
      sa[573] = "card replace statement late payment";
      sa[574] = "card replace statement late payment atm limit";
      sa[575] = "card replace statement late payment cash";
      sa[576] = "card replace statement password change";
      sa[577] = "card replace statement password change statement";
      sa[578] = "card replace statement plastic replace";
      sa[579] = "card replace statement plastic replace lost cardrefund requested. supply additional details, call back";
      sa[580] = "card replace statement statement";
      sa[581] = "card replace statement statement atm denied";
      sa[582] = "card replace statement statement overseas atm";
      sa[583] = "card replace statement statement statement";
      sa[584] = "card replace statement transfer";
      sa[585] = "card replace statement transfer atm denied";
      sa[586] = "card replace statement transfer cash";
      sa[587] = "card replace statement transfer moneyorder payment";
      sa[588] = "card replace transfer  ";
      sa[589] = "card replace transfer   cash";
      sa[590] = "card replace transfer   statement";
      sa[591] = "card replace transfer billing address";
      sa[592] = "card replace transfer billing address statement";
      sa[593] = "card replace transfer card replace";
      sa[594] = "card replace transfer card replace statement";
      sa[595] = "card replace transfer change request";
      sa[596] = "card replace transfer change request moneyorder payment";
      sa[597] = "card replace transfer change request statement";
      sa[598] = "card replace transfer customer call";
      sa[599] = "card replace transfer late payment";
      sa[600] = "card replace transfer late payment moneyorder";
      sa[601] = "card replace transfer late payment overseas atm";
      sa[602] = "card replace transfer late payment statement";
      sa[603] = "card replace transfer password change";
      sa[604] = "card replace transfer password change bitcoin";
      sa[605] = "card replace transfer password change cash";
      sa[606] = "card replace transfer password change moneyorder payment";
      sa[607] = "card replace transfer plastic replace";
      sa[608] = "card replace transfer plastic replace atm denied";
      sa[609] = "card replace transfer plastic replace bitcoin";
      sa[610] = "card replace transfer plastic replace statement";
      sa[611] = "card replace transfer statement";
      sa[612] = "card replace transfer statement cash";
      sa[613] = "card replace transfer transfer";
      sa[614] = "card replace transfer transfer statement";
      sa[615] = "card replace withdraw limit";
      sa[616] = "change request";
      sa[617] = "change request  ";
      sa[618] = "change request     atm denied";
      sa[619] = "change request     atm limit";
      sa[620] = "change request   atm denied";
      sa[621] = "change request   billing address";
      sa[622] = "change request   billing address lost cardrefund requested. supply additional details, call back";
      sa[623] = "change request   billing address statement";
      sa[624] = "change request   card replace";
      sa[625] = "change request   card replace overseas atm";
      sa[626] = "change request   card replace statement";
      sa[627] = "change request   change request lost cardrefund requested. supply additional details, call back";
      sa[628] = "change request   change request statement";
      sa[629] = "change request   customer call";
      sa[630] = "change request   customer call moneyorder payment";
      sa[631] = "change request   customer call statement";
      sa[632] = "change request   customer call withdraw limit";
      sa[633] = "change request   late payment";
      sa[634] = "change request   late payment lost cardrefund requested. supply additional details, call back";
      sa[635] = "change request   password change";
      sa[636] = "change request   password change atm denied";
      sa[637] = "change request   password change bitcoin";
      sa[638] = "change request   plastic replace cash";
      sa[639] = "change request   plastic replace statement";
      sa[640] = "change request   statement";
      sa[641] = "change request   statement atm limit";
      sa[642] = "change request   transfer";
      sa[643] = "change request billing address";
      sa[644] = "change request billing address  ";
      sa[645] = "change request billing address   atm limit";
      sa[646] = "change request billing address   bitcoin";
      sa[647] = "change request billing address   statement";
      sa[648] = "change request billing address atm denied";
      sa[649] = "change request billing address billing address";
      sa[650] = "change request billing address billing address atm limit";
      sa[651] = "change request billing address billing address statement";
      sa[652] = "change request billing address card replace";
      sa[653] = "change request billing address card replace atm denied";
      sa[654] = "change request billing address card replace moneyorder payment";
      sa[655] = "change request billing address card replace statement";
      sa[656] = "change request billing address change request";
      sa[657] = "change request billing address customer call";
      sa[658] = "change request billing address customer call moneyorder";
      sa[659] = "change request billing address customer call overseas atm";
      sa[660] = "change request billing address late payment";
      sa[661] = "change request billing address late payment withdraw limit";
      sa[662] = "change request billing address password change";
      sa[663] = "change request billing address password change statement";
      sa[664] = "change request billing address plastic replace";
      sa[665] = "change request billing address plastic replace atm limit";
      sa[666] = "change request billing address plastic replace bitcoin";
      sa[667] = "change request billing address plastic replace statement";
      sa[668] = "change request billing address statement";
      sa[669] = "change request billing address statement statement";
      sa[670] = "change request billing address transfer";
      sa[671] = "change request billing address transfer overseas atm";
      sa[672] = "change request billing address transfer statement";
      sa[673] = "change request card replace";
      sa[674] = "change request card replace  ";
      sa[675] = "change request card replace   atm limit";
      sa[676] = "change request card replace   bitcoin";
      sa[677] = "change request card replace   statement";
      sa[678] = "change request card replace atm limit";
      sa[679] = "change request card replace billing address";
      sa[680] = "change request card replace billing address atm limit";
      sa[681] = "change request card replace billing address withdraw limit";
      sa[682] = "change request card replace bitcoin";
      sa[683] = "change request card replace card replace";
      sa[684] = "change request card replace card replace atm denied";
      sa[685] = "change request card replace card replace atm limit";
      sa[686] = "change request card replace card replace statement";
      sa[687] = "change request card replace card replace withdraw limit";
      sa[688] = "change request card replace change request";
      sa[689] = "change request card replace change request atm limit";
      sa[690] = "change request card replace change request bitcoin";
      sa[691] = "change request card replace change request lost cardrefund requested. supply additional details, call back";
      sa[692] = "change request card replace change request statement";
      sa[693] = "change request card replace customer call";
      sa[694] = "change request card replace late payment";
      sa[695] = "change request card replace late payment atm denied";
      sa[696] = "change request card replace late payment lost cardrefund requested. supply additional details, call back";
      sa[697] = "change request card replace password change";
      sa[698] = "change request card replace password change atm denied";
      sa[699] = "change request card replace password change cash";
      sa[700] = "change request card replace password change moneyorder";
      sa[701] = "change request card replace password change statement";
      sa[702] = "change request card replace plastic replace";
      sa[703] = "change request card replace plastic replace moneyorder payment";
      sa[704] = "change request card replace plastic replace statement";
      sa[705] = "change request card replace statement";
      sa[706] = "change request card replace statement statement";
      sa[707] = "change request card replace transfer statement";
      sa[708] = "change request card replace withdraw limit";
      sa[709] = "change request change request";
      sa[710] = "change request change request  ";
      sa[711] = "change request change request   statement";
      sa[712] = "change request change request billing address";
      sa[713] = "change request change request billing address moneyorder payment";
      sa[714] = "change request change request billing address statement";
      sa[715] = "change request change request bitcoin";
      sa[716] = "change request change request card replace";
      sa[717] = "change request change request change request";
      sa[718] = "change request change request change request cash";
      sa[719] = "change request change request change request withdraw limit";
      sa[720] = "change request change request customer call";
      sa[721] = "change request change request customer call statement";
      sa[722] = "change request change request late payment";
      sa[723] = "change request change request late payment moneyorder";
      sa[724] = "change request change request late payment statement";
      sa[725] = "change request change request password change";
      sa[726] = "change request change request password change statement";
      sa[727] = "change request change request plastic replace";
      sa[728] = "change request change request statement";
      sa[729] = "change request change request statement atm denied";
      sa[730] = "change request change request transfer";
      sa[731] = "change request customer call";
      sa[732] = "change request customer call  ";
      sa[733] = "change request customer call   bitcoin";
      sa[734] = "change request customer call   cash";
      sa[735] = "change request customer call   statement";
      sa[736] = "change request customer call   withdraw limit";
      sa[737] = "change request customer call billing address";
      sa[738] = "change request customer call billing address atm limit";
      sa[739] = "change request customer call billing address lost cardrefund requested. supply additional details, call back";
      sa[740] = "change request customer call billing address statement";
      sa[741] = "change request customer call billing address withdraw limit";
      sa[742] = "change request customer call card replace";
      sa[743] = "change request customer call card replace bitcoin";
      sa[744] = "change request customer call card replace moneyorder";
      sa[745] = "change request customer call card replace overseas atm";
      sa[746] = "change request customer call change request";
      sa[747] = "change request customer call change request overseas atm";
      sa[748] = "change request customer call change request statement";
      sa[749] = "change request customer call customer call";
      sa[750] = "change request customer call customer call cash";
      sa[751] = "change request customer call customer call lost cardrefund requested. supply additional details, call back";
      sa[752] = "change request customer call customer call moneyorder";
      sa[753] = "change request customer call customer call overseas atm";
      sa[754] = "change request customer call customer call statement";
      sa[755] = "change request customer call customer call withdraw limit";
      sa[756] = "change request customer call late payment";
      sa[757] = "change request customer call late payment atm denied";
      sa[758] = "change request customer call late payment overseas atm";
      sa[759] = "change request customer call late payment statement";
      sa[760] = "change request customer call password change";
      sa[761] = "change request customer call password change atm denied";
      sa[762] = "change request customer call password change bitcoin";
      sa[763] = "change request customer call password change statement";
      sa[764] = "change request customer call plastic replace";
      sa[765] = "change request customer call plastic replace lost cardrefund requested. supply additional details, call back";
      sa[766] = "change request customer call plastic replace moneyorder";
      sa[767] = "change request customer call statement";
      sa[768] = "change request customer call statement atm denied";
      sa[769] = "change request customer call statement statement";
      sa[770] = "change request customer call statement withdraw limit";
      sa[771] = "change request customer call transfer";
      sa[772] = "change request customer call transfer moneyorder payment";
      sa[773] = "change request late payment";
      sa[774] = "change request late payment  ";
      sa[775] = "change request late payment   atm limit";
      sa[776] = "change request late payment billing address";
      sa[777] = "change request late payment billing address bitcoin";
      sa[778] = "change request late payment billing address statement";
      sa[779] = "change request late payment billing address withdraw limit";
      sa[780] = "change request late payment bitcoin";
      sa[781] = "change request late payment card replace";
      sa[782] = "change request late payment card replace bitcoin";
      sa[783] = "change request late payment card replace lost cardrefund requested. supply additional details, call back";
      sa[784] = "change request late payment card replace statement";
      sa[785] = "change request late payment change request";
      sa[786] = "change request late payment change request moneyorder payment";
      sa[787] = "change request late payment change request overseas atm";
      sa[788] = "change request late payment customer call";
      sa[789] = "change request late payment customer call lost cardrefund requested. supply additional details, call back";
      sa[790] = "change request late payment customer call overseas atm";
      sa[791] = "change request late payment late payment";
      sa[792] = "change request late payment moneyorder payment";
      sa[793] = "change request late payment password change";
      sa[794] = "change request late payment plastic replace";
      sa[795] = "change request late payment plastic replace cash";
      sa[796] = "change request late payment statement";
      sa[797] = "change request late payment statement bitcoin";
      sa[798] = "change request late payment statement lost cardrefund requested. supply additional details, call back";
      sa[799] = "change request late payment transfer";
      sa[800] = "change request late payment transfer moneyorder payment";
      sa[801] = "change request password change";
      sa[802] = "change request password change  ";
      sa[803] = "change request password change   bitcoin";
      sa[804] = "change request password change   moneyorder";
      sa[805] = "change request password change   overseas atm";
      sa[806] = "change request password change   statement";
      sa[807] = "change request password change billing address";
      sa[808] = "change request password change billing address moneyorder payment";
      sa[809] = "change request password change billing address overseas atm";
      sa[810] = "change request password change billing address statement";
      sa[811] = "change request password change card replace";
      sa[812] = "change request password change card replace moneyorder payment";
      sa[813] = "change request password change cash";
      sa[814] = "change request password change change request";
      sa[815] = "change request password change change request atm denied";
      sa[816] = "change request password change change request bitcoin";
      sa[817] = "change request password change change request moneyorder";
      sa[818] = "change request password change change request moneyorder payment";
      sa[819] = "change request password change change request withdraw limit";
      sa[820] = "change request password change customer call";
      sa[821] = "change request password change late payment";
      sa[822] = "change request password change late payment cash";
      sa[823] = "change request password change late payment statement";
      sa[824] = "change request password change password change";
      sa[825] = "change request password change password change statement";
      sa[826] = "change request password change plastic replace";
      sa[827] = "change request password change plastic replace atm limit";
      sa[828] = "change request password change plastic replace statement";
      sa[829] = "change request password change statement";
      sa[830] = "change request password change statement cash";
      sa[831] = "change request password change transfer";
      sa[832] = "change request password change transfer overseas atm";
      sa[833] = "change request password change transfer statement";
      sa[834] = "change request plastic replace";
      sa[835] = "change request plastic replace  ";
      sa[836] = "change request plastic replace   overseas atm";
      sa[837] = "change request plastic replace   statement";
      sa[838] = "change request plastic replace atm denied";
      sa[839] = "change request plastic replace billing address";
      sa[840] = "change request plastic replace billing address overseas atm";
      sa[841] = "change request plastic replace billing address statement";
      sa[842] = "change request plastic replace billing address withdraw limit";
      sa[843] = "change request plastic replace card replace";
      sa[844] = "change request plastic replace card replace statement";
      sa[845] = "change request plastic replace change request";
      sa[846] = "change request plastic replace change request atm denied";
      sa[847] = "change request plastic replace change request cash";
      sa[848] = "change request plastic replace change request statement";
      sa[849] = "change request plastic replace customer call";
      sa[850] = "change request plastic replace customer call statement";
      sa[851] = "change request plastic replace late payment";
      sa[852] = "change request plastic replace late payment atm limit";
      sa[853] = "change request plastic replace late payment bitcoin";
      sa[854] = "change request plastic replace password change";
      sa[855] = "change request plastic replace password change cash";
      sa[856] = "change request plastic replace statement";
      sa[857] = "change request plastic replace transfer";
      sa[858] = "change request plastic replace transfer cash";
      sa[859] = "change request plastic replace transfer lost cardrefund requested. supply additional details, call back";
      sa[860] = "change request plastic replace transfer statement";
      sa[861] = "change request statement";
      sa[862] = "change request statement  ";
      sa[863] = "change request statement   cash";
      sa[864] = "change request statement   statement";
      sa[865] = "change request statement billing address lost cardrefund requested. supply additional details, call back";
      sa[866] = "change request statement billing address statement";
      sa[867] = "change request statement card replace";
      sa[868] = "change request statement card replace atm limit";
      sa[869] = "change request statement card replace statement";
      sa[870] = "change request statement change request atm limit";
      sa[871] = "change request statement change request statement";
      sa[872] = "change request statement customer call";
      sa[873] = "change request statement customer call statement";
      sa[874] = "change request statement customer call withdraw limit";
      sa[875] = "change request statement late payment";
      sa[876] = "change request statement late payment bitcoin";
      sa[877] = "change request statement late payment statement";
      sa[878] = "change request statement moneyorder payment";
      sa[879] = "change request statement password change lost cardrefund requested. supply additional details, call back";
      sa[880] = "change request statement password change moneyorder";
      sa[881] = "change request statement password change statement";
      sa[882] = "change request statement plastic replace";
      sa[883] = "change request statement plastic replace withdraw limit";
      sa[884] = "change request statement statement";
      sa[885] = "change request statement statement moneyorder";
      sa[886] = "change request statement statement moneyorder payment";
      sa[887] = "change request statement statement statement";
      sa[888] = "change request statement transfer";
      sa[889] = "change request statement transfer atm denied";
      sa[890] = "change request statement transfer lost cardrefund requested. supply additional details, call back";
      sa[891] = "change request statement transfer statement";
      sa[892] = "change request transfer";
      sa[893] = "change request transfer  ";
      sa[894] = "change request transfer   cash";
      sa[895] = "change request transfer billing address";
      sa[896] = "change request transfer billing address cash";
      sa[897] = "change request transfer billing address overseas atm";
      sa[898] = "change request transfer billing address statement";
      sa[899] = "change request transfer card replace";
      sa[900] = "change request transfer card replace moneyorder";
      sa[901] = "change request transfer card replace overseas atm";
      sa[902] = "change request transfer change request";
      sa[903] = "change request transfer change request statement";
      sa[904] = "change request transfer customer call";
      sa[905] = "change request transfer customer call overseas atm";
      sa[906] = "change request transfer customer call statement";
      sa[907] = "change request transfer late payment";
      sa[908] = "change request transfer late payment atm denied";
      sa[909] = "change request transfer late payment moneyorder payment";
      sa[910] = "change request transfer late payment statement";
      sa[911] = "change request transfer late payment withdraw limit";
      sa[912] = "change request transfer moneyorder";
      sa[913] = "change request transfer overseas atm";
      sa[914] = "change request transfer password change";
      sa[915] = "change request transfer password change lost cardrefund requested. supply additional details, call back";
      sa[916] = "change request transfer password change moneyorder";
      sa[917] = "change request transfer password change statement";
      sa[918] = "change request transfer plastic replace";
      sa[919] = "change request transfer plastic replace statement";
      sa[920] = "change request transfer statement";
      sa[921] = "change request transfer transfer";
      sa[922] = "change request transfer transfer lost cardrefund requested. supply additional details, call back";
      sa[923] = "change request transfer transfer moneyorder";
      sa[924] = "customer call";
      sa[925] = "customer call  ";
      sa[926] = "customer call    ";
      sa[927] = "customer call     moneyorder payment";
      sa[928] = "customer call     statement";
      sa[929] = "customer call   billing address";
      sa[930] = "customer call   billing address bitcoin";
      sa[931] = "customer call   billing address statement";
      sa[932] = "customer call   card replace";
      sa[933] = "customer call   card replace moneyorder payment";
      sa[934] = "customer call   cash";
      sa[935] = "customer call   change request bitcoin";
      sa[936] = "customer call   change request statement";
      sa[937] = "customer call   customer call";
      sa[938] = "customer call   customer call lost cardrefund requested. supply additional details, call back";
      sa[939] = "customer call   customer call statement";
      sa[940] = "customer call   late payment";
      sa[941] = "customer call   late payment moneyorder";
      sa[942] = "customer call   late payment statement";
      sa[943] = "customer call   overseas atm";
      sa[944] = "customer call   password change";
      sa[945] = "customer call   password change cash";
      sa[946] = "customer call   plastic replace";
      sa[947] = "customer call   plastic replace lost cardrefund requested. supply additional details, call back";
      sa[948] = "customer call   plastic replace statement";
      sa[949] = "customer call   plastic replace withdraw limit";
      sa[950] = "customer call   statement";
      sa[951] = "customer call   statement atm denied";
      sa[952] = "customer call   statement moneyorder";
      sa[953] = "customer call   statement moneyorder payment";
      sa[954] = "customer call   statement statement";
      sa[955] = "customer call   transfer";
      sa[956] = "customer call   transfer overseas atm";
      sa[957] = "customer call   transfer statement";
      sa[958] = "customer call billing address";
      sa[959] = "customer call billing address  ";
      sa[960] = "customer call billing address   bitcoin";
      sa[961] = "customer call billing address   overseas atm";
      sa[962] = "customer call billing address   statement";
      sa[963] = "customer call billing address atm limit";
      sa[964] = "customer call billing address billing address";
      sa[965] = "customer call billing address billing address statement";
      sa[966] = "customer call billing address card replace";
      sa[967] = "customer call billing address card replace moneyorder";
      sa[968] = "customer call billing address card replace statement";
      sa[969] = "customer call billing address change request";
      sa[970] = "customer call billing address change request statement";
      sa[971] = "customer call billing address customer call";
      sa[972] = "customer call billing address customer call bitcoin";
      sa[973] = "customer call billing address customer call moneyorder payment";
      sa[974] = "customer call billing address late payment";
      sa[975] = "customer call billing address late payment atm limit";
      sa[976] = "customer call billing address late payment moneyorder";
      sa[977] = "customer call billing address password change";
      sa[978] = "customer call billing address plastic replace";
      sa[979] = "customer call billing address plastic replace statement";
      sa[980] = "customer call billing address statement";
      sa[981] = "customer call billing address statement statement";
      sa[982] = "customer call billing address transfer";
      sa[983] = "customer call billing address transfer statement";
      sa[984] = "customer call card replace";
      sa[985] = "customer call card replace  ";
      sa[986] = "customer call card replace   atm denied";
      sa[987] = "customer call card replace   moneyorder payment";
      sa[988] = "customer call card replace billing address";
      sa[989] = "customer call card replace billing address statement";
      sa[990] = "customer call card replace card replace";
      sa[991] = "customer call card replace card replace cash";
      sa[992] = "customer call card replace card replace statement";
      sa[993] = "customer call card replace cash";
      sa[994] = "customer call card replace change request";
      sa[995] = "customer call card replace change request statement";
      sa[996] = "customer call card replace change request withdraw limit";
      sa[997] = "customer call card replace customer call";
      sa[998] = "customer call card replace customer call statement";
      sa[999] = "customer call card replace customer call withdraw limit";
      sa[1000] = "customer call card replace late payment";
      sa[1001] = "customer call card replace late payment bitcoin";
      sa[1002] = "customer call card replace late payment lost cardrefund requested. supply additional details, call back";
      sa[1003] = "customer call card replace late payment statement";
      sa[1004] = "customer call card replace password change";
      sa[1005] = "customer call card replace password change cash";
      sa[1006] = "customer call card replace password change statement";
      sa[1007] = "customer call card replace plastic replace";
      sa[1008] = "customer call card replace plastic replace bitcoin";
      sa[1009] = "customer call card replace statement";
      sa[1010] = "customer call card replace statement statement";
      sa[1011] = "customer call card replace transfer";
      sa[1012] = "customer call card replace transfer lost cardrefund requested. supply additional details, call back";
      sa[1013] = "customer call card replace transfer statement";
      sa[1014] = "customer call change request";
      sa[1015] = "customer call change request  ";
      sa[1016] = "customer call change request   statement";
      sa[1017] = "customer call change request   withdraw limit";
      sa[1018] = "customer call change request billing address";
      sa[1019] = "customer call change request billing address statement";
      sa[1020] = "customer call change request billing address withdraw limit";
      sa[1021] = "customer call change request card replace";
      sa[1022] = "customer call change request change request";
      sa[1023] = "customer call change request change request atm limit";
      sa[1024] = "customer call change request change request statement";
      sa[1025] = "customer call change request customer call";
      sa[1026] = "customer call change request customer call statement";
      sa[1027] = "customer call change request late payment";
      sa[1028] = "customer call change request late payment bitcoin";
      sa[1029] = "customer call change request late payment cash";
      sa[1030] = "customer call change request password change";
      sa[1031] = "customer call change request password change statement";
      sa[1032] = "customer call change request plastic replace";
      sa[1033] = "customer call change request plastic replace statement";
      sa[1034] = "customer call change request statement";
      sa[1035] = "customer call change request statement atm denied";
      sa[1036] = "customer call change request transfer";
      sa[1037] = "customer call change request transfer moneyorder payment";
      sa[1038] = "customer call customer call";
      sa[1039] = "customer call customer call  ";
      sa[1040] = "customer call customer call   statement";
      sa[1041] = "customer call customer call billing address";
      sa[1042] = "customer call customer call billing address overseas atm";
      sa[1043] = "customer call customer call billing address statement";
      sa[1044] = "customer call customer call billing address withdraw limit";
      sa[1045] = "customer call customer call card replace";
      sa[1046] = "customer call customer call card replace cash";
      sa[1047] = "customer call customer call card replace moneyorder payment";
      sa[1048] = "customer call customer call card replace statement";
      sa[1049] = "customer call customer call change request";
      sa[1050] = "customer call customer call change request statement";
      sa[1051] = "customer call customer call customer call";
      sa[1052] = "customer call customer call customer call lost cardrefund requested. supply additional details, call back";
      sa[1053] = "customer call customer call customer call statement";
      sa[1054] = "customer call customer call password change";
      sa[1055] = "customer call customer call password change cash";
      sa[1056] = "customer call customer call password change statement";
      sa[1057] = "customer call customer call plastic replace";
      sa[1058] = "customer call customer call plastic replace atm limit";
      sa[1059] = "customer call customer call plastic replace bitcoin";
      sa[1060] = "customer call customer call plastic replace statement";
      sa[1061] = "customer call customer call plastic replace withdraw limit";
      sa[1062] = "customer call customer call statement";
      sa[1063] = "customer call customer call statement statement";
      sa[1064] = "customer call customer call transfer statement";
      sa[1065] = "customer call late payment";
      sa[1066] = "customer call late payment  ";
      sa[1067] = "customer call late payment   atm limit";
      sa[1068] = "customer call late payment   statement";
      sa[1069] = "customer call late payment atm denied";
      sa[1070] = "customer call late payment atm limit";
      sa[1071] = "customer call late payment billing address";
      sa[1072] = "customer call late payment billing address atm limit";
      sa[1073] = "customer call late payment billing address moneyorder";
      sa[1074] = "customer call late payment billing address statement";
      sa[1075] = "customer call late payment card replace";
      sa[1076] = "customer call late payment card replace moneyorder payment";
      sa[1077] = "customer call late payment card replace statement";
      sa[1078] = "customer call late payment change request";
      sa[1079] = "customer call late payment change request cash";
      sa[1080] = "customer call late payment change request lost cardrefund requested. supply additional details, call back";
      sa[1081] = "customer call late payment change request moneyorder payment";
      sa[1082] = "customer call late payment change request statement";
      sa[1083] = "customer call late payment customer call";
      sa[1084] = "customer call late payment customer call overseas atm";
      sa[1085] = "customer call late payment customer call statement";
      sa[1086] = "customer call late payment late payment";
      sa[1087] = "customer call late payment late payment atm limit";
      sa[1088] = "customer call late payment late payment statement";
      sa[1089] = "customer call late payment password change";
      sa[1090] = "customer call late payment password change overseas atm";
      sa[1091] = "customer call late payment password change statement";
      sa[1092] = "customer call late payment plastic replace";
      sa[1093] = "customer call late payment plastic replace moneyorder payment";
      sa[1094] = "customer call late payment plastic replace overseas atm";
      sa[1095] = "customer call late payment statement";
      sa[1096] = "customer call late payment statement atm limit";
      sa[1097] = "customer call late payment statement overseas atm";
      sa[1098] = "customer call late payment statement statement";
      sa[1099] = "customer call late payment transfer";
      sa[1100] = "customer call late payment transfer atm limit";
      sa[1101] = "customer call late payment transfer bitcoin";
      sa[1102] = "customer call late payment transfer moneyorder";
      sa[1103] = "customer call late payment transfer overseas atm";
      sa[1104] = "customer call late payment transfer statement";
      sa[1105] = "customer call password change  ";
      sa[1106] = "customer call password change   bitcoin";
      sa[1107] = "customer call password change   cash";
      sa[1108] = "customer call password change   lost cardrefund requested. supply additional details, call back";
      sa[1109] = "customer call password change atm limit";
      sa[1110] = "customer call password change billing address";
      sa[1111] = "customer call password change card replace";
      sa[1112] = "customer call password change card replace cash";
      sa[1113] = "customer call password change card replace moneyorder payment";
      sa[1114] = "customer call password change card replace statement";
      sa[1115] = "customer call password change change request";
      sa[1116] = "customer call password change change request overseas atm";
      sa[1117] = "customer call password change change request statement";
      sa[1118] = "customer call password change customer call";
      sa[1119] = "customer call password change customer call overseas atm";
      sa[1120] = "customer call password change late payment";
      sa[1121] = "customer call password change late payment statement";
      sa[1122] = "customer call password change password change statement";
      sa[1123] = "customer call password change plastic replace";
      sa[1124] = "customer call password change plastic replace statement";
      sa[1125] = "customer call password change statement";
      sa[1126] = "customer call password change statement statement";
      sa[1127] = "customer call password change transfer";
      sa[1128] = "customer call password change transfer statement";
      sa[1129] = "customer call plastic replace";
      sa[1130] = "customer call plastic replace  ";
      sa[1131] = "customer call plastic replace   moneyorder payment";
      sa[1132] = "customer call plastic replace billing address";
      sa[1133] = "customer call plastic replace billing address cash";
      sa[1134] = "customer call plastic replace billing address moneyorder payment";
      sa[1135] = "customer call plastic replace billing address overseas atm";
      sa[1136] = "customer call plastic replace card replace";
      sa[1137] = "customer call plastic replace card replace atm limit";
      sa[1138] = "customer call plastic replace change request";
      sa[1139] = "customer call plastic replace customer call";
      sa[1140] = "customer call plastic replace customer call statement";
      sa[1141] = "customer call plastic replace late payment";
      sa[1142] = "customer call plastic replace late payment statement";
      sa[1143] = "customer call plastic replace moneyorder payment";
      sa[1144] = "customer call plastic replace password change";
      sa[1145] = "customer call plastic replace password change atm limit";
      sa[1146] = "customer call plastic replace plastic replace";
      sa[1147] = "customer call plastic replace plastic replace moneyorder";
      sa[1148] = "customer call plastic replace plastic replace statement";
      sa[1149] = "customer call plastic replace statement";
      sa[1150] = "customer call plastic replace statement bitcoin";
      sa[1151] = "customer call plastic replace statement cash";
      sa[1152] = "customer call plastic replace statement statement";
      sa[1153] = "customer call plastic replace transfer";
      sa[1154] = "customer call plastic replace transfer atm limit";
      sa[1155] = "customer call plastic replace transfer moneyorder";
      sa[1156] = "customer call statement";
      sa[1157] = "customer call statement  ";
      sa[1158] = "customer call statement   atm limit";
      sa[1159] = "customer call statement   lost cardrefund requested. supply additional details, call back";
      sa[1160] = "customer call statement   moneyorder";
      sa[1161] = "customer call statement   statement";
      sa[1162] = "customer call statement atm denied";
      sa[1163] = "customer call statement atm limit";
      sa[1164] = "customer call statement billing address";
      sa[1165] = "customer call statement billing address statement";
      sa[1166] = "customer call statement card replace";
      sa[1167] = "customer call statement card replace atm denied";
      sa[1168] = "customer call statement card replace statement";
      sa[1169] = "customer call statement card replace withdraw limit";
      sa[1170] = "customer call statement change request";
      sa[1171] = "customer call statement customer call";
      sa[1172] = "customer call statement customer call cash";
      sa[1173] = "customer call statement late payment";
      sa[1174] = "customer call statement late payment bitcoin";
      sa[1175] = "customer call statement password change";
      sa[1176] = "customer call statement password change statement";
      sa[1177] = "customer call statement plastic replace";
      sa[1178] = "customer call statement plastic replace statement";
      sa[1179] = "customer call statement statement";
      sa[1180] = "customer call statement statement moneyorder payment";
      sa[1181] = "customer call statement transfer";
      sa[1182] = "customer call statement transfer withdraw limit";
      sa[1183] = "customer call transfer  ";
      sa[1184] = "customer call transfer   atm denied";
      sa[1185] = "customer call transfer   atm limit";
      sa[1186] = "customer call transfer   cash";
      sa[1187] = "customer call transfer   moneyorder payment";
      sa[1188] = "customer call transfer billing address";
      sa[1189] = "customer call transfer billing address moneyorder";
      sa[1190] = "customer call transfer billing address statement";
      sa[1191] = "customer call transfer card replace";
      sa[1192] = "customer call transfer card replace lost cardrefund requested. supply additional details, call back";
      sa[1193] = "customer call transfer card replace statement";
      sa[1194] = "customer call transfer card replace withdraw limit";
      sa[1195] = "customer call transfer change request";
      sa[1196] = "customer call transfer change request bitcoin";
      sa[1197] = "customer call transfer change request moneyorder payment";
      sa[1198] = "customer call transfer customer call";
      sa[1199] = "customer call transfer customer call statement";
      sa[1200] = "customer call transfer late payment";
      sa[1201] = "customer call transfer late payment atm denied";
      sa[1202] = "customer call transfer late payment atm limit";
      sa[1203] = "customer call transfer late payment statement";
      sa[1204] = "customer call transfer password change";
      sa[1205] = "customer call transfer password change moneyorder payment";
      sa[1206] = "customer call transfer password change statement";
      sa[1207] = "customer call transfer plastic replace";
      sa[1208] = "customer call transfer plastic replace lost cardrefund requested. supply additional details, call back";
      sa[1209] = "customer call transfer plastic replace moneyorder";
      sa[1210] = "customer call transfer plastic replace statement";
      sa[1211] = "customer call transfer statement";
      sa[1212] = "customer call transfer statement bitcoin";
      sa[1213] = "customer call transfer statement statement";
      sa[1214] = "customer call transfer transfer";
      sa[1215] = "customer call transfer transfer overseas atm";
      sa[1216] = "customer call transfer transfer statement";
      sa[1217] = "late payment";
      sa[1218] = "late payment  ";
      sa[1219] = "late payment    ";
      sa[1220] = "late payment     lost cardrefund requested. supply additional details, call back";
      sa[1221] = "late payment     statement";
      sa[1222] = "late payment   billing address";
      sa[1223] = "late payment   billing address statement";
      sa[1224] = "late payment   card replace";
      sa[1225] = "late payment   card replace moneyorder payment";
      sa[1226] = "late payment   card replace statement";
      sa[1227] = "late payment   change request";
      sa[1228] = "late payment   change request overseas atm";
      sa[1229] = "late payment   customer call";
      sa[1230] = "late payment   customer call cash";
      sa[1231] = "late payment   customer call statement";
      sa[1232] = "late payment   late payment";
      sa[1233] = "late payment   late payment atm denied";
      sa[1234] = "late payment   late payment statement";
      sa[1235] = "late payment   moneyorder payment";
      sa[1236] = "late payment   password change";
      sa[1237] = "late payment   password change lost cardrefund requested. supply additional details, call back";
      sa[1238] = "late payment   password change moneyorder";
      sa[1239] = "late payment   password change moneyorder payment";
      sa[1240] = "late payment   plastic replace";
      sa[1241] = "late payment   plastic replace overseas atm";
      sa[1242] = "late payment   plastic replace statement";
      sa[1243] = "late payment   statement";
      sa[1244] = "late payment   statement statement";
      sa[1245] = "late payment   transfer";
      sa[1246] = "late payment   transfer lost cardrefund requested. supply additional details, call back";
      sa[1247] = "late payment   transfer moneyorder";
      sa[1248] = "late payment   transfer moneyorder payment";
      sa[1249] = "late payment billing address";
      sa[1250] = "late payment billing address  ";
      sa[1251] = "late payment billing address   cash";
      sa[1252] = "late payment billing address   lost cardrefund requested. supply additional details, call back";
      sa[1253] = "late payment billing address   statement";
      sa[1254] = "late payment billing address billing address";
      sa[1255] = "late payment billing address billing address moneyorder payment";
      sa[1256] = "late payment billing address billing address statement";
      sa[1257] = "late payment billing address card replace";
      sa[1258] = "late payment billing address card replace atm denied";
      sa[1259] = "late payment billing address change request";
      sa[1260] = "late payment billing address change request moneyorder";
      sa[1261] = "late payment billing address change request statement";
      sa[1262] = "late payment billing address customer call";
      sa[1263] = "late payment billing address customer call statement";
      sa[1264] = "late payment billing address late payment";
      sa[1265] = "late payment billing address late payment statement";
      sa[1266] = "late payment billing address password change";
      sa[1267] = "late payment billing address password change cash";
      sa[1268] = "late payment billing address password change statement";
      sa[1269] = "late payment billing address plastic replace";
      sa[1270] = "late payment billing address plastic replace cash";
      sa[1271] = "late payment billing address plastic replace statement";
      sa[1272] = "late payment billing address statement";
      sa[1273] = "late payment billing address statement moneyorder";
      sa[1274] = "late payment billing address statement statement";
      sa[1275] = "late payment billing address transfer";
      sa[1276] = "late payment billing address transfer statement";
      sa[1277] = "late payment card replace";
      sa[1278] = "late payment card replace   atm denied";
      sa[1279] = "late payment card replace   atm limit";
      sa[1280] = "late payment card replace   overseas atm";
      sa[1281] = "late payment card replace billing address moneyorder";
      sa[1282] = "late payment card replace billing address statement";
      sa[1283] = "late payment card replace billing address withdraw limit";
      sa[1284] = "late payment card replace card replace";
      sa[1285] = "late payment card replace card replace statement";
      sa[1286] = "late payment card replace change request statement";
      sa[1287] = "late payment card replace customer call";
      sa[1288] = "late payment card replace late payment";
      sa[1289] = "late payment card replace password change";
      sa[1290] = "late payment card replace password change atm denied";
      sa[1291] = "late payment card replace password change statement";
      sa[1292] = "late payment card replace plastic replace";
      sa[1293] = "late payment card replace plastic replace overseas atm";
      sa[1294] = "late payment card replace statement";
      sa[1295] = "late payment card replace statement atm denied";
      sa[1296] = "late payment card replace statement statement";
      sa[1297] = "late payment card replace transfer";
      sa[1298] = "late payment change request";
      sa[1299] = "late payment change request  ";
      sa[1300] = "late payment change request   bitcoin";
      sa[1301] = "late payment change request billing address";
      sa[1302] = "late payment change request billing address atm denied";
      sa[1303] = "late payment change request billing address statement";
      sa[1304] = "late payment change request billing address withdraw limit";
      sa[1305] = "late payment change request card replace";
      sa[1306] = "late payment change request card replace bitcoin";
      sa[1307] = "late payment change request card replace cash";
      sa[1308] = "late payment change request card replace moneyorder";
      sa[1309] = "late payment change request card replace statement";
      sa[1310] = "late payment change request cash";
      sa[1311] = "late payment change request change request";
      sa[1312] = "late payment change request change request lost cardrefund requested. supply additional details, call back";
      sa[1313] = "late payment change request customer call";
      sa[1314] = "late payment change request customer call lost cardrefund requested. supply additional details, call back";
      sa[1315] = "late payment change request late payment";
      sa[1316] = "late payment change request password change";
      sa[1317] = "late payment change request password change statement";
      sa[1318] = "late payment change request plastic replace";
      sa[1319] = "late payment change request plastic replace bitcoin";
      sa[1320] = "late payment change request plastic replace lost cardrefund requested. supply additional details, call back";
      sa[1321] = "late payment change request plastic replace moneyorder";
      sa[1322] = "late payment change request statement";
      sa[1323] = "late payment change request statement cash";
      sa[1324] = "late payment change request statement moneyorder payment";
      sa[1325] = "late payment change request statement overseas atm";
      sa[1326] = "late payment change request statement statement";
      sa[1327] = "late payment change request transfer";
      sa[1328] = "late payment change request transfer withdraw limit";
      sa[1329] = "late payment customer call";
      sa[1330] = "late payment customer call  ";
      sa[1331] = "late payment customer call   cash";
      sa[1332] = "late payment customer call billing address";
      sa[1333] = "late payment customer call billing address atm denied";
      sa[1334] = "late payment customer call billing address atm limit";
      sa[1335] = "late payment customer call billing address statement";
      sa[1336] = "late payment customer call card replace";
      sa[1337] = "late payment customer call card replace statement";
      sa[1338] = "late payment customer call change request";
      sa[1339] = "late payment customer call change request moneyorder";
      sa[1340] = "late payment customer call change request statement";
      sa[1341] = "late payment customer call customer call cash";
      sa[1342] = "late payment customer call customer call statement";
      sa[1343] = "late payment customer call customer call withdraw limit";
      sa[1344] = "late payment customer call late payment";
      sa[1345] = "late payment customer call late payment atm limit";
      sa[1346] = "late payment customer call late payment statement";
      sa[1347] = "late payment customer call moneyorder";
      sa[1348] = "late payment customer call password change";
      sa[1349] = "late payment customer call password change atm denied";
      sa[1350] = "late payment customer call password change moneyorder payment";
      sa[1351] = "late payment customer call plastic replace";
      sa[1352] = "late payment customer call plastic replace atm denied";
      sa[1353] = "late payment customer call plastic replace statement";
      sa[1354] = "late payment customer call statement";
      sa[1355] = "late payment customer call statement moneyorder payment";
      sa[1356] = "late payment customer call statement overseas atm";
      sa[1357] = "late payment customer call transfer";
      sa[1358] = "late payment customer call transfer atm limit";
      sa[1359] = "late payment customer call withdraw limit";
      sa[1360] = "late payment late payment";
      sa[1361] = "late payment late payment  ";
      sa[1362] = "late payment late payment   withdraw limit";
      sa[1363] = "late payment late payment billing address";
      sa[1364] = "late payment late payment billing address moneyorder payment";
      sa[1365] = "late payment late payment billing address overseas atm";
      sa[1366] = "late payment late payment card replace";
      sa[1367] = "late payment late payment card replace statement";
      sa[1368] = "late payment late payment change request";
      sa[1369] = "late payment late payment change request atm limit";
      sa[1370] = "late payment late payment change request lost cardrefund requested. supply additional details, call back";
      sa[1371] = "late payment late payment change request statement";
      sa[1372] = "late payment late payment customer call";
      sa[1373] = "late payment late payment customer call cash";
      sa[1374] = "late payment late payment customer call statement";
      sa[1375] = "late payment late payment late payment statement";
      sa[1376] = "late payment late payment moneyorder";
      sa[1377] = "late payment late payment password change";
      sa[1378] = "late payment late payment password change atm limit";
      sa[1379] = "late payment late payment password change statement";
      sa[1380] = "late payment late payment plastic replace lost cardrefund requested. supply additional details, call back";
      sa[1381] = "late payment late payment plastic replace moneyorder";
      sa[1382] = "late payment late payment plastic replace statement";
      sa[1383] = "late payment late payment statement";
      sa[1384] = "late payment late payment statement atm denied";
      sa[1385] = "late payment late payment statement atm limit";
      sa[1386] = "late payment late payment statement bitcoin";
      sa[1387] = "late payment late payment statement moneyorder payment";
      sa[1388] = "late payment late payment transfer";
      sa[1389] = "late payment late payment transfer atm limit";
      sa[1390] = "late payment late payment transfer bitcoin";
      sa[1391] = "late payment password change";
      sa[1392] = "late payment password change  ";
      sa[1393] = "late payment password change billing address";
      sa[1394] = "late payment password change billing address cash";
      sa[1395] = "late payment password change card replace";
      sa[1396] = "late payment password change card replace bitcoin";
      sa[1397] = "late payment password change card replace moneyorder payment";
      sa[1398] = "late payment password change card replace statement";
      sa[1399] = "late payment password change change request";
      sa[1400] = "late payment password change customer call";
      sa[1401] = "late payment password change customer call statement";
      sa[1402] = "late payment password change late payment";
      sa[1403] = "late payment password change late payment overseas atm";
      sa[1404] = "late payment password change moneyorder payment";
      sa[1405] = "late payment password change password change";
      sa[1406] = "late payment password change password change statement";
      sa[1407] = "late payment password change password change withdraw limit";
      sa[1408] = "late payment password change plastic replace";
      sa[1409] = "late payment password change plastic replace moneyorder";
      sa[1410] = "late payment password change plastic replace overseas atm";
      sa[1411] = "late payment password change plastic replace statement";
      sa[1412] = "late payment password change statement";
      sa[1413] = "late payment password change statement statement";
      sa[1414] = "late payment password change transfer";
      sa[1415] = "late payment password change transfer cash";
      sa[1416] = "late payment password change transfer moneyorder";
      sa[1417] = "late payment password change transfer statement";
      sa[1418] = "late payment plastic replace";
      sa[1419] = "late payment plastic replace  ";
      sa[1420] = "late payment plastic replace   cash";
      sa[1421] = "late payment plastic replace billing address";
      sa[1422] = "late payment plastic replace billing address atm denied";
      sa[1423] = "late payment plastic replace billing address lost cardrefund requested. supply additional details, call back";
      sa[1424] = "late payment plastic replace billing address overseas atm";
      sa[1425] = "late payment plastic replace billing address statement";
      sa[1426] = "late payment plastic replace card replace";
      sa[1427] = "late payment plastic replace card replace statement";
      sa[1428] = "late payment plastic replace change request";
      sa[1429] = "late payment plastic replace change request cash";
      sa[1430] = "late payment plastic replace customer call";
      sa[1431] = "late payment plastic replace customer call moneyorder";
      sa[1432] = "late payment plastic replace late payment";
      sa[1433] = "late payment plastic replace late payment cash";
      sa[1434] = "late payment plastic replace late payment statement";
      sa[1435] = "late payment plastic replace password change";
      sa[1436] = "late payment plastic replace password change lost cardrefund requested. supply additional details, call back";
      sa[1437] = "late payment plastic replace plastic replace";
      sa[1438] = "late payment plastic replace plastic replace atm limit";
      sa[1439] = "late payment plastic replace plastic replace withdraw limit";
      sa[1440] = "late payment plastic replace statement atm limit";
      sa[1441] = "late payment plastic replace statement statement";
      sa[1442] = "late payment plastic replace transfer";
      sa[1443] = "late payment statement";
      sa[1444] = "late payment statement  ";
      sa[1445] = "late payment statement   atm denied";
      sa[1446] = "late payment statement   cash";
      sa[1447] = "late payment statement   statement";
      sa[1448] = "late payment statement atm limit";
      sa[1449] = "late payment statement billing address";
      sa[1450] = "late payment statement billing address statement";
      sa[1451] = "late payment statement card replace";
      sa[1452] = "late payment statement card replace statement";
      sa[1453] = "late payment statement change request";
      sa[1454] = "late payment statement change request moneyorder";
      sa[1455] = "late payment statement change request overseas atm";
      sa[1456] = "late payment statement change request statement";
      sa[1457] = "late payment statement customer call";
      sa[1458] = "late payment statement customer call statement";
      sa[1459] = "late payment statement late payment";
      sa[1460] = "late payment statement late payment moneyorder payment";
      sa[1461] = "late payment statement password change";
      sa[1462] = "late payment statement password change atm limit";
      sa[1463] = "late payment statement password change moneyorder payment";
      sa[1464] = "late payment statement password change statement";
      sa[1465] = "late payment statement plastic replace";
      sa[1466] = "late payment statement plastic replace atm denied";
      sa[1467] = "late payment statement plastic replace lost cardrefund requested. supply additional details, call back";
      sa[1468] = "late payment statement plastic replace moneyorder payment";
      sa[1469] = "late payment statement plastic replace statement";
      sa[1470] = "late payment statement statement";
      sa[1471] = "late payment statement statement bitcoin";
      sa[1472] = "late payment statement statement statement";
      sa[1473] = "late payment statement transfer";
      sa[1474] = "late payment statement transfer bitcoin";
      sa[1475] = "late payment statement transfer moneyorder";
      sa[1476] = "late payment statement transfer statement";
      sa[1477] = "late payment transfer";
      sa[1478] = "late payment transfer  ";
      sa[1479] = "late payment transfer   atm denied";
      sa[1480] = "late payment transfer   atm limit";
      sa[1481] = "late payment transfer   overseas atm";
      sa[1482] = "late payment transfer   statement";
      sa[1483] = "late payment transfer billing address moneyorder";
      sa[1484] = "late payment transfer card replace bitcoin";
      sa[1485] = "late payment transfer card replace statement";
      sa[1486] = "late payment transfer change request";
      sa[1487] = "late payment transfer change request statement";
      sa[1488] = "late payment transfer change request withdraw limit";
      sa[1489] = "late payment transfer customer call";
      sa[1490] = "late payment transfer customer call atm limit";
      sa[1491] = "late payment transfer late payment";
      sa[1492] = "late payment transfer late payment lost cardrefund requested. supply additional details, call back";
      sa[1493] = "late payment transfer late payment moneyorder";
      sa[1494] = "late payment transfer late payment moneyorder payment";
      sa[1495] = "late payment transfer late payment statement";
      sa[1496] = "late payment transfer password change cash";
      sa[1497] = "late payment transfer password change statement";
      sa[1498] = "late payment transfer statement";
      sa[1499] = "late payment transfer statement lost cardrefund requested. supply additional details, call back";
      sa[1500] = "late payment transfer statement statement";
      sa[1501] = "late payment transfer transfer";
      sa[1502] = "late payment transfer transfer overseas atm";
      sa[1503] = "late payment transfer transfer withdraw limit";
      sa[1504] = "password change";
      sa[1505] = "password change  ";
      sa[1506] = "password change    ";
      sa[1507] = "password change     bitcoin";
      sa[1508] = "password change     statement";
      sa[1509] = "password change   atm denied";
      sa[1510] = "password change   billing address";
      sa[1511] = "password change   billing address cash";
      sa[1512] = "password change   billing address overseas atm";
      sa[1513] = "password change   billing address statement";
      sa[1514] = "password change   card replace";
      sa[1515] = "password change   card replace statement";
      sa[1516] = "password change   change request";
      sa[1517] = "password change   customer call";
      sa[1518] = "password change   customer call cash";
      sa[1519] = "password change   customer call moneyorder payment";
      sa[1520] = "password change   customer call statement";
      sa[1521] = "password change   late payment";
      sa[1522] = "password change   late payment lost cardrefund requested. supply additional details, call back";
      sa[1523] = "password change   late payment statement";
      sa[1524] = "password change   password change";
      sa[1525] = "password change   password change moneyorder";
      sa[1526] = "password change   password change statement";
      sa[1527] = "password change   plastic replace";
      sa[1528] = "password change   plastic replace moneyorder";
      sa[1529] = "password change   plastic replace moneyorder payment";
      sa[1530] = "password change   statement";
      sa[1531] = "password change   transfer";
      sa[1532] = "password change   transfer atm denied";
      sa[1533] = "password change   transfer bitcoin";
      sa[1534] = "password change   transfer moneyorder payment";
      sa[1535] = "password change   transfer statement";
      sa[1536] = "password change atm denied";
      sa[1537] = "password change atm limit";
      sa[1538] = "password change billing address";
      sa[1539] = "password change billing address  ";
      sa[1540] = "password change billing address   cash";
      sa[1541] = "password change billing address   overseas atm";
      sa[1542] = "password change billing address   statement";
      sa[1543] = "password change billing address atm limit";
      sa[1544] = "password change billing address billing address";
      sa[1545] = "password change billing address billing address lost cardrefund requested. supply additional details, call back";
      sa[1546] = "password change billing address billing address statement";
      sa[1547] = "password change billing address card replace";
      sa[1548] = "password change billing address card replace cash";
      sa[1549] = "password change billing address card replace statement";
      sa[1550] = "password change billing address change request";
      sa[1551] = "password change billing address change request statement";
      sa[1552] = "password change billing address change request withdraw limit";
      sa[1553] = "password change billing address customer call";
      sa[1554] = "password change billing address customer call moneyorder";
      sa[1555] = "password change billing address customer call statement";
      sa[1556] = "password change billing address customer call withdraw limit";
      sa[1557] = "password change billing address late payment";
      sa[1558] = "password change billing address late payment atm denied";
      sa[1559] = "password change billing address late payment lost cardrefund requested. supply additional details, call back";
      sa[1560] = "password change billing address late payment statement";
      sa[1561] = "password change billing address password change";
      sa[1562] = "password change billing address password change atm denied";
      sa[1563] = "password change billing address password change overseas atm";
      sa[1564] = "password change billing address plastic replace";
      sa[1565] = "password change billing address plastic replace moneyorder payment";
      sa[1566] = "password change billing address plastic replace overseas atm";
      sa[1567] = "password change billing address plastic replace statement";
      sa[1568] = "password change billing address statement";
      sa[1569] = "password change billing address statement bitcoin";
      sa[1570] = "password change billing address statement statement";
      sa[1571] = "password change billing address transfer";
      sa[1572] = "password change billing address transfer statement";
      sa[1573] = "password change billing address transfer withdraw limit";
      sa[1574] = "password change card replace";
      sa[1575] = "password change card replace  ";
      sa[1576] = "password change card replace   bitcoin";
      sa[1577] = "password change card replace   cash";
      sa[1578] = "password change card replace billing address";
      sa[1579] = "password change card replace card replace";
      sa[1580] = "password change card replace card replace atm denied";
      sa[1581] = "password change card replace card replace moneyorder payment";
      sa[1582] = "password change card replace card replace statement";
      sa[1583] = "password change card replace change request";
      sa[1584] = "password change card replace change request atm denied";
      sa[1585] = "password change card replace change request atm limit";
      sa[1586] = "password change card replace change request moneyorder";
      sa[1587] = "password change card replace change request withdraw limit";
      sa[1588] = "password change card replace customer call";
      sa[1589] = "password change card replace late payment";
      sa[1590] = "password change card replace late payment atm denied";
      sa[1591] = "password change card replace late payment atm limit";
      sa[1592] = "password change card replace late payment cash";
      sa[1593] = "password change card replace late payment statement";
      sa[1594] = "password change card replace password change";
      sa[1595] = "password change card replace password change moneyorder payment";
      sa[1596] = "password change card replace password change overseas atm";
      sa[1597] = "password change card replace password change statement";
      sa[1598] = "password change card replace password change withdraw limit";
      sa[1599] = "password change card replace plastic replace";
      sa[1600] = "password change card replace plastic replace moneyorder";
      sa[1601] = "password change card replace plastic replace moneyorder payment";
      sa[1602] = "password change card replace plastic replace overseas atm";
      sa[1603] = "password change card replace statement";
      sa[1604] = "password change card replace statement bitcoin";
      sa[1605] = "password change card replace statement overseas atm";
      sa[1606] = "password change card replace statement statement";
      sa[1607] = "password change card replace transfer";
      sa[1608] = "password change card replace transfer moneyorder";
      sa[1609] = "password change card replace transfer statement";
      sa[1610] = "password change card replace transfer withdraw limit";
      sa[1611] = "password change change request";
      sa[1612] = "password change change request  ";
      sa[1613] = "password change change request billing address";
      sa[1614] = "password change change request billing address atm denied";
      sa[1615] = "password change change request card replace";
      sa[1616] = "password change change request card replace withdraw limit";
      sa[1617] = "password change change request change request";
      sa[1618] = "password change change request change request bitcoin";
      sa[1619] = "password change change request change request statement";
      sa[1620] = "password change change request customer call";
      sa[1621] = "password change change request customer call cash";
      sa[1622] = "password change change request customer call moneyorder payment";
      sa[1623] = "password change change request customer call statement";
      sa[1624] = "password change change request late payment";
      sa[1625] = "password change change request late payment cash";
      sa[1626] = "password change change request late payment moneyorder payment";
      sa[1627] = "password change change request late payment statement";
      sa[1628] = "password change change request password change";
      sa[1629] = "password change change request password change statement";
      sa[1630] = "password change change request statement";
      sa[1631] = "password change change request statement cash";
      sa[1632] = "password change change request statement moneyorder";
      sa[1633] = "password change change request statement moneyorder payment";
      sa[1634] = "password change change request transfer";
      sa[1635] = "password change change request transfer atm limit";
      sa[1636] = "password change change request transfer cash";
      sa[1637] = "password change change request transfer statement";
      sa[1638] = "password change customer call";
      sa[1639] = "password change customer call  ";
      sa[1640] = "password change customer call   statement";
      sa[1641] = "password change customer call atm limit";
      sa[1642] = "password change customer call billing address";
      sa[1643] = "password change customer call billing address atm denied";
      sa[1644] = "password change customer call billing address statement";
      sa[1645] = "password change customer call card replace";
      sa[1646] = "password change customer call card replace statement";
      sa[1647] = "password change customer call change request";
      sa[1648] = "password change customer call change request atm denied";
      sa[1649] = "password change customer call change request bitcoin";
      sa[1650] = "password change customer call change request statement";
      sa[1651] = "password change customer call customer call";
      sa[1652] = "password change customer call customer call statement";
      sa[1653] = "password change customer call late payment";
      sa[1654] = "password change customer call late payment bitcoin";
      sa[1655] = "password change customer call password change";
      sa[1656] = "password change customer call password change bitcoin";
      sa[1657] = "password change customer call password change statement";
      sa[1658] = "password change customer call plastic replace";
      sa[1659] = "password change customer call plastic replace statement";
      sa[1660] = "password change customer call statement";
      sa[1661] = "password change customer call statement overseas atm";
      sa[1662] = "password change customer call statement statement";
      sa[1663] = "password change customer call transfer";
      sa[1664] = "password change customer call transfer statement";
      sa[1665] = "password change customer call withdraw limit";
      sa[1666] = "password change late payment";
      sa[1667] = "password change late payment  ";
      sa[1668] = "password change late payment   cash";
      sa[1669] = "password change late payment billing address";
      sa[1670] = "password change late payment billing address moneyorder payment";
      sa[1671] = "password change late payment billing address statement";
      sa[1672] = "password change late payment card replace statement";
      sa[1673] = "password change late payment card replace withdraw limit";
      sa[1674] = "password change late payment change request";
      sa[1675] = "password change late payment change request overseas atm";
      sa[1676] = "password change late payment change request statement";
      sa[1677] = "password change late payment customer call";
      sa[1678] = "password change late payment late payment";
      sa[1679] = "password change late payment late payment cash";
      sa[1680] = "password change late payment late payment statement";
      sa[1681] = "password change late payment password change moneyorder payment";
      sa[1682] = "password change late payment password change statement";
      sa[1683] = "password change late payment plastic replace";
      sa[1684] = "password change late payment plastic replace statement";
      sa[1685] = "password change late payment transfer";
      sa[1686] = "password change late payment transfer statement";
      sa[1687] = "password change late payment withdraw limit";
      sa[1688] = "password change password change";
      sa[1689] = "password change password change  ";
      sa[1690] = "password change password change   statement";
      sa[1691] = "password change password change atm denied";
      sa[1692] = "password change password change billing address";
      sa[1693] = "password change password change billing address statement";
      sa[1694] = "password change password change card replace";
      sa[1695] = "password change password change card replace bitcoin";
      sa[1696] = "password change password change card replace cash";
      sa[1697] = "password change password change card replace overseas atm";
      sa[1698] = "password change password change change request";
      sa[1699] = "password change password change customer call";
      sa[1700] = "password change password change customer call statement";
      sa[1701] = "password change password change late payment";
      sa[1702] = "password change password change late payment statement";
      sa[1703] = "password change password change password change";
      sa[1704] = "password change password change password change statement";
      sa[1705] = "password change password change plastic replace";
      sa[1706] = "password change password change plastic replace overseas atm";
      sa[1707] = "password change password change plastic replace statement";
      sa[1708] = "password change password change plastic replace withdraw limit";
      sa[1709] = "password change password change statement";
      sa[1710] = "password change password change transfer";
      sa[1711] = "password change password change transfer atm denied";
      sa[1712] = "password change password change transfer overseas atm";
      sa[1713] = "password change plastic replace";
      sa[1714] = "password change plastic replace  ";
      sa[1715] = "password change plastic replace   statement";
      sa[1716] = "password change plastic replace billing address";
      sa[1717] = "password change plastic replace billing address cash";
      sa[1718] = "password change plastic replace billing address statement";
      sa[1719] = "password change plastic replace card replace";
      sa[1720] = "password change plastic replace change request";
      sa[1721] = "password change plastic replace change request bitcoin";
      sa[1722] = "password change plastic replace change request lost cardrefund requested. supply additional details, call back";
      sa[1723] = "password change plastic replace change request moneyorder payment";
      sa[1724] = "password change plastic replace customer call";
      sa[1725] = "password change plastic replace customer call statement";
      sa[1726] = "password change plastic replace late payment";
      sa[1727] = "password change plastic replace late payment overseas atm";
      sa[1728] = "password change plastic replace password change";
      sa[1729] = "password change plastic replace password change lost cardrefund requested. supply additional details, call back";
      sa[1730] = "password change plastic replace password change moneyorder";
      sa[1731] = "password change plastic replace password change moneyorder payment";
      sa[1732] = "password change plastic replace password change statement";
      sa[1733] = "password change plastic replace plastic replace";
      sa[1734] = "password change plastic replace statement";
      sa[1735] = "password change plastic replace statement atm denied";
      sa[1736] = "password change plastic replace statement statement";
      sa[1737] = "password change plastic replace transfer";
      sa[1738] = "password change plastic replace transfer moneyorder";
      sa[1739] = "password change statement";
      sa[1740] = "password change statement  ";
      sa[1741] = "password change statement   moneyorder payment";
      sa[1742] = "password change statement   overseas atm";
      sa[1743] = "password change statement billing address";
      sa[1744] = "password change statement billing address moneyorder";
      sa[1745] = "password change statement billing address statement";
      sa[1746] = "password change statement billing address withdraw limit";
      sa[1747] = "password change statement card replace";
      sa[1748] = "password change statement card replace moneyorder payment";
      sa[1749] = "password change statement card replace statement";
      sa[1750] = "password change statement change request";
      sa[1751] = "password change statement customer call";
      sa[1752] = "password change statement customer call overseas atm";
      sa[1753] = "password change statement customer call statement";
      sa[1754] = "password change statement late payment";
      sa[1755] = "password change statement late payment moneyorder";
      sa[1756] = "password change statement password change";
      sa[1757] = "password change statement password change atm limit";
      sa[1758] = "password change statement password change cash";
      sa[1759] = "password change statement password change lost cardrefund requested. supply additional details, call back";
      sa[1760] = "password change statement password change moneyorder";
      sa[1761] = "password change statement plastic replace";
      sa[1762] = "password change statement statement";
      sa[1763] = "password change statement statement moneyorder payment";
      sa[1764] = "password change statement transfer";
      sa[1765] = "password change statement transfer moneyorder";
      sa[1766] = "password change statement transfer overseas atm";
      sa[1767] = "password change transfer";
      sa[1768] = "password change transfer  ";
      sa[1769] = "password change transfer   statement";
      sa[1770] = "password change transfer billing address";
      sa[1771] = "password change transfer card replace statement";
      sa[1772] = "password change transfer change request";
      sa[1773] = "password change transfer change request lost cardrefund requested. supply additional details, call back";
      sa[1774] = "password change transfer change request statement";
      sa[1775] = "password change transfer customer call";
      sa[1776] = "password change transfer customer call statement";
      sa[1777] = "password change transfer customer call withdraw limit";
      sa[1778] = "password change transfer late payment";
      sa[1779] = "password change transfer late payment moneyorder";
      sa[1780] = "password change transfer password change";
      sa[1781] = "password change transfer password change statement";
      sa[1782] = "password change transfer plastic replace";
      sa[1783] = "password change transfer plastic replace bitcoin";
      sa[1784] = "password change transfer plastic replace overseas atm";
      sa[1785] = "password change transfer statement";
      sa[1786] = "password change transfer statement moneyorder";
      sa[1787] = "password change transfer transfer cash";
      sa[1788] = "password change transfer transfer lost cardrefund requested. supply additional details, call back";
      sa[1789] = "password change transfer transfer statement";
      sa[1790] = "password change withdraw limit";
      sa[1791] = "plastic replace";
      sa[1792] = "plastic replace  ";
      sa[1793] = "plastic replace    ";
      sa[1794] = "plastic replace     lost cardrefund requested. supply additional details, call back";
      sa[1795] = "plastic replace   billing address";
      sa[1796] = "plastic replace   billing address statement";
      sa[1797] = "plastic replace   card replace";
      sa[1798] = "plastic replace   card replace atm limit";
      sa[1799] = "plastic replace   card replace statement";
      sa[1800] = "plastic replace   change request";
      sa[1801] = "plastic replace   change request statement";
      sa[1802] = "plastic replace   change request withdraw limit";
      sa[1803] = "plastic replace   customer call";
      sa[1804] = "plastic replace   customer call moneyorder payment";
      sa[1805] = "plastic replace   late payment";
      sa[1806] = "plastic replace   password change";
      sa[1807] = "plastic replace   password change lost cardrefund requested. supply additional details, call back";
      sa[1808] = "plastic replace   password change statement";
      sa[1809] = "plastic replace   plastic replace";
      sa[1810] = "plastic replace   plastic replace atm limit";
      sa[1811] = "plastic replace   plastic replace cash";
      sa[1812] = "plastic replace   statement";
      sa[1813] = "plastic replace   statement atm denied";
      sa[1814] = "plastic replace   statement cash";
      sa[1815] = "plastic replace   statement statement";
      sa[1816] = "plastic replace   transfer";
      sa[1817] = "plastic replace   transfer bitcoin";
      sa[1818] = "plastic replace   transfer moneyorder payment";
      sa[1819] = "plastic replace   transfer statement";
      sa[1820] = "plastic replace billing address";
      sa[1821] = "plastic replace billing address  ";
      sa[1822] = "plastic replace billing address   cash";
      sa[1823] = "plastic replace billing address   statement";
      sa[1824] = "plastic replace billing address billing address";
      sa[1825] = "plastic replace billing address billing address cash";
      sa[1826] = "plastic replace billing address card replace";
      sa[1827] = "plastic replace billing address card replace bitcoin";
      sa[1828] = "plastic replace billing address card replace statement";
      sa[1829] = "plastic replace billing address change request";
      sa[1830] = "plastic replace billing address change request overseas atm";
      sa[1831] = "plastic replace billing address change request withdraw limit";
      sa[1832] = "plastic replace billing address customer call";
      sa[1833] = "plastic replace billing address customer call statement";
      sa[1834] = "plastic replace billing address late payment";
      sa[1835] = "plastic replace billing address late payment lost cardrefund requested. supply additional details, call back";
      sa[1836] = "plastic replace billing address late payment overseas atm";
      sa[1837] = "plastic replace billing address late payment statement";
      sa[1838] = "plastic replace billing address late payment withdraw limit";
      sa[1839] = "plastic replace billing address password change";
      sa[1840] = "plastic replace billing address password change lost cardrefund requested. supply additional details, call back";
      sa[1841] = "plastic replace billing address password change statement";
      sa[1842] = "plastic replace billing address plastic replace";
      sa[1843] = "plastic replace billing address plastic replace atm denied";
      sa[1844] = "plastic replace billing address statement";
      sa[1845] = "plastic replace billing address statement atm denied";
      sa[1846] = "plastic replace billing address statement atm limit";
      sa[1847] = "plastic replace billing address statement cash";
      sa[1848] = "plastic replace billing address statement statement";
      sa[1849] = "plastic replace billing address transfer";
      sa[1850] = "plastic replace billing address transfer bitcoin";
      sa[1851] = "plastic replace billing address transfer moneyorder payment";
      sa[1852] = "plastic replace bitcoin";
      sa[1853] = "plastic replace card replace";
      sa[1854] = "plastic replace card replace  ";
      sa[1855] = "plastic replace card replace   atm limit";
      sa[1856] = "plastic replace card replace   statement";
      sa[1857] = "plastic replace card replace billing address";
      sa[1858] = "plastic replace card replace billing address statement";
      sa[1859] = "plastic replace card replace card replace";
      sa[1860] = "plastic replace card replace card replace moneyorder payment";
      sa[1861] = "plastic replace card replace card replace statement";
      sa[1862] = "plastic replace card replace cash";
      sa[1863] = "plastic replace card replace change request";
      sa[1864] = "plastic replace card replace change request lost cardrefund requested. supply additional details, call back";
      sa[1865] = "plastic replace card replace change request statement";
      sa[1866] = "plastic replace card replace customer call";
      sa[1867] = "plastic replace card replace customer call atm denied";
      sa[1868] = "plastic replace card replace customer call bitcoin";
      sa[1869] = "plastic replace card replace late payment";
      sa[1870] = "plastic replace card replace late payment atm limit";
      sa[1871] = "plastic replace card replace late payment statement";
      sa[1872] = "plastic replace card replace password change";
      sa[1873] = "plastic replace card replace password change bitcoin";
      sa[1874] = "plastic replace card replace password change cash";
      sa[1875] = "plastic replace card replace plastic replace";
      sa[1876] = "plastic replace card replace statement";
      sa[1877] = "plastic replace card replace transfer";
      sa[1878] = "plastic replace card replace transfer statement";
      sa[1879] = "plastic replace card replace withdraw limit";
      sa[1880] = "plastic replace change request";
      sa[1881] = "plastic replace change request  ";
      sa[1882] = "plastic replace change request   statement";
      sa[1883] = "plastic replace change request billing address";
      sa[1884] = "plastic replace change request billing address bitcoin";
      sa[1885] = "plastic replace change request billing address statement";
      sa[1886] = "plastic replace change request card replace";
      sa[1887] = "plastic replace change request card replace overseas atm";
      sa[1888] = "plastic replace change request card replace statement";
      sa[1889] = "plastic replace change request change request";
      sa[1890] = "plastic replace change request change request lost cardrefund requested. supply additional details, call back";
      sa[1891] = "plastic replace change request change request statement";
      sa[1892] = "plastic replace change request customer call";
      sa[1893] = "plastic replace change request customer call statement";
      sa[1894] = "plastic replace change request late payment";
      sa[1895] = "plastic replace change request late payment atm denied";
      sa[1896] = "plastic replace change request late payment atm limit";
      sa[1897] = "plastic replace change request late payment statement";
      sa[1898] = "plastic replace change request password change";
      sa[1899] = "plastic replace change request password change lost cardrefund requested. supply additional details, call back";
      sa[1900] = "plastic replace change request password change moneyorder payment";
      sa[1901] = "plastic replace change request plastic replace";
      sa[1902] = "plastic replace change request plastic replace bitcoin";
      sa[1903] = "plastic replace change request plastic replace statement";
      sa[1904] = "plastic replace change request statement";
      sa[1905] = "plastic replace change request statement cash";
      sa[1906] = "plastic replace change request statement moneyorder";
      sa[1907] = "plastic replace change request statement statement";
      sa[1908] = "plastic replace change request transfer";
      sa[1909] = "plastic replace customer call";
      sa[1910] = "plastic replace customer call  ";
      sa[1911] = "plastic replace customer call   moneyorder";
      sa[1912] = "plastic replace customer call   overseas atm";
      sa[1913] = "plastic replace customer call billing address";
      sa[1914] = "plastic replace customer call billing address atm denied";
      sa[1915] = "plastic replace customer call billing address moneyorder";
      sa[1916] = "plastic replace customer call billing address statement";
      sa[1917] = "plastic replace customer call card replace";
      sa[1918] = "plastic replace customer call card replace statement";
      sa[1919] = "plastic replace customer call change request";
      sa[1920] = "plastic replace customer call change request bitcoin";
      sa[1921] = "plastic replace customer call customer call";
      sa[1922] = "plastic replace customer call customer call statement";
      sa[1923] = "plastic replace customer call late payment";
      sa[1924] = "plastic replace customer call late payment statement";
      sa[1925] = "plastic replace customer call late payment withdraw limit";
      sa[1926] = "plastic replace customer call password change";
      sa[1927] = "plastic replace customer call password change statement";
      sa[1928] = "plastic replace customer call plastic replace bitcoin";
      sa[1929] = "plastic replace customer call plastic replace statement";
      sa[1930] = "plastic replace customer call plastic replace withdraw limit";
      sa[1931] = "plastic replace customer call statement";
      sa[1932] = "plastic replace customer call statement cash";
      sa[1933] = "plastic replace customer call statement statement";
      sa[1934] = "plastic replace customer call transfer";
      sa[1935] = "plastic replace customer call transfer statement";
      sa[1936] = "plastic replace late payment  ";
      sa[1937] = "plastic replace late payment   statement";
      sa[1938] = "plastic replace late payment billing address";
      sa[1939] = "plastic replace late payment card replace";
      sa[1940] = "plastic replace late payment card replace atm denied";
      sa[1941] = "plastic replace late payment card replace lost cardrefund requested. supply additional details, call back";
      sa[1942] = "plastic replace late payment card replace moneyorder";
      sa[1943] = "plastic replace late payment card replace statement";
      sa[1944] = "plastic replace late payment card replace withdraw limit";
      sa[1945] = "plastic replace late payment change request";
      sa[1946] = "plastic replace late payment change request bitcoin";
      sa[1947] = "plastic replace late payment change request statement";
      sa[1948] = "plastic replace late payment customer call";
      sa[1949] = "plastic replace late payment customer call statement";
      sa[1950] = "plastic replace late payment late payment";
      sa[1951] = "plastic replace late payment overseas atm";
      sa[1952] = "plastic replace late payment password change";
      sa[1953] = "plastic replace late payment password change moneyorder";
      sa[1954] = "plastic replace late payment plastic replace";
      sa[1955] = "plastic replace late payment plastic replace moneyorder";
      sa[1956] = "plastic replace late payment plastic replace statement";
      sa[1957] = "plastic replace late payment statement";
      sa[1958] = "plastic replace late payment statement moneyorder";
      sa[1959] = "plastic replace late payment statement statement";
      sa[1960] = "plastic replace late payment transfer";
      sa[1961] = "plastic replace late payment transfer bitcoin";
      sa[1962] = "plastic replace password change";
      sa[1963] = "plastic replace password change  ";
      sa[1964] = "plastic replace password change   lost cardrefund requested. supply additional details, call back";
      sa[1965] = "plastic replace password change   moneyorder";
      sa[1966] = "plastic replace password change   overseas atm";
      sa[1967] = "plastic replace password change   statement";
      sa[1968] = "plastic replace password change billing address";
      sa[1969] = "plastic replace password change billing address atm denied";
      sa[1970] = "plastic replace password change billing address moneyorder";
      sa[1971] = "plastic replace password change billing address withdraw limit";
      sa[1972] = "plastic replace password change card replace";
      sa[1973] = "plastic replace password change card replace bitcoin";
      sa[1974] = "plastic replace password change card replace statement";
      sa[1975] = "plastic replace password change change request";
      sa[1976] = "plastic replace password change customer call";
      sa[1977] = "plastic replace password change customer call statement";
      sa[1978] = "plastic replace password change late payment";
      sa[1979] = "plastic replace password change late payment bitcoin";
      sa[1980] = "plastic replace password change late payment overseas atm";
      sa[1981] = "plastic replace password change late payment statement";
      sa[1982] = "plastic replace password change password change";
      sa[1983] = "plastic replace password change password change cash";
      sa[1984] = "plastic replace password change password change lost cardrefund requested. supply additional details, call back";
      sa[1985] = "plastic replace password change password change statement";
      sa[1986] = "plastic replace password change plastic replace";
      sa[1987] = "plastic replace password change plastic replace moneyorder payment";
      sa[1988] = "plastic replace password change statement";
      sa[1989] = "plastic replace password change transfer";
      sa[1990] = "plastic replace password change transfer statement";
      sa[1991] = "plastic replace password change transfer withdraw limit";
      sa[1992] = "plastic replace plastic replace";
      sa[1993] = "plastic replace plastic replace  ";
      sa[1994] = "plastic replace plastic replace   cash";
      sa[1995] = "plastic replace plastic replace   statement";
      sa[1996] = "plastic replace plastic replace billing address";
      sa[1997] = "plastic replace plastic replace billing address bitcoin";
      sa[1998] = "plastic replace plastic replace billing address statement";
      sa[1999] = "plastic replace plastic replace bitcoin";
      sa[2000] = "plastic replace plastic replace card replace";
      sa[2001] = "plastic replace plastic replace card replace moneyorder payment";
      sa[2002] = "plastic replace plastic replace card replace statement";
      sa[2003] = "plastic replace plastic replace card replace withdraw limit";
      sa[2004] = "plastic replace plastic replace change request";
      sa[2005] = "plastic replace plastic replace change request atm denied";
      sa[2006] = "plastic replace plastic replace customer call";
      sa[2007] = "plastic replace plastic replace customer call statement";
      sa[2008] = "plastic replace plastic replace late payment";
      sa[2009] = "plastic replace plastic replace late payment cash";
      sa[2010] = "plastic replace plastic replace late payment statement";
      sa[2011] = "plastic replace plastic replace password change";
      sa[2012] = "plastic replace plastic replace password change moneyorder";
      sa[2013] = "plastic replace plastic replace password change statement";
      sa[2014] = "plastic replace plastic replace plastic replace";
      sa[2015] = "plastic replace plastic replace plastic replace lost cardrefund requested. supply additional details, call back";
      sa[2016] = "plastic replace plastic replace plastic replace moneyorder payment";
      sa[2017] = "plastic replace plastic replace plastic replace statement";
      sa[2018] = "plastic replace plastic replace statement";
      sa[2019] = "plastic replace plastic replace statement moneyorder";
      sa[2020] = "plastic replace plastic replace statement statement";
      sa[2021] = "plastic replace plastic replace transfer";
      sa[2022] = "plastic replace plastic replace transfer bitcoin";
      sa[2023] = "plastic replace plastic replace transfer moneyorder payment";
      sa[2024] = "plastic replace plastic replace transfer statement";
      sa[2025] = "plastic replace statement";
      sa[2026] = "plastic replace statement  ";
      sa[2027] = "plastic replace statement   atm denied";
      sa[2028] = "plastic replace statement   lost cardrefund requested. supply additional details, call back";
      sa[2029] = "plastic replace statement   withdraw limit";
      sa[2030] = "plastic replace statement billing address bitcoin";
      sa[2031] = "plastic replace statement billing address statement";
      sa[2032] = "plastic replace statement card replace";
      sa[2033] = "plastic replace statement card replace statement";
      sa[2034] = "plastic replace statement change request";
      sa[2035] = "plastic replace statement customer call";
      sa[2036] = "plastic replace statement customer call atm denied";
      sa[2037] = "plastic replace statement customer call atm limit";
      sa[2038] = "plastic replace statement customer call cash";
      sa[2039] = "plastic replace statement late payment statement";
      sa[2040] = "plastic replace statement moneyorder payment";
      sa[2041] = "plastic replace statement password change";
      sa[2042] = "plastic replace statement password change bitcoin";
      sa[2043] = "plastic replace statement password change statement";
      sa[2044] = "plastic replace statement plastic replace";
      sa[2045] = "plastic replace statement plastic replace atm denied";
      sa[2046] = "plastic replace statement statement";
      sa[2047] = "plastic replace statement statement atm denied";
      sa[2048] = "plastic replace statement statement lost cardrefund requested. supply additional details, call back";
      sa[2049] = "plastic replace statement statement moneyorder payment";
      sa[2050] = "plastic replace statement statement overseas atm";
      sa[2051] = "plastic replace statement statement statement";
      sa[2052] = "plastic replace statement statement withdraw limit";
      sa[2053] = "plastic replace statement transfer";
      sa[2054] = "plastic replace transfer";
      sa[2055] = "plastic replace transfer  ";
      sa[2056] = "plastic replace transfer   statement";
      sa[2057] = "plastic replace transfer billing address";
      sa[2058] = "plastic replace transfer billing address statement";
      sa[2059] = "plastic replace transfer card replace";
      sa[2060] = "plastic replace transfer card replace statement";
      sa[2061] = "plastic replace transfer change request";
      sa[2062] = "plastic replace transfer change request moneyorder";
      sa[2063] = "plastic replace transfer change request moneyorder payment";
      sa[2064] = "plastic replace transfer customer call";
      sa[2065] = "plastic replace transfer customer call bitcoin";
      sa[2066] = "plastic replace transfer customer call statement";
      sa[2067] = "plastic replace transfer late payment bitcoin";
      sa[2068] = "plastic replace transfer late payment statement";
      sa[2069] = "plastic replace transfer late payment withdraw limit";
      sa[2070] = "plastic replace transfer moneyorder payment";
      sa[2071] = "plastic replace transfer password change";
      sa[2072] = "plastic replace transfer password change lost cardrefund requested. supply additional details, call back";
      sa[2073] = "plastic replace transfer password change statement";
      sa[2074] = "plastic replace transfer plastic replace";
      sa[2075] = "plastic replace transfer plastic replace atm denied";
      sa[2076] = "plastic replace transfer plastic replace overseas atm";
      sa[2077] = "plastic replace transfer plastic replace statement";
      sa[2078] = "plastic replace transfer statement";
      sa[2079] = "plastic replace transfer statement moneyorder payment";
      sa[2080] = "plastic replace transfer transfer";
      sa[2081] = "plastic replace transfer transfer atm limit";
      sa[2082] = "plastic replace transfer transfer moneyorder payment";
      sa[2083] = "plastic replace transfer transfer statement";
      sa[2084] = "statement";
      sa[2085] = "statement  ";
      sa[2086] = "statement    ";
      sa[2087] = "statement     atm denied";
      sa[2088] = "statement     bitcoin";
      sa[2089] = "statement     moneyorder";
      sa[2090] = "statement   atm denied";
      sa[2091] = "statement   billing address";
      sa[2092] = "statement   billing address statement";
      sa[2093] = "statement   card replace";
      sa[2094] = "statement   card replace moneyorder";
      sa[2095] = "statement   card replace statement";
      sa[2096] = "statement   card replace withdraw limit";
      sa[2097] = "statement   change request";
      sa[2098] = "statement   change request statement";
      sa[2099] = "statement   change request withdraw limit";
      sa[2100] = "statement   customer call moneyorder";
      sa[2101] = "statement   customer call withdraw limit";
      sa[2102] = "statement   late payment";
      sa[2103] = "statement   late payment cash";
      sa[2104] = "statement   late payment statement";
      sa[2105] = "statement   moneyorder";
      sa[2106] = "statement   password change bitcoin";
      sa[2107] = "statement   password change overseas atm";
      sa[2108] = "statement   password change statement";
      sa[2109] = "statement   plastic replace";
      sa[2110] = "statement   plastic replace overseas atm";
      sa[2111] = "statement   plastic replace statement";
      sa[2112] = "statement   statement";
      sa[2113] = "statement   statement moneyorder payment";
      sa[2114] = "statement   statement overseas atm";
      sa[2115] = "statement   statement statement";
      sa[2116] = "statement   transfer";
      sa[2117] = "statement   transfer moneyorder";
      sa[2118] = "statement   transfer statement";
      sa[2119] = "statement billing address";
      sa[2120] = "statement billing address  ";
      sa[2121] = "statement billing address   overseas atm";
      sa[2122] = "statement billing address   withdraw limit";
      sa[2123] = "statement billing address billing address";
      sa[2124] = "statement billing address billing address bitcoin";
      sa[2125] = "statement billing address card replace";
      sa[2126] = "statement billing address card replace cash";
      sa[2127] = "statement billing address card replace moneyorder payment";
      sa[2128] = "statement billing address card replace statement";
      sa[2129] = "statement billing address card replace withdraw limit";
      sa[2130] = "statement billing address change request";
      sa[2131] = "statement billing address change request lost cardrefund requested. supply additional details, call back";
      sa[2132] = "statement billing address change request statement";
      sa[2133] = "statement billing address customer call";
      sa[2134] = "statement billing address customer call lost cardrefund requested. supply additional details, call back";
      sa[2135] = "statement billing address customer call statement";
      sa[2136] = "statement billing address late payment";
      sa[2137] = "statement billing address late payment lost cardrefund requested. supply additional details, call back";
      sa[2138] = "statement billing address late payment moneyorder";
      sa[2139] = "statement billing address late payment moneyorder payment";
      sa[2140] = "statement billing address late payment statement";
      sa[2141] = "statement billing address password change";
      sa[2142] = "statement billing address password change statement";
      sa[2143] = "statement billing address plastic replace";
      sa[2144] = "statement billing address plastic replace atm limit";
      sa[2145] = "statement billing address plastic replace bitcoin";
      sa[2146] = "statement billing address plastic replace moneyorder";
      sa[2147] = "statement billing address plastic replace overseas atm";
      sa[2148] = "statement billing address statement";
      sa[2149] = "statement billing address statement bitcoin";
      sa[2150] = "statement billing address statement statement";
      sa[2151] = "statement billing address transfer";
      sa[2152] = "statement billing address transfer atm denied";
      sa[2153] = "statement billing address transfer statement";
      sa[2154] = "statement card replace";
      sa[2155] = "statement card replace  ";
      sa[2156] = "statement card replace   atm denied";
      sa[2157] = "statement card replace   statement";
      sa[2158] = "statement card replace atm limit";
      sa[2159] = "statement card replace billing address";
      sa[2160] = "statement card replace billing address atm limit";
      sa[2161] = "statement card replace billing address statement";
      sa[2162] = "statement card replace bitcoin";
      sa[2163] = "statement card replace card replace";
      sa[2164] = "statement card replace card replace moneyorder";
      sa[2165] = "statement card replace card replace statement";
      sa[2166] = "statement card replace change request";
      sa[2167] = "statement card replace change request lost cardrefund requested. supply additional details, call back";
      sa[2168] = "statement card replace change request overseas atm";
      sa[2169] = "statement card replace change request statement";
      sa[2170] = "statement card replace customer call";
      sa[2171] = "statement card replace customer call cash";
      sa[2172] = "statement card replace late payment";
      sa[2173] = "statement card replace late payment atm denied";
      sa[2174] = "statement card replace late payment statement";
      sa[2175] = "statement card replace password change";
      sa[2176] = "statement card replace password change cash";
      sa[2177] = "statement card replace plastic replace";
      sa[2178] = "statement card replace statement";
      sa[2179] = "statement card replace statement statement";
      sa[2180] = "statement card replace transfer";
      sa[2181] = "statement card replace transfer atm denied";
      sa[2182] = "statement card replace transfer lost cardrefund requested. supply additional details, call back";
      sa[2183] = "statement card replace transfer statement";
      sa[2184] = "statement card replace transfer withdraw limit";
      sa[2185] = "statement cash";
      sa[2186] = "statement change request";
      sa[2187] = "statement change request  ";
      sa[2188] = "statement change request   cash";
      sa[2189] = "statement change request   lost cardrefund requested. supply additional details, call back";
      sa[2190] = "statement change request billing address";
      sa[2191] = "statement change request billing address moneyorder payment";
      sa[2192] = "statement change request billing address statement";
      sa[2193] = "statement change request billing address withdraw limit";
      sa[2194] = "statement change request card replace";
      sa[2195] = "statement change request card replace lost cardrefund requested. supply additional details, call back";
      sa[2196] = "statement change request change request";
      sa[2197] = "statement change request change request cash";
      sa[2198] = "statement change request change request moneyorder payment";
      sa[2199] = "statement change request change request statement";
      sa[2200] = "statement change request customer call";
      sa[2201] = "statement change request customer call atm limit";
      sa[2202] = "statement change request customer call bitcoin";
      sa[2203] = "statement change request customer call statement";
      sa[2204] = "statement change request late payment";
      sa[2205] = "statement change request moneyorder";
      sa[2206] = "statement change request overseas atm";
      sa[2207] = "statement change request password change";
      sa[2208] = "statement change request password change atm denied";
      sa[2209] = "statement change request password change statement";
      sa[2210] = "statement change request plastic replace";
      sa[2211] = "statement change request plastic replace atm denied";
      sa[2212] = "statement change request plastic replace atm limit";
      sa[2213] = "statement change request plastic replace cash";
      sa[2214] = "statement change request plastic replace statement";
      sa[2215] = "statement change request statement";
      sa[2216] = "statement change request statement overseas atm";
      sa[2217] = "statement change request transfer";
      sa[2218] = "statement change request transfer atm denied";
      sa[2219] = "statement change request transfer cash";
      sa[2220] = "statement change request transfer statement";
      sa[2221] = "statement customer call";
      sa[2222] = "statement customer call  ";
      sa[2223] = "statement customer call   atm denied";
      sa[2224] = "statement customer call   overseas atm";
      sa[2225] = "statement customer call card replace";
      sa[2226] = "statement customer call card replace atm denied";
      sa[2227] = "statement customer call card replace atm limit";
      sa[2228] = "statement customer call card replace moneyorder";
      sa[2229] = "statement customer call card replace statement";
      sa[2230] = "statement customer call change request";
      sa[2231] = "statement customer call change request lost cardrefund requested. supply additional details, call back";
      sa[2232] = "statement customer call change request moneyorder";
      sa[2233] = "statement customer call change request statement";
      sa[2234] = "statement customer call change request withdraw limit";
      sa[2235] = "statement customer call customer call";
      sa[2236] = "statement customer call customer call lost cardrefund requested. supply additional details, call back";
      sa[2237] = "statement customer call customer call moneyorder payment";
      sa[2238] = "statement customer call customer call statement";
      sa[2239] = "statement customer call late payment";
      sa[2240] = "statement customer call late payment lost cardrefund requested. supply additional details, call back";
      sa[2241] = "statement customer call late payment moneyorder";
      sa[2242] = "statement customer call late payment statement";
      sa[2243] = "statement customer call password change";
      sa[2244] = "statement customer call password change lost cardrefund requested. supply additional details, call back";
      sa[2245] = "statement customer call password change statement";
      sa[2246] = "statement customer call plastic replace";
      sa[2247] = "statement customer call plastic replace moneyorder payment";
      sa[2248] = "statement customer call plastic replace statement";
      sa[2249] = "statement customer call statement";
      sa[2250] = "statement customer call statement atm limit";
      sa[2251] = "statement customer call statement lost cardrefund requested. supply additional details, call back";
      sa[2252] = "statement customer call statement statement";
      sa[2253] = "statement customer call transfer";
      sa[2254] = "statement late payment";
      sa[2255] = "statement late payment  ";
      sa[2256] = "statement late payment   lost cardrefund requested. supply additional details, call back";
      sa[2257] = "statement late payment   statement";
      sa[2258] = "statement late payment billing address";
      sa[2259] = "statement late payment billing address bitcoin";
      sa[2260] = "statement late payment billing address statement";
      sa[2261] = "statement late payment card replace";
      sa[2262] = "statement late payment card replace lost cardrefund requested. supply additional details, call back";
      sa[2263] = "statement late payment card replace statement";
      sa[2264] = "statement late payment change request";
      sa[2265] = "statement late payment change request cash";
      sa[2266] = "statement late payment change request moneyorder";
      sa[2267] = "statement late payment customer call";
      sa[2268] = "statement late payment customer call moneyorder payment";
      sa[2269] = "statement late payment customer call statement";
      sa[2270] = "statement late payment late payment";
      sa[2271] = "statement late payment password change";
      sa[2272] = "statement late payment password change atm denied";
      sa[2273] = "statement late payment password change withdraw limit";
      sa[2274] = "statement late payment plastic replace";
      sa[2275] = "statement late payment plastic replace atm limit";
      sa[2276] = "statement late payment plastic replace overseas atm";
      sa[2277] = "statement late payment plastic replace statement";
      sa[2278] = "statement late payment statement";
      sa[2279] = "statement late payment statement statement";
      sa[2280] = "statement late payment transfer";
      sa[2281] = "statement late payment transfer lost cardrefund requested. supply additional details, call back";
      sa[2282] = "statement late payment transfer statement";
      sa[2283] = "statement password change";
      sa[2284] = "statement password change  ";
      sa[2285] = "statement password change   statement";
      sa[2286] = "statement password change billing address";
      sa[2287] = "statement password change billing address moneyorder";
      sa[2288] = "statement password change billing address overseas atm";
      sa[2289] = "statement password change billing address statement";
      sa[2290] = "statement password change bitcoin";
      sa[2291] = "statement password change card replace";
      sa[2292] = "statement password change card replace lost cardrefund requested. supply additional details, call back";
      sa[2293] = "statement password change card replace statement";
      sa[2294] = "statement password change change request";
      sa[2295] = "statement password change change request atm denied";
      sa[2296] = "statement password change change request bitcoin";
      sa[2297] = "statement password change change request statement";
      sa[2298] = "statement password change customer call";
      sa[2299] = "statement password change customer call atm limit";
      sa[2300] = "statement password change late payment";
      sa[2301] = "statement password change late payment cash";
      sa[2302] = "statement password change overseas atm";
      sa[2303] = "statement password change password change";
      sa[2304] = "statement password change plastic replace";
      sa[2305] = "statement password change plastic replace atm denied";
      sa[2306] = "statement password change plastic replace overseas atm";
      sa[2307] = "statement password change plastic replace statement";
      sa[2308] = "statement password change statement";
      sa[2309] = "statement password change statement overseas atm";
      sa[2310] = "statement password change transfer";
      sa[2311] = "statement password change transfer statement";
      sa[2312] = "statement plastic replace";
      sa[2313] = "statement plastic replace  ";
      sa[2314] = "statement plastic replace   statement";
      sa[2315] = "statement plastic replace billing address";
      sa[2316] = "statement plastic replace billing address statement";
      sa[2317] = "statement plastic replace card replace";
      sa[2318] = "statement plastic replace card replace bitcoin";
      sa[2319] = "statement plastic replace card replace moneyorder payment";
      sa[2320] = "statement plastic replace card replace statement";
      sa[2321] = "statement plastic replace cash";
      sa[2322] = "statement plastic replace change request";
      sa[2323] = "statement plastic replace change request atm limit";
      sa[2324] = "statement plastic replace customer call";
      sa[2325] = "statement plastic replace customer call bitcoin";
      sa[2326] = "statement plastic replace customer call lost cardrefund requested. supply additional details, call back";
      sa[2327] = "statement plastic replace customer call moneyorder payment";
      sa[2328] = "statement plastic replace customer call statement";
      sa[2329] = "statement plastic replace late payment";
      sa[2330] = "statement plastic replace late payment atm denied";
      sa[2331] = "statement plastic replace late payment moneyorder";
      sa[2332] = "statement plastic replace password change";
      sa[2333] = "statement plastic replace password change moneyorder";
      sa[2334] = "statement plastic replace password change moneyorder payment";
      sa[2335] = "statement plastic replace plastic replace";
      sa[2336] = "statement plastic replace plastic replace statement";
      sa[2337] = "statement plastic replace statement";
      sa[2338] = "statement plastic replace transfer";
      sa[2339] = "statement plastic replace transfer bitcoin";
      sa[2340] = "statement plastic replace transfer statement";
      sa[2341] = "statement plastic replace transfer withdraw limit";
      sa[2342] = "statement statement";
      sa[2343] = "statement statement  ";
      sa[2344] = "statement statement   statement";
      sa[2345] = "statement statement billing address";
      sa[2346] = "statement statement billing address withdraw limit";
      sa[2347] = "statement statement card replace";
      sa[2348] = "statement statement card replace withdraw limit";
      sa[2349] = "statement statement change request";
      sa[2350] = "statement statement change request cash";
      sa[2351] = "statement statement change request overseas atm";
      sa[2352] = "statement statement change request statement";
      sa[2353] = "statement statement customer call";
      sa[2354] = "statement statement customer call statement";
      sa[2355] = "statement statement late payment";
      sa[2356] = "statement statement late payment atm denied";
      sa[2357] = "statement statement late payment moneyorder payment";
      sa[2358] = "statement statement late payment statement";
      sa[2359] = "statement statement moneyorder";
      sa[2360] = "statement statement moneyorder payment";
      sa[2361] = "statement statement password change";
      sa[2362] = "statement statement password change atm denied";
      sa[2363] = "statement statement plastic replace";
      sa[2364] = "statement statement plastic replace statement";
      sa[2365] = "statement statement statement";
      sa[2366] = "statement statement statement lost cardrefund requested. supply additional details, call back";
      sa[2367] = "statement statement statement moneyorder payment";
      sa[2368] = "statement statement statement statement";
      sa[2369] = "statement statement statement withdraw limit";
      sa[2370] = "statement statement transfer";
      sa[2371] = "statement statement transfer bitcoin";
      sa[2372] = "statement statement transfer overseas atm";
      sa[2373] = "statement statement transfer statement";
      sa[2374] = "statement statement withdraw limit";
      sa[2375] = "statement transfer";
      sa[2376] = "statement transfer  ";
      sa[2377] = "statement transfer   moneyorder payment";
      sa[2378] = "statement transfer   statement";
      sa[2379] = "statement transfer billing address";
      sa[2380] = "statement transfer billing address atm limit";
      sa[2381] = "statement transfer billing address bitcoin";
      sa[2382] = "statement transfer billing address moneyorder";
      sa[2383] = "statement transfer card replace";
      sa[2384] = "statement transfer card replace atm denied";
      sa[2385] = "statement transfer card replace atm limit";
      sa[2386] = "statement transfer card replace cash";
      sa[2387] = "statement transfer cash";
      sa[2388] = "statement transfer change request";
      sa[2389] = "statement transfer customer call";
      sa[2390] = "statement transfer customer call atm denied";
      sa[2391] = "statement transfer customer call cash";
      sa[2392] = "statement transfer customer call moneyorder payment";
      sa[2393] = "statement transfer customer call statement";
      sa[2394] = "statement transfer late payment";
      sa[2395] = "statement transfer late payment atm denied";
      sa[2396] = "statement transfer late payment cash";
      sa[2397] = "statement transfer late payment statement";
      sa[2398] = "statement transfer moneyorder";
      sa[2399] = "statement transfer password change";
      sa[2400] = "statement transfer password change atm denied";
      sa[2401] = "statement transfer password change atm limit";
      sa[2402] = "statement transfer password change lost cardrefund requested. supply additional details, call back";
      sa[2403] = "statement transfer password change moneyorder payment";
      sa[2404] = "statement transfer password change overseas atm";
      sa[2405] = "statement transfer password change statement";
      sa[2406] = "statement transfer plastic replace";
      sa[2407] = "statement transfer plastic replace moneyorder payment";
      sa[2408] = "statement transfer plastic replace statement";
      sa[2409] = "statement transfer statement";
      sa[2410] = "statement transfer statement moneyorder";
      sa[2411] = "statement transfer statement statement";
      sa[2412] = "statement transfer transfer";
      sa[2413] = "statement transfer transfer cash";
      sa[2414] = "statement transfer transfer overseas atm";
      sa[2415] = "statement transfer transfer statement";
      sa[2416] = "transfer  ";
      sa[2417] = "transfer    ";
      sa[2418] = "transfer     moneyorder";
      sa[2419] = "transfer   billing address";
      sa[2420] = "transfer   billing address atm limit";
      sa[2421] = "transfer   billing address statement";
      sa[2422] = "transfer   card replace";
      sa[2423] = "transfer   change request";
      sa[2424] = "transfer   change request bitcoin";
      sa[2425] = "transfer   customer call";
      sa[2426] = "transfer   customer call moneyorder";
      sa[2427] = "transfer   late payment";
      sa[2428] = "transfer   late payment moneyorder";
      sa[2429] = "transfer   late payment statement";
      sa[2430] = "transfer   plastic replace";
      sa[2431] = "transfer   statement";
      sa[2432] = "transfer   statement overseas atm";
      sa[2433] = "transfer   transfer";
      sa[2434] = "transfer   transfer withdraw limit";
      sa[2435] = "transfer billing address";
      sa[2436] = "transfer billing address  ";
      sa[2437] = "transfer billing address   overseas atm";
      sa[2438] = "transfer billing address   statement";
      sa[2439] = "transfer billing address   withdraw limit";
      sa[2440] = "transfer billing address billing address";
      sa[2441] = "transfer billing address billing address statement";
      sa[2442] = "transfer billing address card replace";
      sa[2443] = "transfer billing address card replace atm denied";
      sa[2444] = "transfer billing address card replace lost cardrefund requested. supply additional details, call back";
      sa[2445] = "transfer billing address card replace moneyorder";
      sa[2446] = "transfer billing address card replace statement";
      sa[2447] = "transfer billing address change request";
      sa[2448] = "transfer billing address change request atm limit";
      sa[2449] = "transfer billing address customer call";
      sa[2450] = "transfer billing address customer call atm limit";
      sa[2451] = "transfer billing address customer call statement";
      sa[2452] = "transfer billing address late payment";
      sa[2453] = "transfer billing address late payment moneyorder payment";
      sa[2454] = "transfer billing address password change";
      sa[2455] = "transfer billing address password change statement";
      sa[2456] = "transfer billing address plastic replace atm denied";
      sa[2457] = "transfer billing address plastic replace statement";
      sa[2458] = "transfer billing address statement";
      sa[2459] = "transfer billing address transfer";
      sa[2460] = "transfer billing address transfer moneyorder";
      sa[2461] = "transfer card replace";
      sa[2462] = "transfer card replace  ";
      sa[2463] = "transfer card replace   moneyorder";
      sa[2464] = "transfer card replace   overseas atm";
      sa[2465] = "transfer card replace billing address";
      sa[2466] = "transfer card replace billing address statement";
      sa[2467] = "transfer card replace card replace";
      sa[2468] = "transfer card replace card replace atm denied";
      sa[2469] = "transfer card replace card replace overseas atm";
      sa[2470] = "transfer card replace card replace statement";
      sa[2471] = "transfer card replace change request";
      sa[2472] = "transfer card replace change request statement";
      sa[2473] = "transfer card replace customer call lost cardrefund requested. supply additional details, call back";
      sa[2474] = "transfer card replace late payment";
      sa[2475] = "transfer card replace late payment moneyorder";
      sa[2476] = "transfer card replace late payment withdraw limit";
      sa[2477] = "transfer card replace password change";
      sa[2478] = "transfer card replace password change statement";
      sa[2479] = "transfer card replace plastic replace";
      sa[2480] = "transfer card replace plastic replace statement";
      sa[2481] = "transfer card replace statement";
      sa[2482] = "transfer card replace statement moneyorder";
      sa[2483] = "transfer card replace statement moneyorder payment";
      sa[2484] = "transfer card replace transfer";
      sa[2485] = "transfer card replace transfer atm limit";
      sa[2486] = "transfer card replace transfer lost cardrefund requested. supply additional details, call back";
      sa[2487] = "transfer change request";
      sa[2488] = "transfer change request  ";
      sa[2489] = "transfer change request   statement";
      sa[2490] = "transfer change request billing address";
      sa[2491] = "transfer change request billing address moneyorder";
      sa[2492] = "transfer change request billing address moneyorder payment";
      sa[2493] = "transfer change request card replace";
      sa[2494] = "transfer change request card replace atm denied";
      sa[2495] = "transfer change request card replace statement";
      sa[2496] = "transfer change request change request";
      sa[2497] = "transfer change request change request statement";
      sa[2498] = "transfer change request customer call";
      sa[2499] = "transfer change request customer call atm limit";
      sa[2500] = "transfer change request customer call statement";
      sa[2501] = "transfer change request late payment";
      sa[2502] = "transfer change request password change statement";
      sa[2503] = "transfer change request plastic replace";
      sa[2504] = "transfer change request plastic replace statement";
      sa[2505] = "transfer change request statement";
      sa[2506] = "transfer change request statement statement";
      sa[2507] = "transfer change request transfer";
      sa[2508] = "transfer change request transfer atm limit";
      sa[2509] = "transfer change request transfer statement";
      sa[2510] = "transfer customer call";
      sa[2511] = "transfer customer call  ";
      sa[2512] = "transfer customer call   atm denied";
      sa[2513] = "transfer customer call   statement";
      sa[2514] = "transfer customer call   withdraw limit";
      sa[2515] = "transfer customer call billing address";
      sa[2516] = "transfer customer call billing address statement";
      sa[2517] = "transfer customer call card replace";
      sa[2518] = "transfer customer call card replace bitcoin";
      sa[2519] = "transfer customer call card replace statement";
      sa[2520] = "transfer customer call card replace withdraw limit";
      sa[2521] = "transfer customer call change request";
      sa[2522] = "transfer customer call change request statement";
      sa[2523] = "transfer customer call customer call";
      sa[2524] = "transfer customer call customer call atm limit";
      sa[2525] = "transfer customer call customer call bitcoin";
      sa[2526] = "transfer customer call customer call statement";
      sa[2527] = "transfer customer call late payment";
      sa[2528] = "transfer customer call password change";
      sa[2529] = "transfer customer call password change cash";
      sa[2530] = "transfer customer call password change statement";
      sa[2531] = "transfer customer call plastic replace";
      sa[2532] = "transfer customer call plastic replace moneyorder";
      sa[2533] = "transfer customer call statement";
      sa[2534] = "transfer customer call statement atm denied";
      sa[2535] = "transfer customer call statement cash";
      sa[2536] = "transfer customer call statement statement";
      sa[2537] = "transfer customer call transfer";
      sa[2538] = "transfer customer call transfer cash";
      sa[2539] = "transfer customer call transfer statement";
      sa[2540] = "transfer late payment";
      sa[2541] = "transfer late payment  ";
      sa[2542] = "transfer late payment   bitcoin";
      sa[2543] = "transfer late payment billing address";
      sa[2544] = "transfer late payment billing address lost cardrefund requested. supply additional details, call back";
      sa[2545] = "transfer late payment billing address moneyorder";
      sa[2546] = "transfer late payment card replace";
      sa[2547] = "transfer late payment card replace bitcoin";
      sa[2548] = "transfer late payment card replace moneyorder payment";
      sa[2549] = "transfer late payment change request";
      sa[2550] = "transfer late payment change request overseas atm";
      sa[2551] = "transfer late payment change request statement";
      sa[2552] = "transfer late payment customer call";
      sa[2553] = "transfer late payment customer call bitcoin";
      sa[2554] = "transfer late payment customer call lost cardrefund requested. supply additional details, call back";
      sa[2555] = "transfer late payment late payment";
      sa[2556] = "transfer late payment late payment bitcoin";
      sa[2557] = "transfer late payment late payment lost cardrefund requested. supply additional details, call back";
      sa[2558] = "transfer late payment moneyorder";
      sa[2559] = "transfer late payment password change";
      sa[2560] = "transfer late payment password change moneyorder payment";
      sa[2561] = "transfer late payment password change statement";
      sa[2562] = "transfer late payment plastic replace";
      sa[2563] = "transfer late payment plastic replace atm denied";
      sa[2564] = "transfer late payment plastic replace bitcoin";
      sa[2565] = "transfer late payment plastic replace moneyorder";
      sa[2566] = "transfer late payment plastic replace overseas atm";
      sa[2567] = "transfer late payment plastic replace statement";
      sa[2568] = "transfer late payment plastic replace withdraw limit";
      sa[2569] = "transfer late payment statement";
      sa[2570] = "transfer late payment statement statement";
      sa[2571] = "transfer late payment transfer atm limit";
      sa[2572] = "transfer late payment transfer statement";
      sa[2573] = "transfer password change";
      sa[2574] = "transfer password change  ";
      sa[2575] = "transfer password change   lost cardrefund requested. supply additional details, call back";
      sa[2576] = "transfer password change   moneyorder";
      sa[2577] = "transfer password change   moneyorder payment";
      sa[2578] = "transfer password change atm denied";
      sa[2579] = "transfer password change billing address";
      sa[2580] = "transfer password change billing address statement";
      sa[2581] = "transfer password change card replace";
      sa[2582] = "transfer password change card replace statement";
      sa[2583] = "transfer password change change request";
      sa[2584] = "transfer password change change request bitcoin";
      sa[2585] = "transfer password change change request lost cardrefund requested. supply additional details, call back";
      sa[2586] = "transfer password change customer call";
      sa[2587] = "transfer password change late payment";
      sa[2588] = "transfer password change late payment atm denied";
      sa[2589] = "transfer password change late payment atm limit";
      sa[2590] = "transfer password change late payment lost cardrefund requested. supply additional details, call back";
      sa[2591] = "transfer password change late payment moneyorder payment";
      sa[2592] = "transfer password change late payment statement";
      sa[2593] = "transfer password change late payment withdraw limit";
      sa[2594] = "transfer password change moneyorder payment";
      sa[2595] = "transfer password change overseas atm";
      sa[2596] = "transfer password change password change";
      sa[2597] = "transfer password change password change bitcoin";
      sa[2598] = "transfer password change password change withdraw limit";
      sa[2599] = "transfer password change plastic replace";
      sa[2600] = "transfer password change plastic replace atm denied";
      sa[2601] = "transfer password change plastic replace atm limit";
      sa[2602] = "transfer password change plastic replace cash";
      sa[2603] = "transfer password change plastic replace statement";
      sa[2604] = "transfer password change statement";
      sa[2605] = "transfer password change statement overseas atm";
      sa[2606] = "transfer password change statement statement";
      sa[2607] = "transfer password change transfer";
      sa[2608] = "transfer password change transfer statement";
      sa[2609] = "transfer plastic replace";
      sa[2610] = "transfer plastic replace  ";
      sa[2611] = "transfer plastic replace   cash";
      sa[2612] = "transfer plastic replace   statement";
      sa[2613] = "transfer plastic replace billing address";
      sa[2614] = "transfer plastic replace billing address statement";
      sa[2615] = "transfer plastic replace card replace";
      sa[2616] = "transfer plastic replace change request";
      sa[2617] = "transfer plastic replace change request atm denied";
      sa[2618] = "transfer plastic replace change request bitcoin";
      sa[2619] = "transfer plastic replace change request moneyorder payment";
      sa[2620] = "transfer plastic replace change request statement";
      sa[2621] = "transfer plastic replace change request withdraw limit";
      sa[2622] = "transfer plastic replace customer call";
      sa[2623] = "transfer plastic replace customer call bitcoin";
      sa[2624] = "transfer plastic replace password change statement";
      sa[2625] = "transfer plastic replace plastic replace";
      sa[2626] = "transfer plastic replace plastic replace cash";
      sa[2627] = "transfer plastic replace plastic replace statement";
      sa[2628] = "transfer plastic replace statement";
      sa[2629] = "transfer plastic replace statement bitcoin";
      sa[2630] = "transfer plastic replace statement cash";
      sa[2631] = "transfer plastic replace statement moneyorder payment";
      sa[2632] = "transfer plastic replace statement statement";
      sa[2633] = "transfer plastic replace transfer";
      sa[2634] = "transfer plastic replace transfer cash";
      sa[2635] = "transfer statement";
      sa[2636] = "transfer statement  ";
      sa[2637] = "transfer statement   bitcoin";
      sa[2638] = "transfer statement   cash";
      sa[2639] = "transfer statement   statement";
      sa[2640] = "transfer statement   withdraw limit";
      sa[2641] = "transfer statement billing address";
      sa[2642] = "transfer statement billing address overseas atm";
      sa[2643] = "transfer statement card replace";
      sa[2644] = "transfer statement card replace atm denied";
      sa[2645] = "transfer statement card replace moneyorder payment";
      sa[2646] = "transfer statement card replace statement";
      sa[2647] = "transfer statement cash";
      sa[2648] = "transfer statement change request";
      sa[2649] = "transfer statement change request atm limit";
      sa[2650] = "transfer statement change request statement";
      sa[2651] = "transfer statement customer call statement";
      sa[2652] = "transfer statement late payment";
      sa[2653] = "transfer statement password change";
      sa[2654] = "transfer statement password change bitcoin";
      sa[2655] = "transfer statement password change statement";
      sa[2656] = "transfer statement plastic replace";
      sa[2657] = "transfer statement plastic replace lost cardrefund requested. supply additional details, call back";
      sa[2658] = "transfer statement plastic replace statement";
      sa[2659] = "transfer statement statement";
      sa[2660] = "transfer statement statement overseas atm";
      sa[2661] = "transfer statement transfer";
      sa[2662] = "transfer statement transfer statement";
      sa[2663] = "transfer transfer";
      sa[2664] = "transfer transfer  ";
      sa[2665] = "transfer transfer   moneyorder";
      sa[2666] = "transfer transfer   overseas atm";
      sa[2667] = "transfer transfer   statement";
      sa[2668] = "transfer transfer billing address";
      sa[2669] = "transfer transfer billing address overseas atm";
      sa[2670] = "transfer transfer card replace";
      sa[2671] = "transfer transfer card replace moneyorder";
      sa[2672] = "transfer transfer card replace statement";
      sa[2673] = "transfer transfer customer call";
      sa[2674] = "transfer transfer customer call statement";
      sa[2675] = "transfer transfer late payment";
      sa[2676] = "transfer transfer late payment bitcoin";
      sa[2677] = "transfer transfer late payment lost cardrefund requested. supply additional details, call back";
      sa[2678] = "transfer transfer late payment moneyorder payment";
      sa[2679] = "transfer transfer password change";
      sa[2680] = "transfer transfer password change atm denied";
      sa[2681] = "transfer transfer password change statement";
      sa[2682] = "transfer transfer plastic replace";
      sa[2683] = "transfer transfer plastic replace statement";
      sa[2684] = "transfer transfer statement";
      sa[2685] = "transfer transfer statement lost cardrefund requested. supply additional details, call back";
      sa[2686] = "transfer transfer statement overseas atm";
      sa[2687] = "transfer transfer statement statement";
      sa[2688] = "transfer transfer transfer";
      sa[2689] = "transfer transfer transfer statement";
    }
  }
}
// The class representing column state
class XGBoost_model_python_1589382591366_94_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[9];
  static {
    XGBoost_model_python_1589382591366_94_ColInfo_1_0.fill(VALUES);
  }
  static final class XGBoost_model_python_1589382591366_94_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "CT";
      sa[1] = "MA";
      sa[2] = "ME";
      sa[3] = "NH";
      sa[4] = "NJ";
      sa[5] = "NY";
      sa[6] = "PA";
      sa[7] = "RI";
      sa[8] = "VT";
    }
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_0 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1139.94f) ?
      ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) < 1524.385f) ?
        ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
          ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1016.75f) ?
            -0.14998001f
            :
            ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 2812.8599f) ?
              ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 67.835f) ?
                0.0375f
                :
                -0.135f
              )
              :
              ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 4153.56f) ?
                0.10000001f
                :
                -0.07090909f
              )
            )
          )
          :
          ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) >= 42.92f) ?
            ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) >= 45.745f) ?
              ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 2.5f) ?
                -0.07859425f
                :
                -0.049719106f
              )
              :
              ((Double.isNaN((data[25] == 0 ? Double.NaN : data[25])) || ((float)(data[25] == 0 ? Double.NaN : data[25])) >= 9.5f) ?
                -0.10000001f
                :
                0.10000001f
              )
            )
            :
            ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 54.565002f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 13850.0f) ?
                -0.112500004f
                :
                0.125f
              )
              :
              ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) < 2.5f) ?
                -0.120000005f
                :
                -0.044444446f
              )
            )
          )
        )
        :
        ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
          ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 2628.85f) ?
            ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) < 472.08002f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) < 68550.0f) ?
                -0.0110576935f
                :
                -0.06206897f
              )
              :
              ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 8.000001f) ?
                -0.10000001f
                :
                0.1375f
              )
            )
            :
            ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 94.395004f) ?
              ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 7554.02f) ?
                -0.077622384f
                :
                0.045f
              )
              :
              ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 8500.0f) ?
                -0.10000001f
                :
                0.13333334f
              )
            )
          )
          :
          ((Double.isNaN((data[24] == 0 ? Double.NaN : data[24])) || ((float)(data[24] == 0 ? Double.NaN : data[24])) >= 2.5f) ?
            ((Double.isNaN((data[14] == 0 ? Double.NaN : data[14])) || ((float)(data[14] == 0 ? Double.NaN : data[14])) < 3.5f) ?
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 757.5f) ?
                -0.111923076f
                :
                -0.02857143f
              )
              :
              ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 208.68f) ?
                -0.0f
                :
                -0.08457447f
              )
            )
            :
            ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 26.5f) ?
              -0.13125001f
              :
              ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) < 1.5f) ?
                0.080000006f
                :
                -0.056250002f
              )
            )
          )
        )
      )
      :
      ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 1804.49f) ?
        ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) >= 27244.16f) ?
          ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) < 201350.0f) ?
            ((Double.isNaN((data[1] == 0 ? 1 : Double.NaN)) || ((float)(data[1] == 0 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 80.87f) ?
                0.14634147f
                :
                0.08955224f
              )
              :
              ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 54.6f) ?
                -0.025000002f
                :
                0.075f
              )
            )
            :
            ((Double.isNaN((data[11] == 0 ? Double.NaN : data[11])) || ((float)(data[11] == 0 ? Double.NaN : data[11])) >= 10.5f) ?
              0.112500004f
              :
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 726.0f) ?
                0.025000002f
                :
                -0.125f
              )
            )
          )
          :
          ((Double.isNaN((data[13] == 0 ? Double.NaN : data[13])) || ((float)(data[13] == 0 ? Double.NaN : data[13])) < 6.5f) ?
            ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 56438.445f) ?
              ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 2713.82f) ?
                -0.104166664f
                :
                0.015000001f
              )
              :
              ((Double.isNaN((data[0] == 463 ? 1 : Double.NaN)) || ((float)(data[0] == 463 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                0.112500004f
                :
                -0.075f
              )
            )
            :
            ((Double.isNaN((data[1] == 7 ? 1 : Double.NaN)) || ((float)(data[1] == 7 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              0.13125001f
              :
              -0.075f
            )
          )
        )
        :
        ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 4420.845f) ?
          ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 201150.0f) ?
            ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 1672.39f) ?
              -0.10000001f
              :
              ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 17500.0f) ?
                0.14f
                :
                -0.075f
              )
            )
            :
            ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 43.5f) ?
              ((Double.isNaN((data[9] == 0 ? Double.NaN : data[9])) || ((float)(data[9] == 0 ? Double.NaN : data[9])) >= 34.5f) ?
                -0.0063559324f
                :
                -0.075f
              )
              :
              ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 66.22f) ?
                -0.063750006f
                :
                0.03894231f
              )
            )
          )
          :
          -0.14166667f
        )
      )
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_1 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1257.75f) ?
      ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 1868.225f) ?
        ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
          ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1033.215f) ?
            ((Double.isNaN((data[0] == 879 ? 1 : Double.NaN)) || ((float)(data[0] == 879 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1494 ? 1 : Double.NaN)) || ((float)(data[0] == 1494 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.104847655f
                :
                0.08664337f
              )
              :
              0.08664337f
            )
            :
            ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) < 180150.0f) ?
              ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 61.5f) ?
                -0.082687765f
                :
                -0.028267236f
              )
              :
              0.10783591f
            )
          )
          :
          ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 9350.0f) ?
            ((Double.isNaN((data[13] == 0 ? Double.NaN : data[13])) || ((float)(data[13] == 0 ? Double.NaN : data[13])) < 1.5f) ?
              ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) < 4.5f) ?
                -0.042982407f
                :
                0.12762249f
              )
              :
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 686.5f) ?
                -0.013434269f
                :
                -0.104029804f
              )
            )
            :
            ((Double.isNaN((data[1] == 7 ? 1 : Double.NaN)) || ((float)(data[1] == 7 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[13] == 0 ? Double.NaN : data[13])) || ((float)(data[13] == 0 ? Double.NaN : data[13])) >= 2.000001f) ?
                -0.10184374f
                :
                0.056123506f
              )
              :
              ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 1.5f) ?
                0.1127485f
                :
                -0.073262036f
              )
            )
          )
        )
        :
        ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
          ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 7500.0f) ?
            ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) < 1.5f) ?
              ((Double.isNaN((data[0] == 1258 ? 1 : Double.NaN)) || ((float)(data[0] == 1258 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                0.11498799f
                :
                -0.063356645f
              )
              :
              ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 432.0f) ?
                0.06664774f
                :
                -0.08419675f
              )
            )
            :
            ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) < 394.46f) ?
              ((Double.isNaN((data[10] == 0 ? Double.NaN : data[10])) || ((float)(data[10] == 0 ? Double.NaN : data[10])) >= 2.5f) ?
                -0.043926522f
                :
                0.005863043f
              )
              :
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 32950.0f) ?
                0.020367727f
                :
                -0.033319157f
              )
            )
          )
          :
          ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) >= 2024.915f) ?
            ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) < 18055.18f) ?
              ((Double.isNaN((data[23] == 0 ? Double.NaN : data[23])) || ((float)(data[23] == 0 ? Double.NaN : data[23])) < 6.5f) ?
                -0.060575694f
                :
                0.041927405f
              )
              :
              0.1075f
            )
            :
            ((Double.isNaN((data[22] == 0 ? Double.NaN : data[22])) || ((float)(data[22] == 0 ? Double.NaN : data[22])) < -9.536743E-7f) ?
              0.13206433f
              :
              ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 1.5f) ?
                -0.08308511f
                :
                0.075f
              )
            )
          )
        )
      )
      :
      ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 1867.1599f) ?
        ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) >= 32323.484f) ?
          ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 125.5f) ?
            ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 26.01f) ?
              ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 137.5f) ?
                0.054722767f
                :
                -0.034288708f
              )
              :
              ((Double.isNaN((data[0] == 1446 ? 1 : Double.NaN)) || ((float)(data[0] == 1446 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.13666046f
                :
                0.06156717f
              )
            )
            :
            ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 1925.865f) ?
              -0.11791045f
              :
              ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 9.5f) ?
                0.06133531f
                :
                0.092736736f
              )
            )
          )
          :
          ((Double.isNaN((data[13] == 0 ? Double.NaN : data[13])) || ((float)(data[13] == 0 ? Double.NaN : data[13])) < 3.5f) ?
            ((Double.isNaN((data[25] == 0 ? Double.NaN : data[25])) || ((float)(data[25] == 0 ? Double.NaN : data[25])) >= 10.0f) ?
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 721.5f) ?
                0.1180625f
                :
                -0.030312503f
              )
              :
              ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 7424.62f) ?
                -0.10742858f
                :
                0.07275f
              )
            )
            :
            ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 37550.688f) ?
              ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
                0.10576042f
                :
                -0.016687503f
              )
              :
              ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 56438.445f) ?
                -0.10178573f
                :
                0.022010017f
              )
            )
          )
        )
        :
        ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
          ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 27.779999f) ?
            ((Double.isNaN((data[9] == 0 ? Double.NaN : data[9])) || ((float)(data[9] == 0 ? Double.NaN : data[9])) < 9.5f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 35050.0f) ?
                0.013163839f
                :
                -0.12123757f
              )
              :
              ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 282.45f) ?
                0.060867373f
                :
                0.002250399f
              )
            )
            :
            ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 12798.855f) ?
              ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 220.64f) ?
                -0.088517666f
                :
                0.060492586f
              )
              :
              -0.1409101f
            )
          )
          :
          ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 541.005f) ?
            ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 745.67004f) ?
              -0.08725f
              :
              ((Double.isNaN((data[1] == 6 ? 1 : Double.NaN)) || ((float)(data[1] == 6 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                0.12768751f
                :
                -0.059375003f
              )
            )
            :
            -0.12391655f
          )
        )
      )
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_2 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1139.94f) ?
      ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 1558.015f) ?
        ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
          ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1016.75f) ?
            -0.0735419f
            :
            ((Double.isNaN((data[13] == 0 ? Double.NaN : data[13])) || ((float)(data[13] == 0 ? Double.NaN : data[13])) >= 1.5f) ?
              ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 13512.025f) ?
                -0.034170646f
                :
                0.1259061f
              )
              :
              ((Double.isNaN((data[1] == 6 ? 1 : Double.NaN)) || ((float)(data[1] == 6 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.09209814f
                :
                0.051078033f
              )
            )
          )
          :
          ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) < 174.885f) ?
            ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) < 117.14f) ?
              ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) < 42.425003f) ?
                -0.042833835f
                :
                -0.009096924f
              )
              :
              ((Double.isNaN((data[0] == 1698 ? 1 : Double.NaN)) || ((float)(data[0] == 1698 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.093263835f
                :
                0.093236506f
              )
            )
            :
            ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 2688.45f) ?
              ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) < 4.5f) ?
                -0.006580424f
                :
                0.12857042f
              )
              :
              -0.10145152f
            )
          )
        )
        :
        ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) < 59.5f) ?
          ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 225.895f) ?
            ((Double.isNaN((data[22] == 0 ? Double.NaN : data[22])) || ((float)(data[22] == 0 ? Double.NaN : data[22])) < -9.536743E-7f) ?
              ((Double.isNaN((data[23] == 0 ? Double.NaN : data[23])) || ((float)(data[23] == 0 ? Double.NaN : data[23])) >= 7.5f) ?
                -0.09087514f
                :
                -0.0039633266f
              )
              :
              ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 10.000001f) ?
                -0.0024545935f
                :
                -0.047502533f
              )
            )
            :
            ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 320.73f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) < 33200.0f) ?
                -0.055647846f
                :
                0.008650696f
              )
              :
              ((Double.isNaN((data[23] == 0 ? Double.NaN : data[23])) || ((float)(data[23] == 0 ? Double.NaN : data[23])) >= 4.5f) ?
                -0.058062274f
                :
                0.10157473f
              )
            )
          )
          :
          ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 2.5f) ?
            ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 1.5f) ?
              -0.116705574f
              :
              0.0736035f
            )
            :
            ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) < 47.5f) ?
              ((Double.isNaN((data[26] == 0 ? Double.NaN : data[26])) || ((float)(data[26] == 0 ? Double.NaN : data[26])) >= 2.5f) ?
                0.022075724f
                :
                -0.08204558f
              )
              :
              0.13080797f
            )
          )
        )
      )
      :
      ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 1593.5449f) ?
        ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) >= 27244.16f) ?
          ((Double.isNaN((data[25] == 0 ? Double.NaN : data[25])) || ((float)(data[25] == 0 ? Double.NaN : data[25])) >= 2.5f) ?
            ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 9321.725f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) < 123150.0f) ?
                0.05192384f
                :
                0.017933495f
              )
              :
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 33250.0f) ?
                0.04219889f
                :
                -0.089458935f
              )
            )
            :
            ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 98700.0f) ?
              0.076195195f
              :
              -0.14621988f
            )
          )
          :
          ((Double.isNaN((data[11] == 0 ? Double.NaN : data[11])) || ((float)(data[11] == 0 ? Double.NaN : data[11])) >= 2.5f) ?
            ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 30274.686f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 68700.0f) ?
                -0.041511733f
                :
                0.06644978f
              )
              :
              ((Double.isNaN((data[1] == 0 ? 1 : Double.NaN)) || ((float)(data[1] == 0 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.10795171f
                :
                -0.0033883937f
              )
            )
            :
            ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 15.5f) ?
              ((Double.isNaN((data[10] == 0 ? Double.NaN : data[10])) || ((float)(data[10] == 0 ? Double.NaN : data[10])) >= 7.5f) ?
                0.11166077f
                :
                -0.036307327f
              )
              :
              ((Double.isNaN((data[1] == 0 ? 1 : Double.NaN)) || ((float)(data[1] == 0 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.059070498f
                :
                0.11239822f
              )
            )
          )
        )
        :
        ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 139250.0f) ?
          ((Double.isNaN((data[22] == 0 ? Double.NaN : data[22])) || ((float)(data[22] == 0 ? Double.NaN : data[22])) < -9.536743E-7f) ?
            ((Double.isNaN((data[25] == 0 ? Double.NaN : data[25])) || ((float)(data[25] == 0 ? Double.NaN : data[25])) >= 11.0f) ?
              -0.074384175f
              :
              0.120643966f
            )
            :
            ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 10761.971f) ?
              ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 9500.0f) ?
                -0.061274316f
                :
                0.07550239f
              )
              :
              -0.11196111f
            )
          )
          :
          ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 119100.0f) ?
            ((Double.isNaN((data[0] == 1765 ? 1 : Double.NaN)) || ((float)(data[0] == 1765 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              -0.12614384f
              :
              0.07561584f
            )
            :
            ((Double.isNaN((data[10] == 0 ? Double.NaN : data[10])) || ((float)(data[10] == 0 ? Double.NaN : data[10])) >= 16.5f) ?
              ((Double.isNaN((data[0] == 1364 ? 1 : Double.NaN)) || ((float)(data[0] == 1364 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                0.13869809f
                :
                -0.061643448f
              )
              :
              ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) < 37.5f) ?
                -0.03175739f
                :
                0.028328255f
              )
            )
          )
        )
      )
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_3 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1257.75f) ?
      ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 1868.225f) ?
        ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
          ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1016.75f) ?
            ((Double.isNaN((data[0] == 2360 ? 1 : Double.NaN)) || ((float)(data[0] == 2360 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1717 ? 1 : Double.NaN)) || ((float)(data[0] == 1717 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.051466975f
                :
                0.102965005f
              )
              :
              0.110717684f
            )
            :
            ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 28.795f) ?
              ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 9500.0f) ?
                -0.06392464f
                :
                -0.015865775f
              )
              :
              ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 2542.53f) ?
                -0.07000662f
                :
                0.104775116f
              )
            )
          )
          :
          ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 3.5f) ?
            ((Double.isNaN((data[23] == 0 ? Double.NaN : data[23])) || ((float)(data[23] == 0 ? Double.NaN : data[23])) >= 1.5f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 43100.0f) ?
                -0.029837962f
                :
                0.026241776f
              )
              :
              ((Double.isNaN((data[0] == 982 ? 1 : Double.NaN)) || ((float)(data[0] == 982 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.07417813f
                :
                0.099661574f
              )
            )
            :
            ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) >= 49.025f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 9350.0f) ?
                -0.01878229f
                :
                -0.06470328f
              )
              :
              ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 10.48f) ?
                -0.06372929f
                :
                -0.014340769f
              )
            )
          )
        )
        :
        ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
          ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 895.24f) ?
            ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) >= 1853.36f) ?
              ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) < 60.5f) ?
                -0.006806584f
                :
                -0.0606115f
              )
              :
              0.13018742f
            )
            :
            ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) >= 7506.165f) ?
              ((Double.isNaN((data[11] == 0 ? Double.NaN : data[11])) || ((float)(data[11] == 0 ? Double.NaN : data[11])) >= 3.5f) ?
                0.09124285f
                :
                -0.0958815f
              )
              :
              ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 8.000001f) ?
                -0.07769411f
                :
                0.115416355f
              )
            )
          )
          :
          ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) < 7.5f) ?
            ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 1.5f) ?
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 754.5f) ?
                -0.075090095f
                :
                0.01032399f
              )
              :
              ((Double.isNaN((data[9] == 0 ? Double.NaN : data[9])) || ((float)(data[9] == 0 ? Double.NaN : data[9])) >= 13.5f) ?
                -0.08942335f
                :
                0.047344092f
              )
            )
            :
            ((Double.isNaN((data[24] == 0 ? Double.NaN : data[24])) || ((float)(data[24] == 0 ? Double.NaN : data[24])) >= 2.5f) ?
              ((Double.isNaN((data[1] == 7 ? 1 : Double.NaN)) || ((float)(data[1] == 7 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.01819155f
                :
                -0.08200329f
              )
              :
              ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 580.36f) ?
                -0.003270738f
                :
                0.104808405f
              )
            )
          )
        )
      )
      :
      ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
        ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 1486.95f) ?
          ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 1925.865f) ?
            -0.10100633f
            :
            ((Double.isNaN((data[23] == 0 ? Double.NaN : data[23])) || ((float)(data[23] == 0 ? Double.NaN : data[23])) >= 4.5f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) < 29200.0f) ?
                -0.049845215f
                :
                0.052401494f
              )
              :
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 798.0f) ?
                0.021022975f
                :
                -0.12971166f
              )
            )
          )
          :
          ((Double.isNaN((data[11] == 0 ? Double.NaN : data[11])) || ((float)(data[11] == 0 ? Double.NaN : data[11])) < 1.5f) ?
            ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 280.88f) ?
              ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 25959.08f) ?
                -0.11956013f
                :
                0.017869396f
              )
              :
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 175600.0f) ?
                0.07448233f
                :
                -0.09126232f
              )
            )
            :
            ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 8500.0f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 155600.0f) ?
                0.06205673f
                :
                -0.11784503f
              )
              :
              ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 12500.0f) ?
                0.09133288f
                :
                0.0046251006f
              )
            )
          )
        )
        :
        ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) < 19.0f) ?
          ((Double.isNaN((data[24] == 0 ? Double.NaN : data[24])) || ((float)(data[24] == 0 ? Double.NaN : data[24])) >= 2.000001f) ?
            -0.082542226f
            :
            ((Double.isNaN((data[0] == 449 ? 1 : Double.NaN)) || ((float)(data[0] == 449 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              0.08159047f
              :
              -0.042752456f
            )
          )
          :
          ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 682.0f) ?
            0.096976325f
            :
            ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 891.185f) ?
              0.06427183f
              :
              -0.06410135f
            )
          )
        )
      )
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_4 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1257.75f) ?
      ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 1868.225f) ?
        ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 2.5f) ?
          ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1033.215f) ?
            ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
              ((Double.isNaN((data[0] == 1584 ? 1 : Double.NaN)) || ((float)(data[0] == 1584 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.035981495f
                :
                0.10886898f
              )
              :
              ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 10.01f) ?
                -0.02873689f
                :
                0.020489164f
              )
            )
            :
            ((Double.isNaN((data[11] == 0 ? Double.NaN : data[11])) || ((float)(data[11] == 0 ? Double.NaN : data[11])) >= 5.5f) ?
              ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 7045.145f) ?
                0.041098125f
                :
                -0.04819278f
              )
              :
              ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 1090.3501f) ?
                -0.05592813f
                :
                0.016623102f
              )
            )
          )
          :
          ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 3.5f) ?
            ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) < 21.465f) ?
              ((Double.isNaN((data[20] == 0 ? Double.NaN : data[20])) || ((float)(data[20] == 0 ? Double.NaN : data[20])) >= 6.000001f) ?
                0.07261939f
                :
                -0.09420187f
              )
              :
              ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 127.53f) ?
                -0.054632466f
                :
                0.08341582f
              )
            )
            :
            ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) < 16.5f) ?
              ((Double.isNaN((data[23] == 0 ? Double.NaN : data[23])) || ((float)(data[23] == 0 ? Double.NaN : data[23])) < 1.5f) ?
                -0.0020624637f
                :
                -0.04945388f
              )
              :
              ((Double.isNaN((data[0] == 2690 ? 1 : Double.NaN)) || ((float)(data[0] == 2690 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.021946155f
                :
                0.046815425f
              )
            )
          )
        )
        :
        ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 42.5f) ?
          ((Double.isNaN((data[13] == 0 ? Double.NaN : data[13])) || ((float)(data[13] == 0 ? Double.NaN : data[13])) < 1.5f) ?
            ((Double.isNaN((data[1] == 5 ? 1 : Double.NaN)) || ((float)(data[1] == 5 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[24] == 0 ? Double.NaN : data[24])) || ((float)(data[24] == 0 ? Double.NaN : data[24])) >= 2.0f) ?
                -0.071680754f
                :
                0.015588329f
              )
              :
              ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 238.73001f) ?
                -0.052343212f
                :
                0.07225504f
              )
            )
            :
            ((Double.isNaN((data[11] == 0 ? Double.NaN : data[11])) || ((float)(data[11] == 0 ? Double.NaN : data[11])) >= 1.5f) ?
              ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 3365.06f) ?
                0.066294014f
                :
                -0.046968173f
              )
              :
              ((Double.isNaN((data[1] == 7 ? 1 : Double.NaN)) || ((float)(data[1] == 7 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                0.14357968f
                :
                0.012508831f
              )
            )
          )
          :
          ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 21.5f) ?
            ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 2154.49f) ?
              ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 10500.0f) ?
                -0.022255983f
                :
                0.030490797f
              )
              :
              ((Double.isNaN((data[13] == 0 ? Double.NaN : data[13])) || ((float)(data[13] == 0 ? Double.NaN : data[13])) >= 1.5f) ?
                0.14186685f
                :
                -0.013666466f
              )
            )
            :
            ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) < 216.11f) ?
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 624.5f) ?
                0.10851187f
                :
                -0.02306038f
              )
              :
              ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 326.49f) ?
                0.0068755955f
                :
                0.1095266f
              )
            )
          )
        )
      )
      :
      ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 11947.15f) ?
        ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 155.0f) ?
          ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 38.5f) ?
            ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 673.0f) ?
              ((Double.isNaN((data[0] == 1994 ? 1 : Double.NaN)) || ((float)(data[0] == 1994 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                0.056816824f
                :
                -0.060956657f
              )
              :
              ((Double.isNaN((data[0] == 967 ? 1 : Double.NaN)) || ((float)(data[0] == 967 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.14503592f
                :
                0.042416733f
              )
            )
            :
            ((Double.isNaN((data[25] == 0 ? Double.NaN : data[25])) || ((float)(data[25] == 0 ? Double.NaN : data[25])) >= 8.5f) ?
              ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 162.5f) ?
                0.08186396f
                :
                -0.07277401f
              )
              :
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 718.5f) ?
                0.014372314f
                :
                -0.06355198f
              )
            )
          )
          :
          ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 58921.438f) ?
            ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 46511.68f) ?
              ((Double.isNaN((data[23] == 0 ? Double.NaN : data[23])) || ((float)(data[23] == 0 ? Double.NaN : data[23])) >= 2.5f) ?
                0.034708828f
                :
                0.0024839789f
              )
              :
              ((Double.isNaN((data[25] == 0 ? Double.NaN : data[25])) || ((float)(data[25] == 0 ? Double.NaN : data[25])) >= 6.0f) ?
                -0.11722953f
                :
                0.007986436f
              )
            )
            :
            ((Double.isNaN((data[0] == 498 ? 1 : Double.NaN)) || ((float)(data[0] == 498 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              0.07779786f
              :
              -0.07885359f
            )
          )
        )
        :
        ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 27.445f) ?
          ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 37900.0f) ?
            ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 11793.695f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 51100.0f) ?
                -0.109383754f
                :
                -0.039606772f
              )
              :
              ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 244.79001f) ?
                0.041299634f
                :
                -0.011782819f
              )
            )
            :
            ((Double.isNaN((data[13] == 0 ? Double.NaN : data[13])) || ((float)(data[13] == 0 ? Double.NaN : data[13])) < 3.5f) ?
              ((Double.isNaN((data[26] == 0 ? Double.NaN : data[26])) || ((float)(data[26] == 0 ? Double.NaN : data[26])) >= 3.5f) ?
                -0.011156319f
                :
                -0.08328083f
              )
              :
              ((Double.isNaN((data[1] == 7 ? 1 : Double.NaN)) || ((float)(data[1] == 7 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                0.107181944f
                :
                -0.033954207f
              )
            )
          )
          :
          ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 3.0f) ?
            -0.106203824f
            :
            0.036714643f
          )
        )
      )
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_5 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1139.94f) ?
      ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 1558.015f) ?
        ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
          ((Double.isNaN((data[0] == 1273 ? 1 : Double.NaN)) || ((float)(data[0] == 1273 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 2070 ? 1 : Double.NaN)) || ((float)(data[0] == 2070 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1584 ? 1 : Double.NaN)) || ((float)(data[0] == 1584 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.025191141f
                :
                0.092538625f
              )
              :
              0.09488845f
            )
            :
            0.10209728f
          )
          :
          ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) < 133.0f) ?
            ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 2753.9302f) ?
              ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) < 177.745f) ?
                -0.014724643f
                :
                0.018167572f
              )
              :
              -0.06869521f
            )
            :
            0.12967508f
          )
        )
        :
        ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 1580.76f) ?
          ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 88650.0f) ?
            ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 382.58002f) ?
              ((Double.isNaN((data[23] == 0 ? Double.NaN : data[23])) || ((float)(data[23] == 0 ? Double.NaN : data[23])) < 4.5f) ?
                -0.07017925f
                :
                0.015042239f
              )
              :
              ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) >= 3757.7349f) ?
                0.14323547f
                :
                -0.022584276f
              )
            )
            :
            ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 40550.0f) ?
              ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 7216.12f) ?
                -0.0022966336f
                :
                0.04468367f
              )
              :
              ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) < 8.5f) ?
                0.0018978462f
                :
                -0.036214333f
              )
            )
          )
          :
          ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 11.5f) ?
            ((Double.isNaN((data[0] == 1717 ? 1 : Double.NaN)) || ((float)(data[0] == 1717 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              -0.02582573f
              :
              0.09291748f
            )
            :
            0.16468304f
          )
        )
      )
      :
      ((Double.isNaN((data[1] == 5 ? 1 : Double.NaN)) || ((float)(data[1] == 5 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 1596.96f) ?
          ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 2713.82f) ?
            ((Double.isNaN((data[9] == 0 ? Double.NaN : data[9])) || ((float)(data[9] == 0 ? Double.NaN : data[9])) >= 16.5f) ?
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 690.5f) ?
                -0.06513765f
                :
                0.0072207716f
              )
              :
              -0.08369214f
            )
            :
            ((Double.isNaN((data[10] == 0 ? Double.NaN : data[10])) || ((float)(data[10] == 0 ? Double.NaN : data[10])) >= 40.5f) ?
              ((Double.isNaN((data[0] == 419 ? 1 : Double.NaN)) || ((float)(data[0] == 419 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.15073496f
                :
                0.025430365f
              )
              :
              ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 1641.8301f) ?
                0.013324936f
                :
                0.08691913f
              )
            )
          )
          :
          ((Double.isNaN((data[13] == 0 ? Double.NaN : data[13])) || ((float)(data[13] == 0 ? Double.NaN : data[13])) >= 1.5f) ?
            ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 680.5f) ?
              ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 571.29f) ?
                0.05104966f
                :
                -0.07031441f
              )
              :
              ((Double.isNaN((data[11] == 0 ? Double.NaN : data[11])) || ((float)(data[11] == 0 ? Double.NaN : data[11])) >= 4.5f) ?
                0.040942576f
                :
                -0.011937318f
              )
            )
            :
            ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) < 46.5f) ?
              ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 88.0f) ?
                0.08472785f
                :
                -0.07444717f
              )
              :
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 771.5f) ?
                0.114115156f
                :
                -0.06440165f
              )
            )
          )
        )
        :
        ((Double.isNaN((data[23] == 0 ? Double.NaN : data[23])) || ((float)(data[23] == 0 ? Double.NaN : data[23])) < 6.5f) ?
          ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 4943.3f) ?
            ((Double.isNaN((data[13] == 0 ? Double.NaN : data[13])) || ((float)(data[13] == 0 ? Double.NaN : data[13])) >= 4.5f) ?
              ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 2.5f) ?
                -0.036364615f
                :
                0.06368138f
              )
              :
              ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 40139.797f) ?
                -0.16800126f
                :
                0.026801545f
              )
            )
            :
            ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 17521.025f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 49800.0f) ?
                0.064741716f
                :
                0.014367356f
              )
              :
              ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 19059.29f) ?
                -0.10025309f
                :
                0.021727094f
              )
            )
          )
          :
          ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 14361.18f) ?
            ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) < 3.0f) ?
              ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 2534.615f) ?
                -0.04431835f
                :
                -0.1163569f
              )
              :
              0.027271656f
            )
            :
            0.04185302f
          )
        )
      )
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_6 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1865.245f) ?
      ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 2477.0298f) ?
        ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) < 2376.915f) ?
          ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) < 2311.155f) ?
            ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 2272.0498f) ?
              ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) < 12059.595f) ?
                -0.016690452f
                :
                -0.0012273043f
              )
              :
              -0.092458874f
            )
            :
            ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) < 1.5f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 115850.0f) ?
                -0.01555956f
                :
                0.15918408f
              )
              :
              -0.06176049f
            )
          )
          :
          -0.086874135f
        )
        :
        ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 2500.54f) ?
          ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
            ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 2628.85f) ?
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 669.5f) ?
                0.04803656f
                :
                7.009083E-5f
              )
              :
              ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 120.32f) ?
                -0.056815993f
                :
                0.07849836f
              )
            )
            :
            ((Double.isNaN((data[9] == 0 ? Double.NaN : data[9])) || ((float)(data[9] == 0 ? Double.NaN : data[9])) < 1.5f) ?
              ((Double.isNaN((data[1] == 4 ? 1 : Double.NaN)) || ((float)(data[1] == 4 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.001781358f
                :
                0.12148274f
              )
              :
              ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 13500.0f) ?
                -0.039593592f
                :
                0.0023210947f
              )
            )
          )
          :
          ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 111.63f) ?
            0.16462758f
            :
            -0.034092795f
          )
        )
      )
      :
      ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 722.5f) ?
        ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 467.53998f) ?
          ((Double.isNaN((data[0] == 72 ? 1 : Double.NaN)) || ((float)(data[0] == 72 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[14] == 0 ? Double.NaN : data[14])) || ((float)(data[14] == 0 ? Double.NaN : data[14])) < 8.5f) ?
              ((Double.isNaN((data[0] == 2372 ? 1 : Double.NaN)) || ((float)(data[0] == 2372 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                0.045837305f
                :
                -0.10876365f
              )
              :
              -0.110558145f
            )
            :
            -0.11578021f
          )
          :
          ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 370.15f) ?
            ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) < 2.5f) ?
              ((Double.isNaN((data[0] == 2690 ? 1 : Double.NaN)) || ((float)(data[0] == 2690 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.055511326f
                :
                0.032504164f
              )
              :
              ((Double.isNaN((data[0] == 2069 ? 1 : Double.NaN)) || ((float)(data[0] == 2069 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.17134315f
                :
                0.023348818f
              )
            )
            :
            ((Double.isNaN((data[13] == 0 ? Double.NaN : data[13])) || ((float)(data[13] == 0 ? Double.NaN : data[13])) >= 17.5f) ?
              ((Double.isNaN((data[0] == 1295 ? 1 : Double.NaN)) || ((float)(data[0] == 1295 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.15008469f
                :
                0.035807233f
              )
              :
              ((Double.isNaN((data[10] == 0 ? Double.NaN : data[10])) || ((float)(data[10] == 0 ? Double.NaN : data[10])) >= 9.5f) ?
                0.007839607f
                :
                0.05562579f
              )
            )
          )
        )
        :
        ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) < 24300.0f) ?
          ((Double.isNaN((data[26] == 0 ? Double.NaN : data[26])) || ((float)(data[26] == 0 ? Double.NaN : data[26])) >= 4.000001f) ?
            ((Double.isNaN((data[0] == 2690 ? 1 : Double.NaN)) || ((float)(data[0] == 2690 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              -0.03701716f
              :
              0.047904417f
            )
            :
            ((Double.isNaN((data[0] == 993 ? 1 : Double.NaN)) || ((float)(data[0] == 993 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              -0.17964971f
              :
              0.037793193f
            )
          )
          :
          ((Double.isNaN((data[25] == 0 ? Double.NaN : data[25])) || ((float)(data[25] == 0 ? Double.NaN : data[25])) >= 3.5f) ?
            ((Double.isNaN((data[0] == 2690 ? 1 : Double.NaN)) || ((float)(data[0] == 2690 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[11] == 0 ? Double.NaN : data[11])) || ((float)(data[11] == 0 ? Double.NaN : data[11])) >= 7.5f) ?
                0.044290364f
                :
                -0.03102105f
              )
              :
              ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 4052.9849f) ?
                -0.014035636f
                :
                0.056085613f
              )
            )
            :
            ((Double.isNaN((data[26] == 0 ? Double.NaN : data[26])) || ((float)(data[26] == 0 ? Double.NaN : data[26])) < 1.5f) ?
              ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 17492.445f) ?
                -0.114981286f
                :
                0.039482374f
              )
              :
              0.042112835f
            )
          )
        )
      )
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_7 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1139.94f) ?
      ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 97.145004f) ?
        ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 2.5f) ?
          ((Double.isNaN((data[0] == 141 ? 1 : Double.NaN)) || ((float)(data[0] == 141 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 2525 ? 1 : Double.NaN)) || ((float)(data[0] == 2525 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1490 ? 1 : Double.NaN)) || ((float)(data[0] == 1490 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.012728956f
                :
                0.09463171f
              )
              :
              0.09491208f
            )
            :
            0.09749944f
          )
          :
          ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) < 453.865f) ?
            ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) < 80700.0f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) < 15000.0f) ?
                -0.03222162f
                :
                0.025757847f
              )
              :
              ((Double.isNaN((data[1] == 4 ? 1 : Double.NaN)) || ((float)(data[1] == 4 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.075395375f
                :
                0.102782466f
              )
            )
            :
            0.13382529f
          )
        )
        :
        ((Double.isNaN((data[25] == 0 ? Double.NaN : data[25])) || ((float)(data[25] == 0 ? Double.NaN : data[25])) >= 51.0f) ?
          ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) >= 2621.745f) ?
            -0.059540965f
            :
            ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 2846.92f) ?
              0.16695783f
              :
              ((Double.isNaN((data[1] == 6 ? 1 : Double.NaN)) || ((float)(data[1] == 6 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.038522072f
                :
                0.086435884f
              )
            )
          )
          :
          ((Double.isNaN((data[0] == 1499 ? 1 : Double.NaN)) || ((float)(data[0] == 1499 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 2492 ? 1 : Double.NaN)) || ((float)(data[0] == 2492 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 238 ? 1 : Double.NaN)) || ((float)(data[0] == 238 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.0060861157f
                :
                0.08176859f
              )
              :
              0.11906622f
            )
            :
            0.10994412f
          )
        )
      )
      :
      ((Double.isNaN((data[11] == 0 ? Double.NaN : data[11])) || ((float)(data[11] == 0 ? Double.NaN : data[11])) >= 3.5f) ?
        ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 19.5f) ?
          ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 22500.0f) ?
            ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 1203.7151f) ?
              ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 36.5f) ?
                0.01056298f
                :
                0.04730686f
              )
              :
              ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 7500.0f) ?
                -0.029695567f
                :
                0.107390784f
              )
            )
            :
            -0.100431085f
          )
          :
          ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 47.934998f) ?
            ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 680.0f) ?
              ((Double.isNaN((data[1] == 5 ? 1 : Double.NaN)) || ((float)(data[1] == 5 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.058295f
                :
                0.059722703f
              )
              :
              ((Double.isNaN((data[9] == 0 ? Double.NaN : data[9])) || ((float)(data[9] == 0 ? Double.NaN : data[9])) >= 5.5f) ?
                -0.09703641f
                :
                -0.045136705f
              )
            )
            :
            ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 34900.0f) ?
              ((Double.isNaN((data[0] == 123 ? 1 : Double.NaN)) || ((float)(data[0] == 123 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                0.08426584f
                :
                -0.048558228f
              )
              :
              ((Double.isNaN((data[0] == 797 ? 1 : Double.NaN)) || ((float)(data[0] == 797 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.051624995f
                :
                0.05056481f
              )
            )
          )
        )
        :
        ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 723.5f) ?
          ((Double.isNaN((data[9] == 0 ? Double.NaN : data[9])) || ((float)(data[9] == 0 ? Double.NaN : data[9])) >= 19.5f) ?
            ((Double.isNaN((data[0] == 2030 ? 1 : Double.NaN)) || ((float)(data[0] == 2030 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 1438.4299f) ?
                -0.13367365f
                :
                -0.07769767f
              )
              :
              0.04230661f
            )
            :
            ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 491.66f) ?
              ((Double.isNaN((data[1] == 1 ? 1 : Double.NaN)) || ((float)(data[1] == 1 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.13158141f
                :
                0.031531055f
              )
              :
              ((Double.isNaN((data[13] == 0 ? Double.NaN : data[13])) || ((float)(data[13] == 0 ? Double.NaN : data[13])) >= 1.5f) ?
                0.05048983f
                :
                -0.025448322f
              )
            )
          )
          :
          ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 467.53998f) ?
            ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 69.91f) ?
              ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 82.33f) ?
                0.0044055353f
                :
                -0.13621193f
              )
              :
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 776.5f) ?
                0.03471978f
                :
                -0.046121754f
              )
            )
            :
            ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 55.105f) ?
              ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 9500.0f) ?
                -0.029081529f
                :
                0.02900601f
              )
              :
              ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 370.22998f) ?
                -0.06916476f
                :
                -0.011986292f
              )
            )
          )
        )
      )
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_8 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1867.1599f) ?
      ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) < 2621.7798f) ?
        ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) < 2611.915f) ?
          ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) < 2605.53f) ?
            ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 2640.025f) ?
              ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 2622.815f) ?
                -0.008040021f
                :
                0.059529457f
              )
              :
              ((Double.isNaN((data[0] == 536 ? 1 : Double.NaN)) || ((float)(data[0] == 536 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.07519349f
                :
                0.08825053f
              )
            )
            :
            ((Double.isNaN((data[11] == 0 ? Double.NaN : data[11])) || ((float)(data[11] == 0 ? Double.NaN : data[11])) >= 4.000001f) ?
              0.1308142f
              :
              ((Double.isNaN((data[1] == 5 ? 1 : Double.NaN)) || ((float)(data[1] == 5 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.0786231f
                :
                0.073438786f
              )
            )
          )
          :
          ((Double.isNaN((data[0] == 2690 ? 1 : Double.NaN)) || ((float)(data[0] == 2690 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1084 ? 1 : Double.NaN)) || ((float)(data[0] == 1084 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              -0.09816548f
              :
              -0.023527915f
            )
            :
            ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 14500.0f) ?
              -0.05263188f
              :
              0.09460842f
            )
          )
        )
        :
        ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) >= 2626.285f) ?
          ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 3.02f) ?
            ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 14.86f) ?
              ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 5.5f) ?
                -0.006395849f
                :
                0.019470142f
              )
              :
              -0.09640046f
            )
            :
            ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 3.0f) ?
              0.141507f
              :
              -0.054529224f
            )
          )
          :
          0.15335499f
        )
      )
      :
      ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 2009.37f) ?
        ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 2021.8899f) ?
          ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 681.5f) ?
            ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 38445.934f) ?
              ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 48.5f) ?
                0.04908479f
                :
                0.004480224f
              )
              :
              ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 57203.35f) ?
                0.029300068f
                :
                -0.07886553f
              )
            )
            :
            ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 690.5f) ?
              ((Double.isNaN((data[1] == 1 ? 1 : Double.NaN)) || ((float)(data[1] == 1 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.08747919f
                :
                0.022631994f
              )
              :
              ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 25.5f) ?
                0.023438236f
                :
                -0.0055899946f
              )
            )
          )
          :
          ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 58.735f) ?
            ((Double.isNaN((data[1] == 5 ? 1 : Double.NaN)) || ((float)(data[1] == 5 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              -0.12831551f
              :
              -0.021097323f
            )
            :
            0.026291264f
          )
        )
        :
        ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 105.5f) ?
          ((Double.isNaN((data[11] == 0 ? Double.NaN : data[11])) || ((float)(data[11] == 0 ? Double.NaN : data[11])) < 2.5f) ?
            ((Double.isNaN((data[1] == 7 ? 1 : Double.NaN)) || ((float)(data[1] == 7 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              -0.106776185f
              :
              -0.016602395f
            )
            :
            ((Double.isNaN((data[0] == 1069 ? 1 : Double.NaN)) || ((float)(data[0] == 1069 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              0.053745847f
              :
              0.013854262f
            )
          )
          :
          ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 22000.0f) ?
            ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 976.97f) ?
              -0.043804932f
              :
              ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) < 1.5f) ?
                0.01593288f
                :
                0.060773823f
              )
            )
            :
            -0.07504189f
          )
        )
      )
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_9 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) < 12632.04f) ?
      ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 2.5f) ?
        ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 18496.4f) ?
          ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) < 5418.965f) ?
            ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) < 3283.495f) ?
              ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 2838.755f) ?
                -0.0060068164f
                :
                0.013742783f
              )
              :
              ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 296.37f) ?
                -0.0651179f
                :
                0.029231064f
              )
            )
            :
            ((Double.isNaN((data[9] == 0 ? Double.NaN : data[9])) || ((float)(data[9] == 0 ? Double.NaN : data[9])) >= 10.5f) ?
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 694.5f) ?
                -0.056845892f
                :
                0.12416467f
              )
              :
              ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 14000.0f) ?
                -0.07531034f
                :
                0.054074533f
              )
            )
          )
          :
          ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 156000.0f) ?
            0.07294774f
            :
            -0.07605909f
          )
        )
        :
        ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 72.0f) ?
          ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) < 140.5f) ?
            ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 16500.0f) ?
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 748.5f) ?
                -0.07855397f
                :
                -0.03701505f
              )
              :
              -0.0267059f
            )
            :
            0.07151996f
          )
          :
          ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 59.9f) ?
            ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 645.0f) ?
              ((Double.isNaN((data[10] == 0 ? Double.NaN : data[10])) || ((float)(data[10] == 0 ? Double.NaN : data[10])) >= 1.5f) ?
                -0.06766504f
                :
                0.03982079f
              )
              :
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 704.5f) ?
                0.029643966f
                :
                0.0017277909f
              )
            )
            :
            ((Double.isNaN((data[1] == 2 ? 1 : Double.NaN)) || ((float)(data[1] == 2 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1459 ? 1 : Double.NaN)) || ((float)(data[0] == 1459 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.055751137f
                :
                -0.014229427f
              )
              :
              -0.018729411f
            )
          )
        )
      )
      :
      ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 12691.825f) ?
        ((Double.isNaN((data[0] == 2550 ? 1 : Double.NaN)) || ((float)(data[0] == 2550 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 103.5f) ?
            ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 18500.0f) ?
              ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 19387.61f) ?
                -0.112612315f
                :
                -0.01974731f
              )
              :
              0.054026995f
            )
            :
            ((Double.isNaN((data[0] == 402 ? 1 : Double.NaN)) || ((float)(data[0] == 402 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1052.085f) ?
                -0.012362465f
                :
                0.0067066606f
              )
              :
              -0.09520126f
            )
          )
          :
          -0.118335985f
        )
        :
        ((Double.isNaN((data[13] == 0 ? Double.NaN : data[13])) || ((float)(data[13] == 0 ? Double.NaN : data[13])) >= 38.0f) ?
          ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 2.5f) ?
            -0.0073989113f
            :
            0.008791692f
          )
          :
          ((Double.isNaN((data[1] == 2 ? 1 : Double.NaN)) || ((float)(data[1] == 2 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            0.10909552f
            :
            0.029492686f
          )
        )
      )
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_10 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1932 ? 1 : Double.NaN)) || ((float)(data[0] == 1932 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2189 ? 1 : Double.NaN)) || ((float)(data[0] == 2189 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 896.47f) ?
          ((Double.isNaN((data[20] == 0 ? Double.NaN : data[20])) || ((float)(data[20] == 0 ? Double.NaN : data[20])) < 7.5f) ?
            ((Double.isNaN((data[0] == 1494 ? 1 : Double.NaN)) || ((float)(data[0] == 1494 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 2022 ? 1 : Double.NaN)) || ((float)(data[0] == 2022 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.0041822335f
                :
                0.11073922f
              )
              :
              0.11135105f
            )
            :
            ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 496.4f) ?
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 11350.0f) ?
                -0.013699987f
                :
                0.12400985f
              )
              :
              0.12706824f
            )
          )
          :
          ((Double.isNaN((data[25] == 0 ? Double.NaN : data[25])) || ((float)(data[25] == 0 ? Double.NaN : data[25])) >= 52.0f) ?
            ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 421.18f) ?
              ((Double.isNaN((data[0] == 838 ? 1 : Double.NaN)) || ((float)(data[0] == 838 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                0.02681788f
                :
                -0.0023286887f
              )
              :
              0.08641906f
            )
            :
            ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 17500.0f) ?
              ((Double.isNaN((data[25] == 0 ? Double.NaN : data[25])) || ((float)(data[25] == 0 ? Double.NaN : data[25])) >= 15.5f) ?
                -0.09095301f
                :
                0.0028650986f
              )
              :
              ((Double.isNaN((data[13] == 0 ? Double.NaN : data[13])) || ((float)(data[13] == 0 ? Double.NaN : data[13])) >= 7.5f) ?
                0.044986963f
                :
                -0.033344816f
              )
            )
          )
        )
        :
        0.11347329f
      )
      :
      0.097174875f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_11 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1528 ? 1 : Double.NaN)) || ((float)(data[0] == 1528 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 240 ? 1 : Double.NaN)) || ((float)(data[0] == 240 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 2331 ? 1 : Double.NaN)) || ((float)(data[0] == 2331 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1618 ? 1 : Double.NaN)) || ((float)(data[0] == 1618 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 125 ? 1 : Double.NaN)) || ((float)(data[0] == 125 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 2403 ? 1 : Double.NaN)) || ((float)(data[0] == 2403 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.002429855f
                :
                0.10745249f
              )
              :
              0.10971588f
            )
            :
            0.10989271f
          )
          :
          0.11008846f
        )
        :
        0.110594735f
      )
      :
      -0.11575546f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_12 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1192 ? 1 : Double.NaN)) || ((float)(data[0] == 1192 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2492 ? 1 : Double.NaN)) || ((float)(data[0] == 2492 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 996 ? 1 : Double.NaN)) || ((float)(data[0] == 996 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1942 ? 1 : Double.NaN)) || ((float)(data[0] == 1942 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 320 ? 1 : Double.NaN)) || ((float)(data[0] == 320 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 2144 ? 1 : Double.NaN)) || ((float)(data[0] == 2144 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.0017567719f
                :
                0.08313233f
              )
              :
              0.10244871f
            )
            :
            0.10343637f
          )
          :
          0.10367886f
        )
        :
        0.104305126f
      )
      :
      0.106603846f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_13 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 630 ? 1 : Double.NaN)) || ((float)(data[0] == 630 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 798 ? 1 : Double.NaN)) || ((float)(data[0] == 798 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 12402.145f) ?
          ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 1.5f) ?
            ((Double.isNaN((data[26] == 0 ? Double.NaN : data[26])) || ((float)(data[26] == 0 ? Double.NaN : data[26])) >= 1.5f) ?
              ((Double.isNaN((data[11] == 0 ? Double.NaN : data[11])) || ((float)(data[11] == 0 ? Double.NaN : data[11])) < 3.5f) ?
                0.0089578675f
                :
                0.045510244f
              )
              :
              ((Double.isNaN((data[1] == 2 ? 1 : Double.NaN)) || ((float)(data[1] == 2 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.0055818916f
                :
                0.029437805f
              )
            )
            :
            ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) < 2.5f) ?
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 752.0f) ?
                -0.038405187f
                :
                0.025456151f
              )
              :
              ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 20500.0f) ?
                -0.002102777f
                :
                0.05558146f
              )
            )
          )
          :
          ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 12378.91f) ?
            ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 2.5f) ?
              -0.004523776f
              :
              -0.10214432f
            )
            :
            ((Double.isNaN((data[0] == 925 ? 1 : Double.NaN)) || ((float)(data[0] == 925 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 68 ? 1 : Double.NaN)) || ((float)(data[0] == 68 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.0017854542f
                :
                0.085768655f
              )
              :
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 41750.0f) ?
                -0.001431146f
                :
                0.1246447f
              )
            )
          )
        )
        :
        0.10218428f
      )
      :
      -0.08586039f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_14 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 483 ? 1 : Double.NaN)) || ((float)(data[0] == 483 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2550 ? 1 : Double.NaN)) || ((float)(data[0] == 2550 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 1278 ? 1 : Double.NaN)) || ((float)(data[0] == 1278 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1237 ? 1 : Double.NaN)) || ((float)(data[0] == 1237 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 481 ? 1 : Double.NaN)) || ((float)(data[0] == 481 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1800 ? 1 : Double.NaN)) || ((float)(data[0] == 1800 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -8.6157257E-4f
                :
                0.0805226f
              )
              :
              0.09888848f
            )
            :
            0.099590406f
          )
          :
          0.09967997f
        )
        :
        -0.10173103f
      )
      :
      0.101243146f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_15 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 729 ? 1 : Double.NaN)) || ((float)(data[0] == 729 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 1755 ? 1 : Double.NaN)) || ((float)(data[0] == 1755 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 488 ? 1 : Double.NaN)) || ((float)(data[0] == 488 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 72 ? 1 : Double.NaN)) || ((float)(data[0] == 72 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1197 ? 1 : Double.NaN)) || ((float)(data[0] == 1197 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 2189 ? 1 : Double.NaN)) || ((float)(data[0] == 2189 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -4.529661E-4f
                :
                0.09747735f
              )
              :
              -0.09927372f
            )
            :
            -0.099522226f
          )
          :
          -0.09960646f
        )
        :
        -0.09975321f
      )
      :
      -0.09979746f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_16 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1932 ? 1 : Double.NaN)) || ((float)(data[0] == 1932 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 1528 ? 1 : Double.NaN)) || ((float)(data[0] == 1528 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 963 ? 1 : Double.NaN)) || ((float)(data[0] == 963 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1499 ? 1 : Double.NaN)) || ((float)(data[0] == 1499 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 318 ? 1 : Double.NaN)) || ((float)(data[0] == 318 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1494 ? 1 : Double.NaN)) || ((float)(data[0] == 1494 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -4.3221042E-4f
                :
                0.09574139f
              )
              :
              0.09580078f
            )
            :
            0.07846829f
          )
          :
          -0.09703437f
        )
        :
        -0.097094156f
      )
      :
      0.07957688f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_17 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1252 ? 1 : Double.NaN)) || ((float)(data[0] == 1252 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2548 ? 1 : Double.NaN)) || ((float)(data[0] == 2548 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) < 313700.0f) ?
          ((Double.isNaN((data[0] == 240 ? 1 : Double.NaN)) || ((float)(data[0] == 240 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 2022 ? 1 : Double.NaN)) || ((float)(data[0] == 2022 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 2288 ? 1 : Double.NaN)) || ((float)(data[0] == 2288 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -3.882709E-4f
                :
                0.09528403f
              )
              :
              0.09528616f
            )
            :
            0.09536833f
          )
          :
          0.078017764f
        )
        :
        ((Double.isNaN((data[1] == 1 ? 1 : Double.NaN)) || ((float)(data[1] == 1 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          -5.43529E-4f
          :
          0.1176149f
        )
      )
      :
      0.09567226f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_18 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 2357 ? 1 : Double.NaN)) || ((float)(data[0] == 2357 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 972 ? 1 : Double.NaN)) || ((float)(data[0] == 972 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 544 ? 1 : Double.NaN)) || ((float)(data[0] == 544 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1586 ? 1 : Double.NaN)) || ((float)(data[0] == 1586 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) < 14588.17f) ?
              ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) < 14268.311f) ?
                -3.3559962E-4f
                :
                -0.04806189f
              )
              :
              ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
                0.0068964423f
                :
                -0.02074242f
              )
            )
            :
            -0.09521469f
          )
          :
          0.09521048f
        )
        :
        -0.09579222f
      )
      :
      -0.09585908f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_19 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1143 ? 1 : Double.NaN)) || ((float)(data[0] == 1143 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2292 ? 1 : Double.NaN)) || ((float)(data[0] == 2292 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 1350 ? 1 : Double.NaN)) || ((float)(data[0] == 1350 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 2331 ? 1 : Double.NaN)) || ((float)(data[0] == 2331 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1618 ? 1 : Double.NaN)) || ((float)(data[0] == 1618 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 2177 ? 1 : Double.NaN)) || ((float)(data[0] == 2177 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -1.6673499E-4f
                :
                0.076910265f
              )
              :
              0.09431073f
            )
            :
            0.09447712f
          )
          :
          0.09449417f
        )
        :
        -0.09583781f
      )
      :
      -0.09610885f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_20 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 125 ? 1 : Double.NaN)) || ((float)(data[0] == 125 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 1273 ? 1 : Double.NaN)) || ((float)(data[0] == 1273 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 585 ? 1 : Double.NaN)) || ((float)(data[0] == 585 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1845 ? 1 : Double.NaN)) || ((float)(data[0] == 1845 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1247 ? 1 : Double.NaN)) || ((float)(data[0] == 1247 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 295 ? 1 : Double.NaN)) || ((float)(data[0] == 295 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -1.5748199E-4f
                :
                0.09304188f
              )
              :
              0.09306221f
            )
            :
            0.09310284f
          )
          :
          -0.0938619f
        )
        :
        0.09416428f
      )
      :
      0.094185434f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_21 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1573 ? 1 : Double.NaN)) || ((float)(data[0] == 1573 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 1563 ? 1 : Double.NaN)) || ((float)(data[0] == 1563 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 1047 ? 1 : Double.NaN)) || ((float)(data[0] == 1047 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 691 ? 1 : Double.NaN)) || ((float)(data[0] == 691 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 2403 ? 1 : Double.NaN)) || ((float)(data[0] == 2403 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 221 ? 1 : Double.NaN)) || ((float)(data[0] == 221 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -8.7640125E-5f
                :
                0.07512634f
              )
              :
              0.09228518f
            )
            :
            -0.09248831f
          )
          :
          0.09243122f
        )
        :
        0.092790276f
      )
      :
      -0.0930669f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_22 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 2372 ? 1 : Double.NaN)) || ((float)(data[0] == 2372 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2042 ? 1 : Double.NaN)) || ((float)(data[0] == 2042 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 2599 ? 1 : Double.NaN)) || ((float)(data[0] == 2599 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1826 ? 1 : Double.NaN)) || ((float)(data[0] == 1826 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1817 ? 1 : Double.NaN)) || ((float)(data[0] == 1817 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 203 ? 1 : Double.NaN)) || ((float)(data[0] == 203 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -1.0914732E-4f
                :
                0.091331795f
              )
              :
              0.09141503f
            )
            :
            ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 2.000001f) ?
              -3.731699E-4f
              :
              0.112460665f
            )
          )
          :
          ((Double.isNaN((data[1] == 0 ? 1 : Double.NaN)) || ((float)(data[1] == 0 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            0.11279012f
            :
            -3.731699E-4f
          )
        )
        :
        0.09185207f
      )
      :
      -0.09201f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_23 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1192 ? 1 : Double.NaN)) || ((float)(data[0] == 1192 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 1951 ? 1 : Double.NaN)) || ((float)(data[0] == 1951 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 2469 ? 1 : Double.NaN)) || ((float)(data[0] == 2469 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 3 ? 1 : Double.NaN)) || ((float)(data[0] == 3 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1436 ? 1 : Double.NaN)) || ((float)(data[0] == 1436 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1403 ? 1 : Double.NaN)) || ((float)(data[0] == 1403 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -7.996098E-5f
                :
                0.09062218f
              )
              :
              -0.090784654f
            )
            :
            0.09079427f
          )
          :
          0.090852305f
        )
        :
        0.0910536f
      )
      :
      0.09132984f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_24 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 282 ? 1 : Double.NaN)) || ((float)(data[0] == 282 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 2777.625f) ?
        ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 2758.4f) ?
          ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 2750.17f) ?
            ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) < 2713.53f) ?
              ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 2746.145f) ?
                -1.0969431E-4f
                :
                0.0802349f
              )
              :
              ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) >= 2727.115f) ?
                -0.07039194f
                :
                0.10847834f
              )
            )
            :
            ((Double.isNaN((data[10] == 0 ? Double.NaN : data[10])) || ((float)(data[10] == 0 ? Double.NaN : data[10])) < 4.0f) ?
              ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 1.5f) ?
                -0.09613876f
                :
                -0.050488375f
              )
              :
              0.10807325f
            )
          )
          :
          ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) < 2.5f) ?
            ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 2769.95f) ?
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 669.5f) ?
                0.1348904f
                :
                -0.018018685f
              )
              :
              ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 386.01f) ?
                -0.07150622f
                :
                0.13262112f
              )
            )
            :
            ((Double.isNaN((data[24] == 0 ? Double.NaN : data[24])) || ((float)(data[24] == 0 ? Double.NaN : data[24])) >= 2.000001f) ?
              ((Double.isNaN((data[0] == 2038 ? 1 : Double.NaN)) || ((float)(data[0] == 2038 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.077500395f
                :
                0.06074355f
              )
              :
              0.09126271f
            )
          )
        )
        :
        ((Double.isNaN((data[26] == 0 ? Double.NaN : data[26])) || ((float)(data[26] == 0 ? Double.NaN : data[26])) >= 1.5f) ?
          ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 75.244995f) ?
            ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) < 40550.0f) ?
              ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 2812.2349f) ?
                -0.06446123f
                :
                0.018836401f
              )
              :
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 46100.0f) ?
                -0.020664627f
                :
                0.06935153f
              )
            )
            :
            ((Double.isNaN((data[9] == 0 ? Double.NaN : data[9])) || ((float)(data[9] == 0 ? Double.NaN : data[9])) >= 8.5f) ?
              ((Double.isNaN((data[0] == 653 ? 1 : Double.NaN)) || ((float)(data[0] == 653 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.08056897f
                :
                0.08014269f
              )
              :
              ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 2801.33f) ?
                0.10822577f
                :
                -0.0630673f
              )
            )
          )
          :
          ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 19.73f) ?
            ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) >= 2754.4f) ?
              ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 9897.585f) ?
                -0.028281204f
                :
                0.012388538f
              )
              :
              ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 2808.3452f) ?
                0.07778092f
                :
                -0.030537536f
              )
            )
            :
            ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 25.5f) ?
              ((Double.isNaN((data[0] == 2690 ? 1 : Double.NaN)) || ((float)(data[0] == 2690 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.037154503f
                :
                0.0821718f
              )
              :
              ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 11.045f) ?
                -0.08788486f
                :
                0.012712882f
              )
            )
          )
        )
      )
      :
      0.0901123f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_25 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 996 ? 1 : Double.NaN)) || ((float)(data[0] == 996 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 1862 ? 1 : Double.NaN)) || ((float)(data[0] == 1862 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 2534 ? 1 : Double.NaN)) || ((float)(data[0] == 2534 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 2588 ? 1 : Double.NaN)) || ((float)(data[0] == 2588 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 483 ? 1 : Double.NaN)) || ((float)(data[0] == 483 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 2492 ? 1 : Double.NaN)) || ((float)(data[0] == 2492 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -9.484545E-5f
                :
                0.08940436f
              )
              :
              0.089487866f
            )
            :
            0.07343821f
          )
          :
          0.0905748f
        )
        :
        0.092256516f
      )
      :
      0.09343622f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_26 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 402 ? 1 : Double.NaN)) || ((float)(data[0] == 402 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 1723 ? 1 : Double.NaN)) || ((float)(data[0] == 1723 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 501 ? 1 : Double.NaN)) || ((float)(data[0] == 501 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1475 ? 1 : Double.NaN)) || ((float)(data[0] == 1475 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1942 ? 1 : Double.NaN)) || ((float)(data[0] == 1942 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 685 ? 1 : Double.NaN)) || ((float)(data[0] == 685 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -2.799015E-6f
                :
                -0.08868285f
              )
              :
              0.08868015f
            )
            :
            0.08885045f
          )
          :
          0.088934965f
        )
        :
        0.08896825f
      )
      :
      -0.07301996f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_27 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 59 ? 1 : Double.NaN)) || ((float)(data[0] == 59 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 137 ? 1 : Double.NaN)) || ((float)(data[0] == 137 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 186 ? 1 : Double.NaN)) || ((float)(data[0] == 186 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1047 ? 1 : Double.NaN)) || ((float)(data[0] == 1047 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 2070 ? 1 : Double.NaN)) || ((float)(data[0] == 2070 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 343 ? 1 : Double.NaN)) || ((float)(data[0] == 343 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -4.476686E-5f
                :
                0.088062756f
              )
              :
              0.088133f
            )
            :
            0.088278726f
          )
          :
          -0.088377446f
        )
        :
        0.0884653f
      )
      :
      0.08848406f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_28 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 2618 ? 1 : Double.NaN)) || ((float)(data[0] == 2618 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 1280 ? 1 : Double.NaN)) || ((float)(data[0] == 1280 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 798 ? 1 : Double.NaN)) || ((float)(data[0] == 798 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 2550 ? 1 : Double.NaN)) || ((float)(data[0] == 2550 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 2404 ? 1 : Double.NaN)) || ((float)(data[0] == 2404 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 1865.245f) ?
                -2.3565117E-4f
                :
                0.0056707533f
              )
              :
              -0.0870336f
            )
            :
            -0.08718688f
          )
          :
          0.087355204f
        )
        :
        0.08755287f
      )
      :
      -0.08798668f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_29 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1540 ? 1 : Double.NaN)) || ((float)(data[0] == 1540 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 272 ? 1 : Double.NaN)) || ((float)(data[0] == 272 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 729 ? 1 : Double.NaN)) || ((float)(data[0] == 729 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1755 ? 1 : Double.NaN)) || ((float)(data[0] == 1755 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1874 ? 1 : Double.NaN)) || ((float)(data[0] == 1874 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 488 ? 1 : Double.NaN)) || ((float)(data[0] == 488 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                1.3709707E-5f
                :
                -0.08629955f
              )
              :
              0.086394235f
            )
            :
            -0.08642428f
          )
          :
          -0.08646189f
        )
        :
        ((Double.isNaN((data[1] == 5 ? 1 : Double.NaN)) || ((float)(data[1] == 5 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          0.106206864f
          :
          -2.7164014E-4f
        )
      )
      :
      0.08650455f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_30 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 72 ? 1 : Double.NaN)) || ((float)(data[0] == 72 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 1584 ? 1 : Double.NaN)) || ((float)(data[0] == 1584 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 267 ? 1 : Double.NaN)) || ((float)(data[0] == 267 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1997 ? 1 : Double.NaN)) || ((float)(data[0] == 1997 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 141 ? 1 : Double.NaN)) || ((float)(data[0] == 141 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 508 ? 1 : Double.NaN)) || ((float)(data[0] == 508 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -6.30039E-5f
                :
                0.06068738f
              )
              :
              0.08597943f
            )
            :
            0.08601603f
          )
          :
          0.08614162f
        )
        :
        0.08617566f
      )
      :
      -0.08623f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_31 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1278 ? 1 : Double.NaN)) || ((float)(data[0] == 1278 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 1237 ? 1 : Double.NaN)) || ((float)(data[0] == 1237 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 792 ? 1 : Double.NaN)) || ((float)(data[0] == 792 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1197 ? 1 : Double.NaN)) || ((float)(data[0] == 1197 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 574 ? 1 : Double.NaN)) || ((float)(data[0] == 574 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 2507 ? 1 : Double.NaN)) || ((float)(data[0] == 2507 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -5.3051644E-5f
                :
                0.068949126f
              )
              :
              0.08453143f
            )
            :
            -0.08492452f
          )
          :
          0.08493092f
        )
        :
        0.085063905f
      )
      :
      0.08514002f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_32 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1528 ? 1 : Double.NaN)) || ((float)(data[0] == 1528 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 963 ? 1 : Double.NaN)) || ((float)(data[0] == 963 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 2288 ? 1 : Double.NaN)) || ((float)(data[0] == 2288 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 2191 ? 1 : Double.NaN)) || ((float)(data[0] == 2191 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1714 ? 1 : Double.NaN)) || ((float)(data[0] == 1714 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 2525 ? 1 : Double.NaN)) || ((float)(data[0] == 2525 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -1.4434277E-5f
                :
                0.08379759f
              )
              :
              ((Double.isNaN((data[1] == 1 ? 1 : Double.NaN)) || ((float)(data[1] == 1 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -2.5628827E-4f
                :
                0.102914006f
              )
            )
            :
            0.08383318f
          )
          :
          0.08390678f
        )
        :
        -0.08416274f
      )
      :
      -0.08421356f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_33 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 2554 ? 1 : Double.NaN)) || ((float)(data[0] == 2554 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 182162.94f) ?
        ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) < 7451.64f) ?
          ((Double.isNaN((data[8] == 0 ? Double.NaN : data[8])) || ((float)(data[8] == 0 ? Double.NaN : data[8])) < 74237.44f) ?
            ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 58831.03f) ?
              ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 58202.766f) ?
                -4.3441756E-5f
                :
                -0.071332805f
              )
              :
              ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 94418.39f) ?
                0.042268656f
                :
                -0.05987885f
              )
            )
            :
            ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 6880.81f) ?
              ((Double.isNaN((data[0] == 2305 ? 1 : Double.NaN)) || ((float)(data[0] == 2305 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                0.028874213f
                :
                0.0055043134f
              )
              :
              ((Double.isNaN((data[0] == 102 ? 1 : Double.NaN)) || ((float)(data[0] == 102 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.10735726f
                :
                0.03238678f
              )
            )
          )
          :
          ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 338.20502f) ?
            ((Double.isNaN((data[23] == 0 ? Double.NaN : data[23])) || ((float)(data[23] == 0 ? Double.NaN : data[23])) >= 6.0f) ?
              ((Double.isNaN((data[1] == 2 ? 1 : Double.NaN)) || ((float)(data[1] == 2 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.0017540395f
                :
                0.0056512714f
              )
              :
              ((Double.isNaN((data[15] == 0 ? Double.NaN : data[15])) || ((float)(data[15] == 0 ? Double.NaN : data[15])) < 95728.33f) ?
                0.051637407f
                :
                0.024836756f
              )
            )
            :
            ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 199.68f) ?
              -0.072027884f
              :
              0.039072596f
            )
          )
        )
        :
        ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 61.17f) ?
          0.033495635f
          :
          -0.111651935f
        )
      )
      :
      0.08363548f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_34 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1490 ? 1 : Double.NaN)) || ((float)(data[0] == 1490 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2377 ? 1 : Double.NaN)) || ((float)(data[0] == 2377 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 1804 ? 1 : Double.NaN)) || ((float)(data[0] == 1804 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) < 2825.265f) ?
            ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 2845.995f) ?
              ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) < 2780.6099f) ?
                1.8706113E-4f
                :
                -0.017649297f
              )
              :
              ((Double.isNaN((data[21] == 0 ? Double.NaN : data[21])) || ((float)(data[21] == 0 ? Double.NaN : data[21])) < 14500.0f) ?
                0.06765211f
                :
                -0.022847353f
              )
            )
            :
            ((Double.isNaN((data[16] == 0 ? Double.NaN : data[16])) || ((float)(data[16] == 0 ? Double.NaN : data[16])) >= 2843.475f) ?
              ((Double.isNaN((data[5] == 0 ? Double.NaN : data[5])) || ((float)(data[5] == 0 ? Double.NaN : data[5])) < 707.5f) ?
                -0.019702349f
                :
                0.014411499f
              )
              :
              ((Double.isNaN((data[1] == 6 ? 1 : Double.NaN)) || ((float)(data[1] == 6 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.074299194f
                :
                0.049548175f
              )
            )
          )
          :
          0.08318697f
        )
        :
        0.08352546f
      )
      :
      0.083567955f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_35 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[18] == 0 ? Double.NaN : data[18])) || ((float)(data[18] == 0 ? Double.NaN : data[18])) < 2.5f) ?
      ((Double.isNaN((data[0] == 1658 ? 1 : Double.NaN)) || ((float)(data[0] == 1658 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 2360 ? 1 : Double.NaN)) || ((float)(data[0] == 2360 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 638 ? 1 : Double.NaN)) || ((float)(data[0] == 638 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1143 ? 1 : Double.NaN)) || ((float)(data[0] == 1143 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1397 ? 1 : Double.NaN)) || ((float)(data[0] == 1397 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -2.805451E-4f
                :
                0.08178236f
              )
              :
              -0.082444206f
            )
            :
            0.08217107f
          )
          :
          0.08238132f
        )
        :
        ((Double.isNaN((data[1] == 1 ? 1 : Double.NaN)) || ((float)(data[1] == 1 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          0.109206f
          :
          -2.7566604E-4f
        )
      )
      :
      ((Double.isNaN((data[25] == 0 ? Double.NaN : data[25])) || ((float)(data[25] == 0 ? Double.NaN : data[25])) < 6.5f) ?
        ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 126.96f) ?
          ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 65.635f) ?
            ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 29.0f) ?
              ((Double.isNaN((data[0] == 1154 ? 1 : Double.NaN)) || ((float)(data[0] == 1154 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.06771936f
                :
                0.06648546f
              )
              :
              ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 15.5f) ?
                0.076034665f
                :
                -0.03160328f
              )
            )
            :
            ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 15750.0f) ?
              ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) >= 36.61f) ?
                0.1331669f
                :
                0.021316186f
              )
              :
              ((Double.isNaN((data[1] == 6 ? 1 : Double.NaN)) || ((float)(data[1] == 6 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.045800112f
                :
                0.09376794f
              )
            )
          )
          :
          ((Double.isNaN((data[19] == 0 ? Double.NaN : data[19])) || ((float)(data[19] == 0 ? Double.NaN : data[19])) >= 40.760002f) ?
            ((Double.isNaN((data[0] == 1297 ? 1 : Double.NaN)) || ((float)(data[0] == 1297 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 2147 ? 1 : Double.NaN)) || ((float)(data[0] == 2147 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.06638078f
                :
                -0.017758004f
              )
              :
              -0.013391164f
            )
            :
            -0.021698125f
          )
        )
        :
        ((Double.isNaN((data[11] == 0 ? Double.NaN : data[11])) || ((float)(data[11] == 0 ? Double.NaN : data[11])) < 2.5f) ?
          ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) < 9.5f) ?
            ((Double.isNaN((data[7] == 0 ? Double.NaN : data[7])) || ((float)(data[7] == 0 ? Double.NaN : data[7])) < 8.26f) ?
              ((Double.isNaN((data[12] == 0 ? Double.NaN : data[12])) || ((float)(data[12] == 0 ? Double.NaN : data[12])) >= 5.6450005f) ?
                -0.017001277f
                :
                0.088739626f
              )
              :
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) < 51900.0f) ?
                0.026349707f
                :
                0.0993044f
              )
            )
            :
            ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) < 50000.0f) ?
              ((Double.isNaN((data[1] == 0 ? 1 : Double.NaN)) || ((float)(data[1] == 0 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -0.049659062f
                :
                0.025487091f
              )
              :
              ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) >= 63900.0f) ?
                -0.011846878f
                :
                0.076214895f
              )
            )
          )
          :
          ((Double.isNaN((data[6] == 0 ? Double.NaN : data[6])) || ((float)(data[6] == 0 ? Double.NaN : data[6])) >= 191.0f) ?
            ((Double.isNaN((data[0] == 2690 ? 1 : Double.NaN)) || ((float)(data[0] == 2690 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              -0.03875724f
              :
              0.01853782f
            )
            :
            ((Double.isNaN((data[4] == 0 ? Double.NaN : data[4])) || ((float)(data[4] == 0 ? Double.NaN : data[4])) >= 88.0f) ?
              -0.013893494f
              :
              0.15598635f
            )
          )
        )
      )
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_36 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1932 ? 1 : Double.NaN)) || ((float)(data[0] == 1932 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2292 ? 1 : Double.NaN)) || ((float)(data[0] == 2292 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 2357 ? 1 : Double.NaN)) || ((float)(data[0] == 2357 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 972 ? 1 : Double.NaN)) || ((float)(data[0] == 972 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1586 ? 1 : Double.NaN)) || ((float)(data[0] == 1586 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 318 ? 1 : Double.NaN)) || ((float)(data[0] == 318 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                6.254896E-5f
                :
                0.0817406f
              )
              :
              -0.08161709f
            )
            :
            -0.08210798f
          )
          :
          -0.08216482f
        )
        :
        -0.08217174f
      )
      :
      0.069832176f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_37 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1494 ? 1 : Double.NaN)) || ((float)(data[0] == 1494 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2548 ? 1 : Double.NaN)) || ((float)(data[0] == 2548 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 1252 ? 1 : Double.NaN)) || ((float)(data[0] == 1252 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 2529 ? 1 : Double.NaN)) || ((float)(data[0] == 2529 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 2047 ? 1 : Double.NaN)) || ((float)(data[0] == 2047 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 240 ? 1 : Double.NaN)) || ((float)(data[0] == 240 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -1.4022797E-5f
                :
                0.0813054f
              )
              :
              -0.06650775f
            )
            :
            -0.08149208f
          )
          :
          0.081563726f
        )
        :
        ((Double.isNaN((data[1] == 1 ? 1 : Double.NaN)) || ((float)(data[1] == 1 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          -2.1967792E-4f
          :
          0.10021499f
        )
      )
      :
      0.081680745f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_38 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 107 ? 1 : Double.NaN)) || ((float)(data[0] == 107 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2101 ? 1 : Double.NaN)) || ((float)(data[0] == 2101 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 1862 ? 1 : Double.NaN)) || ((float)(data[0] == 1862 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1321 ? 1 : Double.NaN)) || ((float)(data[0] == 1321 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 897 ? 1 : Double.NaN)) || ((float)(data[0] == 897 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1600 ? 1 : Double.NaN)) || ((float)(data[0] == 1600 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -7.828256E-5f
                :
                0.08070926f
              )
              :
              0.08072253f
            )
            :
            0.08087665f
          )
          :
          0.081166744f
        )
        :
        0.081178546f
      )
      :
      0.081301406f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_39 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 2634 ? 1 : Double.NaN)) || ((float)(data[0] == 2634 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2215 ? 1 : Double.NaN)) || ((float)(data[0] == 2215 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 1350 ? 1 : Double.NaN)) || ((float)(data[0] == 1350 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 2331 ? 1 : Double.NaN)) || ((float)(data[0] == 2331 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1192 ? 1 : Double.NaN)) || ((float)(data[0] == 1192 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1618 ? 1 : Double.NaN)) || ((float)(data[0] == 1618 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -7.546518E-5f
                :
                0.08034493f
              )
              :
              0.0804324f
            )
            :
            0.080486365f
          )
          :
          0.080500856f
        )
        :
        ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 1.5f) ?
          -3.0549444E-4f
          :
          0.11435812f
        )
      )
      :
      0.08059316f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_40 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1695 ? 1 : Double.NaN)) || ((float)(data[0] == 1695 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 708 ? 1 : Double.NaN)) || ((float)(data[0] == 708 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 125 ? 1 : Double.NaN)) || ((float)(data[0] == 125 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1273 ? 1 : Double.NaN)) || ((float)(data[0] == 1273 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 2623 ? 1 : Double.NaN)) || ((float)(data[0] == 2623 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1573 ? 1 : Double.NaN)) || ((float)(data[0] == 1573 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                2.8480542E-6f
                :
                -0.07983745f
              )
              :
              0.07998969f
            )
            :
            0.080208145f
          )
          :
          0.08022614f
        )
        :
        0.080284804f
      )
      :
      -0.08021903f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_41 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 2577 ? 1 : Double.NaN)) || ((float)(data[0] == 2577 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 282 ? 1 : Double.NaN)) || ((float)(data[0] == 282 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 1800 ? 1 : Double.NaN)) || ((float)(data[0] == 1800 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 996 ? 1 : Double.NaN)) || ((float)(data[0] == 996 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 691 ? 1 : Double.NaN)) || ((float)(data[0] == 691 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 295 ? 1 : Double.NaN)) || ((float)(data[0] == 295 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -3.7989903E-5f
                :
                0.07925368f
              )
              :
              -0.07934608f
            )
            :
            0.07951668f
          )
          :
          ((Double.isNaN((data[1] == 2 ? 1 : Double.NaN)) || ((float)(data[1] == 2 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            0.109969124f
            :
            -0.012425852f
          )
        )
        :
        0.07968899f
      )
      :
      0.07969426f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_42 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1563 ? 1 : Double.NaN)) || ((float)(data[0] == 1563 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2372 ? 1 : Double.NaN)) || ((float)(data[0] == 2372 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[3] == 0 ? Double.NaN : data[3])) || ((float)(data[3] == 0 ? Double.NaN : data[3])) < 333350.0f) ?
          ((Double.isNaN((data[0] == 2168 ? 1 : Double.NaN)) || ((float)(data[0] == 2168 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1466 ? 1 : Double.NaN)) || ((float)(data[0] == 1466 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 2403 ? 1 : Double.NaN)) || ((float)(data[0] == 2403 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -9.715186E-7f
                :
                0.07860303f
              )
              :
              -0.078670576f
            )
            :
            0.07891612f
          )
          :
          0.07892957f
        )
        :
        -0.07895019f
      )
      :
      0.07903236f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_43 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1462 ? 1 : Double.NaN)) || ((float)(data[0] == 1462 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2599 ? 1 : Double.NaN)) || ((float)(data[0] == 2599 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 2042 ? 1 : Double.NaN)) || ((float)(data[0] == 2042 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1713 ? 1 : Double.NaN)) || ((float)(data[0] == 1713 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 2129 ? 1 : Double.NaN)) || ((float)(data[0] == 2129 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 613 ? 1 : Double.NaN)) || ((float)(data[0] == 613 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -8.1310995E-5f
                :
                0.06379956f
              )
              :
              0.07815746f
            )
            :
            ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 1.5f) ?
              -2.8317873E-4f
              :
              0.111014545f
            )
          )
          :
          0.07821868f
        )
        :
        ((Double.isNaN((data[1] == 0 ? 1 : Double.NaN)) || ((float)(data[1] == 0 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          0.09601603f
          :
          -1.7278067E-4f
        )
      )
      :
      0.078461945f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_44 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1826 ? 1 : Double.NaN)) || ((float)(data[0] == 1826 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 536 ? 1 : Double.NaN)) || ((float)(data[0] == 536 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 1359 ? 1 : Double.NaN)) || ((float)(data[0] == 1359 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1293 ? 1 : Double.NaN)) || ((float)(data[0] == 1293 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1448 ? 1 : Double.NaN)) || ((float)(data[0] == 1448 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1817 ? 1 : Double.NaN)) || ((float)(data[0] == 1817 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -6.714458E-5f
                :
                0.07785938f
              )
              :
              0.07787407f
            )
            :
            ((Double.isNaN((data[1] == 0 ? 1 : Double.NaN)) || ((float)(data[1] == 0 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              -0.0012572869f
              :
              0.09665925f
            )
          )
          :
          0.078036964f
        )
        :
        0.07804248f
      )
      :
      ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 2.000001f) ?
        -1.6058402E-4f
        :
        0.09574818f
      )
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_45 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1436 ? 1 : Double.NaN)) || ((float)(data[0] == 1436 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2250 ? 1 : Double.NaN)) || ((float)(data[0] == 2250 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 618 ? 1 : Double.NaN)) || ((float)(data[0] == 618 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 203 ? 1 : Double.NaN)) || ((float)(data[0] == 203 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1951 ? 1 : Double.NaN)) || ((float)(data[0] == 1951 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1499 ? 1 : Double.NaN)) || ((float)(data[0] == 1499 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                3.5152494E-5f
                :
                0.063245825f
              )
              :
              0.07755024f
            )
            :
            0.07779871f
          )
          :
          -0.07770461f
        )
        :
        -0.07774496f
      )
      :
      -0.077898234f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_46 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1004 ? 1 : Double.NaN)) || ((float)(data[0] == 1004 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 3 ? 1 : Double.NaN)) || ((float)(data[0] == 3 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 2146 ? 1 : Double.NaN)) || ((float)(data[0] == 2146 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1711 ? 1 : Double.NaN)) || ((float)(data[0] == 1711 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 2461 ? 1 : Double.NaN)) || ((float)(data[0] == 2461 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1760 ? 1 : Double.NaN)) || ((float)(data[0] == 1760 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -5.054202E-5f
                :
                0.076827966f
              )
              :
              ((Double.isNaN((data[1] == 1 ? 1 : Double.NaN)) || ((float)(data[1] == 1 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -7.912961E-4f
                :
                0.12319601f
              )
            )
            :
            0.07698805f
          )
          :
          -0.077203795f
        )
        :
        0.07732455f
      )
      :
      ((Double.isNaN((data[1] == 0 ? 1 : Double.NaN)) || ((float)(data[1] == 0 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[1] == 4 ? 1 : Double.NaN)) || ((float)(data[1] == 4 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          -1.9538858E-4f
          :
          3.7407712E-4f
        )
        :
        0.10928627f
      )
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_47 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 465 ? 1 : Double.NaN)) || ((float)(data[0] == 465 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 685 ? 1 : Double.NaN)) || ((float)(data[0] == 685 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 2492 ? 1 : Double.NaN)) || ((float)(data[0] == 2492 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1843 ? 1 : Double.NaN)) || ((float)(data[0] == 1843 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 349 ? 1 : Double.NaN)) || ((float)(data[0] == 349 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 1723 ? 1 : Double.NaN)) || ((float)(data[0] == 1723 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -3.459195E-7f
                :
                0.075748906f
              )
              :
              ((Double.isNaN((data[1] == 2 ? 1 : Double.NaN)) || ((float)(data[1] == 2 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -1.8780727E-4f
                :
                -0.09261179f
              )
            )
            :
            0.07589621f
          )
          :
          0.07612002f
        )
        :
        -0.07614051f
      )
      :
      ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 3.0f) ?
        0.093746f
        :
        -1.8780727E-4f
      )
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_48 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 501 ? 1 : Double.NaN)) || ((float)(data[0] == 501 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2177 ? 1 : Double.NaN)) || ((float)(data[0] == 2177 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 171 ? 1 : Double.NaN)) || ((float)(data[0] == 171 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 1942 ? 1 : Double.NaN)) || ((float)(data[0] == 1942 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 59 ? 1 : Double.NaN)) || ((float)(data[0] == 59 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 137 ? 1 : Double.NaN)) || ((float)(data[0] == 137 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -6.843822E-5f
                :
                0.075314745f
              )
              :
              0.07533068f
            )
            :
            0.07550408f
          )
          :
          0.075697035f
        )
        :
        ((Double.isNaN((data[1] == 0 ? 1 : Double.NaN)) || ((float)(data[1] == 0 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          0.10448597f
          :
          -0.011749304f
        )
      )
      :
      0.07572067f
    );
  }
}

class XGBoost_model_python_1589382591366_94_Tree_g_0_t_49 {
  static float score0(double[] data) {
    return     ((Double.isNaN((data[0] == 1421 ? 1 : Double.NaN)) || ((float)(data[0] == 1421 ? 1 : Double.NaN)) < -9.536743E-7f) ?
      ((Double.isNaN((data[0] == 2014 ? 1 : Double.NaN)) || ((float)(data[0] == 2014 ? 1 : Double.NaN)) < -9.536743E-7f) ?
        ((Double.isNaN((data[0] == 204 ? 1 : Double.NaN)) || ((float)(data[0] == 204 ? 1 : Double.NaN)) < -9.536743E-7f) ?
          ((Double.isNaN((data[0] == 2070 ? 1 : Double.NaN)) || ((float)(data[0] == 2070 ? 1 : Double.NaN)) < -9.536743E-7f) ?
            ((Double.isNaN((data[0] == 1373 ? 1 : Double.NaN)) || ((float)(data[0] == 1373 ? 1 : Double.NaN)) < -9.536743E-7f) ?
              ((Double.isNaN((data[0] == 343 ? 1 : Double.NaN)) || ((float)(data[0] == 343 ? 1 : Double.NaN)) < -9.536743E-7f) ?
                -6.431098E-5f
                :
                0.07498284f
              )
              :
              0.07499737f
            )
            :
            0.07504256f
          )
          :
          0.07505075f
        )
        :
        ((Double.isNaN((data[2] == 0 ? Double.NaN : data[2])) || ((float)(data[2] == 0 ? Double.NaN : data[2])) >= 4.000001f) ?
          0.106650725f
          :
          -2.3665286E-4f
        )
      )
      :
      0.075316004f
    );
  }
}

