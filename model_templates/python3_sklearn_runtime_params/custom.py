"""
Copyright 2023 DataRobot, Inc. and its affiliates.
All rights reserved.
This is proprietary source code of DataRobot, Inc. and its affiliates.
Released under the terms of DataRobot Tool and Utility Agreement.
"""
import logging

# Use this helper class to access the runtime parameter values in your model
from datarobot_drum import RuntimeParameters


logger = logging.getLogger(__name__)


# This is a naive function so as to not dump the full credential values
# during this demonstration.
def mask(value, visible=3):
    return value[:visible] + ("*" * len(value[visible:]))


def transform(data, model):
    logger.info("=" * 40)
    option1 = RuntimeParameters.get("option1")
    option2 = RuntimeParameters.get("option2")
    option3 = RuntimeParameters.get("option3")
    logger.info(
        "Loading the following Runtime Parameters: "
        f"option1: {option1}, option2: {option2}, option3: {option3}",
    )

    credential = RuntimeParameters.get("encryption_key")
    if credential is not None:
        credential_type = credential.pop("credentialType")
        logger.info(
            "Using credentials api_key: ",
            extra={
                "credential_type": credential_type,
                "api_key": str({k: mask(v) for k, v in credential.items()}),
            },
        )
    else:
        logger.info("No credential data set")

    # boolean runtime param
    bool_var = RuntimeParameters.get("bool_var")
    logger.info("\tbool_var: %s", bool_var)

    # numeric runtime param
    number1 = RuntimeParameters.get("number1")
    logger.info("\tnumber1: %s", number1)
    number2 = RuntimeParameters.get("number2")
    logger.info("\tnumber2: %s", number2)

    logger.info("=" * 40)

    # This transform function is just for illustrative purposes so just
    # return the data back unaltered.
    return data


# NOTE: In this model template DRUM is automatically loading "sklearn_reg.pkl"
#
# Some hooks are omitted here as they are implicitly generated by the DRUM library.
# This happens because DRUM knows how to work with many known types of models.
# They can be overriden in order to change the default behavior:
#
# def load_model(code_dir):
#     ...
#
# def score(data, model, **kwargs):
#     ...
#
# See more about the built-in support of models:
# https://github.com/datarobot/datarobot-user-models/blob/master/DEFINE-INFERENCE-MODEL.md#built-in-model-support
