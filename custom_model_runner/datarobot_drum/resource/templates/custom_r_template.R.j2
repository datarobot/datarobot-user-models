
"
This file was autogenerated by: {{gen_command}}
Generation date: {{gen_date}}

Note: this is an example of custom.R file.
    Below are all the hooks you can use to provide your own implementation.
    All hooks are currently commented out so uncomment a hook function in
    order to use it.
"

#' This hook can be implemented to adjust logic in the training and scoring mode.
#'
#' This hook is executed once the code is started.
#' Load any libraries your serialized model requires so that scoring will work.
#' For example, if your model was trained using method='brnn', you will need
#' to add library(brnn) in this method
#'
#' @param ... keyword args, additional params to the method.
#' code_dir - code folder passed in --code_dir argument
#'
#' @return NA, this method is intended for side effects only
#' @export
#'
#' @examples
init <- function(...) {
}

#' This hook can be implemented to adjust logic in the scoring mode.
#'
#' Modify this method to deserialize your model, if this environment's standard
#' model loader is insufficient. For example, if your code directory
#' contains multiple rds files, you must explicitly load which ever one
#' corresponds to your serialized model here
#'
#' @return the deserialized model
#' @export
#'
#' @examples
load_model <- function(input_dir) {
    # Returning a string with value "dummy" as the model.
    "dummy"
}

#' This hook can be implemented to modify reading input data, e.g. decode using custom charset.
#'
#' This function should return a dataframe, which will be passed into the transform hook.
#' If it returns something other than a DF, you'll need to write your own score method.
#'
#' @return a data.frame
#' @export
#'
#' @examples
read_input_data <- function(input_binary_data) {
    # Returning a string with value "dummy" as the model.
    library(stringi)
    input_text_data <- stri_conv(input_binary_data, "utf8")
    read.csv(text=gsub("\r","", input_text_data, fixed=TRUE))
}

#' This hook can be implemented to adjust logic in the scoring mode.
#'
#' Intended to apply transformations to the prediction data before making
#' predictions. This is most useful if drum supports the model's library, but
#' your model requires additional data processing before it can make predictions
#'
#' @param data data.frame, data.frame given to drum to make predictions on
#' @param model Any, is the deserialized model loaded by drum or by the
#' load_model hook, if supplied
#'
#' @return data.frame, a data.frame after transformation needed
#' @export
#'
#' @examples
transform <- function(data, model) {
    data
}

#' This hook can be implemented to adjust logic in the scoring mode.
#'
#' This method should return predictions as a data.frame with the following
#' format:
#'
#' Binary Classification:
#' * Must have columns for each class label with floating-point class
#'   probabilities as values.
#' * Each row should sum to 1.0
#'
#' Regression:
#' * Must have a single column called "Predictions" with numerical values
#'
#' This hook is only needed if you would like to use drum with a framework not
#' natively supported by the tool.
#'
#' @param data data.frame, the data.frame to make predictions against. If
#' transform is supplied, data will be the transformed data.
#' @param model Any, is the deserialized model loaded by drum or by load_model
#' hook, if supplied
#' @param ... keyword args, additional params to the method. If model is
#' binary classification, positive_class_label and negative_class_label will be
#' provided as parameters. If the model is multiclass classification (at least 3 classes),
#' a class_labels vector will be provided as a parameter.
#' @return: data.frame with the structure defined above
#' @export
#'
#' @examples
score <- function(data, model, ...) {
    # return a data.frame with a 'Predictions' column with a single value of 42
    data.frame('Predictions'=42)
}

#' This hook can be implemented to adjust logic in the scoring mode.
#'
#' This method should return predictions as a data.frame with the following
#' format:
#'
#' Binary Classification:
#' * Must have columns for each class label with floating-point class
#'   probabilities as values.
#' * Each row should sum to 1.0
#'
#' Regression:
#' * Must have a single column called `Predictions` with numerical values
#'
#' This method is required if your model's output does not match the above
#' expectations, or if additional transformations are desired on your model's
#' raw outputs.
#'
#' @param predictions data.frame, predictions produced by `cmrun` or by the
#' `score` hook, if supplied
#' @param model Any, the deserialized model loaded by `cmrun` or by
#' `load_model`, if supplied
#' @return: data.frame with the structure defined above
#' @export
#'
#' @examples
post_process <- function(predictions, model) {
}

