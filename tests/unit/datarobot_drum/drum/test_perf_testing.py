#
#  Copyright 2023 DataRobot, Inc. and its affiliates.
#
#  All rights reserved.
#  This is proprietary source code of DataRobot, Inc. and its affiliates.
#  Released under the terms of DataRobot Tool and Utility Agreement.
#
from argparse import Namespace
from tempfile import NamedTemporaryFile
from unittest.mock import Mock, patch

import pytest
import pandas as pd

from datarobot_drum.drum.enum import TargetType
from datarobot_drum.drum.perf_testing import CMRunTests
from datarobot_drum.drum.utils.structured_input_read_utils import StructuredInputReadUtils


@pytest.fixture
def target():
    return "some-target"


@pytest.fixture
def mock_input(target):
    with NamedTemporaryFile(suffix=".csv") as temp_file:

        data = [[1, 2, 3]] * 100
        df = pd.DataFrame(data, columns=[target, target + "a", target + "b"])
        df.to_csv(temp_file)
        yield temp_file


@pytest.fixture
def mock_options(mock_input, target_type):
    """Generated by printing out actual options in 
    unit.datarobot_drum.drum.test_drum.TestCMRunnerRunTestPredict.test_calls_cm_run_test_class_correctly
    """
    return Namespace(
        subparser_name="fit",
        code_dir="/tmp/tmpgcqozt0coutput-dir",
        verbose=False,
        input=mock_input.name,
        positive_class_label=None,
        negative_class_label=None,
        class_labels=None,
        class_labels_file=None,
        logging_level="warning",
        docker=None,
        skip_deps_install=False,
        memory=None,
        output="/dev/null",
        target="some-target",
        target_csv=None,
        row_weights=None,
        row_weights_csv=None,
        skip_predict=False,
        num_rows="ALL",
        sparse_column_file=None,
        parameter_file=None,
        show_stacktrace=False,
        target_type=target_type.value,
        disable_strict_validation=False,
        enable_fit_metadata=False,
        user_secrets_mount_path=None,
        user_secrets_prefix=None,
        monitor=False,
        monitor_embedded=False,
        model_id=None,
        deployment_id=None,
        monitor_settings=None,
        model_config={
            "environmentID": "5e8c889607389fe0f466c72d",
            "name": "joe",
            "targetType": "regression",
            "type": "training",
            "validation": {"input": "hello"},
        },
        default_parameter_values={},
    )


@pytest.fixture
def target_type():
    return TargetType.BINARY


@pytest.fixture
def mock_read_structured_input_file_as_df():
    with patch.object(StructuredInputReadUtils, "read_structured_input_file_as_df") as mock_func:
        yield mock_func


@pytest.fixture
def cm_run_tests(mock_options, target_type, mock_read_structured_input_file_as_df):
    _ = mock_read_structured_input_file_as_df
    return CMRunTests(mock_options, target_type)


# TODO
class TestTestPredictionSideEffects:
    def test_thing(self, cm_run_tests):
        # cm_run_tests.check_prediction_side_effects()
        pass
