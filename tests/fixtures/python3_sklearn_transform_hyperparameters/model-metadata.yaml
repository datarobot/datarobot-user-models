name: drumpush-transform
type: training
targetType: transform
# modelID: optional
environmentID: 5e8c889607389fe0f466c72d
#trainingModel:
#  trainOnProject: optional project on which to train
validation:
  # Path is relative to this file
  input: ../../../tests/testdata/iris_binary_training.csv
  targetName: Species
typeSchema:
  input_requirements:

    # specify what data types this task allows as input
    - field: data_types
      condition: IN # can be one of IN or NOT_IN
      value: # can be one or multiple of NUM, TXT, IMG, DATE, CAT, DATE_DURATION, COUNT_DICT, GEO
        - NUM

    # specify how many columns the task requires
    - field: number_of_columns
      condition: NOT_LESS_THAN # can be one of EQUALS, IN, NOT_EQUALS, NOT_IN, GREATER_THAN, LESS_THAN, NOT_GREATER_THAN, NOT_LESS_THAN
      value: 1 # non-negative integer value

    # specify if the task accepts data in sparse format (CSR format for python, dgTMatrix for R)
    - field: sparse
      condition: EQUALS # only EQUALS is supported
      value: FORBIDDEN # one of: FORBIDDEN, SUPPORTED, REQUIRED

    # specify if the task accepts missing values
    - field: contains_missing
      condition: EQUALS # only EQUALS is supported
      value: SUPPORTED # can be one of FORBIDDEN, SUPPORTED

  output_requirements:

    # Specify what data types the task could output. A task can only output a single data type.
    - field: data_types
      condition: EQUALS # only EQUALS should be used as a task can only output a single data type
      value: NUM # can be one of types NUM, TXT, IMG, DATE, CAT, DATE_DURATION, COUNT_DICT, GEO

    # specify how many columns the task outputs
    - field: number_of_columns
      condition: GREATER_THAN # can be one of EQUALS, IN, NOT_EQUALS, NOT_IN, GREATER_THAN, LESS_THAN, NOT_GREATER_THAN, NOT_LESS_THAN
      value: 1 # non-negative integer value

      # specify if the task outputs data in sparse format (CSR format for python, dgTMatrix for R)
    - field: sparse
      condition: EQUALS # only EQUALS is supported
      value: ALWAYS # one of: NEVER, DYNAMIC (i.e. can be sparse or not sparse), ALWAYS, IDENTITY (i.e. output sparsity must match input sparsity)

      # specify if the task can output missing values
    - field: contains_missing
      condition: EQUALS # only EQUALS is supported
      value: NEVER # can be one of NEVER, DYNAMIC (i.e. might output missing values)

hyperparameters:
  # int: Integer value, must provide a min and max. Default is optional, will use the min value if not provided
  - name: seed
    type: int
    min: 0
    max: 10000
    default: 64

  # int: Integer value, must provide a min and max. Default is optional, will use the min value if not provided
  - name: kbins_n_bins
    type: int
    min: 2
    max: 1000
    default: 10

  # select: Discrete set of unique values, similar to an enum. Default is optional, will use the first value if
  # not provided.
  - name: kbins_strategy
    type: select
    values:
      - uniform
      - quantile
      - kmeans
    default: quantile

  # multi: Parameter that can be of multiple types [int/float/select]. Default is optional, will use the first param
  # type's default value, which for select, is the first entry, or for int/float, the min value.
  - name: missing_values_strategy
    type: multi
    values:
      float:
        min: -1000000.0
        max: 1000000.0
      select:
        values:
        - median
        - mean
        - most_frequent
    default: median

  # string: Unicode string. Default is optional, will be an empty string if not provided.
  - name: print_message
    type: string
    default: "hello world ðŸš€"