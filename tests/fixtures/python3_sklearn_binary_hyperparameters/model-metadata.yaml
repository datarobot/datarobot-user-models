name: drumpush-binary-logistic-regression
type: training
targetType: binary

# This part below defines the task's schema. Using this schema, on the fly,
# DataRobot will validate if the task requirements match neighboring tasks in a blueprint
# Note that it's only available for tasks, and not for inference models
# Every condition (and the whole section) is optional
typeSchema:
  # Specify what data types this task allows as input
  input_requirements:

    # specify what data types this task allows as input
    - field: data_types
      condition: IN # can be one of IN or NOT_IN
      value: # can be one or multiple of NUM, TXT, IMG, DATE, CAT, DATE_DURATION, COUNT_DICT, GEO
        - NUM
        - CAT
        - TXT

    # specify how many columns the task requires
    - field: number_of_columns
      condition: NOT_LESS_THAN # can be one of EQUALS, IN, NOT_EQUALS, NOT_IN, GREATER_THAN, LESS_THAN, NOT_GREATER_THAN, NOT_LESS_THAN
      value: 2 # non-negative integer value

    # specify if the task accepts data in sparse format (CSR format for python, dgTMatrix for R)
    - field: sparse
      condition: EQUALS # only EQUALS is supported
      value: FORBIDDEN # one of: FORBIDDEN, SUPPORTED, REQUIRED

    # specify if the task accepts missing values
    - field: contains_missing
      condition: EQUALS # only EQUALS is supported
      value: SUPPORTED # can be one of FORBIDDEN, SUPPORTED

# Hyperparameters are definitions of parameters that can be passed into a custom task's fit method. When constructing a
# blueprint using this task in DataRobot, you can specify specific values you want passed for each parameter. After the
# blueprint trains, you can also modify these parameters via advanced tuning. Below are examples of each possible
# parameter type.
hyperparameters:
  # select: Discrete set of unique values, similar to an enum. Default is optional, will use the first value if
  # not provided.
  - name: penalty
    type: select
    values:
      - l1
      - l2
      - elasticnet
    default: l2
  # int: Integer value, must provide a min and max. Default is optional, will use the min value if not provided
  - name: dual
    type: int
    min: 0
    max: 1
    default: 0
  # float: Floating point value, must provide a min and max. Default is optional, will use the min value if not provided
  - name: tol
    type: float
    min: 0
    max: 1
    default: 1e-4
  # string: Unicode string. Default is optional, will be an empty string if not provided.
  - name: solver
    type: string
    default: lbfgs